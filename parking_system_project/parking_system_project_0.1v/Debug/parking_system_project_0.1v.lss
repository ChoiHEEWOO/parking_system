
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000396  00800100  00002640  000026d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002640  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024c  00800496  00800496  00002a6a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ac8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f2f  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001413  00000000  00000000  00007d77  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002611  00000000  00000000  0000918a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a6c  00000000  00000000  0000b79c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fb9  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003259  00000000  00000000  0000d1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0001041a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c0       	rjmp	.+146    	; 0xcc <__vector_14>
      3a:	00 00       	nop
      3c:	6c c4       	rjmp	.+2264   	; 0x916 <__vector_15>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__vector_18>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	af c0       	rjmp	.+350    	; 0x1d8 <__vector_30>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e4       	ldi	r30, 0x40	; 64
      a0:	f6 e2       	ldi	r31, 0x26	; 38
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 39       	cpi	r26, 0x96	; 150
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	26 e0       	ldi	r18, 0x06	; 6
      b4:	a6 e9       	ldi	r26, 0x96	; 150
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 3e       	cpi	r26, 0xE2	; 226
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 45 09 	call	0x128a	; 0x128a <main>
      c6:	0c 94 1e 13 	jmp	0x263c	; 0x263c <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_14>:
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
	else if(ch==SERVO_EXIT_GATE)servo_2_duty_ratio=_offset+angle_state;
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	2f 93       	push	r18
      d8:	3f 93       	push	r19
      da:	4f 93       	push	r20
      dc:	8f 93       	push	r24
      de:	9f 93       	push	r25
      e0:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <servo_count>
      e4:	84 36       	cpi	r24, 0x64	; 100
      e6:	d9 f4       	brne	.+54     	; 0x11e <__vector_14+0x52>
      e8:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <servo_1_duty_ratio>
      ec:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <servo_1_duty_ratio+0x1>
      f0:	31 e0       	ldi	r19, 0x01	; 1
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	89 2b       	or	r24, r25
      f6:	09 f4       	brne	.+2      	; 0xfa <__vector_14+0x2e>
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	83 2f       	mov	r24, r19
      fc:	92 2f       	mov	r25, r18
      fe:	20 91 c0 06 	lds	r18, 0x06C0	; 0x8006c0 <servo_2_duty_ratio>
     102:	30 91 c1 06 	lds	r19, 0x06C1	; 0x8006c1 <servo_2_duty_ratio+0x1>
     106:	21 15       	cp	r18, r1
     108:	31 05       	cpc	r19, r1
     10a:	11 f0       	breq	.+4      	; 0x110 <__vector_14+0x44>
     10c:	28 e0       	ldi	r18, 0x08	; 8
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	4b b3       	in	r20, 0x1b	; 27
     112:	82 2b       	or	r24, r18
     114:	93 2b       	or	r25, r19
     116:	84 2b       	or	r24, r20
     118:	8b bb       	out	0x1b, r24	; 27
     11a:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <servo_count>
     11e:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <servo_count>
     122:	20 91 b0 05 	lds	r18, 0x05B0	; 0x8005b0 <servo_1_duty_ratio>
     126:	30 91 b1 05 	lds	r19, 0x05B1	; 0x8005b1 <servo_1_duty_ratio+0x1>
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	82 17       	cp	r24, r18
     12e:	93 07       	cpc	r25, r19
     130:	09 f4       	brne	.+2      	; 0x134 <__vector_14+0x68>
     132:	d8 98       	cbi	0x1b, 0	; 27
     134:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <servo_count>
     138:	20 91 c0 06 	lds	r18, 0x06C0	; 0x8006c0 <servo_2_duty_ratio>
     13c:	30 91 c1 06 	lds	r19, 0x06C1	; 0x8006c1 <servo_2_duty_ratio+0x1>
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	82 17       	cp	r24, r18
     144:	93 07       	cpc	r25, r19
     146:	09 f4       	brne	.+2      	; 0x14a <__vector_14+0x7e>
     148:	db 98       	cbi	0x1b, 3	; 27
     14a:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <servo_count>
     14e:	8f 5f       	subi	r24, 0xFF	; 255
     150:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <servo_count>
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	4f 91       	pop	r20
     15a:	3f 91       	pop	r19
     15c:	2f 91       	pop	r18
     15e:	0f 90       	pop	r0
     160:	0f be       	out	0x3f, r0	; 63
     162:	0f 90       	pop	r0
     164:	1f 90       	pop	r1
     166:	18 95       	reti

00000168 <__vector_18>:
     168:	1f 92       	push	r1
     16a:	0f 92       	push	r0
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	0f 92       	push	r0
     170:	11 24       	eor	r1, r1
     172:	0b b6       	in	r0, 0x3b	; 59
     174:	0f 92       	push	r0
     176:	2f 93       	push	r18
     178:	3f 93       	push	r19
     17a:	4f 93       	push	r20
     17c:	5f 93       	push	r21
     17e:	6f 93       	push	r22
     180:	7f 93       	push	r23
     182:	8f 93       	push	r24
     184:	9f 93       	push	r25
     186:	af 93       	push	r26
     188:	bf 93       	push	r27
     18a:	ef 93       	push	r30
     18c:	ff 93       	push	r31
     18e:	8c b1       	in	r24, 0x0c	; 12
     190:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <uart0+0x66>
     194:	81 36       	cpi	r24, 0x61	; 97
     196:	69 f4       	brne	.+26     	; 0x1b2 <__vector_18+0x4a>
     198:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <servo_1_duty_ratio>
     19c:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <servo_1_duty_ratio+0x1>
     1a0:	89 2b       	or	r24, r25
     1a2:	21 f0       	breq	.+8      	; 0x1ac <__vector_18+0x44>
     1a4:	81 e6       	ldi	r24, 0x61	; 97
     1a6:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <uart0_tx_char>
     1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <__vector_18+0x4a>
     1ac:	88 e7       	ldi	r24, 0x78	; 120
     1ae:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <uart0_tx_char>
     1b2:	ff 91       	pop	r31
     1b4:	ef 91       	pop	r30
     1b6:	bf 91       	pop	r27
     1b8:	af 91       	pop	r26
     1ba:	9f 91       	pop	r25
     1bc:	8f 91       	pop	r24
     1be:	7f 91       	pop	r23
     1c0:	6f 91       	pop	r22
     1c2:	5f 91       	pop	r21
     1c4:	4f 91       	pop	r20
     1c6:	3f 91       	pop	r19
     1c8:	2f 91       	pop	r18
     1ca:	0f 90       	pop	r0
     1cc:	0b be       	out	0x3b, r0	; 59
     1ce:	0f 90       	pop	r0
     1d0:	0f be       	out	0x3f, r0	; 63
     1d2:	0f 90       	pop	r0
     1d4:	1f 90       	pop	r1
     1d6:	18 95       	reti

000001d8 <__vector_30>:
     1d8:	1f 92       	push	r1
     1da:	0f 92       	push	r0
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	0f 92       	push	r0
     1e0:	11 24       	eor	r1, r1
     1e2:	0b b6       	in	r0, 0x3b	; 59
     1e4:	0f 92       	push	r0
     1e6:	1f 93       	push	r17
     1e8:	2f 93       	push	r18
     1ea:	3f 93       	push	r19
     1ec:	4f 93       	push	r20
     1ee:	5f 93       	push	r21
     1f0:	6f 93       	push	r22
     1f2:	7f 93       	push	r23
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	af 93       	push	r26
     1fa:	bf 93       	push	r27
     1fc:	ef 93       	push	r30
     1fe:	ff 93       	push	r31
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	00 d0       	rcall	.+0      	; 0x206 <__vector_30+0x2e>
     206:	1f 92       	push	r1
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     210:	1e 33       	cpi	r17, 0x3E	; 62
     212:	21 f4       	brne	.+8      	; 0x21c <__vector_30+0x44>
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <esp8266_send_ready_flag>
     21a:	42 c0       	rjmp	.+132    	; 0x2a0 <__vector_30+0xc8>
     21c:	1f 34       	cpi	r17, 0x4F	; 79
     21e:	21 f4       	brne	.+8      	; 0x228 <__vector_30+0x50>
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <cnt.2476>
     226:	3c c0       	rjmp	.+120    	; 0x2a0 <__vector_30+0xc8>
     228:	1b 34       	cpi	r17, 0x4B	; 75
     22a:	51 f4       	brne	.+20     	; 0x240 <__vector_30+0x68>
     22c:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <cnt.2476>
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	09 f0       	breq	.+2      	; 0x236 <__vector_30+0x5e>
     234:	87 c0       	rjmp	.+270    	; 0x344 <__vector_30+0x16c>
     236:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <esp8266_return_result_flag>
     23a:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <cnt.2476>
     23e:	30 c0       	rjmp	.+96     	; 0x2a0 <__vector_30+0xc8>
     240:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <cnt.2476>
     244:	1b 32       	cpi	r17, 0x2B	; 43
     246:	21 f4       	brne	.+8      	; 0x250 <__vector_30+0x78>
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <parse_cnt.2477>
     24e:	76 c0       	rjmp	.+236    	; 0x33c <__vector_30+0x164>
     250:	19 34       	cpi	r17, 0x49	; 73
     252:	41 f4       	brne	.+16     	; 0x264 <__vector_30+0x8c>
     254:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <parse_cnt.2477>
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	11 f5       	brne	.+68     	; 0x2a0 <__vector_30+0xc8>
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <parse_cnt.2477>
     262:	6c c0       	rjmp	.+216    	; 0x33c <__vector_30+0x164>
     264:	10 35       	cpi	r17, 0x50	; 80
     266:	41 f4       	brne	.+16     	; 0x278 <__vector_30+0xa0>
     268:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <parse_cnt.2477>
     26c:	82 30       	cpi	r24, 0x02	; 2
     26e:	c1 f4       	brne	.+48     	; 0x2a0 <__vector_30+0xc8>
     270:	83 e0       	ldi	r24, 0x03	; 3
     272:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <parse_cnt.2477>
     276:	62 c0       	rjmp	.+196    	; 0x33c <__vector_30+0x164>
     278:	14 34       	cpi	r17, 0x44	; 68
     27a:	41 f4       	brne	.+16     	; 0x28c <__vector_30+0xb4>
     27c:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <parse_cnt.2477>
     280:	83 30       	cpi	r24, 0x03	; 3
     282:	71 f4       	brne	.+28     	; 0x2a0 <__vector_30+0xc8>
     284:	84 e0       	ldi	r24, 0x04	; 4
     286:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <parse_cnt.2477>
     28a:	58 c0       	rjmp	.+176    	; 0x33c <__vector_30+0x164>
     28c:	1c 32       	cpi	r17, 0x2C	; 44
     28e:	41 f4       	brne	.+16     	; 0x2a0 <__vector_30+0xc8>
     290:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <parse_cnt.2477>
     294:	84 30       	cpi	r24, 0x04	; 4
     296:	21 f4       	brne	.+8      	; 0x2a0 <__vector_30+0xc8>
     298:	85 e0       	ldi	r24, 0x05	; 5
     29a:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <parse_cnt.2477>
     29e:	4e c0       	rjmp	.+156    	; 0x33c <__vector_30+0x164>
     2a0:	80 91 a1 04 	lds	r24, 0x04A1	; 0x8004a1 <parse_cnt.2477>
     2a4:	85 30       	cpi	r24, 0x05	; 5
     2a6:	91 f4       	brne	.+36     	; 0x2cc <__vector_30+0xf4>
     2a8:	10 93 a4 04 	sts	0x04A4, r17	; 0x8004a4 <receive_length>
     2ac:	86 e0       	ldi	r24, 0x06	; 6
     2ae:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <parse_cnt.2477>
     2b2:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <receive_length>
     2b6:	89 83       	std	Y+1, r24	; 0x01
     2b8:	1a 82       	std	Y+2, r1	; 0x02
     2ba:	ce 01       	movw	r24, r28
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	0e 94 03 10 	call	0x2006	; 0x2006 <atoi>
     2c2:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <receive_length_int+0x1>
     2c6:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <receive_length_int>
     2ca:	38 c0       	rjmp	.+112    	; 0x33c <__vector_30+0x164>
     2cc:	86 30       	cpi	r24, 0x06	; 6
     2ce:	c1 f4       	brne	.+48     	; 0x300 <__vector_30+0x128>
     2d0:	1a 33       	cpi	r17, 0x3A	; 58
     2d2:	71 f0       	breq	.+28     	; 0x2f0 <__vector_30+0x118>
     2d4:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <receive_length>
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	1a 83       	std	Y+2, r17	; 0x02
     2dc:	1b 82       	std	Y+3, r1	; 0x03
     2de:	ce 01       	movw	r24, r28
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	0e 94 03 10 	call	0x2006	; 0x2006 <atoi>
     2e6:	90 93 c3 06 	sts	0x06C3, r25	; 0x8006c3 <receive_length_int+0x1>
     2ea:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <receive_length_int>
     2ee:	26 c0       	rjmp	.+76     	; 0x33c <__vector_30+0x164>
     2f0:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <parse_cnt.2477>
     2f4:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <data_cnt.2478>
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 9f 04 	sts	0x049F, r24	; 0x80049f <parse_data_flag.2479>
     2fe:	1e c0       	rjmp	.+60     	; 0x33c <__vector_30+0x164>
     300:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <parse_data_flag.2479>
     304:	88 23       	and	r24, r24
     306:	c1 f0       	breq	.+48     	; 0x338 <__vector_30+0x160>
     308:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <data_cnt.2478>
     30c:	e8 2f       	mov	r30, r24
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	e4 58       	subi	r30, 0x84	; 132
     312:	fa 4f       	sbci	r31, 0xFA	; 250
     314:	10 83       	st	Z, r17
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <data_cnt.2478>
     31c:	20 91 c2 06 	lds	r18, 0x06C2	; 0x8006c2 <receive_length_int>
     320:	30 91 c3 06 	lds	r19, 0x06C3	; 0x8006c3 <receive_length_int+0x1>
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	82 17       	cp	r24, r18
     328:	93 07       	cpc	r25, r19
     32a:	41 f4       	brne	.+16     	; 0x33c <__vector_30+0x164>
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <esp8266_receiving_flag>
     332:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <parse_data_flag.2479>
     336:	02 c0       	rjmp	.+4      	; 0x33c <__vector_30+0x164>
     338:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <parse_cnt.2477>
     33c:	81 2f       	mov	r24, r17
     33e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <uart0_tx_char>
     342:	03 c0       	rjmp	.+6      	; 0x34a <__vector_30+0x172>
     344:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <cnt.2476>
     348:	ab cf       	rjmp	.-170    	; 0x2a0 <__vector_30+0xc8>
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	ff 91       	pop	r31
     356:	ef 91       	pop	r30
     358:	bf 91       	pop	r27
     35a:	af 91       	pop	r26
     35c:	9f 91       	pop	r25
     35e:	8f 91       	pop	r24
     360:	7f 91       	pop	r23
     362:	6f 91       	pop	r22
     364:	5f 91       	pop	r21
     366:	4f 91       	pop	r20
     368:	3f 91       	pop	r19
     36a:	2f 91       	pop	r18
     36c:	1f 91       	pop	r17
     36e:	0f 90       	pop	r0
     370:	0b be       	out	0x3b, r0	; 59
     372:	0f 90       	pop	r0
     374:	0f be       	out	0x3f, r0	; 63
     376:	0f 90       	pop	r0
     378:	1f 90       	pop	r1
     37a:	18 95       	reti

0000037c <mfrc_check_and_data_receive_ch0>:
     37c:	cf 93       	push	r28
     37e:	80 91 9d 04 	lds	r24, 0x049D	; 0x80049d <noise_flag.2495>
     382:	81 11       	cpse	r24, r1
     384:	09 c0       	rjmp	.+18     	; 0x398 <mfrc_check_and_data_receive_ch0+0x1c>
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	68 e9       	ldi	r22, 0x98	; 152
     38a:	76 e0       	ldi	r23, 0x06	; 6
     38c:	82 e5       	ldi	r24, 0x52	; 82
     38e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <mfrc522_request>
     392:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_byte.2497>
     396:	1d c0       	rjmp	.+58     	; 0x3d2 <mfrc_check_and_data_receive_ch0+0x56>
     398:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <toggle_flag.2496>
     39c:	88 23       	and	r24, r24
     39e:	39 f0       	breq	.+14     	; 0x3ae <mfrc_check_and_data_receive_ch0+0x32>
     3a0:	40 e0       	ldi	r20, 0x00	; 0
     3a2:	68 e9       	ldi	r22, 0x98	; 152
     3a4:	76 e0       	ldi	r23, 0x06	; 6
     3a6:	82 e5       	ldi	r24, 0x52	; 82
     3a8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <mfrc522_request>
     3ac:	0c c0       	rjmp	.+24     	; 0x3c6 <mfrc_check_and_data_receive_ch0+0x4a>
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	68 e9       	ldi	r22, 0x98	; 152
     3b2:	76 e0       	ldi	r23, 0x06	; 6
     3b4:	82 e5       	ldi	r24, 0x52	; 82
     3b6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <mfrc522_request>
     3ba:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_byte.2497>
     3be:	83 30       	cpi	r24, 0x03	; 3
     3c0:	11 f4       	brne	.+4      	; 0x3c6 <mfrc_check_and_data_receive_ch0+0x4a>
     3c2:	10 92 9d 04 	sts	0x049D, r1	; 0x80049d <noise_flag.2495>
     3c6:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <toggle_flag.2496>
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	89 27       	eor	r24, r25
     3ce:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <toggle_flag.2496>
     3d2:	c0 91 9c 04 	lds	r28, 0x049C	; 0x80049c <_byte.2497>
     3d6:	c1 30       	cpi	r28, 0x01	; 1
     3d8:	29 f0       	breq	.+10     	; 0x3e4 <mfrc_check_and_data_receive_ch0+0x68>
     3da:	88 e5       	ldi	r24, 0x58	; 88
     3dc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
     3e0:	c0 e0       	ldi	r28, 0x00	; 0
     3e2:	18 c0       	rjmp	.+48     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3e4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <detected_flag_ch0>
     3e8:	88 35       	cpi	r24, 0x58	; 88
     3ea:	99 f4       	brne	.+38     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3ec:	8f e4       	ldi	r24, 0x4F	; 79
     3ee:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	80 93 9d 04 	sts	0x049D, r24	; 0x80049d <noise_flag.2495>
     3f8:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <toggle_flag.2496>
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	88 e9       	ldi	r24, 0x98	; 152
     400:	96 e0       	ldi	r25, 0x06	; 6
     402:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <mfrc522_get_card_serial>
     406:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <_byte.2497>
     40a:	81 30       	cpi	r24, 0x01	; 1
     40c:	19 f0       	breq	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     40e:	cf ef       	ldi	r28, 0xFF	; 255
     410:	01 c0       	rjmp	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     412:	c0 e0       	ldi	r28, 0x00	; 0
     414:	8c 2f       	mov	r24, r28
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <mfrc_check_and_data_receive_ch1>:
     41a:	cf 93       	push	r28
     41c:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <noise_flag.2501>
     420:	81 11       	cpse	r24, r1
     422:	09 c0       	rjmp	.+18     	; 0x436 <mfrc_check_and_data_receive_ch1+0x1c>
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	6a ea       	ldi	r22, 0xAA	; 170
     428:	76 e0       	ldi	r23, 0x06	; 6
     42a:	82 e5       	ldi	r24, 0x52	; 82
     42c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <mfrc522_request>
     430:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_byte.2503>
     434:	1d c0       	rjmp	.+58     	; 0x470 <mfrc_check_and_data_receive_ch1+0x56>
     436:	80 91 98 04 	lds	r24, 0x0498	; 0x800498 <toggle_flag.2502>
     43a:	88 23       	and	r24, r24
     43c:	39 f0       	breq	.+14     	; 0x44c <mfrc_check_and_data_receive_ch1+0x32>
     43e:	41 e0       	ldi	r20, 0x01	; 1
     440:	6a ea       	ldi	r22, 0xAA	; 170
     442:	76 e0       	ldi	r23, 0x06	; 6
     444:	82 e5       	ldi	r24, 0x52	; 82
     446:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <mfrc522_request>
     44a:	0c c0       	rjmp	.+24     	; 0x464 <mfrc_check_and_data_receive_ch1+0x4a>
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	6a ea       	ldi	r22, 0xAA	; 170
     450:	76 e0       	ldi	r23, 0x06	; 6
     452:	82 e5       	ldi	r24, 0x52	; 82
     454:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <mfrc522_request>
     458:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_byte.2503>
     45c:	83 30       	cpi	r24, 0x03	; 3
     45e:	11 f4       	brne	.+4      	; 0x464 <mfrc_check_and_data_receive_ch1+0x4a>
     460:	10 92 9a 04 	sts	0x049A, r1	; 0x80049a <noise_flag.2501>
     464:	90 91 98 04 	lds	r25, 0x0498	; 0x800498 <toggle_flag.2502>
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	89 27       	eor	r24, r25
     46c:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <toggle_flag.2502>
     470:	c0 91 99 04 	lds	r28, 0x0499	; 0x800499 <_byte.2503>
     474:	c1 30       	cpi	r28, 0x01	; 1
     476:	29 f0       	breq	.+10     	; 0x482 <mfrc_check_and_data_receive_ch1+0x68>
     478:	88 e5       	ldi	r24, 0x58	; 88
     47a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
     47e:	c0 e0       	ldi	r28, 0x00	; 0
     480:	18 c0       	rjmp	.+48     	; 0x4b2 <mfrc_check_and_data_receive_ch1+0x98>
     482:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <detected_flag_ch1>
     486:	88 35       	cpi	r24, 0x58	; 88
     488:	99 f4       	brne	.+38     	; 0x4b0 <mfrc_check_and_data_receive_ch1+0x96>
     48a:	8f e4       	ldi	r24, 0x4F	; 79
     48c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <noise_flag.2501>
     496:	80 93 98 04 	sts	0x0498, r24	; 0x800498 <toggle_flag.2502>
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	8a ea       	ldi	r24, 0xAA	; 170
     49e:	96 e0       	ldi	r25, 0x06	; 6
     4a0:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <mfrc522_get_card_serial>
     4a4:	80 93 99 04 	sts	0x0499, r24	; 0x800499 <_byte.2503>
     4a8:	81 30       	cpi	r24, 0x01	; 1
     4aa:	19 f0       	breq	.+6      	; 0x4b2 <mfrc_check_and_data_receive_ch1+0x98>
     4ac:	cf ef       	ldi	r28, 0xFF	; 255
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <mfrc_check_and_data_receive_ch1+0x98>
     4b0:	c0 e0       	ldi	r28, 0x00	; 0
     4b2:	8c 2f       	mov	r24, r28
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <RC522_data_request_per_100ms>:
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	ec 01       	movw	r28, r24
     4be:	60 91 c4 06 	lds	r22, 0x06C4	; 0x8006c4 <TICK>
     4c2:	70 91 c5 06 	lds	r23, 0x06C5	; 0x8006c5 <TICK+0x1>
     4c6:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <TICK+0x2>
     4ca:	90 91 c7 06 	lds	r25, 0x06C7	; 0x8006c7 <TICK+0x3>
     4ce:	24 e6       	ldi	r18, 0x64	; 100
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__udivmodsi4>
     4da:	67 2b       	or	r22, r23
     4dc:	68 2b       	or	r22, r24
     4de:	69 2b       	or	r22, r25
     4e0:	89 f4       	brne	.+34     	; 0x504 <RC522_data_request_per_100ms+0x4c>
     4e2:	98 81       	ld	r25, Y
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	89 27       	eor	r24, r25
     4e8:	88 83       	st	Y, r24
     4ea:	81 11       	cpse	r24, r1
     4ec:	06 c0       	rjmp	.+12     	; 0x4fa <RC522_data_request_per_100ms+0x42>
     4ee:	46 df       	rcall	.-372    	; 0x37c <mfrc_check_and_data_receive_ch0>
     4f0:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <received_state>
     4f4:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <rfid_uid_ch0+0x4>
     4f8:	05 c0       	rjmp	.+10     	; 0x504 <RC522_data_request_per_100ms+0x4c>
     4fa:	8f df       	rcall	.-226    	; 0x41a <mfrc_check_and_data_receive_ch1>
     4fc:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <received_state>
     500:	10 92 ae 06 	sts	0x06AE, r1	; 0x8006ae <rfid_uid_ch1+0x4>
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	08 95       	ret

0000050a <rfid_user_uid_buffer_init>:
     50a:	8c ea       	ldi	r24, 0xAC	; 172
     50c:	94 e0       	ldi	r25, 0x04	; 4
     50e:	40 e1       	ldi	r20, 0x10	; 16
     510:	55 e0       	ldi	r21, 0x05	; 5
     512:	25 e0       	ldi	r18, 0x05	; 5
     514:	e1 e6       	ldi	r30, 0x61	; 97
     516:	f3 e0       	ldi	r31, 0x03	; 3
     518:	dc 01       	movw	r26, r24
     51a:	01 90       	ld	r0, Z+
     51c:	0d 92       	st	X+, r0
     51e:	2a 95       	dec	r18
     520:	e1 f7       	brne	.-8      	; 0x51a <rfid_user_uid_buffer_init+0x10>
     522:	05 96       	adiw	r24, 0x05	; 5
     524:	84 17       	cp	r24, r20
     526:	95 07       	cpc	r25, r21
     528:	a1 f7       	brne	.-24     	; 0x512 <rfid_user_uid_buffer_init+0x8>
     52a:	42 e4       	ldi	r20, 0x42	; 66
     52c:	51 e0       	ldi	r21, 0x01	; 1
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <i2c_lcd_string>
     536:	2f ef       	ldi	r18, 0xFF	; 255
     538:	89 e6       	ldi	r24, 0x69	; 105
     53a:	98 e1       	ldi	r25, 0x18	; 24
     53c:	21 50       	subi	r18, 0x01	; 1
     53e:	80 40       	sbci	r24, 0x00	; 0
     540:	90 40       	sbci	r25, 0x00	; 0
     542:	e1 f7       	brne	.-8      	; 0x53c <rfid_user_uid_buffer_init+0x32>
     544:	00 c0       	rjmp	.+0      	; 0x546 <rfid_user_uid_buffer_init+0x3c>
     546:	00 00       	nop
     548:	08 95       	ret

0000054a <buzz_MUTE>:
     54a:	eb e8       	ldi	r30, 0x8B	; 139
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	8f 7b       	andi	r24, 0xBF	; 191
     552:	80 83       	st	Z, r24
     554:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <music_flag>
     558:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <buzz_tick_enable_flag+0x1>
     55c:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <buzz_tick_enable_flag>
     560:	08 95       	ret

00000562 <setSoundNote>:
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	41 f0       	breq	.+16     	; 0x576 <setSoundNote+0x14>
     566:	eb e8       	ldi	r30, 0x8B	; 139
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	20 81       	ld	r18, Z
     56c:	20 64       	ori	r18, 0x40	; 64
     56e:	20 83       	st	Z, r18
     570:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <setICR3>
     574:	08 95       	ret
     576:	eb e8       	ldi	r30, 0x8B	; 139
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	8f 7b       	andi	r24, 0xBF	; 191
     57e:	80 83       	st	Z, r24
     580:	08 95       	ret

00000582 <buzz_play>:
     582:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <music_flag>
     586:	82 30       	cpi	r24, 0x02	; 2
     588:	09 f4       	brne	.+2      	; 0x58c <buzz_play+0xa>
     58a:	76 c0       	rjmp	.+236    	; 0x678 <buzz_play+0xf6>
     58c:	28 f4       	brcc	.+10     	; 0x598 <buzz_play+0x16>
     58e:	88 23       	and	r24, r24
     590:	61 f0       	breq	.+24     	; 0x5aa <buzz_play+0x28>
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	61 f0       	breq	.+24     	; 0x5ae <buzz_play+0x2c>
     596:	08 95       	ret
     598:	84 30       	cpi	r24, 0x04	; 4
     59a:	09 f4       	brne	.+2      	; 0x59e <buzz_play+0x1c>
     59c:	37 c1       	rjmp	.+622    	; 0x80c <buzz_play+0x28a>
     59e:	08 f4       	brcc	.+2      	; 0x5a2 <buzz_play+0x20>
     5a0:	d0 c0       	rjmp	.+416    	; 0x742 <buzz_play+0x1c0>
     5a2:	85 30       	cpi	r24, 0x05	; 5
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <buzz_play+0x26>
     5a6:	75 c1       	rjmp	.+746    	; 0x892 <buzz_play+0x310>
     5a8:	08 95       	ret
     5aa:	cf cf       	rjmp	.-98     	; 0x54a <buzz_MUTE>
     5ac:	08 95       	ret
     5ae:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     5b2:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     5b6:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     5ba:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     5be:	88 3c       	cpi	r24, 0xC8	; 200
     5c0:	91 05       	cpc	r25, r1
     5c2:	a1 05       	cpc	r26, r1
     5c4:	b1 05       	cpc	r27, r1
     5c6:	20 f4       	brcc	.+8      	; 0x5d0 <buzz_play+0x4e>
     5c8:	8b e9       	ldi	r24, 0x9B	; 155
     5ca:	96 e0       	ldi	r25, 0x06	; 6
     5cc:	ca cf       	rjmp	.-108    	; 0x562 <setSoundNote>
     5ce:	08 95       	ret
     5d0:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     5d4:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     5d8:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     5dc:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     5e0:	88 3c       	cpi	r24, 0xC8	; 200
     5e2:	91 05       	cpc	r25, r1
     5e4:	a1 05       	cpc	r26, r1
     5e6:	b1 05       	cpc	r27, r1
     5e8:	21 f4       	brne	.+8      	; 0x5f2 <buzz_play+0x70>
     5ea:	87 ee       	ldi	r24, 0xE7	; 231
     5ec:	95 e0       	ldi	r25, 0x05	; 5
     5ee:	b9 cf       	rjmp	.-142    	; 0x562 <setSoundNote>
     5f0:	08 95       	ret
     5f2:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     5f6:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     5fa:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     5fe:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     602:	80 39       	cpi	r24, 0x90	; 144
     604:	91 40       	sbci	r25, 0x01	; 1
     606:	a1 05       	cpc	r26, r1
     608:	b1 05       	cpc	r27, r1
     60a:	21 f4       	brne	.+8      	; 0x614 <buzz_play+0x92>
     60c:	85 e6       	ldi	r24, 0x65	; 101
     60e:	94 e0       	ldi	r25, 0x04	; 4
     610:	a8 cf       	rjmp	.-176    	; 0x562 <setSoundNote>
     612:	08 95       	ret
     614:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     618:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     61c:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     620:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     624:	88 35       	cpi	r24, 0x58	; 88
     626:	92 40       	sbci	r25, 0x02	; 2
     628:	a1 05       	cpc	r26, r1
     62a:	b1 05       	cpc	r27, r1
     62c:	21 f4       	brne	.+8      	; 0x636 <buzz_play+0xb4>
     62e:	8d ef       	ldi	r24, 0xFD	; 253
     630:	93 e0       	ldi	r25, 0x03	; 3
     632:	97 cf       	rjmp	.-210    	; 0x562 <setSoundNote>
     634:	08 95       	ret
     636:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     63a:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     63e:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     642:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     646:	80 32       	cpi	r24, 0x20	; 32
     648:	93 40       	sbci	r25, 0x03	; 3
     64a:	a1 05       	cpc	r26, r1
     64c:	b1 05       	cpc	r27, r1
     64e:	21 f4       	brne	.+8      	; 0x658 <buzz_play+0xd6>
     650:	88 ef       	ldi	r24, 0xF8	; 248
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	86 cf       	rjmp	.-244    	; 0x562 <setSoundNote>
     656:	08 95       	ret
     658:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     65c:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     660:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     664:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     668:	80 3b       	cpi	r24, 0xB0	; 176
     66a:	94 40       	sbci	r25, 0x04	; 4
     66c:	a1 05       	cpc	r26, r1
     66e:	b1 05       	cpc	r27, r1
     670:	09 f0       	breq	.+2      	; 0x674 <buzz_play+0xf2>
     672:	50 c1       	rjmp	.+672    	; 0x914 <buzz_play+0x392>
     674:	6a cf       	rjmp	.-300    	; 0x54a <buzz_MUTE>
     676:	08 95       	ret
     678:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     67c:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     680:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     684:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     688:	88 3c       	cpi	r24, 0xC8	; 200
     68a:	91 05       	cpc	r25, r1
     68c:	a1 05       	cpc	r26, r1
     68e:	b1 05       	cpc	r27, r1
     690:	20 f4       	brcc	.+8      	; 0x69a <buzz_play+0x118>
     692:	8b e9       	ldi	r24, 0x9B	; 155
     694:	96 e0       	ldi	r25, 0x06	; 6
     696:	65 cf       	rjmp	.-310    	; 0x562 <setSoundNote>
     698:	08 95       	ret
     69a:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     69e:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     6a2:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     6a6:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     6aa:	82 3d       	cpi	r24, 0xD2	; 210
     6ac:	91 05       	cpc	r25, r1
     6ae:	a1 05       	cpc	r26, r1
     6b0:	b1 05       	cpc	r27, r1
     6b2:	21 f4       	brne	.+8      	; 0x6bc <buzz_play+0x13a>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	54 cf       	rjmp	.-344    	; 0x562 <setSoundNote>
     6ba:	08 95       	ret
     6bc:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     6c0:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     6c4:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     6c8:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     6cc:	8c 3d       	cpi	r24, 0xDC	; 220
     6ce:	91 05       	cpc	r25, r1
     6d0:	a1 05       	cpc	r26, r1
     6d2:	b1 05       	cpc	r27, r1
     6d4:	21 f4       	brne	.+8      	; 0x6de <buzz_play+0x15c>
     6d6:	87 ee       	ldi	r24, 0xE7	; 231
     6d8:	95 e0       	ldi	r25, 0x05	; 5
     6da:	43 cf       	rjmp	.-378    	; 0x562 <setSoundNote>
     6dc:	08 95       	ret
     6de:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     6e2:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     6e6:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     6ea:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     6ee:	80 39       	cpi	r24, 0x90	; 144
     6f0:	91 40       	sbci	r25, 0x01	; 1
     6f2:	a1 05       	cpc	r26, r1
     6f4:	b1 05       	cpc	r27, r1
     6f6:	21 f4       	brne	.+8      	; 0x700 <buzz_play+0x17e>
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	32 cf       	rjmp	.-412    	; 0x562 <setSoundNote>
     6fe:	08 95       	ret
     700:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     704:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     708:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     70c:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     710:	8e 3a       	cpi	r24, 0xAE	; 174
     712:	91 40       	sbci	r25, 0x01	; 1
     714:	a1 05       	cpc	r26, r1
     716:	b1 05       	cpc	r27, r1
     718:	21 f4       	brne	.+8      	; 0x722 <buzz_play+0x1a0>
     71a:	85 e6       	ldi	r24, 0x65	; 101
     71c:	94 e0       	ldi	r25, 0x04	; 4
     71e:	21 cf       	rjmp	.-446    	; 0x562 <setSoundNote>
     720:	08 95       	ret
     722:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     726:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     72a:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     72e:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     732:	88 35       	cpi	r24, 0x58	; 88
     734:	92 40       	sbci	r25, 0x02	; 2
     736:	a1 05       	cpc	r26, r1
     738:	b1 05       	cpc	r27, r1
     73a:	09 f0       	breq	.+2      	; 0x73e <buzz_play+0x1bc>
     73c:	eb c0       	rjmp	.+470    	; 0x914 <buzz_play+0x392>
     73e:	05 cf       	rjmp	.-502    	; 0x54a <buzz_MUTE>
     740:	08 95       	ret
     742:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     746:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     74a:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     74e:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     752:	8b 34       	cpi	r24, 0x4B	; 75
     754:	91 05       	cpc	r25, r1
     756:	a1 05       	cpc	r26, r1
     758:	b1 05       	cpc	r27, r1
     75a:	20 f4       	brcc	.+8      	; 0x764 <buzz_play+0x1e2>
     75c:	82 e1       	ldi	r24, 0x12	; 18
     75e:	94 e0       	ldi	r25, 0x04	; 4
     760:	00 cf       	rjmp	.-512    	; 0x562 <setSoundNote>
     762:	08 95       	ret
     764:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     768:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     76c:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     770:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     774:	86 39       	cpi	r24, 0x96	; 150
     776:	91 05       	cpc	r25, r1
     778:	a1 05       	cpc	r26, r1
     77a:	b1 05       	cpc	r27, r1
     77c:	20 f4       	brcc	.+8      	; 0x786 <buzz_play+0x204>
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	ef ce       	rjmp	.-546    	; 0x562 <setSoundNote>
     784:	08 95       	ret
     786:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     78a:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     78e:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     792:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     796:	81 3e       	cpi	r24, 0xE1	; 225
     798:	91 05       	cpc	r25, r1
     79a:	a1 05       	cpc	r26, r1
     79c:	b1 05       	cpc	r27, r1
     79e:	20 f4       	brcc	.+8      	; 0x7a8 <buzz_play+0x226>
     7a0:	82 e1       	ldi	r24, 0x12	; 18
     7a2:	94 e0       	ldi	r25, 0x04	; 4
     7a4:	de ce       	rjmp	.-580    	; 0x562 <setSoundNote>
     7a6:	08 95       	ret
     7a8:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     7ac:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     7b0:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     7b4:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     7b8:	8c 32       	cpi	r24, 0x2C	; 44
     7ba:	91 40       	sbci	r25, 0x01	; 1
     7bc:	a1 05       	cpc	r26, r1
     7be:	b1 05       	cpc	r27, r1
     7c0:	20 f4       	brcc	.+8      	; 0x7ca <buzz_play+0x248>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	cd ce       	rjmp	.-614    	; 0x562 <setSoundNote>
     7c8:	08 95       	ret
     7ca:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     7ce:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     7d2:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     7d6:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     7da:	87 37       	cpi	r24, 0x77	; 119
     7dc:	91 40       	sbci	r25, 0x01	; 1
     7de:	a1 05       	cpc	r26, r1
     7e0:	b1 05       	cpc	r27, r1
     7e2:	20 f4       	brcc	.+8      	; 0x7ec <buzz_play+0x26a>
     7e4:	82 e1       	ldi	r24, 0x12	; 18
     7e6:	94 e0       	ldi	r25, 0x04	; 4
     7e8:	bc ce       	rjmp	.-648    	; 0x562 <setSoundNote>
     7ea:	08 95       	ret
     7ec:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     7f0:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     7f4:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     7f8:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     7fc:	82 3c       	cpi	r24, 0xC2	; 194
     7fe:	91 40       	sbci	r25, 0x01	; 1
     800:	a1 05       	cpc	r26, r1
     802:	b1 05       	cpc	r27, r1
     804:	09 f0       	breq	.+2      	; 0x808 <buzz_play+0x286>
     806:	86 c0       	rjmp	.+268    	; 0x914 <buzz_play+0x392>
     808:	a0 ce       	rjmp	.-704    	; 0x54a <buzz_MUTE>
     80a:	08 95       	ret
     80c:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     810:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     814:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     818:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     81c:	84 36       	cpi	r24, 0x64	; 100
     81e:	91 05       	cpc	r25, r1
     820:	a1 05       	cpc	r26, r1
     822:	b1 05       	cpc	r27, r1
     824:	20 f4       	brcc	.+8      	; 0x82e <buzz_play+0x2ac>
     826:	82 e1       	ldi	r24, 0x12	; 18
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	9b ce       	rjmp	.-714    	; 0x562 <setSoundNote>
     82c:	08 95       	ret
     82e:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     832:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     836:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     83a:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     83e:	88 3c       	cpi	r24, 0xC8	; 200
     840:	91 05       	cpc	r25, r1
     842:	a1 05       	cpc	r26, r1
     844:	b1 05       	cpc	r27, r1
     846:	20 f4       	brcc	.+8      	; 0x850 <buzz_play+0x2ce>
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	8a ce       	rjmp	.-748    	; 0x562 <setSoundNote>
     84e:	08 95       	ret
     850:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     854:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     858:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     85c:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     860:	8c 32       	cpi	r24, 0x2C	; 44
     862:	91 40       	sbci	r25, 0x01	; 1
     864:	a1 05       	cpc	r26, r1
     866:	b1 05       	cpc	r27, r1
     868:	20 f4       	brcc	.+8      	; 0x872 <buzz_play+0x2f0>
     86a:	82 e1       	ldi	r24, 0x12	; 18
     86c:	94 e0       	ldi	r25, 0x04	; 4
     86e:	79 ce       	rjmp	.-782    	; 0x562 <setSoundNote>
     870:	08 95       	ret
     872:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     876:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     87a:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     87e:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     882:	82 3c       	cpi	r24, 0xC2	; 194
     884:	91 40       	sbci	r25, 0x01	; 1
     886:	a1 05       	cpc	r26, r1
     888:	b1 05       	cpc	r27, r1
     88a:	09 f0       	breq	.+2      	; 0x88e <buzz_play+0x30c>
     88c:	43 c0       	rjmp	.+134    	; 0x914 <buzz_play+0x392>
     88e:	5d ce       	rjmp	.-838    	; 0x54a <buzz_MUTE>
     890:	08 95       	ret
     892:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     896:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     89a:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     89e:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     8a2:	84 36       	cpi	r24, 0x64	; 100
     8a4:	91 05       	cpc	r25, r1
     8a6:	a1 05       	cpc	r26, r1
     8a8:	b1 05       	cpc	r27, r1
     8aa:	20 f4       	brcc	.+8      	; 0x8b4 <buzz_play+0x332>
     8ac:	87 e4       	ldi	r24, 0x47	; 71
     8ae:	90 e1       	ldi	r25, 0x10	; 16
     8b0:	58 ce       	rjmp	.-848    	; 0x562 <setSoundNote>
     8b2:	08 95       	ret
     8b4:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     8b8:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     8bc:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     8c0:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     8c4:	88 3c       	cpi	r24, 0xC8	; 200
     8c6:	91 05       	cpc	r25, r1
     8c8:	a1 05       	cpc	r26, r1
     8ca:	b1 05       	cpc	r27, r1
     8cc:	20 f4       	brcc	.+8      	; 0x8d6 <buzz_play+0x354>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	47 ce       	rjmp	.-882    	; 0x562 <setSoundNote>
     8d4:	08 95       	ret
     8d6:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     8da:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     8de:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     8e2:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     8e6:	8c 32       	cpi	r24, 0x2C	; 44
     8e8:	91 40       	sbci	r25, 0x01	; 1
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	20 f4       	brcc	.+8      	; 0x8f8 <buzz_play+0x376>
     8f0:	84 e2       	ldi	r24, 0x24	; 36
     8f2:	98 e0       	ldi	r25, 0x08	; 8
     8f4:	36 ce       	rjmp	.-916    	; 0x562 <setSoundNote>
     8f6:	08 95       	ret
     8f8:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <TICK+0x4>
     8fc:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <TICK+0x5>
     900:	a0 91 ca 06 	lds	r26, 0x06CA	; 0x8006ca <TICK+0x6>
     904:	b0 91 cb 06 	lds	r27, 0x06CB	; 0x8006cb <TICK+0x7>
     908:	82 3c       	cpi	r24, 0xC2	; 194
     90a:	91 40       	sbci	r25, 0x01	; 1
     90c:	a1 05       	cpc	r26, r1
     90e:	b1 05       	cpc	r27, r1
     910:	09 f4       	brne	.+2      	; 0x914 <buzz_play+0x392>
     912:	1b ce       	rjmp	.-970    	; 0x54a <buzz_MUTE>
     914:	08 95       	ret

00000916 <__vector_15>:
     916:	1f 92       	push	r1
     918:	0f 92       	push	r0
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	0f 92       	push	r0
     91e:	11 24       	eor	r1, r1
     920:	0b b6       	in	r0, 0x3b	; 59
     922:	0f 92       	push	r0
     924:	2f 93       	push	r18
     926:	3f 93       	push	r19
     928:	4f 93       	push	r20
     92a:	5f 93       	push	r21
     92c:	6f 93       	push	r22
     92e:	7f 93       	push	r23
     930:	8f 93       	push	r24
     932:	9f 93       	push	r25
     934:	af 93       	push	r26
     936:	bf 93       	push	r27
     938:	ef 93       	push	r30
     93a:	ff 93       	push	r31
     93c:	e4 ec       	ldi	r30, 0xC4	; 196
     93e:	f6 e0       	ldi	r31, 0x06	; 6
     940:	80 81       	ld	r24, Z
     942:	91 81       	ldd	r25, Z+1	; 0x01
     944:	a2 81       	ldd	r26, Z+2	; 0x02
     946:	b3 81       	ldd	r27, Z+3	; 0x03
     948:	01 96       	adiw	r24, 0x01	; 1
     94a:	a1 1d       	adc	r26, r1
     94c:	b1 1d       	adc	r27, r1
     94e:	80 83       	st	Z, r24
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	a2 83       	std	Z+2, r26	; 0x02
     954:	b3 83       	std	Z+3, r27	; 0x03
     956:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <logojector_tick_enable_flag>
     95a:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <logojector_tick_enable_flag+0x1>
     95e:	89 2b       	or	r24, r25
     960:	59 f0       	breq	.+22     	; 0x978 <__vector_15+0x62>
     962:	80 85       	ldd	r24, Z+8	; 0x08
     964:	91 85       	ldd	r25, Z+9	; 0x09
     966:	a2 85       	ldd	r26, Z+10	; 0x0a
     968:	b3 85       	ldd	r27, Z+11	; 0x0b
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	a1 1d       	adc	r26, r1
     96e:	b1 1d       	adc	r27, r1
     970:	80 87       	std	Z+8, r24	; 0x08
     972:	91 87       	std	Z+9, r25	; 0x09
     974:	a2 87       	std	Z+10, r26	; 0x0a
     976:	b3 87       	std	Z+11, r27	; 0x0b
     978:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <lcd_tick_enable_flag>
     97c:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <lcd_tick_enable_flag+0x1>
     980:	89 2b       	or	r24, r25
     982:	69 f0       	breq	.+26     	; 0x99e <__vector_15+0x88>
     984:	e4 ec       	ldi	r30, 0xC4	; 196
     986:	f6 e0       	ldi	r31, 0x06	; 6
     988:	84 85       	ldd	r24, Z+12	; 0x0c
     98a:	95 85       	ldd	r25, Z+13	; 0x0d
     98c:	a6 85       	ldd	r26, Z+14	; 0x0e
     98e:	b7 85       	ldd	r27, Z+15	; 0x0f
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	a1 1d       	adc	r26, r1
     994:	b1 1d       	adc	r27, r1
     996:	84 87       	std	Z+12, r24	; 0x0c
     998:	95 87       	std	Z+13, r25	; 0x0d
     99a:	a6 87       	std	Z+14, r26	; 0x0e
     99c:	b7 87       	std	Z+15, r27	; 0x0f
     99e:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <exit_gate_tick_enable_flag>
     9a2:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <exit_gate_tick_enable_flag+0x1>
     9a6:	89 2b       	or	r24, r25
     9a8:	69 f0       	breq	.+26     	; 0x9c4 <__vector_15+0xae>
     9aa:	e4 ec       	ldi	r30, 0xC4	; 196
     9ac:	f6 e0       	ldi	r31, 0x06	; 6
     9ae:	80 89       	ldd	r24, Z+16	; 0x10
     9b0:	91 89       	ldd	r25, Z+17	; 0x11
     9b2:	a2 89       	ldd	r26, Z+18	; 0x12
     9b4:	b3 89       	ldd	r27, Z+19	; 0x13
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	a1 1d       	adc	r26, r1
     9ba:	b1 1d       	adc	r27, r1
     9bc:	80 8b       	std	Z+16, r24	; 0x10
     9be:	91 8b       	std	Z+17, r25	; 0x11
     9c0:	a2 8b       	std	Z+18, r26	; 0x12
     9c2:	b3 8b       	std	Z+19, r27	; 0x13
     9c4:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <entrance_gate_tick_enable_flag>
     9c8:	90 91 bb 06 	lds	r25, 0x06BB	; 0x8006bb <entrance_gate_tick_enable_flag+0x1>
     9cc:	89 2b       	or	r24, r25
     9ce:	69 f0       	breq	.+26     	; 0x9ea <__vector_15+0xd4>
     9d0:	e4 ec       	ldi	r30, 0xC4	; 196
     9d2:	f6 e0       	ldi	r31, 0x06	; 6
     9d4:	84 89       	ldd	r24, Z+20	; 0x14
     9d6:	95 89       	ldd	r25, Z+21	; 0x15
     9d8:	a6 89       	ldd	r26, Z+22	; 0x16
     9da:	b7 89       	ldd	r27, Z+23	; 0x17
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	a1 1d       	adc	r26, r1
     9e0:	b1 1d       	adc	r27, r1
     9e2:	84 8b       	std	Z+20, r24	; 0x14
     9e4:	95 8b       	std	Z+21, r25	; 0x15
     9e6:	a6 8b       	std	Z+22, r26	; 0x16
     9e8:	b7 8b       	std	Z+23, r27	; 0x17
     9ea:	80 91 11 05 	lds	r24, 0x0511	; 0x800511 <timeout_tick_enable_flag>
     9ee:	90 91 12 05 	lds	r25, 0x0512	; 0x800512 <timeout_tick_enable_flag+0x1>
     9f2:	89 2b       	or	r24, r25
     9f4:	69 f0       	breq	.+26     	; 0xa10 <__vector_15+0xfa>
     9f6:	e4 ec       	ldi	r30, 0xC4	; 196
     9f8:	f6 e0       	ldi	r31, 0x06	; 6
     9fa:	80 8d       	ldd	r24, Z+24	; 0x18
     9fc:	91 8d       	ldd	r25, Z+25	; 0x19
     9fe:	a2 8d       	ldd	r26, Z+26	; 0x1a
     a00:	b3 8d       	ldd	r27, Z+27	; 0x1b
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	a1 1d       	adc	r26, r1
     a06:	b1 1d       	adc	r27, r1
     a08:	80 8f       	std	Z+24, r24	; 0x18
     a0a:	91 8f       	std	Z+25, r25	; 0x19
     a0c:	a2 8f       	std	Z+26, r26	; 0x1a
     a0e:	b3 8f       	std	Z+27, r27	; 0x1b
     a10:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <buzz_tick_enable_flag>
     a14:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <buzz_tick_enable_flag+0x1>
     a18:	89 2b       	or	r24, r25
     a1a:	71 f0       	breq	.+28     	; 0xa38 <__vector_15+0x122>
     a1c:	e4 ec       	ldi	r30, 0xC4	; 196
     a1e:	f6 e0       	ldi	r31, 0x06	; 6
     a20:	84 81       	ldd	r24, Z+4	; 0x04
     a22:	95 81       	ldd	r25, Z+5	; 0x05
     a24:	a6 81       	ldd	r26, Z+6	; 0x06
     a26:	b7 81       	ldd	r27, Z+7	; 0x07
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	a1 1d       	adc	r26, r1
     a2c:	b1 1d       	adc	r27, r1
     a2e:	84 83       	std	Z+4, r24	; 0x04
     a30:	95 83       	std	Z+5, r25	; 0x05
     a32:	a6 83       	std	Z+6, r26	; 0x06
     a34:	b7 83       	std	Z+7, r27	; 0x07
     a36:	a5 dd       	rcall	.-1206   	; 0x582 <buzz_play>
     a38:	ff 91       	pop	r31
     a3a:	ef 91       	pop	r30
     a3c:	bf 91       	pop	r27
     a3e:	af 91       	pop	r26
     a40:	9f 91       	pop	r25
     a42:	8f 91       	pop	r24
     a44:	7f 91       	pop	r23
     a46:	6f 91       	pop	r22
     a48:	5f 91       	pop	r21
     a4a:	4f 91       	pop	r20
     a4c:	3f 91       	pop	r19
     a4e:	2f 91       	pop	r18
     a50:	0f 90       	pop	r0
     a52:	0b be       	out	0x3b, r0	; 59
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	0f 90       	pop	r0
     a5a:	1f 90       	pop	r1
     a5c:	18 95       	reti

00000a5e <start_timeout_count>:
     a5e:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <TICK+0x18>
     a62:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <TICK+0x19>
     a66:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <TICK+0x1a>
     a6a:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <TICK+0x1b>
     a6e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a72:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     a76:	08 95       	ret

00000a78 <request_reset_to_admin>:
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	65 97       	sbiw	r28, 0x15	; 21
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	bc 01       	movw	r22, r24
     a8e:	9a e0       	ldi	r25, 0x0A	; 10
     a90:	e5 e0       	ldi	r30, 0x05	; 5
     a92:	f1 e0       	ldi	r31, 0x01	; 1
     a94:	de 01       	movw	r26, r28
     a96:	11 96       	adiw	r26, 0x01	; 1
     a98:	01 90       	ld	r0, Z+
     a9a:	0d 92       	st	X+, r0
     a9c:	9a 95       	dec	r25
     a9e:	e1 f7       	brne	.-8      	; 0xa98 <request_reset_to_admin+0x20>
     aa0:	fe 01       	movw	r30, r28
     aa2:	3b 96       	adiw	r30, 0x0b	; 11
     aa4:	8b e0       	ldi	r24, 0x0B	; 11
     aa6:	df 01       	movw	r26, r30
     aa8:	1d 92       	st	X+, r1
     aaa:	8a 95       	dec	r24
     aac:	e9 f7       	brne	.-6      	; 0xaa8 <request_reset_to_admin+0x30>
     aae:	ce 01       	movw	r24, r28
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	0e 94 20 10 	call	0x2040	; 0x2040 <strcat>
     ab6:	ae d5       	rcall	.+2908   	; 0x1614 <i2c_lcd_clear>
     ab8:	41 e7       	ldi	r20, 0x71	; 113
     aba:	51 e0       	ldi	r21, 0x01	; 1
     abc:	60 e0       	ldi	r22, 0x00	; 0
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	9a d5       	rcall	.+2868   	; 0x15f6 <i2c_lcd_string>
     ac2:	4e e7       	ldi	r20, 0x7E	; 126
     ac4:	51 e0       	ldi	r21, 0x01	; 1
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	95 d5       	rcall	.+2858   	; 0x15f6 <i2c_lcd_string>
     acc:	ae 01       	movw	r20, r28
     ace:	4f 5f       	subi	r20, 0xFF	; 255
     ad0:	5f 4f       	sbci	r21, 0xFF	; 255
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	8f d5       	rcall	.+2846   	; 0x15f6 <i2c_lcd_string>
     ad8:	65 96       	adiw	r28, 0x15	; 21
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	08 95       	ret

00000aea <timeout_check>:
     aea:	40 91 dc 06 	lds	r20, 0x06DC	; 0x8006dc <TICK+0x18>
     aee:	50 91 dd 06 	lds	r21, 0x06DD	; 0x8006dd <TICK+0x19>
     af2:	60 91 de 06 	lds	r22, 0x06DE	; 0x8006de <TICK+0x1a>
     af6:	70 91 df 06 	lds	r23, 0x06DF	; 0x8006df <TICK+0x1b>
     afa:	41 31       	cpi	r20, 0x11	; 17
     afc:	57 42       	sbci	r21, 0x27	; 39
     afe:	61 05       	cpc	r22, r1
     b00:	71 05       	cpc	r23, r1
     b02:	38 f0       	brcs	.+14     	; 0xb12 <timeout_check+0x28>
     b04:	21 e0       	ldi	r18, 0x01	; 1
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b0c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     b10:	b3 df       	rcall	.-154    	; 0xa78 <request_reset_to_admin>
     b12:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b16:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b1a:	00 97       	sbiw	r24, 0x00	; 0
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <timeout_check+0x30>
     b1e:	08 95       	ret

00000b20 <esp8266_init>:
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	7c 01       	movw	r14, r24
     b32:	6b 01       	movw	r12, r22
     b34:	ea 01       	movw	r28, r20
     b36:	89 01       	movw	r16, r18
     b38:	92 df       	rcall	.-220    	; 0xa5e <start_timeout_count>
     b3a:	81 e9       	ldi	r24, 0x91	; 145
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <uart1_tx_string>
     b42:	2f ef       	ldi	r18, 0xFF	; 255
     b44:	81 e1       	ldi	r24, 0x11	; 17
     b46:	9a e7       	ldi	r25, 0x7A	; 122
     b48:	21 50       	subi	r18, 0x01	; 1
     b4a:	80 40       	sbci	r24, 0x00	; 0
     b4c:	90 40       	sbci	r25, 0x00	; 0
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <esp8266_init+0x28>
     b50:	00 c0       	rjmp	.+0      	; 0xb52 <esp8266_init+0x32>
     b52:	00 00       	nop
     b54:	8a e9       	ldi	r24, 0x9A	; 154
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	c8 df       	rcall	.-112    	; 0xaea <timeout_check>
     b5a:	41 ea       	ldi	r20, 0xA1	; 161
     b5c:	51 e0       	ldi	r21, 0x01	; 1
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	49 d5       	rcall	.+2706   	; 0x15f6 <i2c_lcd_string>
     b64:	7c df       	rcall	.-264    	; 0xa5e <start_timeout_count>
     b66:	86 eb       	ldi	r24, 0xB6	; 182
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <uart1_tx_string>
     b6e:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     b72:	81 11       	cpse	r24, r1
     b74:	07 c0       	rjmp	.+14     	; 0xb84 <esp8266_init+0x64>
     b76:	8f eb       	ldi	r24, 0xBF	; 191
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	b7 df       	rcall	.-146    	; 0xaea <timeout_check>
     b7c:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     b80:	88 23       	and	r24, r24
     b82:	c9 f3       	breq	.-14     	; 0xb76 <esp8266_init+0x56>
     b84:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <esp8266_return_result_flag>
     b88:	6a df       	rcall	.-300    	; 0xa5e <start_timeout_count>
     b8a:	86 ec       	ldi	r24, 0xC6	; 198
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <uart1_tx_string>
     b92:	2f ef       	ldi	r18, 0xFF	; 255
     b94:	87 ea       	ldi	r24, 0xA7	; 167
     b96:	91 e6       	ldi	r25, 0x61	; 97
     b98:	21 50       	subi	r18, 0x01	; 1
     b9a:	80 40       	sbci	r24, 0x00	; 0
     b9c:	90 40       	sbci	r25, 0x00	; 0
     b9e:	e1 f7       	brne	.-8      	; 0xb98 <esp8266_init+0x78>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <esp8266_init+0x82>
     ba2:	00 00       	nop
     ba4:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <esp8266_return_result_flag>
     ba8:	84 ed       	ldi	r24, 0xD4	; 212
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	9e df       	rcall	.-196    	; 0xaea <timeout_check>
     bae:	4e ed       	ldi	r20, 0xDE	; 222
     bb0:	51 e0       	ldi	r21, 0x01	; 1
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	1f d5       	rcall	.+2622   	; 0x15f6 <i2c_lcd_string>
     bb8:	52 df       	rcall	.-348    	; 0xa5e <start_timeout_count>
     bba:	83 ef       	ldi	r24, 0xF3	; 243
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <uart1_tx_string>
     bc2:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     bc6:	81 11       	cpse	r24, r1
     bc8:	07 c0       	rjmp	.+14     	; 0xbd8 <esp8266_init+0xb8>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	8d df       	rcall	.-230    	; 0xaea <timeout_check>
     bd0:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     bd4:	88 23       	and	r24, r24
     bd6:	c9 f3       	breq	.-14     	; 0xbca <esp8266_init+0xaa>
     bd8:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <esp8266_return_result_flag>
     bdc:	40 df       	rcall	.-384    	; 0xa5e <start_timeout_count>
     bde:	8b e0       	ldi	r24, 0x0B	; 11
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <uart1_tx_string>
     be6:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     bea:	81 11       	cpse	r24, r1
     bec:	07 c0       	rjmp	.+14     	; 0xbfc <esp8266_init+0xdc>
     bee:	86 e1       	ldi	r24, 0x16	; 22
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	7b df       	rcall	.-266    	; 0xaea <timeout_check>
     bf4:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     bf8:	88 23       	and	r24, r24
     bfa:	c9 f3       	breq	.-14     	; 0xbee <esp8266_init+0xce>
     bfc:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <esp8266_return_result_flag>
     c00:	4f e1       	ldi	r20, 0x1F	; 31
     c02:	52 e0       	ldi	r21, 0x02	; 2
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	82 e0       	ldi	r24, 0x02	; 2
     c08:	f6 d4       	rcall	.+2540   	; 0x15f6 <i2c_lcd_string>
     c0a:	29 df       	rcall	.-430    	; 0xa5e <start_timeout_count>
     c0c:	a6 01       	movw	r20, r12
     c0e:	b7 01       	movw	r22, r14
     c10:	84 e3       	ldi	r24, 0x34	; 52
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <connect_to_AP>
     c18:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <uart1_tx_string>
     c1c:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     c20:	81 11       	cpse	r24, r1
     c22:	07 c0       	rjmp	.+14     	; 0xc32 <esp8266_init+0x112>
     c24:	8f e3       	ldi	r24, 0x3F	; 63
     c26:	92 e0       	ldi	r25, 0x02	; 2
     c28:	60 df       	rcall	.-320    	; 0xaea <timeout_check>
     c2a:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     c2e:	88 23       	and	r24, r24
     c30:	c9 f3       	breq	.-14     	; 0xc24 <esp8266_init+0x104>
     c32:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <esp8266_return_result_flag>
     c36:	48 e4       	ldi	r20, 0x48	; 72
     c38:	52 e0       	ldi	r21, 0x02	; 2
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	db d4       	rcall	.+2486   	; 0x15f6 <i2c_lcd_string>
     c40:	0e df       	rcall	.-484    	; 0xa5e <start_timeout_count>
     c42:	8d e5       	ldi	r24, 0x5D	; 93
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <uart1_tx_string>
     c4a:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     c4e:	81 11       	cpse	r24, r1
     c50:	07 c0       	rjmp	.+14     	; 0xc60 <esp8266_init+0x140>
     c52:	88 e6       	ldi	r24, 0x68	; 104
     c54:	92 e0       	ldi	r25, 0x02	; 2
     c56:	49 df       	rcall	.-366    	; 0xaea <timeout_check>
     c58:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     c5c:	88 23       	and	r24, r24
     c5e:	c9 f3       	breq	.-14     	; 0xc52 <esp8266_init+0x132>
     c60:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <esp8266_return_result_flag>
     c64:	41 e7       	ldi	r20, 0x71	; 113
     c66:	52 e0       	ldi	r21, 0x02	; 2
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	c4 d4       	rcall	.+2440   	; 0x15f6 <i2c_lcd_string>
     c6e:	f7 de       	rcall	.-530    	; 0xa5e <start_timeout_count>
     c70:	b8 01       	movw	r22, r16
     c72:	ce 01       	movw	r24, r28
     c74:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <TCP_connect>
     c78:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <uart1_tx_string>
     c7c:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     c80:	81 11       	cpse	r24, r1
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <esp8266_init+0x172>
     c84:	86 e8       	ldi	r24, 0x86	; 134
     c86:	92 e0       	ldi	r25, 0x02	; 2
     c88:	30 df       	rcall	.-416    	; 0xaea <timeout_check>
     c8a:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <esp8266_return_result_flag>
     c8e:	88 23       	and	r24, r24
     c90:	c9 f3       	breq	.-14     	; 0xc84 <esp8266_init+0x164>
     c92:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <esp8266_return_result_flag>
     c96:	42 e9       	ldi	r20, 0x92	; 146
     c98:	52 e0       	ldi	r21, 0x02	; 2
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	ab d4       	rcall	.+2390   	; 0x15f6 <i2c_lcd_string>
     ca0:	2f ef       	ldi	r18, 0xFF	; 255
     ca2:	81 ee       	ldi	r24, 0xE1	; 225
     ca4:	94 e0       	ldi	r25, 0x04	; 4
     ca6:	21 50       	subi	r18, 0x01	; 1
     ca8:	80 40       	sbci	r24, 0x00	; 0
     caa:	90 40       	sbci	r25, 0x00	; 0
     cac:	e1 f7       	brne	.-8      	; 0xca6 <esp8266_init+0x186>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <esp8266_init+0x190>
     cb0:	00 00       	nop
     cb2:	47 ea       	ldi	r20, 0xA7	; 167
     cb4:	52 e0       	ldi	r21, 0x02	; 2
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	9d d4       	rcall	.+2362   	; 0x15f6 <i2c_lcd_string>
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	08 95       	ret

00000cce <logojector_ON>:
     cce:	ac 9a       	sbi	0x15, 4	; 21
     cd0:	08 95       	ret

00000cd2 <logojector_OFF>:
     cd2:	ac 98       	cbi	0x15, 4	; 21
     cd4:	08 95       	ret

00000cd6 <servo_release>:
		set_servo(SERVO_EXIT_GATE, state);
	}
}

void servo_release(int ch) {
	cli();
     cd6:	f8 94       	cli
	 	if(ch==SERVO_ENTRANCE_GATE) {servo_1_duty_ratio=0; }//PORTA&=~(1<<PORTA0);
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	29 f4       	brne	.+10     	; 0xce6 <servo_release+0x10>
     cdc:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <servo_1_duty_ratio+0x1>
     ce0:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <servo_1_duty_ratio>
     ce4:	06 c0       	rjmp	.+12     	; 0xcf2 <servo_release+0x1c>
	 	else if(ch==SERVO_EXIT_GATE){servo_2_duty_ratio=0;} //PORTA&=~(1<<PORTA3);
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	21 f4       	brne	.+8      	; 0xcf2 <servo_release+0x1c>
     cea:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <servo_2_duty_ratio+0x1>
     cee:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <servo_2_duty_ratio>
	sei();
     cf2:	78 94       	sei
     cf4:	08 95       	ret

00000cf6 <tick_enable>:
	 tick_enable(flag);
	 
 }
 
 void tick_enable(int tick_name){
	 switch(tick_name){
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	91 05       	cpc	r25, r1
     cfa:	59 f1       	breq	.+86     	; 0xd52 <tick_enable+0x5c>
     cfc:	34 f4       	brge	.+12     	; 0xd0a <tick_enable+0x14>
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	91 05       	cpc	r25, r1
     d02:	49 f0       	breq	.+18     	; 0xd16 <tick_enable+0x20>
     d04:	02 97       	sbiw	r24, 0x02	; 2
     d06:	b1 f0       	breq	.+44     	; 0xd34 <tick_enable+0x3e>
     d08:	08 95       	ret
     d0a:	85 30       	cpi	r24, 0x05	; 5
     d0c:	91 05       	cpc	r25, r1
     d0e:	81 f1       	breq	.+96     	; 0xd70 <tick_enable+0x7a>
     d10:	06 97       	sbiw	r24, 0x06	; 6
     d12:	e9 f1       	breq	.+122    	; 0xd8e <tick_enable+0x98>
     d14:	08 95       	ret
		 case TICK_BUZZ: TICK.buzz_1ms=0; buzz_tick_enable_flag=1; break;
     d16:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <TICK+0x4>
     d1a:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <TICK+0x5>
     d1e:	10 92 ca 06 	sts	0x06CA, r1	; 0x8006ca <TICK+0x6>
     d22:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <TICK+0x7>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	90 93 bf 06 	sts	0x06BF, r25	; 0x8006bf <buzz_tick_enable_flag+0x1>
     d2e:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <buzz_tick_enable_flag>
     d32:	08 95       	ret
		 case TICK_LOGOJECTOR:TICK.logojector_tick_1ms=0; logojector_tick_enable_flag=1; break;
     d34:	10 92 cc 06 	sts	0x06CC, r1	; 0x8006cc <TICK+0x8>
     d38:	10 92 cd 06 	sts	0x06CD, r1	; 0x8006cd <TICK+0x9>
     d3c:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <TICK+0xa>
     d40:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <TICK+0xb>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <logojector_tick_enable_flag+0x1>
     d4c:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <logojector_tick_enable_flag>
     d50:	08 95       	ret
		 //case TICK_LCD: lcd_tick_enable_flag=1;
		 case TICK_EXIT_GATE: TICK.exit_gate_tick_1ms=0; exit_gate_tick_enable_flag=1; break;
     d52:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <TICK+0x10>
     d56:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <TICK+0x11>
     d5a:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <TICK+0x12>
     d5e:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <TICK+0x13>
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	90 93 bd 06 	sts	0x06BD, r25	; 0x8006bd <exit_gate_tick_enable_flag+0x1>
     d6a:	80 93 bc 06 	sts	0x06BC, r24	; 0x8006bc <exit_gate_tick_enable_flag>
     d6e:	08 95       	ret
		 case TICK_ENTRANCE_GATE: TICK.entrance_gate_tick_1ms=0; entrance_gate_tick_enable_flag=1; break;
     d70:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <TICK+0x14>
     d74:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <TICK+0x15>
     d78:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <TICK+0x16>
     d7c:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <TICK+0x17>
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	90 93 bb 06 	sts	0x06BB, r25	; 0x8006bb <entrance_gate_tick_enable_flag+0x1>
     d88:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <entrance_gate_tick_enable_flag>
     d8c:	08 95       	ret
		 case TICK_TIMEOUT :TICK.timeout_tick_1ms=0; timeout_tick_enable_flag=1; break;
     d8e:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <TICK+0x18>
     d92:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <TICK+0x19>
     d96:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <TICK+0x1a>
     d9a:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <TICK+0x1b>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	90 93 12 05 	sts	0x0512, r25	; 0x800512 <timeout_tick_enable_flag+0x1>
     da6:	80 93 11 05 	sts	0x0511, r24	; 0x800511 <timeout_tick_enable_flag>
     daa:	08 95       	ret

00000dac <setSoundClip>:
//부저 관련 함수들
void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 
	
	 switch(clip)
     dac:	82 30       	cpi	r24, 0x02	; 2
     dae:	99 f0       	breq	.+38     	; 0xdd6 <setSoundClip+0x2a>
     db0:	28 f4       	brcc	.+10     	; 0xdbc <setSoundClip+0x10>
     db2:	88 23       	and	r24, r24
     db4:	49 f0       	breq	.+18     	; 0xdc8 <setSoundClip+0x1c>
     db6:	81 30       	cpi	r24, 0x01	; 1
     db8:	51 f0       	breq	.+20     	; 0xdce <setSoundClip+0x22>
     dba:	1c c0       	rjmp	.+56     	; 0xdf4 <setSoundClip+0x48>
     dbc:	84 30       	cpi	r24, 0x04	; 4
     dbe:	99 f0       	breq	.+38     	; 0xde6 <setSoundClip+0x3a>
     dc0:	70 f0       	brcs	.+28     	; 0xdde <setSoundClip+0x32>
     dc2:	85 30       	cpi	r24, 0x05	; 5
     dc4:	a1 f0       	breq	.+40     	; 0xdee <setSoundClip+0x42>
     dc6:	16 c0       	rjmp	.+44     	; 0xdf4 <setSoundClip+0x48>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     dc8:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <music_flag>
     dcc:	13 c0       	rjmp	.+38     	; 0xdf4 <setSoundClip+0x48>
		   case BUZZ_ON: music_flag=BUZZ_ON; break;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <music_flag>
     dd4:	0f c0       	rjmp	.+30     	; 0xdf4 <setSoundClip+0x48>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <music_flag>
     ddc:	0b c0       	rjmp	.+22     	; 0xdf4 <setSoundClip+0x48>
		   case BUZZ_NOT_REGISTERED: music_flag=BUZZ_NOT_REGISTERED; break;
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <music_flag>
     de4:	07 c0       	rjmp	.+14     	; 0xdf4 <setSoundClip+0x48>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <music_flag>
     dec:	03 c0       	rjmp	.+6      	; 0xdf4 <setSoundClip+0x48>
		   case BUZZ_ESP8266_CONNECTED: music_flag=BUZZ_ESP8266_CONNECTED; break;
     dee:	85 e0       	ldi	r24, 0x05	; 5
     df0:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <music_flag>
		   
	 }
	 tick_enable(TICK_BUZZ); //여기 안에 TICK.buzz_1ms=0해주는 코드가 포함되어 있음.
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	7e cf       	rjmp	.-260    	; 0xcf6 <tick_enable>
     dfa:	08 95       	ret

00000dfc <start_timer>:
	sei();
 }
 
 void start_timer(int flag)
 {
	 TICK.tick_1ms=0;
     dfc:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <TICK>
     e00:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <TICK+0x1>
     e04:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <TICK+0x2>
     e08:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <TICK+0x3>
	 if(flag!=TICK_EXIT_GATE){// LCD가 출력되는 모든 상황에서 lcd tick 초기화가 된다.
     e0c:	84 30       	cpi	r24, 0x04	; 4
     e0e:	91 05       	cpc	r25, r1
     e10:	71 f0       	breq	.+28     	; 0xe2e <start_timer+0x32>
		 TICK.lcd_tick_1ms=0;lcd_tick_enable_flag=1;
     e12:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <TICK+0xc>
     e16:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <TICK+0xd>
     e1a:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <TICK+0xe>
     e1e:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <TICK+0xf>
     e22:	21 e0       	ldi	r18, 0x01	; 1
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	30 93 e1 06 	sts	0x06E1, r19	; 0x8006e1 <lcd_tick_enable_flag+0x1>
     e2a:	20 93 e0 06 	sts	0x06E0, r18	; 0x8006e0 <lcd_tick_enable_flag>
	 } 
	 

	 //셋된 플래그들에 맞게 타이머 감지를 시작함.
	 tick_enable(flag);
     e2e:	63 cf       	rjmp	.-314    	; 0xcf6 <tick_enable>
     e30:	08 95       	ret

00000e32 <RC522_data_state_check_and_actuate>:
		}
	}
}

void RC522_data_state_check_and_actuate(char *tggl)
{
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	6c 97       	sbiw	r28, 0x1c	; 28
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	9c 01       	movw	r18, r24
	if(received_state==RECEIVE_NONE); //do nothing
	else if(received_state==RECEIVE_SUCCESS)
     e54:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <received_state>
     e58:	91 30       	cpi	r25, 0x01	; 1
     e5a:	09 f0       	breq	.+2      	; 0xe5e <RC522_data_state_check_and_actuate+0x2c>
     e5c:	57 c1       	rjmp	.+686    	; 0x110c <__stack+0xd>
     e5e:	f9 01       	movw	r30, r18
	{//Received data service routine.
		//send to esp8266 and receive result data.
		
		static int user_count=0;//입구,출구 둘다 사용해야 하는 변수이므로 일단 여기다가 선언함.
		if((*tggl)==ENTRANCE_GATE){
     e60:	80 81       	ld	r24, Z
     e62:	81 11       	cpse	r24, r1
     e64:	1f c1       	rjmp	.+574    	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
			//esp8266에 uid와 입구게이트 정보 전송 함수
			//while(전송 완료될 때 까지 대기)???
			
			
			/*이부분은 esp8266 구현한 뒤에 넣어야 된다 */
			uart1_tx_string("AT+CIPSEND=11\r\n"); //4byte길이 데이터 전송 예정
     e66:	8c eb       	ldi	r24, 0xBC	; 188
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	98 d7       	rcall	.+3888   	; 0x1d9c <uart1_tx_string>
			// '>' 문자가 확인될 때까지 대기
			while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
     e6c:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <esp8266_send_ready_flag>
     e70:	88 23       	and	r24, r24
     e72:	e1 f3       	breq	.-8      	; 0xe6c <RC522_data_state_check_and_actuate+0x3a>
			esp8266_send_ready_flag=0;
     e74:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <esp8266_send_ready_flag>
			
			//esp8266으로 uid데이터 전송
			
			//미리 받을 사전 준비 시작.
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
     e78:	82 e3       	ldi	r24, 0x32	; 50
     e7a:	ec e7       	ldi	r30, 0x7C	; 124
     e7c:	f5 e0       	ldi	r31, 0x05	; 5
     e7e:	df 01       	movw	r26, r30
     e80:	1d 92       	st	X+, r1
     e82:	8a 95       	dec	r24
     e84:	e9 f7       	brne	.-6      	; 0xe80 <RC522_data_state_check_and_actuate+0x4e>
     e86:	08 e9       	ldi	r16, 0x98	; 152
     e88:	16 e0       	ldi	r17, 0x06	; 6
     e8a:	0f 2e       	mov	r0, r31
     e8c:	fc e9       	ldi	r31, 0x9C	; 156
     e8e:	ef 2e       	mov	r14, r31
     e90:	f6 e0       	ldi	r31, 0x06	; 6
     e92:	ff 2e       	mov	r15, r31
     e94:	f0 2d       	mov	r31, r0
			
			//uid 데이터 전송
			for(int i=0; i<4; i++)
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
     e96:	f8 01       	movw	r30, r16
     e98:	81 91       	ld	r24, Z+
     e9a:	8f 01       	movw	r16, r30
     e9c:	bc d7       	rcall	.+3960   	; 0x1e16 <HexToString>
     e9e:	7e d7       	rcall	.+3836   	; 0x1d9c <uart1_tx_string>
				uart1_tx_char(' ');
     ea0:	80 e2       	ldi	r24, 0x20	; 32
     ea2:	74 d7       	rcall	.+3816   	; 0x1d8c <uart1_tx_char>
     ea4:	0e 15       	cp	r16, r14
			
			//미리 받을 사전 준비 시작.
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
			
			//uid 데이터 전송
			for(int i=0; i<4; i++)
     ea6:	1f 05       	cpc	r17, r15
     ea8:	b1 f7       	brne	.-20     	; 0xe96 <RC522_data_state_check_and_actuate+0x64>
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
				uart1_tx_char(' ');
			}
			uart1_tx_string("\r\n");
     eaa:	85 ea       	ldi	r24, 0xA5	; 165
     eac:	93 e0       	ldi	r25, 0x03	; 3
     eae:	76 d7       	rcall	.+3820   	; 0x1d9c <uart1_tx_string>
     eb0:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <esp8266_receiving_flag>

			
			//esp8266을 통해 uid전송 후, 서버에서 결과물을 다시 전송해주기까지 대기
			while(!esp8266_receiving_flag); //ISR내에서 버퍼에 모두 담을때 까지 대기 esp8266_received_data[] 에 저장
     eb4:	88 23       	and	r24, r24
     eb6:	e1 f3       	breq	.-8      	; 0xeb0 <RC522_data_state_check_and_actuate+0x7e>
     eb8:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <esp8266_receiving_flag>
			esp8266_receiving_flag=0;
     ebc:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <esp8266_received_data>
			//esp8266_receive_complete_flag=0;
			if(esp8266_received_data[0]=='O'){
     ec0:	8f 34       	cpi	r24, 0x4F	; 79
     ec2:	09 f0       	breq	.+2      	; 0xec6 <RC522_data_state_check_and_actuate+0x94>
     ec4:	d9 c0       	rjmp	.+434    	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
     ec6:	80 e2       	ldi	r24, 0x20	; 32
				//DB 테이블에 존재하는 uid일 경우 해당 구문을 들어옴
				
				strncpy((char*)esp8266_received_data,"  ",2);
     ec8:	90 e2       	ldi	r25, 0x20	; 32
     eca:	90 93 7d 05 	sts	0x057D, r25	; 0x80057d <esp8266_received_data+0x1>
     ece:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <esp8266_received_data>
     ed2:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <rfid_user_flag+0x1>
				
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
     ed6:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <rfid_user_flag>
     eda:	0c ea       	ldi	r16, 0xAC	; 172
     edc:	14 e0       	ldi	r17, 0x04	; 4
     ede:	e1 2c       	mov	r14, r1
				for(int i=0; i<MAX_USER_COUNT;i++)
     ee0:	f1 2c       	mov	r15, r1
     ee2:	cc 24       	eor	r12, r12
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
						rfid_user_flag=1;
     ee4:	c3 94       	inc	r12
     ee6:	d1 2c       	mov	r13, r1
     ee8:	61 e6       	ldi	r22, 0x61	; 97
				for(int i=0; i<MAX_USER_COUNT;i++)
				{
					
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
     eea:	73 e0       	ldi	r23, 0x03	; 3
     eec:	c8 01       	movw	r24, r16
     eee:	0e 94 2b 10 	call	0x2056	; 0x2056 <strcmp>
     ef2:	89 2b       	or	r24, r25
     ef4:	49 f4       	brne	.+18     	; 0xf08 <RC522_data_state_check_and_actuate+0xd6>
     ef6:	f0 92 ab 04 	sts	0x04AB, r15	; 0x8004ab <rfid_user_count_pointer+0x1>
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
     efa:	e0 92 aa 04 	sts	0x04AA, r14	; 0x8004aa <rfid_user_count_pointer>
     efe:	d0 92 a9 04 	sts	0x04A9, r13	; 0x8004a9 <rfid_user_flag+0x1>
						rfid_user_flag=1;
     f02:	c0 92 a8 04 	sts	0x04A8, r12	; 0x8004a8 <rfid_user_flag>
     f06:	0c c0       	rjmp	.+24     	; 0xf20 <RC522_data_state_check_and_actuate+0xee>
     f08:	68 e9       	ldi	r22, 0x98	; 152
						//i=MAX_USER_COUNT;//루프를 나오기 위함
					}
					else if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch0)==0)
     f0a:	76 e0       	ldi	r23, 0x06	; 6
     f0c:	c8 01       	movw	r24, r16
     f0e:	0e 94 2b 10 	call	0x2056	; 0x2056 <strcmp>
     f12:	89 2b       	or	r24, r25
     f14:	29 f4       	brne	.+10     	; 0xf20 <RC522_data_state_check_and_actuate+0xee>
     f16:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <rfid_user_flag+0x1>
					{
						//만일 버퍼 안에 기존 유저가 들어있는 것이 확인됐을 때 
						i=MAX_USER_COUNT; //그 이후는 의미 없기 때문에 그냥 빠져나옴
						rfid_user_flag=0;
     f1a:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <rfid_user_flag>
     f1e:	8f c0       	rjmp	.+286    	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
     f20:	ff ef       	ldi	r31, 0xFF	; 255
				
				strncpy((char*)esp8266_received_data,"  ",2);
				
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
				for(int i=0; i<MAX_USER_COUNT;i++)
     f22:	ef 1a       	sub	r14, r31
     f24:	ff 0a       	sbc	r15, r31
     f26:	0b 5f       	subi	r16, 0xFB	; 251
     f28:	1f 4f       	sbci	r17, 0xFF	; 255
     f2a:	84 e1       	ldi	r24, 0x14	; 20
     f2c:	e8 16       	cp	r14, r24
     f2e:	f1 04       	cpc	r15, r1
     f30:	d9 f6       	brne	.-74     	; 0xee8 <RC522_data_state_check_and_actuate+0xb6>
     f32:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <rfid_user_flag>
					//else rfid_user_flag=0;//모두 꽉 차 있음.
					
				}
				
				
				if(rfid_user_flag){//DB에 uid가 존재할뿐더러, 최초 입장시에만 해당 구문을 들어감. 이후에는 인식안됨.
     f36:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <rfid_user_flag+0x1>
     f3a:	89 2b       	or	r24, r25
     f3c:	09 f4       	brne	.+2      	; 0xf40 <RC522_data_state_check_and_actuate+0x10e>
     f3e:	7f c0       	rjmp	.+254    	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
     f40:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <rfid_user_count_pointer>
					strcpy((char*)rfid_user_uid_buffer[rfid_user_count_pointer],(char*)rfid_uid_ch0);
     f44:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <rfid_user_count_pointer+0x1>
     f48:	9c 01       	movw	r18, r24
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
     f4e:	22 0f       	add	r18, r18
     f50:	33 1f       	adc	r19, r19
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	68 e9       	ldi	r22, 0x98	; 152
     f58:	76 e0       	ldi	r23, 0x06	; 6
     f5a:	84 55       	subi	r24, 0x54	; 84
     f5c:	9b 4f       	sbci	r25, 0xFB	; 251
     f5e:	0e 94 34 10 	call	0x2068	; 0x2068 <strcpy>
     f62:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <__data_end>
					
					//사용자 인식이 정상적으로 되면 1회에 한해서 증가시킴.
					if(user_count<MAX_USER_COUNT)user_count++; //단, 주차장 최대 수용 수 보다는 작아야 함.
     f66:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <__data_end+0x1>
     f6a:	84 31       	cpi	r24, 0x14	; 20
     f6c:	91 05       	cpc	r25, r1
     f6e:	2c f4       	brge	.+10     	; 0xf7a <RC522_data_state_check_and_actuate+0x148>
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <__data_end+0x1>
     f76:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <__data_end>
     f7a:	84 e1       	ldi	r24, 0x14	; 20
							
					char MAX_USER_COUNT_STR[4];
					char USER_COUNT_STR[4];
					strcpy(MAX_USER_COUNT_STR,IntToString((int)MAX_USER_COUNT));
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	1c d7       	rcall	.+3640   	; 0x1db8 <IntToString>
     f80:	bc 01       	movw	r22, r24
     f82:	ce 01       	movw	r24, r28
     f84:	49 96       	adiw	r24, 0x19	; 25
     f86:	0e 94 34 10 	call	0x2068	; 0x2068 <strcpy>
     f8a:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <__data_end>
					strcpy(USER_COUNT_STR,IntToString((int)MAX_USER_COUNT-user_count));
     f8e:	30 91 97 04 	lds	r19, 0x0497	; 0x800497 <__data_end+0x1>
     f92:	84 e1       	ldi	r24, 0x14	; 20
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	82 1b       	sub	r24, r18
     f98:	93 0b       	sbc	r25, r19
     f9a:	0e d7       	rcall	.+3612   	; 0x1db8 <IntToString>
     f9c:	bc 01       	movw	r22, r24
     f9e:	ce 01       	movw	r24, r28
     fa0:	45 96       	adiw	r24, 0x15	; 21
     fa2:	0e 94 34 10 	call	0x2068	; 0x2068 <strcpy>
     fa6:	8e e0       	ldi	r24, 0x0E	; 14
					
					char empty_space_str[20]="Empty Space=[";
     fa8:	ea e1       	ldi	r30, 0x1A	; 26
     faa:	f1 e0       	ldi	r31, 0x01	; 1
     fac:	8e 01       	movw	r16, r28
     fae:	0f 5f       	subi	r16, 0xFF	; 255
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	d8 01       	movw	r26, r16
     fb4:	01 90       	ld	r0, Z+
     fb6:	0d 92       	st	X+, r0
     fb8:	8a 95       	dec	r24
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <RC522_data_state_check_and_actuate+0x182>
     fbc:	fe 01       	movw	r30, r28
     fbe:	3f 96       	adiw	r30, 0x0f	; 15
     fc0:	86 e0       	ldi	r24, 0x06	; 6
     fc2:	df 01       	movw	r26, r30
     fc4:	1d 92       	st	X+, r1
     fc6:	8a 95       	dec	r24
     fc8:	e9 f7       	brne	.-6      	; 0xfc4 <RC522_data_state_check_and_actuate+0x192>
     fca:	be 01       	movw	r22, r28
					strcat((char*)empty_space_str,USER_COUNT_STR);
     fcc:	6b 5e       	subi	r22, 0xEB	; 235
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	c8 01       	movw	r24, r16
     fd2:	0e 94 20 10 	call	0x2040	; 0x2040 <strcat>
     fd6:	f8 01       	movw	r30, r16
					strcat((char*)empty_space_str,"/");
     fd8:	01 90       	ld	r0, Z+
     fda:	00 20       	and	r0, r0
     fdc:	e9 f7       	brne	.-6      	; 0xfd8 <RC522_data_state_check_and_actuate+0x1a6>
     fde:	31 97       	sbiw	r30, 0x01	; 1
     fe0:	8f e2       	ldi	r24, 0x2F	; 47
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	80 83       	st	Z, r24
     fe8:	be 01       	movw	r22, r28
					strcat((char*)empty_space_str,MAX_USER_COUNT_STR);
     fea:	67 5e       	subi	r22, 0xE7	; 231
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	c8 01       	movw	r24, r16
     ff0:	0e 94 20 10 	call	0x2040	; 0x2040 <strcat>
     ff4:	f8 01       	movw	r30, r16
					strcat((char*)empty_space_str,"]");
     ff6:	01 90       	ld	r0, Z+
     ff8:	00 20       	and	r0, r0
     ffa:	e9 f7       	brne	.-6      	; 0xff6 <RC522_data_state_check_and_actuate+0x1c4>
     ffc:	31 97       	sbiw	r30, 0x01	; 1
     ffe:	8d e5       	ldi	r24, 0x5D	; 93
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	91 83       	std	Z+1, r25	; 0x01
    1004:	80 83       	st	Z, r24
    1006:	8a e0       	ldi	r24, 0x0A	; 10
// 0~ 180도 까지 설정
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <servo_1_duty_ratio+0x1>
    100e:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <servo_1_duty_ratio>
    1012:	85 e0       	ldi	r24, 0x05	; 5
					
					//서보모터 입구 오픈 코드 작성
					
					//set_gate_state(SERVO_ENTRANCE_GATE,SERVO_GATE_OPEN);
					set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_OPEN); //2 == 딱 중간, 7 == 180도
					start_timer(TICK_ENTRANCE_GATE); //ticktim을 0으로 클리어시킴.
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	f2 de       	rcall	.-540    	; 0xdfc <start_timer>
					logojector_ON();
    1018:	5a de       	rcall	.-844    	; 0xcce <logojector_ON>
    101a:	fc d2       	rcall	.+1528   	; 0x1614 <i2c_lcd_clear>
					
					//LCD ON
					i2c_lcd_clear();
    101c:	4c ec       	ldi	r20, 0xCC	; 204
					i2c_lcd_string(0,0,"Welcome,");
    101e:	52 e0       	ldi	r21, 0x02	; 2
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	e8 d2       	rcall	.+1488   	; 0x15f6 <i2c_lcd_string>
    1026:	4c e7       	ldi	r20, 0x7C	; 124
					i2c_lcd_string(1,0,(char*)esp8266_received_data);
    1028:	55 e0       	ldi	r21, 0x05	; 5
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	e3 d2       	rcall	.+1478   	; 0x15f6 <i2c_lcd_string>
					i2c_lcd_string(2,0,(char*)empty_space_str);
    1030:	a8 01       	movw	r20, r16
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	df d2       	rcall	.+1470   	; 0x15f6 <i2c_lcd_string>
    1038:	82 e0       	ldi	r24, 0x02	; 2
					setSoundClip(BUZZ_SUCCESS);
    103a:	b8 de       	rcall	.-656    	; 0xdac <setSoundClip>
    103c:	67 c0       	rjmp	.+206    	; 0x110c <__stack+0xd>
    103e:	8a e0       	ldi	r24, 0x0A	; 10
// 0~ 180도 까지 설정
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <servo_1_duty_ratio+0x1>
    1046:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <servo_1_duty_ratio>
				else {//한 번 초과로 인식시켰을 때 지나는 구문
					
					//서보모터 입구 오픈 코드 작성
					
					set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_OPEN); //2 == 딱 중간, 7 == 180도
					start_timer(TICK_ENTRANCE_GATE); //ticktim을 0으로 클리어시킴.
    104a:	85 e0       	ldi	r24, 0x05	; 5
    104c:	90 e0       	ldi	r25, 0x00	; 0
					logojector_ON();
    104e:	d6 de       	rcall	.-596    	; 0xdfc <start_timer>
					//LCD ON
					i2c_lcd_clear();  
    1050:	3e de       	rcall	.-900    	; 0xcce <logojector_ON>
    1052:	e0 d2       	rcall	.+1472   	; 0x1614 <i2c_lcd_clear>
					i2c_lcd_string(0,0,"Welcome,");
    1054:	4c ec       	ldi	r20, 0xCC	; 204
    1056:	52 e0       	ldi	r21, 0x02	; 2
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	80 e0       	ldi	r24, 0x00	; 0
					i2c_lcd_string(1,2,(char*)esp8266_received_data);
    105c:	cc d2       	rcall	.+1432   	; 0x15f6 <i2c_lcd_string>
    105e:	4c e7       	ldi	r20, 0x7C	; 124
    1060:	55 e0       	ldi	r21, 0x05	; 5
    1062:	62 e0       	ldi	r22, 0x02	; 2
					i2c_lcd_string(2,0,"Already Recognized");
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	c7 d2       	rcall	.+1422   	; 0x15f6 <i2c_lcd_string>
    1068:	45 ed       	ldi	r20, 0xD5	; 213
    106a:	52 e0       	ldi	r21, 0x02	; 2
    106c:	60 e0       	ldi	r22, 0x00	; 0
					
					setSoundClip(BUZZ_SUCCESS);
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	c2 d2       	rcall	.+1412   	; 0x15f6 <i2c_lcd_string>
    1072:	82 e0       	ldi	r24, 0x02	; 2
				}
			}//if(esp8266_received_data[0]=='O') end
			else if(esp8266_received_data[0]!='O') 
			{
				start_timer(TICK_LCD);
    1074:	9b de       	rcall	.-714    	; 0xdac <setSoundClip>
    1076:	4a c0       	rjmp	.+148    	; 0x110c <__stack+0xd>
    1078:	83 e0       	ldi	r24, 0x03	; 3
    107a:	90 e0       	ldi	r25, 0x00	; 0
				setSoundClip(BUZZ_NOT_REGISTERED);
    107c:	bf de       	rcall	.-642    	; 0xdfc <start_timer>
    107e:	83 e0       	ldi	r24, 0x03	; 3
				
				i2c_lcd_clear();
    1080:	95 de       	rcall	.-726    	; 0xdac <setSoundClip>
    1082:	c8 d2       	rcall	.+1424   	; 0x1614 <i2c_lcd_clear>
				i2c_lcd_string(0,0,"Sorry,");
    1084:	48 ee       	ldi	r20, 0xE8	; 232
    1086:	52 e0       	ldi	r21, 0x02	; 2
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	b4 d2       	rcall	.+1384   	; 0x15f6 <i2c_lcd_string>
    108e:	4f ee       	ldi	r20, 0xEF	; 239
				i2c_lcd_string(1,2,"This card is");
    1090:	52 e0       	ldi	r21, 0x02	; 2
    1092:	62 e0       	ldi	r22, 0x02	; 2
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	af d2       	rcall	.+1374   	; 0x15f6 <i2c_lcd_string>
    1098:	4c ef       	ldi	r20, 0xFC	; 252
				i2c_lcd_string(2,2,"not registered.");
    109a:	52 e0       	ldi	r21, 0x02	; 2
    109c:	62 e0       	ldi	r22, 0x02	; 2
    109e:	82 e0       	ldi	r24, 0x02	; 2
    10a0:	aa d2       	rcall	.+1364   	; 0x15f6 <i2c_lcd_string>
    10a2:	34 c0       	rjmp	.+104    	; 0x110c <__stack+0xd>
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	91 f5       	brne	.+100    	; 0x110c <__stack+0xd>
			
			//LCD 뷰어 및 5초 카운트 후 다시 리셋
			
		}//if(toggle==ENTRANCE_GATE) end
		
		else if((*tggl)==EXIT_GATE)
    10a8:	0c ea       	ldi	r16, 0xAC	; 172
    10aa:	14 e0       	ldi	r17, 0x04	; 4
    10ac:	0f 2e       	mov	r0, r31
    10ae:	f0 e1       	ldi	r31, 0x10	; 16
    10b0:	ef 2e       	mov	r14, r31
    10b2:	f5 e0       	ldi	r31, 0x05	; 5
    10b4:	ff 2e       	mov	r15, r31
    10b6:	f0 2d       	mov	r31, r0
    10b8:	0f 2e       	mov	r0, r31
    10ba:	fa e0       	ldi	r31, 0x0A	; 10
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
	else if(ch==SERVO_EXIT_GATE)servo_2_duty_ratio=_offset+angle_state;
    10bc:	cf 2e       	mov	r12, r31
    10be:	d1 2c       	mov	r13, r1
    10c0:	f0 2d       	mov	r31, r0
    10c2:	6a ea       	ldi	r22, 0xAA	; 170
    10c4:	76 e0       	ldi	r23, 0x06	; 6
			//구현안하기로 함
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			for(int i=0; i<MAX_USER_COUNT;i++)
			{
				if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch1)==0){//출구에서 찍은 카드가 이용객 버퍼에 존재한다면
    10c6:	c8 01       	movw	r24, r16
    10c8:	c6 d7       	rcall	.+3980   	; 0x2056 <strcmp>
    10ca:	89 2b       	or	r24, r25
    10cc:	d1 f4       	brne	.+52     	; 0x1102 <__stack+0x3>
    10ce:	85 e0       	ldi	r24, 0x05	; 5
    10d0:	e1 e6       	ldi	r30, 0x61	; 97
    10d2:	f3 e0       	ldi	r31, 0x03	; 3
					strcpy((char*)rfid_user_uid_buffer[i],"0000");
    10d4:	d8 01       	movw	r26, r16
    10d6:	01 90       	ld	r0, Z+
    10d8:	0d 92       	st	X+, r0
    10da:	8a 95       	dec	r24
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <__DATA_REGION_LENGTH__+0xd6>
    10de:	80 91 96 04 	lds	r24, 0x0496	; 0x800496 <__data_end>
					//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
					user_count--; //이용자 카운트를 감소시킴.
    10e2:	90 91 97 04 	lds	r25, 0x0497	; 0x800497 <__data_end+0x1>
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	90 93 97 04 	sts	0x0497, r25	; 0x800497 <__data_end+0x1>
    10ec:	80 93 96 04 	sts	0x0496, r24	; 0x800496 <__data_end>
    10f0:	d0 92 c1 06 	sts	0x06C1, r13	; 0x8006c1 <servo_2_duty_ratio+0x1>
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
	else if(ch==SERVO_EXIT_GATE)servo_2_duty_ratio=_offset+angle_state;
    10f4:	c0 92 c0 06 	sts	0x06C0, r12	; 0x8006c0 <servo_2_duty_ratio>
    10f8:	84 e0       	ldi	r24, 0x04	; 4
					//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
					user_count--; //이용자 카운트를 감소시킴.
					
					//출구 서보모터 동작 코드
					set_servo(SERVO_EXIT_GATE,SERVO_GATE_OPEN); //3 == 딱 중간, 7 == 180도
					start_timer(TICK_EXIT_GATE); //틱 활성화 및 카운트 시작
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	7f de       	rcall	.-770    	; 0xdfc <start_timer>
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	55 de       	rcall	.-854    	; 0xdac <setSoundClip>
					
					//수정요청(멜로디)
					setSoundClip(BUZZ_SUCCESS);
    1102:	0b 5f       	subi	r16, 0xFB	; 251
    1104:	1f 4f       	sbci	r17, 0xFF	; 255
    1106:	e0 16       	cp	r14, r16
    1108:	f1 06       	cpc	r15, r17
    110a:	d9 f6       	brne	.-74     	; 0x10c2 <__DATA_REGION_LENGTH__+0xc2>
		{
			//esp8266에 uid와 출구게이트 정보 전송 함수
			//구현안하기로 함
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			for(int i=0; i<MAX_USER_COUNT;i++)
    110c:	10 92 a8 06 	sts	0x06A8, r1	; 0x8006a8 <received_state>
    1110:	6c 96       	adiw	r28, 0x1c	; 28
		//i2c_lcd_string(1,2,esp8266_received_data);
		i2c_lcd_string(2,0,"Plz, Re-tagging. ");
		
	}
	
	received_state=RECEIVE_NONE;
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
}
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	08 95       	ret

0000112e <systems_init>:
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
		//else if(received_state==RECEIVE_FAIL); 
		
    }
}

void systems_init(void){
    1134:	df 93       	push	r29
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	64 97       	sbiw	r28, 0x14	; 20
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
	sei();
    1146:	78 94       	sei
	//DDRA|=0x03; //test Port
	//0~3번비트	: 스테핑모터 제어
	//DDRA=0x0f;
	//PA0, PA3 : 각각 서보모터 제어핀
	DDRA = (1<<DDRA0)|(1<<DDRA3);
    1148:	89 e0       	ldi	r24, 0x09	; 9
    114a:	8a bb       	out	0x1a, r24	; 26
	//4번비트	: 릴레이스위치
	DDRC |= (1<<DDRC4);
    114c:	a4 9a       	sbi	0x14, 4	; 20
	cli(); //전역 인터럽트 해제
    114e:	f8 94       	cli
	
	timer0_init();
    1150:	b2 d5       	rcall	.+2916   	; 0x1cb6 <timer0_init>
	timer1_init();
    1152:	ba d5       	rcall	.+2932   	; 0x1cc8 <timer1_init>
	timer3_init();
    1154:	c7 d5       	rcall	.+2958   	; 0x1ce4 <timer3_init>
	
	tick_enable(TICK_TIMEOUT);
    1156:	86 e0       	ldi	r24, 0x06	; 6
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	cd dd       	rcall	.-1126   	; 0xcf6 <tick_enable>
    115c:	78 94       	sei
	
	sei(); //전역 인터럽트 허용
    115e:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <TICK>
	TICK.tick_1ms=0;
    1162:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <TICK+0x1>
    1166:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <TICK+0x2>
    116a:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <TICK+0x3>
	//사용하는 기능들 초기화 작업
	
	logojector_OFF();
    116e:	b1 dd       	rcall	.-1182   	; 0xcd2 <logojector_OFF>
	uart_init(0,BAUD_9600); //debug channel
    1170:	60 e8       	ldi	r22, 0x80	; 128
    1172:	75 e2       	ldi	r23, 0x25	; 37
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	ca d5       	rcall	.+2964   	; 0x1d0e <uart_init>
	uart_init(1,BAUD_9600);//esp8266() : Rx:PD2, Tx:PD3
    117a:	60 e8       	ldi	r22, 0x80	; 128
    117c:	75 e2       	ldi	r23, 0x25	; 37
    117e:	81 e0       	ldi	r24, 0x01	; 1
	#if MOTOR_DEBUG_WITHOUT_ANOTHER_SENSOR
		mfrc522_init(CH0);
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	c5 d5       	rcall	.+2954   	; 0x1d0e <uart_init>
		mfrc522_init(CH1);
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	2a d4       	rcall	.+2132   	; 0x19dc <mfrc522_init>
    1188:	81 e0       	ldi	r24, 0x01	; 1
		i2c_lcd_init();
    118a:	28 d4       	rcall	.+2128   	; 0x19dc <mfrc522_init>
	
	
		i2c_lcd_string(0,0,"====================");
    118c:	a9 d1       	rcall	.+850    	; 0x14e0 <i2c_lcd_init>
    118e:	4c e0       	ldi	r20, 0x0C	; 12
    1190:	53 e0       	ldi	r21, 0x03	; 3
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	80 e0       	ldi	r24, 0x00	; 0
		i2c_lcd_string(1,0,"  SYSTEM BOOTING...");
    1196:	2f d2       	rcall	.+1118   	; 0x15f6 <i2c_lcd_string>
    1198:	41 e2       	ldi	r20, 0x21	; 33
    119a:	53 e0       	ldi	r21, 0x03	; 3
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
		i2c_lcd_string(2,0,"     __________     ");
    11a0:	2a d2       	rcall	.+1108   	; 0x15f6 <i2c_lcd_string>
    11a2:	45 e3       	ldi	r20, 0x35	; 53
    11a4:	53 e0       	ldi	r21, 0x03	; 3
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	25 d2       	rcall	.+1098   	; 0x15f6 <i2c_lcd_string>
		i2c_lcd_string(3,0,"====================");
    11ac:	4c e0       	ldi	r20, 0x0C	; 12
    11ae:	53 e0       	ldi	r21, 0x03	; 3
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	83 e0       	ldi	r24, 0x03	; 3
    11b4:	20 d2       	rcall	.+1088   	; 0x15f6 <i2c_lcd_string>
		setSoundClip(BUZZ_ON);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	f9 dd       	rcall	.-1038   	; 0xdac <setSoundClip>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11ba:	2f ef       	ldi	r18, 0xFF	; 255
    11bc:	81 e1       	ldi	r24, 0x11	; 17
    11be:	9a e7       	ldi	r25, 0x7A	; 122
    11c0:	21 50       	subi	r18, 0x01	; 1
    11c2:	80 40       	sbci	r24, 0x00	; 0
    11c4:	90 40       	sbci	r25, 0x00	; 0
    11c6:	e1 f7       	brne	.-8      	; 0x11c0 <systems_init+0x92>
    11c8:	00 c0       	rjmp	.+0      	; 0x11ca <systems_init+0x9c>
		_delay_ms(2500);
	
		//로딩 시작. RFID모듈체크, ESP8266 연결 체크
	
		mfrc522_version_check(CH0);
    11ca:	00 00       	nop
    11cc:	80 e0       	ldi	r24, 0x00	; 0
		mfrc522_IRQ_enable(CH0);
    11ce:	4e d4       	rcall	.+2204   	; 0x1a6c <mfrc522_version_check>
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	a2 d4       	rcall	.+2372   	; 0x1b18 <mfrc522_IRQ_enable>
		mfrc522_version_check(CH1);
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	4a d4       	rcall	.+2196   	; 0x1a6c <mfrc522_version_check>
    11d8:	81 e0       	ldi	r24, 0x01	; 1
		mfrc522_IRQ_enable(CH1);
    11da:	9e d4       	rcall	.+2364   	; 0x1b18 <mfrc522_IRQ_enable>
    11dc:	2a e4       	ldi	r18, 0x4A	; 74
    11de:	33 e0       	ldi	r19, 0x03	; 3
		esp8266_init((unsigned char*)SSID,(unsigned char*)PASSWORD,(unsigned char*)IP,(unsigned char*)PORT);
    11e0:	4d e4       	ldi	r20, 0x4D	; 77
    11e2:	53 e0       	ldi	r21, 0x03	; 3
    11e4:	69 e5       	ldi	r22, 0x59	; 89
    11e6:	73 e0       	ldi	r23, 0x03	; 3
    11e8:	86 e6       	ldi	r24, 0x66	; 102
    11ea:	93 e0       	ldi	r25, 0x03	; 3
    11ec:	99 dc       	rcall	.-1742   	; 0xb20 <esp8266_init>
    11ee:	8d d9       	rcall	.-3302   	; 0x50a <rfid_user_uid_buffer_init>
    11f0:	8f e0       	ldi	r24, 0x0F	; 15
    11f2:	ee e2       	ldi	r30, 0x2E	; 46
		rfid_user_uid_buffer_init();
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	8e 01       	movw	r16, r28
	
		char version_buf[20] = " Firmware Ver ";
    11f8:	0f 5f       	subi	r16, 0xFF	; 255
    11fa:	1f 4f       	sbci	r17, 0xFF	; 255
    11fc:	d8 01       	movw	r26, r16
    11fe:	01 90       	ld	r0, Z+
    1200:	0d 92       	st	X+, r0
    1202:	8a 95       	dec	r24
    1204:	e1 f7       	brne	.-8      	; 0x11fe <systems_init+0xd0>
    1206:	fe 01       	movw	r30, r28
    1208:	70 96       	adiw	r30, 0x10	; 16
    120a:	85 e0       	ldi	r24, 0x05	; 5
    120c:	df 01       	movw	r26, r30
    120e:	1d 92       	st	X+, r1
    1210:	8a 95       	dec	r24
    1212:	e9 f7       	brne	.-6      	; 0x120e <systems_init+0xe0>
    1214:	d8 01       	movw	r26, r16
    1216:	0d 90       	ld	r0, X+
    1218:	00 20       	and	r0, r0
		strcat(version_buf,(const char*)FIRMWARE_VERSION);
    121a:	e9 f7       	brne	.-6      	; 0x1216 <systems_init+0xe8>
    121c:	11 97       	sbiw	r26, 0x01	; 1
    121e:	86 e0       	ldi	r24, 0x06	; 6
    1220:	ed e6       	ldi	r30, 0x6D	; 109
    1222:	f3 e0       	ldi	r31, 0x03	; 3
    1224:	01 90       	ld	r0, Z+
    1226:	0d 92       	st	X+, r0
    1228:	8a 95       	dec	r24
    122a:	e1 f7       	brne	.-8      	; 0x1224 <systems_init+0xf6>
		i2c_lcd_string(0,0,"====================");
    122c:	4c e0       	ldi	r20, 0x0C	; 12
    122e:	53 e0       	ldi	r21, 0x03	; 3
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	e0 d1       	rcall	.+960    	; 0x15f6 <i2c_lcd_string>
    1236:	43 e7       	ldi	r20, 0x73	; 115
		i2c_lcd_string(1,0,"  Parking System    ");
    1238:	53 e0       	ldi	r21, 0x03	; 3
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	db d1       	rcall	.+950    	; 0x15f6 <i2c_lcd_string>
		i2c_lcd_string(2,0, version_buf);
    1240:	a8 01       	movw	r20, r16
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	82 e0       	ldi	r24, 0x02	; 2
    1246:	d7 d1       	rcall	.+942    	; 0x15f6 <i2c_lcd_string>
    1248:	4c e0       	ldi	r20, 0x0C	; 12
		i2c_lcd_string(3,0,"====================");
    124a:	53 e0       	ldi	r21, 0x03	; 3
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	83 e0       	ldi	r24, 0x03	; 3
    1250:	d2 d1       	rcall	.+932    	; 0x15f6 <i2c_lcd_string>
    1252:	85 e0       	ldi	r24, 0x05	; 5
    1254:	ab dd       	rcall	.-1194   	; 0xdac <setSoundClip>
		setSoundClip(BUZZ_ESP8266_CONNECTED);
    1256:	bf ef       	ldi	r27, 0xFF	; 255
    1258:	27 ea       	ldi	r18, 0xA7	; 167
    125a:	81 e6       	ldi	r24, 0x61	; 97
    125c:	b1 50       	subi	r27, 0x01	; 1
    125e:	20 40       	sbci	r18, 0x00	; 0
    1260:	80 40       	sbci	r24, 0x00	; 0
    1262:	e1 f7       	brne	.-8      	; 0x125c <systems_init+0x12e>
    1264:	00 c0       	rjmp	.+0      	; 0x1266 <systems_init+0x138>
    1266:	00 00       	nop
    1268:	d5 d1       	rcall	.+938    	; 0x1614 <i2c_lcd_clear>
    126a:	d5 d0       	rcall	.+426    	; 0x1416 <i2c_lcd_noBacklight>
    126c:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <timeout_tick_enable_flag+0x1>
		//main loop start.
		_delay_ms(2000);
		i2c_lcd_clear();
    1270:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <timeout_tick_enable_flag>
		i2c_lcd_noBacklight();
    1274:	64 96       	adiw	r28, 0x14	; 20
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
		 case TICK_EXIT_GATE: exit_gate_tick_enable_flag=0; break;
		 case TICK_ENTRANCE_GATE: entrance_gate_tick_enable_flag=0; break;
		 case TICK_TIMEOUT: timeout_tick_enable_flag=0; break;	  
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	f8 94       	cli
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	0f be       	out	0x3f, r0	; 63
		i2c_lcd_clear();
		i2c_lcd_noBacklight();
	#endif
	tick_disable(TICK_TIMEOUT);
	
}
    127e:	cd bf       	out	0x3d, r28	; 61
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	08 95       	ret

0000128a <main>:
    128a:	51 df       	rcall	.-350    	; 0x112e <systems_init>
    128c:	85 e0       	ldi	r24, 0x05	; 5
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	90 93 c1 06 	sts	0x06C1, r25	; 0x8006c1 <servo_2_duty_ratio+0x1>
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
	else if(ch==SERVO_EXIT_GATE)servo_2_duty_ratio=_offset+angle_state;
    1294:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <servo_2_duty_ratio>
// 0~ 180도 까지 설정
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
    1298:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <servo_1_duty_ratio+0x1>
    129c:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <servo_1_duty_ratio>
    12a0:	2f ef       	ldi	r18, 0xFF	; 255
    12a2:	89 e6       	ldi	r24, 0x69	; 105
    12a4:	98 e1       	ldi	r25, 0x18	; 24
    12a6:	21 50       	subi	r18, 0x01	; 1
    12a8:	80 40       	sbci	r24, 0x00	; 0
    12aa:	90 40       	sbci	r25, 0x00	; 0
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <main+0x1c>
    12ae:	00 c0       	rjmp	.+0      	; 0x12b0 <main+0x26>
    12b0:	00 00       	nop

	set_servo(SERVO_EXIT_GATE,SERVO_GATE_CLOSE);
	set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_CLOSE);
	//set_servo_angle(SERVO_CH_1,SERVO_ANGLE_0);
	_delay_ms(500);
 	servo_release(SERVO_CH_0);
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0f dd       	rcall	.-1506   	; 0xcd6 <servo_release>
 	servo_release(SERVO_CH_1);
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0c dd       	rcall	.-1512   	; 0xcd6 <servo_release>
	
	
	
	
	//dummy
	DDRA|=0x80;
    12be:	d7 9a       	sbi	0x1a, 7	; 26
		RC522_data_state_check_and_actuate(&toggle);
		
		//입장 시, 확인이 성공된 유저의 경우
		if(logojector_tick_enable_flag)
		{
				if(TICK.logojector_tick_1ms>30000)
    12c0:	c4 ec       	ldi	r28, 0xC4	; 196
    12c2:	d6 e0       	ldi	r29, 0x06	; 6
// 0~ 180도 까지 설정
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
    12c4:	05 e0       	ldi	r16, 0x05	; 5
		//setSoundClip(BUZZ_ON);
		
		//to use 2 RFID channels
		static char toggle=0; 
		//every 100ms, return RFID Reader state
		RC522_data_request_per_100ms(&toggle);
    12c6:	10 e0       	ldi	r17, 0x00	; 0
    12c8:	8e e9       	ldi	r24, 0x9E	; 158
    12ca:	94 e0       	ldi	r25, 0x04	; 4
		RC522_data_state_check_and_actuate(&toggle);
    12cc:	f5 d8       	rcall	.-3606   	; 0x4b8 <RC522_data_request_per_100ms>
    12ce:	8e e9       	ldi	r24, 0x9E	; 158
    12d0:	94 e0       	ldi	r25, 0x04	; 4
    12d2:	af dd       	rcall	.-1186   	; 0xe32 <RC522_data_state_check_and_actuate>
		
		//입장 시, 확인이 성공된 유저의 경우
		if(logojector_tick_enable_flag)
    12d4:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <logojector_tick_enable_flag>
    12d8:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <logojector_tick_enable_flag+0x1>
    12dc:	89 2b       	or	r24, r25
    12de:	91 f0       	breq	.+36     	; 0x1304 <main+0x7a>
		{
				if(TICK.logojector_tick_1ms>30000)
    12e0:	88 85       	ldd	r24, Y+8	; 0x08
    12e2:	99 85       	ldd	r25, Y+9	; 0x09
    12e4:	aa 85       	ldd	r26, Y+10	; 0x0a
    12e6:	bb 85       	ldd	r27, Y+11	; 0x0b
    12e8:	81 33       	cpi	r24, 0x31	; 49
    12ea:	95 47       	sbci	r25, 0x75	; 117
    12ec:	a1 05       	cpc	r26, r1
    12ee:	b1 05       	cpc	r27, r1
				{
					//로고젝터 오프
					logojector_OFF();
    12f0:	48 f0       	brcs	.+18     	; 0x1304 <main+0x7a>
    12f2:	ef dc       	rcall	.-1570   	; 0xcd2 <logojector_OFF>
 }
 
 void tick_disable(int tick_name){
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
    12f4:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <logojector_tick_enable_flag+0x1>
    12f8:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <logojector_tick_enable_flag>
				{
					//로고젝터 오프
					logojector_OFF();
					
					tick_disable(TICK_LOGOJECTOR);
					logojector_tick_enable_flag=STOP_TIMER;
    12fc:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <logojector_tick_enable_flag+0x1>
    1300:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <logojector_tick_enable_flag>
				}
		}
		//명령이 동시에 발생할 때, 백라이트 끄는 함수가 호출되지 않는 상황이 생겼다. 이에 대한 처리코드
		//그냥 구문을 아예 따로 lcd관련해서 timer를 분리하였다.
		if(lcd_tick_enable_flag)
    1304:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <lcd_tick_enable_flag>
    1308:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <lcd_tick_enable_flag+0x1>
    130c:	89 2b       	or	r24, r25
    130e:	91 f0       	breq	.+36     	; 0x1334 <main+0xaa>
		{
			if(TICK.lcd_tick_1ms==12000)
    1310:	8c 85       	ldd	r24, Y+12	; 0x0c
    1312:	9d 85       	ldd	r25, Y+13	; 0x0d
    1314:	ae 85       	ldd	r26, Y+14	; 0x0e
    1316:	bf 85       	ldd	r27, Y+15	; 0x0f
    1318:	80 3e       	cpi	r24, 0xE0	; 224
    131a:	9e 42       	sbci	r25, 0x2E	; 46
    131c:	a1 05       	cpc	r26, r1
    131e:	b1 05       	cpc	r27, r1
			{
				i2c_lcd_noBacklight();
    1320:	49 f4       	brne	.+18     	; 0x1334 <main+0xaa>
    1322:	79 d0       	rcall	.+242    	; 0x1416 <i2c_lcd_noBacklight>
 
 void tick_disable(int tick_name){
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
    1324:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <lcd_tick_enable_flag+0x1>
    1328:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <lcd_tick_enable_flag>
		{
			if(TICK.lcd_tick_1ms==12000)
			{
				i2c_lcd_noBacklight();
				tick_disable(TICK_LCD);
				lcd_tick_enable_flag=STOP_TIMER;
    132c:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <lcd_tick_enable_flag+0x1>
    1330:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <lcd_tick_enable_flag>
			}
		}

		//입구에서 등록된 유저가 카드를 찍었을 때 해당 구문을 돈다.
		if(entrance_gate_tick_enable_flag)
    1334:	80 91 ba 06 	lds	r24, 0x06BA	; 0x8006ba <entrance_gate_tick_enable_flag>
    1338:	90 91 bb 06 	lds	r25, 0x06BB	; 0x8006bb <entrance_gate_tick_enable_flag+0x1>
    133c:	89 2b       	or	r24, r25
    133e:	89 f1       	breq	.+98     	; 0x13a2 <main+0x118>
		{//이미 인식되었던 사람들도 마찬가지 과정을 거침
			
			//가끔 여기 문을 안들어감 뭐가 문젠지는 확인이 안됨. 
			if(TICK.entrance_gate_tick_1ms==1000) servo_release(SERVO_ENTRANCE_GATE);
    1340:	8c 89       	ldd	r24, Y+20	; 0x14
    1342:	9d 89       	ldd	r25, Y+21	; 0x15
    1344:	ae 89       	ldd	r26, Y+22	; 0x16
    1346:	bf 89       	ldd	r27, Y+23	; 0x17
    1348:	88 3e       	cpi	r24, 0xE8	; 232
    134a:	93 40       	sbci	r25, 0x03	; 3
    134c:	a1 05       	cpc	r26, r1
    134e:	b1 05       	cpc	r27, r1
    1350:	21 f4       	brne	.+8      	; 0x135a <main+0xd0>
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	bf dc       	rcall	.-1666   	; 0xcd6 <servo_release>
    1358:	24 c0       	rjmp	.+72     	; 0x13a2 <main+0x118>
			else if(TICK.entrance_gate_tick_1ms==10000)//10초
    135a:	8c 89       	ldd	r24, Y+20	; 0x14
    135c:	9d 89       	ldd	r25, Y+21	; 0x15
    135e:	ae 89       	ldd	r26, Y+22	; 0x16
    1360:	bf 89       	ldd	r27, Y+23	; 0x17
    1362:	80 31       	cpi	r24, 0x10	; 16
    1364:	97 42       	sbci	r25, 0x27	; 39
    1366:	a1 05       	cpc	r26, r1
    1368:	b1 05       	cpc	r27, r1
			{
				//수정희망(멜로디 변경)
				setSoundClip(BUZZ_ESP8266_CONNECTED);
    136a:	39 f4       	brne	.+14     	; 0x137a <main+0xf0>
    136c:	85 e0       	ldi	r24, 0x05	; 5
    136e:	1e dd       	rcall	.-1476   	; 0xdac <setSoundClip>
// 0~ 180도 까지 설정
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
    1370:	10 93 b1 05 	sts	0x05B1, r17	; 0x8005b1 <servo_1_duty_ratio+0x1>
    1374:	00 93 b0 05 	sts	0x05B0, r16	; 0x8005b0 <servo_1_duty_ratio>
    1378:	14 c0       	rjmp	.+40     	; 0x13a2 <main+0x118>
				//수정희망(멜로디 변경)
				setSoundClip(BUZZ_ESP8266_CONNECTED);
				//입구 서보모터 닫는 명령
				set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_CLOSE);
			}
			else if(TICK.entrance_gate_tick_1ms==12000)
    137a:	8c 89       	ldd	r24, Y+20	; 0x14
    137c:	9d 89       	ldd	r25, Y+21	; 0x15
    137e:	ae 89       	ldd	r26, Y+22	; 0x16
    1380:	bf 89       	ldd	r27, Y+23	; 0x17
    1382:	80 3e       	cpi	r24, 0xE0	; 224
    1384:	9e 42       	sbci	r25, 0x2E	; 46
    1386:	a1 05       	cpc	r26, r1
    1388:	b1 05       	cpc	r27, r1
			{//12초
				
				servo_release(SERVO_ENTRANCE_GATE);
    138a:	59 f4       	brne	.+22     	; 0x13a2 <main+0x118>
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	a2 dc       	rcall	.-1724   	; 0xcd6 <servo_release>
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
		 case TICK_EXIT_GATE: exit_gate_tick_enable_flag=0; break;
		 case TICK_ENTRANCE_GATE: entrance_gate_tick_enable_flag=0; break;
    1392:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <entrance_gate_tick_enable_flag+0x1>
    1396:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <entrance_gate_tick_enable_flag>
			else if(TICK.entrance_gate_tick_1ms==12000)
			{//12초
				
				servo_release(SERVO_ENTRANCE_GATE);
				tick_disable(TICK_ENTRANCE_GATE);
				entrance_gate_tick_enable_flag=STOP_TIMER;
    139a:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <entrance_gate_tick_enable_flag+0x1>
    139e:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <entrance_gate_tick_enable_flag>
				
				//입구 서보모터 릴리즈	
			}
			
		}
		if (exit_gate_tick_enable_flag)
    13a2:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <exit_gate_tick_enable_flag>
    13a6:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <exit_gate_tick_enable_flag+0x1>
    13aa:	89 2b       	or	r24, r25
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <main+0x126>
    13ae:	8c cf       	rjmp	.-232    	; 0x12c8 <main+0x3e>
		{

			if(TICK.exit_gate_tick_1ms==1000) servo_release(SERVO_EXIT_GATE);
    13b0:	88 89       	ldd	r24, Y+16	; 0x10
    13b2:	99 89       	ldd	r25, Y+17	; 0x11
    13b4:	aa 89       	ldd	r26, Y+18	; 0x12
    13b6:	bb 89       	ldd	r27, Y+19	; 0x13
    13b8:	88 3e       	cpi	r24, 0xE8	; 232
    13ba:	93 40       	sbci	r25, 0x03	; 3
    13bc:	a1 05       	cpc	r26, r1
    13be:	b1 05       	cpc	r27, r1
    13c0:	21 f4       	brne	.+8      	; 0x13ca <main+0x140>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	87 dc       	rcall	.-1778   	; 0xcd6 <servo_release>
			else if(TICK.exit_gate_tick_1ms==10000)//5초
    13c8:	7f cf       	rjmp	.-258    	; 0x12c8 <main+0x3e>
    13ca:	88 89       	ldd	r24, Y+16	; 0x10
    13cc:	99 89       	ldd	r25, Y+17	; 0x11
    13ce:	aa 89       	ldd	r26, Y+18	; 0x12
    13d0:	bb 89       	ldd	r27, Y+19	; 0x13
    13d2:	80 31       	cpi	r24, 0x10	; 16
    13d4:	97 42       	sbci	r25, 0x27	; 39
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
			{
				//수정희망(멜로디 변경)
				setSoundClip(BUZZ_ESP8266_CONNECTED);
    13da:	39 f4       	brne	.+14     	; 0x13ea <main+0x160>
    13dc:	85 e0       	ldi	r24, 0x05	; 5
    13de:	e6 dc       	rcall	.-1588   	; 0xdac <setSoundClip>
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
	else if(ch==SERVO_EXIT_GATE)servo_2_duty_ratio=_offset+angle_state;
    13e0:	10 93 c1 06 	sts	0x06C1, r17	; 0x8006c1 <servo_2_duty_ratio+0x1>
    13e4:	00 93 c0 06 	sts	0x06C0, r16	; 0x8006c0 <servo_2_duty_ratio>
    13e8:	6f cf       	rjmp	.-290    	; 0x12c8 <main+0x3e>
				//수정희망(멜로디 변경)
				setSoundClip(BUZZ_ESP8266_CONNECTED);
				//출구 서보모터 닫는 명령
				set_servo(SERVO_EXIT_GATE,SERVO_GATE_CLOSE);
			}
			else if(TICK.exit_gate_tick_1ms==12000){//10초
    13ea:	88 89       	ldd	r24, Y+16	; 0x10
    13ec:	99 89       	ldd	r25, Y+17	; 0x11
    13ee:	aa 89       	ldd	r26, Y+18	; 0x12
    13f0:	bb 89       	ldd	r27, Y+19	; 0x13
    13f2:	80 3e       	cpi	r24, 0xE0	; 224
    13f4:	9e 42       	sbci	r25, 0x2E	; 46
    13f6:	a1 05       	cpc	r26, r1
    13f8:	b1 05       	cpc	r27, r1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <main+0x174>
				//10초가 지나면 화면 클리어시키고, 백라이트 꺼줌
				//i2c_lcd_noBacklight();
				
				//출구 서보모터 릴리즈
				servo_release(SERVO_EXIT_GATE);
    13fc:	65 cf       	rjmp	.-310    	; 0x12c8 <main+0x3e>
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	69 dc       	rcall	.-1838   	; 0xcd6 <servo_release>
 void tick_disable(int tick_name){
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
		 case TICK_EXIT_GATE: exit_gate_tick_enable_flag=0; break;
    1404:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <exit_gate_tick_enable_flag+0x1>
    1408:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <exit_gate_tick_enable_flag>
				//i2c_lcd_noBacklight();
				
				//출구 서보모터 릴리즈
				servo_release(SERVO_EXIT_GATE);
				tick_disable(TICK_EXIT_GATE);
				exit_gate_tick_enable_flag=STOP_TIMER;
    140c:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <exit_gate_tick_enable_flag+0x1>
    1410:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <exit_gate_tick_enable_flag>
    1414:	59 cf       	rjmp	.-334    	; 0x12c8 <main+0x3e>

00001416 <i2c_lcd_noBacklight>:
			
			while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
	}
}
void i2c_lcd_command_8(uint8_t command)
{
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	00 d0       	rcall	.+0      	; 0x141c <i2c_lcd_noBacklight+0x6>
    141c:	00 d0       	rcall	.+0      	; 0x141e <i2c_lcd_noBacklight+0x8>
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	84 e0       	ldi	r24, 0x04	; 4
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	1a 82       	std	Y+2, r1	; 0x02
    1428:	84 e1       	ldi	r24, 0x14	; 20
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	80 e1       	ldi	r24, 0x10	; 16
    142e:	8c 83       	std	Y+4, r24	; 0x04
    1430:	44 e0       	ldi	r20, 0x04	; 4
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	be 01       	movw	r22, r28
    1436:	6f 5f       	subi	r22, 0xFF	; 255
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    143e:	4a d1       	rcall	.+660    	; 0x16d4 <i2c_transmit>
    1440:	81 11       	cpse	r24, r1
    1442:	f6 cf       	rjmp	.-20     	; 0x1430 <i2c_lcd_noBacklight+0x1a>
    1444:	8f e3       	ldi	r24, 0x3F	; 63
    1446:	9c e9       	ldi	r25, 0x9C	; 156
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <i2c_lcd_noBacklight+0x32>
    144c:	00 c0       	rjmp	.+0      	; 0x144e <i2c_lcd_noBacklight+0x38>
    144e:	00 00       	nop
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	0f 90       	pop	r0
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	08 95       	ret

0000145e <i2c_lcd_command_8>:
	uint8_t c_buf[2];
	
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	00 d0       	rcall	.+0      	; 0x1464 <i2c_lcd_command_8+0x6>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
	
    1468:	80 7f       	andi	r24, 0xF0	; 240
    146a:	98 2f       	mov	r25, r24
    146c:	9c 60       	ori	r25, 0x0C	; 12
    146e:	99 83       	std	Y+1, r25	; 0x01
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
    1470:	88 60       	ori	r24, 0x08	; 8
    1472:	8a 83       	std	Y+2, r24	; 0x02
}

    1474:	42 e0       	ldi	r20, 0x02	; 2
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	be 01       	movw	r22, r28
    147a:	6f 5f       	subi	r22, 0xFF	; 255
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1482:	28 d1       	rcall	.+592    	; 0x16d4 <i2c_transmit>
    1484:	81 11       	cpse	r24, r1
    1486:	f6 cf       	rjmp	.-20     	; 0x1474 <i2c_lcd_command_8+0x16>
void i2c_lcd_command(uint8_t command)
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	08 95       	ret

00001492 <i2c_lcd_command>:
{
	uint8_t c_buf[4];
	
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	00 d0       	rcall	.+0      	; 0x1498 <i2c_lcd_command+0x6>
    1498:	00 d0       	rcall	.+0      	; 0x149a <i2c_lcd_command+0x8>
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
	
    149e:	98 2f       	mov	r25, r24
    14a0:	90 7f       	andi	r25, 0xF0	; 240
    14a2:	29 2f       	mov	r18, r25
    14a4:	2c 60       	ori	r18, 0x0C	; 12
    14a6:	29 83       	std	Y+1, r18	; 0x01
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
    14a8:	98 60       	ori	r25, 0x08	; 8
    14aa:	9a 83       	std	Y+2, r25	; 0x02
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
	
    14ac:	20 e1       	ldi	r18, 0x10	; 16
    14ae:	82 9f       	mul	r24, r18
    14b0:	c0 01       	movw	r24, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	98 2f       	mov	r25, r24
    14b6:	9c 60       	ori	r25, 0x0C	; 12
    14b8:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    14ba:	88 60       	ori	r24, 0x08	; 8
    14bc:	8c 83       	std	Y+4, r24	; 0x04
}

    14be:	44 e0       	ldi	r20, 0x04	; 4
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	be 01       	movw	r22, r28
    14c4:	6f 5f       	subi	r22, 0xFF	; 255
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    14cc:	03 d1       	rcall	.+518    	; 0x16d4 <i2c_transmit>
    14ce:	81 11       	cpse	r24, r1
    14d0:	f6 cf       	rjmp	.-20     	; 0x14be <i2c_lcd_command+0x2c>
void i2c_lcd_data(uint8_t data)
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	08 95       	ret

000014e0 <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
    14e0:	be d0       	rcall	.+380    	; 0x165e <i2c_init>
    14e2:	2f ef       	ldi	r18, 0xFF	; 255
    14e4:	89 e6       	ldi	r24, 0x69	; 105
    14e6:	98 e1       	ldi	r25, 0x18	; 24
    14e8:	21 50       	subi	r18, 0x01	; 1
    14ea:	80 40       	sbci	r24, 0x00	; 0
    14ec:	90 40       	sbci	r25, 0x00	; 0
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <i2c_lcd_init+0x8>
    14f0:	00 c0       	rjmp	.+0      	; 0x14f2 <i2c_lcd_init+0x12>
    14f2:	00 00       	nop
	_delay_ms(500);

	uart0_tx_string("Before i2c lcd Initialize... \r\n");
    14f4:	88 e8       	ldi	r24, 0x88	; 136
    14f6:	93 e0       	ldi	r25, 0x03	; 3
    14f8:	3b d4       	rcall	.+2166   	; 0x1d70 <uart0_tx_string>
	i2c_lcd_command_8(0x30); _delay_ms(5);
    14fa:	80 e3       	ldi	r24, 0x30	; 48
    14fc:	b0 df       	rcall	.-160    	; 0x145e <i2c_lcd_command_8>
    14fe:	8f e1       	ldi	r24, 0x1F	; 31
    1500:	9e e4       	ldi	r25, 0x4E	; 78
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <i2c_lcd_init+0x22>
    1506:	00 c0       	rjmp	.+0      	; 0x1508 <i2c_lcd_init+0x28>
    1508:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    150a:	80 e3       	ldi	r24, 0x30	; 48
    150c:	a8 df       	rcall	.-176    	; 0x145e <i2c_lcd_command_8>
    150e:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1510:	91 e0       	ldi	r25, 0x01	; 1
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <i2c_lcd_init+0x32>
    1516:	00 c0       	rjmp	.+0      	; 0x1518 <i2c_lcd_init+0x38>
    1518:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    151a:	80 e3       	ldi	r24, 0x30	; 48
    151c:	a0 df       	rcall	.-192    	; 0x145e <i2c_lcd_command_8>
    151e:	8f e8       	ldi	r24, 0x8F	; 143
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <i2c_lcd_init+0x42>
    1526:	00 c0       	rjmp	.+0      	; 0x1528 <i2c_lcd_init+0x48>
    1528:	00 00       	nop
	i2c_lcd_command_8(0x20); _delay_us(100);
    152a:	80 e2       	ldi	r24, 0x20	; 32
    152c:	98 df       	rcall	.-208    	; 0x145e <i2c_lcd_command_8>
    152e:	8f e8       	ldi	r24, 0x8F	; 143
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	f1 f7       	brne	.-4      	; 0x1532 <i2c_lcd_init+0x52>
    1536:	00 c0       	rjmp	.+0      	; 0x1538 <i2c_lcd_init+0x58>
    1538:	00 00       	nop
	
	i2c_lcd_command(0x28); _delay_us(50);// function set(4-bit, 2 line, 5x7 dot)
    153a:	88 e2       	ldi	r24, 0x28	; 40
    153c:	aa df       	rcall	.-172    	; 0x1492 <i2c_lcd_command>
    153e:	87 ec       	ldi	r24, 0xC7	; 199
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <i2c_lcd_init+0x62>
    1546:	00 c0       	rjmp	.+0      	; 0x1548 <i2c_lcd_init+0x68>
    1548:	00 00       	nop
	i2c_lcd_command(0x08); _delay_us(50);// display control(display ON, cursor OFF)
    154a:	88 e0       	ldi	r24, 0x08	; 8
    154c:	a2 df       	rcall	.-188    	; 0x1492 <i2c_lcd_command>
    154e:	87 ec       	ldi	r24, 0xC7	; 199
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <i2c_lcd_init+0x72>
    1556:	00 c0       	rjmp	.+0      	; 0x1558 <i2c_lcd_init+0x78>
    1558:	00 00       	nop
	i2c_lcd_command(0x01); _delay_ms(3);// clear display 
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	9a df       	rcall	.-204    	; 0x1492 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    155e:	8f ed       	ldi	r24, 0xDF	; 223
    1560:	9e e2       	ldi	r25, 0x2E	; 46
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <i2c_lcd_init+0x82>
    1566:	00 c0       	rjmp	.+0      	; 0x1568 <i2c_lcd_init+0x88>
    1568:	00 00       	nop
	i2c_lcd_command(0x06); _delay_us(50); // entry mode set(increment, not shift)
    156a:	86 e0       	ldi	r24, 0x06	; 6
    156c:	92 df       	rcall	.-220    	; 0x1492 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    156e:	87 ec       	ldi	r24, 0xC7	; 199
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <i2c_lcd_init+0x92>
    1576:	00 c0       	rjmp	.+0      	; 0x1578 <i2c_lcd_init+0x98>
    1578:	00 00       	nop
	i2c_lcd_command(0x0C); _delay_us(50); // entry mode set(increment, not shift)
    157a:	8c e0       	ldi	r24, 0x0C	; 12
    157c:	8a df       	rcall	.-236    	; 0x1492 <i2c_lcd_command>
    157e:	87 ec       	ldi	r24, 0xC7	; 199
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <i2c_lcd_init+0xa2>
    1586:	00 c0       	rjmp	.+0      	; 0x1588 <i2c_lcd_init+0xa8>
    1588:	00 00       	nop
	
	uart0_tx_string("i2c CLCD Connect Ok\r\n");
    158a:	88 ea       	ldi	r24, 0xA8	; 168
    158c:	93 e0       	ldi	r25, 0x03	; 3
    158e:	f0 c3       	rjmp	.+2016   	; 0x1d70 <uart0_tx_string>
    1590:	08 95       	ret

00001592 <i2c_lcd_data>:
    1592:	cf 93       	push	r28
}

void i2c_lcd_data(uint8_t data)
{
	uint8_t d_buf[4];
	
    1594:	df 93       	push	r29
    1596:	00 d0       	rcall	.+0      	; 0x1598 <i2c_lcd_data+0x6>
    1598:	00 d0       	rcall	.+0      	; 0x159a <i2c_lcd_data+0x8>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
	
    159e:	98 2f       	mov	r25, r24
    15a0:	90 7f       	andi	r25, 0xF0	; 240
    15a2:	29 2f       	mov	r18, r25
    15a4:	2d 60       	ori	r18, 0x0D	; 13
    15a6:	29 83       	std	Y+1, r18	; 0x01
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
    15a8:	99 60       	ori	r25, 0x09	; 9
    15aa:	9a 83       	std	Y+2, r25	; 0x02
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
	
    15ac:	20 e1       	ldi	r18, 0x10	; 16
    15ae:	82 9f       	mul	r24, r18
    15b0:	c0 01       	movw	r24, r0
    15b2:	11 24       	eor	r1, r1
    15b4:	98 2f       	mov	r25, r24
    15b6:	9d 60       	ori	r25, 0x0D	; 13
    15b8:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
    15ba:	89 60       	ori	r24, 0x09	; 9
    15bc:	8c 83       	std	Y+4, r24	; 0x04
}

    15be:	44 e0       	ldi	r20, 0x04	; 4
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	be 01       	movw	r22, r28
    15c4:	6f 5f       	subi	r22, 0xFF	; 255
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    15cc:	83 d0       	rcall	.+262    	; 0x16d4 <i2c_transmit>
    15ce:	81 11       	cpse	r24, r1
    15d0:	f6 cf       	rjmp	.-20     	; 0x15be <i2c_lcd_data+0x2c>
void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	08 95       	ret

000015e0 <i2c_lcd_goto_XY>:
{
	static int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	
	uint8_t address = (row_offsets[row]) + col;
	uint8_t command = 0x80 | address;
	
    15e0:	e8 2f       	mov	r30, r24
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	ee 0f       	add	r30, r30
    15e6:	ff 1f       	adc	r31, r31
    15e8:	e2 54       	subi	r30, 0x42	; 66
    15ea:	fc 4f       	sbci	r31, 0xFC	; 252
	i2c_lcd_command(command);
}

    15ec:	80 81       	ld	r24, Z
    15ee:	86 0f       	add	r24, r22
    15f0:	80 68       	ori	r24, 0x80	; 128
    15f2:	4f cf       	rjmp	.-354    	; 0x1492 <i2c_lcd_command>
    15f4:	08 95       	ret

000015f6 <i2c_lcd_string>:
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	ea 01       	movw	r28, r20
		i2c_lcd_data(*string++);
    15fc:	f1 df       	rcall	.-30     	; 0x15e0 <i2c_lcd_goto_XY>
	}
    15fe:	88 81       	ld	r24, Y
    1600:	88 23       	and	r24, r24
    1602:	29 f0       	breq	.+10     	; 0x160e <i2c_lcd_string+0x18>
}
    1604:	21 96       	adiw	r28, 0x01	; 1
    1606:	c5 df       	rcall	.-118    	; 0x1592 <i2c_lcd_data>
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
		i2c_lcd_data(*string++);
	}
    1608:	89 91       	ld	r24, Y+
    160a:	81 11       	cpse	r24, r1
    160c:	fc cf       	rjmp	.-8      	; 0x1606 <i2c_lcd_string+0x10>
}
void i2c_lcd_clear()
{
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <i2c_lcd_clear>:
		uint8_t c_buf[4];
		
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	00 d0       	rcall	.+0      	; 0x161a <i2c_lcd_clear+0x6>
    161a:	00 d0       	rcall	.+0      	; 0x161c <i2c_lcd_clear+0x8>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
		c_buf[0] = (0x01 &0xF0) | RS0_EN1 | BackLight;
		c_buf[1] = (0x01&0xF0) | RS0_EN0 | BackLight;
		
    1620:	8c e0       	ldi	r24, 0x0C	; 12
    1622:	89 83       	std	Y+1, r24	; 0x01
		c_buf[2] = ((0x01<<4)&0xF0) | RS0_EN1 | BackLight;
    1624:	88 e0       	ldi	r24, 0x08	; 8
    1626:	8a 83       	std	Y+2, r24	; 0x02
		c_buf[3] = ((0x01<<4)&0xF0) | RS0_EN0 | BackLight;
		
    1628:	8c e1       	ldi	r24, 0x1C	; 28
    162a:	8b 83       	std	Y+3, r24	; 0x03
		while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    162c:	88 e1       	ldi	r24, 0x18	; 24
    162e:	8c 83       	std	Y+4, r24	; 0x04
    1630:	44 e0       	ldi	r20, 0x04	; 4
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	be 01       	movw	r22, r28
    1636:	6f 5f       	subi	r22, 0xFF	; 255
    1638:	7f 4f       	sbci	r23, 0xFF	; 255
    163a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    163e:	4a d0       	rcall	.+148    	; 0x16d4 <i2c_transmit>
    1640:	81 11       	cpse	r24, r1
    1642:	f6 cf       	rjmp	.-20     	; 0x1630 <i2c_lcd_clear+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1644:	8f e3       	ldi	r24, 0x3F	; 63
    1646:	9c e9       	ldi	r25, 0x9C	; 156
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <i2c_lcd_clear+0x34>
    164c:	00 c0       	rjmp	.+0      	; 0x164e <i2c_lcd_clear+0x3a>
    164e:	00 00       	nop
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
    165e:	88 e4       	ldi	r24, 0x48	; 72
    1660:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1664:	08 95       	ret

00001666 <i2c_start>:
    1666:	e4 e7       	ldi	r30, 0x74	; 116
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	10 82       	st	Z, r1
    166c:	94 ea       	ldi	r25, 0xA4	; 164
    166e:	90 83       	st	Z, r25
    1670:	90 81       	ld	r25, Z
    1672:	99 23       	and	r25, r25
    1674:	ec f7       	brge	.-6      	; 0x1670 <i2c_start+0xa>
    1676:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    167a:	98 7f       	andi	r25, 0xF8	; 248
    167c:	98 30       	cpi	r25, 0x08	; 8
    167e:	a1 f4       	brne	.+40     	; 0x16a8 <i2c_start+0x42>
    1680:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1684:	84 e8       	ldi	r24, 0x84	; 132
    1686:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    168a:	e4 e7       	ldi	r30, 0x74	; 116
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	88 23       	and	r24, r24
    1692:	ec f7       	brge	.-6      	; 0x168e <i2c_start+0x28>
    1694:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1698:	98 7f       	andi	r25, 0xF8	; 248
    169a:	98 31       	cpi	r25, 0x18	; 24
    169c:	39 f0       	breq	.+14     	; 0x16ac <i2c_start+0x46>
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 34       	cpi	r25, 0x40	; 64
    16a2:	29 f4       	brne	.+10     	; 0x16ae <i2c_start+0x48>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	08 95       	ret
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	08 95       	ret
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	08 95       	ret

000016b0 <i2c_write>:
    16b0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    16b4:	84 e8       	ldi	r24, 0x84	; 132
    16b6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    16ba:	e4 e7       	ldi	r30, 0x74	; 116
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	88 23       	and	r24, r24
    16c2:	ec f7       	brge	.-6      	; 0x16be <i2c_write+0xe>
    16c4:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    16c8:	98 7f       	andi	r25, 0xF8	; 248
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	98 32       	cpi	r25, 0x28	; 40
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <i2c_write+0x22>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	08 95       	ret

000016d4 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	6b 01       	movw	r12, r22
    16e4:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
    16e6:	bf df       	rcall	.-130    	; 0x1666 <i2c_start>
    16e8:	f8 2e       	mov	r15, r24
    16ea:	81 11       	cpse	r24, r1
    16ec:	17 c0       	rjmp	.+46     	; 0x171c <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
    16ee:	01 15       	cp	r16, r1
    16f0:	11 05       	cpc	r17, r1
    16f2:	81 f0       	breq	.+32     	; 0x1714 <i2c_transmit+0x40>
    16f4:	e6 01       	movw	r28, r12
    16f6:	0c 0d       	add	r16, r12
    16f8:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
    16fa:	89 91       	ld	r24, Y+
    16fc:	d9 df       	rcall	.-78     	; 0x16b0 <i2c_write>
    16fe:	81 11       	cpse	r24, r1
    1700:	10 c0       	rjmp	.+32     	; 0x1722 <i2c_transmit+0x4e>
    1702:	8f e9       	ldi	r24, 0x9F	; 159
    1704:	9f e0       	ldi	r25, 0x0F	; 15
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <i2c_transmit+0x32>
    170a:	00 c0       	rjmp	.+0      	; 0x170c <i2c_transmit+0x38>
    170c:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
    170e:	0c 17       	cp	r16, r28
    1710:	1d 07       	cpc	r17, r29
    1712:	99 f7       	brne	.-26     	; 0x16fa <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1714:	84 e9       	ldi	r24, 0x94	; 148
    1716:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
    171c:	ff 24       	eor	r15, r15
    171e:	f3 94       	inc	r15
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
    1722:	ff 24       	eor	r15, r15
    1724:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
    1726:	8f 2d       	mov	r24, r15
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	df 90       	pop	r13
    1734:	cf 90       	pop	r12
    1736:	08 95       	ret

00001738 <mfrc522_write>:




static void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
    1738:	1f 93       	push	r17
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	16 2f       	mov	r17, r22
	
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
    1740:	95 b3       	in	r25, 0x15	; 21
    1742:	c1 e0       	ldi	r28, 0x01	; 1
    1744:	d0 e0       	ldi	r29, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <mfrc522_write+0x14>
    1748:	cc 0f       	add	r28, r28
    174a:	dd 1f       	adc	r29, r29
    174c:	4a 95       	dec	r20
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <mfrc522_write+0x10>
    1750:	2c 2f       	mov	r18, r28
    1752:	20 95       	com	r18
    1754:	92 23       	and	r25, r18
    1756:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
    1758:	88 0f       	add	r24, r24
    175a:	8e 77       	andi	r24, 0x7E	; 126
    175c:	a3 d2       	rcall	.+1350   	; 0x1ca4 <spi_master_tx>
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
    175e:	81 2f       	mov	r24, r17
    1760:	a1 d2       	rcall	.+1346   	; 0x1ca4 <spi_master_tx>
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    1762:	85 b3       	in	r24, 0x15	; 21
    1764:	c8 2b       	or	r28, r24
    1766:	c5 bb       	out	0x15, r28	; 21
	//spi 통신 종료	 (굳이 없어도 될듯)
	
	
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	08 95       	ret

00001770 <mfrc522_read>:
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F

}

static unsigned char mfrc522_read(unsigned char reg, unsigned char channel){
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
    1774:	95 b3       	in	r25, 0x15	; 21
    1776:	c1 e0       	ldi	r28, 0x01	; 1
    1778:	d0 e0       	ldi	r29, 0x00	; 0
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <mfrc522_read+0x10>
    177c:	cc 0f       	add	r28, r28
    177e:	dd 1f       	adc	r29, r29
    1780:	6a 95       	dec	r22
    1782:	e2 f7       	brpl	.-8      	; 0x177c <mfrc522_read+0xc>
    1784:	2c 2f       	mov	r18, r28
    1786:	20 95       	com	r18
    1788:	92 23       	and	r25, r18
    178a:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
    178c:	88 0f       	add	r24, r24
    178e:	8e 77       	andi	r24, 0x7E	; 126
    1790:	80 68       	ori	r24, 0x80	; 128
    1792:	88 d2       	rcall	.+1296   	; 0x1ca4 <spi_master_tx>
	value = spi_master_rx(); //send dummy data and receive data.
    1794:	8b d2       	rcall	.+1302   	; 0x1cac <spi_master_rx>
    1796:	95 b3       	in	r25, 0x15	; 21
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    1798:	c9 2b       	or	r28, r25
    179a:	c5 bb       	out	0x15, r28	; 21
    179c:	df 91       	pop	r29
	
	return value;
}
    179e:	cf 91       	pop	r28
    17a0:	08 95       	ret

000017a2 <mfrc522_to_card>:
    17a2:	2f 92       	push	r2

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    17a4:	3f 92       	push	r3
    17a6:	4f 92       	push	r4
    17a8:	5f 92       	push	r5
    17aa:	6f 92       	push	r6
    17ac:	7f 92       	push	r7
    17ae:	8f 92       	push	r8
    17b0:	9f 92       	push	r9
    17b2:	af 92       	push	r10
    17b4:	bf 92       	push	r11
    17b6:	cf 92       	push	r12
    17b8:	df 92       	push	r13
    17ba:	ef 92       	push	r14
    17bc:	ff 92       	push	r15
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	f8 2e       	mov	r15, r24
    17c8:	a6 2e       	mov	r10, r22
    17ca:	b7 2e       	mov	r11, r23
    17cc:	44 2e       	mov	r4, r20
    17ce:	22 2e       	mov	r2, r18
    17d0:	d3 2e       	mov	r13, r19
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
    17d2:	8c e0       	ldi	r24, 0x0C	; 12
    17d4:	f8 16       	cp	r15, r24
    17d6:	59 f0       	breq	.+22     	; 0x17ee <mfrc522_to_card+0x4c>
    17d8:	ee e0       	ldi	r30, 0x0E	; 14
    17da:	fe 12       	cpse	r15, r30
    17dc:	11 c0       	rjmp	.+34     	; 0x1800 <mfrc522_to_card+0x5e>
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
    17de:	68 94       	set
    17e0:	cc 24       	eor	r12, r12
    17e2:	c4 f8       	bld	r12, 4

	switch (cmd)
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
    17e4:	0f 2e       	mov	r0, r31
    17e6:	f2 e1       	ldi	r31, 0x12	; 18
    17e8:	3f 2e       	mov	r3, r31
    17ea:	f0 2d       	mov	r31, r0
    17ec:	0b c0       	rjmp	.+22     	; 0x1804 <mfrc522_to_card+0x62>
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    17ee:	0f 2e       	mov	r0, r31
    17f0:	f0 e3       	ldi	r31, 0x30	; 48
    17f2:	cf 2e       	mov	r12, r31
    17f4:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
    17f6:	0f 2e       	mov	r0, r31
    17f8:	f7 e7       	ldi	r31, 0x77	; 119
    17fa:	3f 2e       	mov	r3, r31
    17fc:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <mfrc522_to_card+0x62>

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
    1800:	c1 2c       	mov	r12, r1
}

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
    1802:	31 2c       	mov	r3, r1
		default:
		break;
	}
	
	///////////////////////////////////////////============여기-==========//////////
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
    1804:	4e 2d       	mov	r20, r14
    1806:	63 2d       	mov	r22, r3
    1808:	60 68       	ori	r22, 0x80	; 128
    180a:	82 e0       	ldi	r24, 0x02	; 2
    180c:	95 df       	rcall	.-214    	; 0x1738 <mfrc522_write>
	n=mfrc522_read(ComIrqReg,ch);
    180e:	6e 2d       	mov	r22, r14
    1810:	84 e0       	ldi	r24, 0x04	; 4
    1812:	ae df       	rcall	.-164    	; 0x1770 <mfrc522_read>
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
    1814:	68 2f       	mov	r22, r24
    1816:	6f 77       	andi	r22, 0x7F	; 127
    1818:	4e 2d       	mov	r20, r14
    181a:	84 e0       	ldi	r24, 0x04	; 4
    181c:	8d df       	rcall	.-230    	; 0x1738 <mfrc522_write>
	n=mfrc522_read(FIFOLevelReg,ch);
    181e:	6e 2d       	mov	r22, r14
    1820:	8a e0       	ldi	r24, 0x0A	; 10
    1822:	a6 df       	rcall	.-180    	; 0x1770 <mfrc522_read>
    1824:	68 2f       	mov	r22, r24
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
    1826:	60 68       	ori	r22, 0x80	; 128
    1828:	4e 2d       	mov	r20, r14
    182a:	8a e0       	ldi	r24, 0x0A	; 10
    182c:	85 df       	rcall	.-246    	; 0x1738 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???
    182e:	4e 2d       	mov	r20, r14
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	81 df       	rcall	.-254    	; 0x1738 <mfrc522_write>
    1836:	51 2c       	mov	r5, r1

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    1838:	61 2c       	mov	r6, r1
    183a:	71 2c       	mov	r7, r1
    183c:	41 14       	cp	r4, r1
    183e:	51 04       	cpc	r5, r1
    1840:	61 04       	cpc	r6, r1
    1842:	71 04       	cpc	r7, r1
    1844:	99 f0       	breq	.+38     	; 0x186c <mfrc522_to_card+0xca>
    1846:	ca 2d       	mov	r28, r10
    1848:	db 2d       	mov	r29, r11
    184a:	81 2c       	mov	r8, r1
    184c:	91 2c       	mov	r9, r1
    184e:	54 01       	movw	r10, r8
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
    1850:	69 91       	ld	r22, Y+
    1852:	4e 2d       	mov	r20, r14
    1854:	89 e0       	ldi	r24, 0x09	; 9
    1856:	70 df       	rcall	.-288    	; 0x1738 <mfrc522_write>
    1858:	ff ef       	ldi	r31, 0xFF	; 255
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    185a:	8f 1a       	sub	r8, r31
    185c:	9f 0a       	sbc	r9, r31
    185e:	af 0a       	sbc	r10, r31
    1860:	bf 0a       	sbc	r11, r31
    1862:	84 14       	cp	r8, r4
    1864:	95 04       	cpc	r9, r5
    1866:	a6 04       	cpc	r10, r6
    1868:	b7 04       	cpc	r11, r7
    186a:	90 f3       	brcs	.-28     	; 0x1850 <mfrc522_to_card+0xae>
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
    186c:	4e 2d       	mov	r20, r14
    186e:	6f 2d       	mov	r22, r15
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	62 df       	rcall	.-316    	; 0x1738 <mfrc522_write>
	if (cmd == MFRC522_CMD_Transceive)
    1874:	8c e0       	ldi	r24, 0x0C	; 12
    1876:	f8 12       	cpse	r15, r24
	{
		n=mfrc522_read(BitFramingReg,ch);
    1878:	08 c0       	rjmp	.+16     	; 0x188a <mfrc522_to_card+0xe8>
    187a:	6e 2d       	mov	r22, r14
    187c:	8d e0       	ldi	r24, 0x0D	; 13
		mfrc522_write(BitFramingReg,n|0x80,ch);
    187e:	78 df       	rcall	.-272    	; 0x1770 <mfrc522_read>
    1880:	68 2f       	mov	r22, r24
    1882:	60 68       	ori	r22, 0x80	; 128
    1884:	4e 2d       	mov	r20, r14
    1886:	8d e0       	ldi	r24, 0x0D	; 13
    1888:	57 df       	rcall	.-338    	; 0x1738 <mfrc522_write>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    188a:	6e 2d       	mov	r22, r14
    188c:	84 e0       	ldi	r24, 0x04	; 4
    188e:	70 df       	rcall	.-288    	; 0x1770 <mfrc522_read>
    1890:	b8 2e       	mov	r11, r24
    1892:	c0 e0       	ldi	r28, 0x00	; 0
    1894:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    1896:	ec 2d       	mov	r30, r12
    1898:	e1 60       	ori	r30, 0x01	; 1
    189a:	ce 2e       	mov	r12, r30
    189c:	0a c0       	rjmp	.+20     	; 0x18b2 <mfrc522_to_card+0x110>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    189e:	6e 2d       	mov	r22, r14
    18a0:	84 e0       	ldi	r24, 0x04	; 4
    18a2:	66 df       	rcall	.-308    	; 0x1770 <mfrc522_read>
    18a4:	b8 2e       	mov	r11, r24
    18a6:	21 96       	adiw	r28, 0x01	; 1
    18a8:	cf 3c       	cpi	r28, 0xCF	; 207
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    18aa:	f7 e0       	ldi	r31, 0x07	; 7
    18ac:	df 07       	cpc	r29, r31
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <mfrc522_to_card+0x110>
    18b0:	68 c0       	rjmp	.+208    	; 0x1982 <mfrc522_to_card+0x1e0>
    18b2:	8c 2d       	mov	r24, r12
    18b4:	8b 21       	and	r24, r11
    18b6:	99 f3       	breq	.-26     	; 0x189e <mfrc522_to_card+0xfc>
    18b8:	6e c0       	rjmp	.+220    	; 0x1996 <mfrc522_to_card+0x1f4>
    18ba:	83 2d       	mov	r24, r3
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
    18bc:	81 70       	andi	r24, 0x01	; 1
    18be:	b8 22       	and	r11, r24
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <mfrc522_to_card+0x124>
			{
				status = CARD_NOT_FOUND;			//??
    18c2:	c2 e0       	ldi	r28, 0x02	; 2
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <mfrc522_to_card+0x126>
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
    18c6:	c1 e0       	ldi	r28, 0x01	; 1
    18c8:	8c e0       	ldi	r24, 0x0C	; 12
    18ca:	f8 12       	cpse	r15, r24
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    18cc:	73 c0       	rjmp	.+230    	; 0x19b4 <mfrc522_to_card+0x212>
    18ce:	6e 2d       	mov	r22, r14
    18d0:	8a e0       	ldi	r24, 0x0A	; 10
    18d2:	4e df       	rcall	.-356    	; 0x1770 <mfrc522_read>
    18d4:	88 2e       	mov	r8, r24
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
    18d6:	6e 2d       	mov	r22, r14
    18d8:	8c e0       	ldi	r24, 0x0C	; 12
    18da:	4a df       	rcall	.-364    	; 0x1770 <mfrc522_read>
    18dc:	28 2f       	mov	r18, r24
    18de:	27 70       	andi	r18, 0x07	; 7
    18e0:	a9 f0       	breq	.+42     	; 0x190c <mfrc522_to_card+0x16a>
				if (lastBits)
    18e2:	88 2d       	mov	r24, r8
				{
					*back_data_len = (n-1)*8 + lastBits;
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	82 0f       	add	r24, r18
    18f6:	91 1d       	adc	r25, r1
    18f8:	09 2e       	mov	r0, r25
    18fa:	00 0c       	add	r0, r0
    18fc:	aa 0b       	sbc	r26, r26
    18fe:	bb 0b       	sbc	r27, r27
    1900:	f8 01       	movw	r30, r16
    1902:	80 83       	st	Z, r24
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	a2 83       	std	Z+2, r26	; 0x02
    1908:	b3 83       	std	Z+3, r27	; 0x03
    190a:	11 c0       	rjmp	.+34     	; 0x192e <mfrc522_to_card+0x18c>
    190c:	88 2d       	mov	r24, r8
				}
				else
				{
					*back_data_len = n*8;
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	09 2e       	mov	r0, r25
    191e:	00 0c       	add	r0, r0
    1920:	aa 0b       	sbc	r26, r26
    1922:	bb 0b       	sbc	r27, r27
    1924:	f8 01       	movw	r30, r16
    1926:	80 83       	st	Z, r24
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	a2 83       	std	Z+2, r26	; 0x02
    192c:	b3 83       	std	Z+3, r27	; 0x03
    192e:	88 20       	and	r8, r8
				}

				if (n == 0)
    1930:	71 f0       	breq	.+28     	; 0x194e <mfrc522_to_card+0x1ac>
    1932:	88 2d       	mov	r24, r8
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    1934:	81 31       	cpi	r24, 0x11	; 17
    1936:	08 f0       	brcs	.+2      	; 0x193a <mfrc522_to_card+0x198>
    1938:	80 e1       	ldi	r24, 0x10	; 16
    193a:	88 2e       	mov	r8, r24
    193c:	91 2c       	mov	r9, r1
    193e:	a1 2c       	mov	r10, r1
    1940:	b1 2c       	mov	r11, r1
    1942:	81 14       	cp	r8, r1
    1944:	91 04       	cpc	r9, r1
    1946:	a1 04       	cpc	r10, r1
    1948:	b1 04       	cpc	r11, r1
    194a:	29 f4       	brne	.+10     	; 0x1956 <mfrc522_to_card+0x1b4>
    194c:	33 c0       	rjmp	.+102    	; 0x19b4 <mfrc522_to_card+0x212>
    194e:	81 2c       	mov	r8, r1
    1950:	91 2c       	mov	r9, r1
    1952:	54 01       	movw	r10, r8
    1954:	83 94       	inc	r8
    1956:	02 2d       	mov	r16, r2
    1958:	1d 2d       	mov	r17, r13
    195a:	41 2c       	mov	r4, r1
    195c:	51 2c       	mov	r5, r1
    195e:	32 01       	movw	r6, r4
				{
					back_data[i] = mfrc522_read(FIFODataReg,ch);
    1960:	6e 2d       	mov	r22, r14
    1962:	89 e0       	ldi	r24, 0x09	; 9
    1964:	05 df       	rcall	.-502    	; 0x1770 <mfrc522_read>
    1966:	f8 01       	movw	r30, r16
    1968:	81 93       	st	Z+, r24
    196a:	8f 01       	movw	r16, r30
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    196c:	ff ef       	ldi	r31, 0xFF	; 255
    196e:	4f 1a       	sub	r4, r31
    1970:	5f 0a       	sbc	r5, r31
    1972:	6f 0a       	sbc	r6, r31
    1974:	7f 0a       	sbc	r7, r31
    1976:	48 14       	cp	r4, r8
    1978:	59 04       	cpc	r5, r9
    197a:	6a 04       	cpc	r6, r10
    197c:	7b 04       	cpc	r7, r11
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    197e:	80 f3       	brcs	.-32     	; 0x1960 <mfrc522_to_card+0x1be>
    1980:	19 c0       	rjmp	.+50     	; 0x19b4 <mfrc522_to_card+0x212>
    1982:	6e 2d       	mov	r22, r14
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    1984:	8d e0       	ldi	r24, 0x0D	; 13
    1986:	f4 de       	rcall	.-536    	; 0x1770 <mfrc522_read>
    1988:	68 2f       	mov	r22, r24
    198a:	6f 77       	andi	r22, 0x7F	; 127
    198c:	4e 2d       	mov	r20, r14
	return value;
}

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
    198e:	8d e0       	ldi	r24, 0x0D	; 13
    1990:	d3 de       	rcall	.-602    	; 0x1738 <mfrc522_write>
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    1992:	c3 e0       	ldi	r28, 0x03	; 3
    1994:	0f c0       	rjmp	.+30     	; 0x19b4 <mfrc522_to_card+0x212>
    1996:	6e 2d       	mov	r22, r14
    1998:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    199a:	ea de       	rcall	.-556    	; 0x1770 <mfrc522_read>
    199c:	68 2f       	mov	r22, r24
    199e:	6f 77       	andi	r22, 0x7F	; 127
    19a0:	4e 2d       	mov	r20, r14
    19a2:	8d e0       	ldi	r24, 0x0D	; 13
    19a4:	c9 de       	rcall	.-622    	; 0x1738 <mfrc522_write>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
    19a6:	6e 2d       	mov	r22, r14
    19a8:	86 e0       	ldi	r24, 0x06	; 6
    19aa:	e2 de       	rcall	.-572    	; 0x1770 <mfrc522_read>
    19ac:	8b 71       	andi	r24, 0x1B	; 27
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <mfrc522_to_card+0x210>
    19b0:	84 cf       	rjmp	.-248    	; 0x18ba <mfrc522_to_card+0x118>
    19b2:	c3 e0       	ldi	r28, 0x03	; 3
				}
			}
		}
		else
		{
			status = ERROR;
    19b4:	8c 2f       	mov	r24, r28
	
	// 	SetBitMask(ControlReg,0x80);           //timer stops
	//mfrc522_write(CommandReg, MFRC522_CMD_Idle);

	return status;
}
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	ff 90       	pop	r15
    19c0:	ef 90       	pop	r14
    19c2:	df 90       	pop	r13
    19c4:	cf 90       	pop	r12
    19c6:	bf 90       	pop	r11
    19c8:	af 90       	pop	r10
    19ca:	9f 90       	pop	r9
    19cc:	8f 90       	pop	r8
    19ce:	7f 90       	pop	r7
    19d0:	6f 90       	pop	r6
    19d2:	5f 90       	pop	r5
    19d4:	4f 90       	pop	r4
    19d6:	3f 90       	pop	r3
    19d8:	2f 90       	pop	r2
    19da:	08 95       	ret

000019dc <mfrc522_init>:
    19dc:	cf 93       	push	r28

void mfrc522_init(unsigned char ch)
{
    19de:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
    19e0:	1f 92       	push	r1
    19e2:	1f 92       	push	r1
    19e4:	1f 92       	push	r1
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	8f 93       	push	r24
    19ea:	83 e0       	ldi	r24, 0x03	; 3
    19ec:	8f 93       	push	r24
    19ee:	17 d1       	rcall	.+558    	; 0x1c1e <spi_init>
	
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
    19f0:	84 b3       	in	r24, 0x14	; 20
    19f2:	83 60       	ori	r24, 0x03	; 3
    19f4:	84 bb       	out	0x14, r24	; 20
	SS_PORT=0; //입력핀이 전원에 영향 끼치는 행위를 막기 위함
    19f6:	15 ba       	out	0x15, r1	; 21
    19f8:	2f ef       	ldi	r18, 0xFF	; 255
    19fa:	89 ef       	ldi	r24, 0xF9	; 249
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	21 50       	subi	r18, 0x01	; 1
    1a00:	80 40       	sbci	r24, 0x00	; 0
    1a02:	90 40       	sbci	r25, 0x00	; 0
    1a04:	e1 f7       	brne	.-8      	; 0x19fe <mfrc522_init+0x22>
    1a06:	00 c0       	rjmp	.+0      	; 0x1a08 <mfrc522_init+0x2c>
    1a08:	00 00       	nop
	//이렇게 케어해두니, 이상 동작하지 않아서 좋음
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
    1a0a:	85 b3       	in	r24, 0x15	; 21
    1a0c:	83 60       	ori	r24, 0x03	; 3
    1a0e:	85 bb       	out	0x15, r24	; 21
}

static void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴.
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F
    1a10:	4c 2f       	mov	r20, r28
    1a12:	6f e0       	ldi	r22, 0x0F	; 15
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 de       	rcall	.-736    	; 0x1738 <mfrc522_write>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
    1a18:	4c 2f       	mov	r20, r28
    1a1a:	6d e8       	ldi	r22, 0x8D	; 141
    1a1c:	8a e2       	ldi	r24, 0x2A	; 42
    1a1e:	8c de       	rcall	.-744    	; 0x1738 <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
    1a20:	4c 2f       	mov	r20, r28
    1a22:	6e e3       	ldi	r22, 0x3E	; 62
    1a24:	8b e2       	ldi	r24, 0x2B	; 43
    1a26:	88 de       	rcall	.-752    	; 0x1738 <mfrc522_write>
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
    1a28:	4c 2f       	mov	r20, r28
    1a2a:	6e e1       	ldi	r22, 0x1E	; 30
    1a2c:	8c e2       	ldi	r24, 0x2C	; 44
    1a2e:	84 de       	rcall	.-760    	; 0x1738 <mfrc522_write>
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
    1a30:	4c 2f       	mov	r20, r28
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	8d e2       	ldi	r24, 0x2D	; 45
    1a36:	80 de       	rcall	.-768    	; 0x1738 <mfrc522_write>
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
    1a38:	4c 2f       	mov	r20, r28
    1a3a:	60 e4       	ldi	r22, 0x40	; 64
    1a3c:	85 e1       	ldi	r24, 0x15	; 21
    1a3e:	7c de       	rcall	.-776    	; 0x1738 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
    1a40:	4c 2f       	mov	r20, r28
    1a42:	6d e3       	ldi	r22, 0x3D	; 61
    1a44:	81 e1       	ldi	r24, 0x11	; 17
    1a46:	78 de       	rcall	.-784    	; 0x1738 <mfrc522_write>
    1a48:	6c 2f       	mov	r22, r28
	
	
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
    1a4a:	84 e1       	ldi	r24, 0x14	; 20
    1a4c:	91 de       	rcall	.-734    	; 0x1770 <mfrc522_read>
    1a4e:	98 2f       	mov	r25, r24
    1a50:	93 70       	andi	r25, 0x03	; 3
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	29 f4       	brne	.+10     	; 0x1a68 <mfrc522_init+0x8c>
    1a5e:	68 2f       	mov	r22, r24
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
    1a60:	63 60       	ori	r22, 0x03	; 3
    1a62:	4c 2f       	mov	r20, r28
    1a64:	84 e1       	ldi	r24, 0x14	; 20
    1a66:	68 de       	rcall	.-816    	; 0x1738 <mfrc522_write>
    1a68:	cf 91       	pop	r28
    1a6a:	08 95       	ret

00001a6c <mfrc522_version_check>:
	}
}
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29




void mfrc522_version_check(unsigned char ch){
    1a70:	d8 2f       	mov	r29, r24
	
	unsigned char byte;
	
	byte = mfrc522_read(VersionReg, ch);
    1a72:	68 2f       	mov	r22, r24
    1a74:	87 e3       	ldi	r24, 0x37	; 55
    1a76:	7c de       	rcall	.-776    	; 0x1770 <mfrc522_read>
    1a78:	c8 2f       	mov	r28, r24
    1a7a:	2f ef       	ldi	r18, 0xFF	; 255
    1a7c:	89 ef       	ldi	r24, 0xF9	; 249
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	21 50       	subi	r18, 0x01	; 1
    1a82:	80 40       	sbci	r24, 0x00	; 0
    1a84:	90 40       	sbci	r25, 0x00	; 0
    1a86:	e1 f7       	brne	.-8      	; 0x1a80 <mfrc522_version_check+0x14>
    1a88:	00 c0       	rjmp	.+0      	; 0x1a8a <mfrc522_version_check+0x1e>
    1a8a:	00 00       	nop
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
    1a8c:	d1 11       	cpse	r29, r1
    1a8e:	06 c0       	rjmp	.+12     	; 0x1a9c <mfrc522_version_check+0x30>
    1a90:	86 ec       	ldi	r24, 0xC6	; 198
    1a92:	93 e0       	ldi	r25, 0x03	; 3
    1a94:	6d d1       	rcall	.+730    	; 0x1d70 <uart0_tx_string>
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
    1a96:	c2 39       	cpi	r28, 0x92	; 146
    1a98:	59 f5       	brne	.+86     	; 0x1af0 <mfrc522_version_check+0x84>
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <mfrc522_version_check+0x4e>
	byte = mfrc522_read(VersionReg, ch);
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
    1a9c:	82 ed       	ldi	r24, 0xD2	; 210
    1a9e:	93 e0       	ldi	r25, 0x03	; 3
    1aa0:	67 d1       	rcall	.+718    	; 0x1d70 <uart0_tx_string>
	
	if(byte == 0x92)
    1aa2:	c2 39       	cpi	r28, 0x92	; 146
    1aa4:	91 f5       	brne	.+100    	; 0x1b0a <mfrc522_version_check+0x9e>
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
    1aa6:	12 c0       	rjmp	.+36     	; 0x1acc <mfrc522_version_check+0x60>
    1aa8:	8e ed       	ldi	r24, 0xDE	; 222
    1aaa:	93 e0       	ldi	r25, 0x03	; 3
    1aac:	61 d1       	rcall	.+706    	; 0x1d70 <uart0_tx_string>
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
    1aae:	41 ef       	ldi	r20, 0xF1	; 241
    1ab0:	53 e0       	ldi	r21, 0x03	; 3
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	82 e0       	ldi	r24, 0x02	; 2
    1ab6:	9f dd       	rcall	.-1218   	; 0x15f6 <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    1ab8:	ff cf       	rjmp	.-2      	; 0x1ab8 <mfrc522_version_check+0x4c>
    1aba:	85 e0       	ldi	r24, 0x05	; 5
    1abc:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    1abe:	58 d1       	rcall	.+688    	; 0x1d70 <uart0_tx_string>
    1ac0:	49 e2       	ldi	r20, 0x29	; 41
    1ac2:	54 e0       	ldi	r21, 0x04	; 4
    1ac4:	60 e0       	ldi	r22, 0x00	; 0
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	96 dd       	rcall	.-1236   	; 0x15f6 <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    1aca:	23 c0       	rjmp	.+70     	; 0x1b12 <mfrc522_version_check+0xa6>
    1acc:	85 e0       	ldi	r24, 0x05	; 5
    1ace:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1ad0:	4f d1       	rcall	.+670    	; 0x1d70 <uart0_tx_string>
    1ad2:	4e e3       	ldi	r20, 0x3E	; 62
    1ad4:	54 e0       	ldi	r21, 0x04	; 4
    1ad6:	60 e0       	ldi	r22, 0x00	; 0
    1ad8:	82 e0       	ldi	r24, 0x02	; 2
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    1ada:	8d dd       	rcall	.-1254   	; 0x15f6 <i2c_lcd_string>
    1adc:	1a c0       	rjmp	.+52     	; 0x1b12 <mfrc522_version_check+0xa6>
    1ade:	83 e5       	ldi	r24, 0x53	; 83
    1ae0:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    1ae2:	46 d1       	rcall	.+652    	; 0x1d70 <uart0_tx_string>
    1ae4:	49 e2       	ldi	r20, 0x29	; 41
    1ae6:	54 e0       	ldi	r21, 0x04	; 4
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	84 dd       	rcall	.-1272   	; 0x15f6 <i2c_lcd_string>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    1aee:	11 c0       	rjmp	.+34     	; 0x1b12 <mfrc522_version_check+0xa6>
    1af0:	c0 59       	subi	r28, 0x90	; 144
    1af2:	c2 30       	cpi	r28, 0x02	; 2
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    1af4:	c8 f6       	brcc	.-78     	; 0x1aa8 <mfrc522_version_check+0x3c>
    1af6:	f3 cf       	rjmp	.-26     	; 0x1ade <mfrc522_version_check+0x72>
    1af8:	83 e5       	ldi	r24, 0x53	; 83
    1afa:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1afc:	39 d1       	rcall	.+626    	; 0x1d70 <uart0_tx_string>
    1afe:	4e e3       	ldi	r20, 0x3E	; 62
    1b00:	54 e0       	ldi	r21, 0x04	; 4
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	77 dd       	rcall	.-1298   	; 0x15f6 <i2c_lcd_string>
    1b08:	04 c0       	rjmp	.+8      	; 0x1b12 <mfrc522_version_check+0xa6>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    1b0a:	c0 59       	subi	r28, 0x90	; 144
    1b0c:	c2 30       	cpi	r28, 0x02	; 2
    1b0e:	60 f6       	brcc	.-104    	; 0x1aa8 <mfrc522_version_check+0x3c>
    1b10:	f3 cf       	rjmp	.-26     	; 0x1af8 <mfrc522_version_check+0x8c>
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
	}
	
}
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	08 95       	ret

00001b18 <mfrc522_IRQ_enable>:

void mfrc522_IRQ_enable(unsigned char ch)
{
    1b18:	cf 93       	push	r28
    1b1a:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	byte=mfrc522_read(ComIEnReg, ch);
    1b1c:	68 2f       	mov	r22, r24
    1b1e:	82 e0       	ldi	r24, 0x02	; 2
    1b20:	27 de       	rcall	.-946    	; 0x1770 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
    1b22:	68 2f       	mov	r22, r24
    1b24:	60 62       	ori	r22, 0x20	; 32
    1b26:	4c 2f       	mov	r20, r28
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	06 de       	rcall	.-1012   	; 0x1738 <mfrc522_write>
	byte=mfrc522_read(DivIEnReg, ch);
    1b2c:	6c 2f       	mov	r22, r28
    1b2e:	83 e0       	ldi	r24, 0x03	; 3
    1b30:	1f de       	rcall	.-962    	; 0x1770 <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
    1b32:	68 2f       	mov	r22, r24
    1b34:	60 68       	ori	r22, 0x80	; 128
    1b36:	4c 2f       	mov	r20, r28
    1b38:	83 e0       	ldi	r24, 0x03	; 3
    1b3a:	fe dd       	rcall	.-1028   	; 0x1738 <mfrc522_write>
}
    1b3c:	cf 91       	pop	r28
    1b3e:	08 95       	ret

00001b40 <mfrc522_request>:


unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
{
    1b40:	cf 92       	push	r12
    1b42:	df 92       	push	r13
    1b44:	ef 92       	push	r14
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <mfrc522_request+0x10>
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <mfrc522_request+0x12>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	18 2f       	mov	r17, r24
    1b58:	6b 01       	movw	r12, r22
    1b5a:	e4 2e       	mov	r14, r20
	uint8_t  status;
	uint32_t backBits;//The received data bits

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
    1b5c:	67 e0       	ldi	r22, 0x07	; 7
    1b5e:	8d e0       	ldi	r24, 0x0D	; 13
    1b60:	eb dd       	rcall	.-1066   	; 0x1738 <mfrc522_write>
	
	tag_type[0] = req_mode;
    1b62:	f6 01       	movw	r30, r12
    1b64:	10 83       	st	Z, r17
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);
    1b66:	8e 01       	movw	r16, r28
    1b68:	0f 5f       	subi	r16, 0xFF	; 255
    1b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6c:	96 01       	movw	r18, r12
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	b6 01       	movw	r22, r12
    1b72:	8c e0       	ldi	r24, 0x0C	; 12
    1b74:	16 de       	rcall	.-980    	; 0x17a2 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	59 f4       	brne	.+22     	; 0x1b90 <mfrc522_request+0x50>
    1b7a:	49 81       	ldd	r20, Y+1	; 0x01
    1b7c:	5a 81       	ldd	r21, Y+2	; 0x02
    1b7e:	6b 81       	ldd	r22, Y+3	; 0x03
    1b80:	7c 81       	ldd	r23, Y+4	; 0x04
    1b82:	40 31       	cpi	r20, 0x10	; 16
    1b84:	51 05       	cpc	r21, r1
    1b86:	61 05       	cpc	r22, r1
    1b88:	71 05       	cpc	r23, r1
    1b8a:	19 f0       	breq	.+6      	; 0x1b92 <mfrc522_request+0x52>
	{
		status = ERROR;
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	01 c0       	rjmp	.+2      	; 0x1b92 <mfrc522_request+0x52>
    1b90:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ef 90       	pop	r14
    1ba4:	df 90       	pop	r13
    1ba6:	cf 90       	pop	r12
    1ba8:	08 95       	ret

00001baa <mfrc522_get_card_serial>:



unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
    1baa:	cf 92       	push	r12
    1bac:	df 92       	push	r13
    1bae:	ef 92       	push	r14
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <mfrc522_get_card_serial+0x10>
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <mfrc522_get_card_serial+0x12>
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	6c 01       	movw	r12, r24
    1bc2:	e6 2e       	mov	r14, r22
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
    1bc4:	46 2f       	mov	r20, r22
    1bc6:	60 e0       	ldi	r22, 0x00	; 0
    1bc8:	8d e0       	ldi	r24, 0x0D	; 13
    1bca:	b6 dd       	rcall	.-1172   	; 0x1738 <mfrc522_write>
	
	serial_out[0] = PICC_ANTICOLL;
    1bcc:	83 e9       	ldi	r24, 0x93	; 147
    1bce:	f6 01       	movw	r30, r12
    1bd0:	80 83       	st	Z, r24
	serial_out[1] = 0x20;
    1bd2:	80 e2       	ldi	r24, 0x20	; 32
    1bd4:	81 83       	std	Z+1, r24	; 0x01
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);
    1bd6:	8e 01       	movw	r16, r28
    1bd8:	0f 5f       	subi	r16, 0xFF	; 255
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
    1bdc:	96 01       	movw	r18, r12
    1bde:	42 e0       	ldi	r20, 0x02	; 2
    1be0:	b6 01       	movw	r22, r12
    1be2:	8c e0       	ldi	r24, 0x0C	; 12
    1be4:	de dd       	rcall	.-1092   	; 0x17a2 <mfrc522_to_card>

	if (status == CARD_FOUND)
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	71 f4       	brne	.+28     	; 0x1c06 <mfrc522_get_card_serial+0x5c>
    1bea:	f6 01       	movw	r30, r12
    1bec:	a6 01       	movw	r20, r12
    1bee:	4c 5f       	subi	r20, 0xFC	; 252
    1bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
    1bf4:	21 91       	ld	r18, Z+
    1bf6:	92 27       	eor	r25, r18
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
    1bf8:	4e 17       	cp	r20, r30
    1bfa:	5f 07       	cpc	r21, r31
    1bfc:	d9 f7       	brne	.-10     	; 0x1bf4 <mfrc522_get_card_serial+0x4a>
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
    1bfe:	f6 01       	movw	r30, r12
    1c00:	24 81       	ldd	r18, Z+4	; 0x04
    1c02:	92 13       	cpse	r25, r18
		{
			status = ERROR;
    1c04:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return status;
}
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	ef 90       	pop	r14
    1c18:	df 90       	pop	r13
    1c1a:	cf 90       	pop	r12
    1c1c:	08 95       	ret

00001c1e <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(uint8_t spi_mode, ...){
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <spi_init+0x6>
    1c24:	1f 92       	push	r1
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
    1c2c:	83 30       	cpi	r24, 0x03	; 3
    1c2e:	21 f1       	breq	.+72     	; 0x1c78 <spi_init+0x5a>
    1c30:	81 11       	cpse	r24, r1
    1c32:	32 c0       	rjmp	.+100    	; 0x1c98 <spi_init+0x7a>
    1c34:	29 c0       	rjmp	.+82     	; 0x1c88 <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
    1c36:	9c 91       	ld	r25, X
    1c38:	12 96       	adiw	r26, 0x02	; 2
    1c3a:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
    1c3c:	e2 17       	cp	r30, r18
    1c3e:	f3 07       	cpc	r31, r19
    1c40:	d1 f7       	brne	.-12     	; 0x1c36 <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1c42:	9b 81       	ldd	r25, Y+3	; 0x03
    1c44:	92 30       	cpi	r25, 0x02	; 2
    1c46:	20 f1       	brcs	.+72     	; 0x1c90 <spi_init+0x72>
    1c48:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
    1c4a:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
    1c4c:	83 30       	cpi	r24, 0x03	; 3
    1c4e:	71 f4       	brne	.+28     	; 0x1c6c <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
    1c50:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
    1c52:	87 b3       	in	r24, 0x17	; 23
    1c54:	87 60       	ori	r24, 0x07	; 7
    1c56:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
    1c58:	99 81       	ldd	r25, Y+1	; 0x01
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	89 2b       	or	r24, r25
    1c5e:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
    1c60:	2e b1       	in	r18, 0x0e	; 14
    1c62:	9b 81       	ldd	r25, Y+3	; 0x03
    1c64:	92 2b       	or	r25, r18
    1c66:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
    1c68:	8d b9       	out	0x0d, r24	; 13
    1c6a:	16 c0       	rjmp	.+44     	; 0x1c98 <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
    1c6c:	81 11       	cpse	r24, r1
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
    1c70:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
    1c72:	80 e4       	ldi	r24, 0x40	; 64
    1c74:	8d b9       	out	0x0d, r24	; 13
    1c76:	10 c0       	rjmp	.+32     	; 0x1c98 <spi_init+0x7a>
    1c78:	de 01       	movw	r26, r28
    1c7a:	19 96       	adiw	r26, 0x09	; 9
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	31 96       	adiw	r30, 0x01	; 1
    1c80:	9e 01       	movw	r18, r28
    1c82:	2c 5f       	subi	r18, 0xFC	; 252
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	d7 cf       	rjmp	.-82     	; 0x1c36 <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1c88:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8a:	92 30       	cpi	r25, 0x02	; 2
    1c8c:	e8 f6       	brcc	.-70     	; 0x1c48 <spi_init+0x2a>
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
    1c90:	1d b8       	out	0x0d, r1	; 13
    1c92:	de cf       	rjmp	.-68     	; 0x1c50 <spi_init+0x32>
    1c94:	1d b8       	out	0x0d, r1	; 13
    1c96:	ec cf       	rjmp	.-40     	; 0x1c70 <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	08 95       	ret

00001ca4 <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
    1ca4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
    1ca6:	77 9b       	sbis	0x0e, 7	; 14
    1ca8:	fe cf       	rjmp	.-4      	; 0x1ca6 <spi_master_tx+0x2>
}
    1caa:	08 95       	ret

00001cac <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
    1cac:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
    1cae:	77 9b       	sbis	0x0e, 7	; 14
    1cb0:	fe cf       	rjmp	.-4      	; 0x1cae <spi_master_rx+0x2>
	
	return SPDR;
    1cb2:	8f b1       	in	r24, 0x0f	; 15
}
    1cb4:	08 95       	ret

00001cb6 <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
    1cb6:	bc 9a       	sbi	0x17, 4	; 23
    1cb8:	8c e0       	ldi	r24, 0x0C	; 12
    1cba:	83 bf       	out	0x33, r24	; 51
    1cbc:	8a ef       	ldi	r24, 0xFA	; 250
    1cbe:	81 bf       	out	0x31, r24	; 49
    1cc0:	87 b7       	in	r24, 0x37	; 55
    1cc2:	82 60       	ori	r24, 0x02	; 2
    1cc4:	87 bf       	out	0x37, r24	; 55
    1cc6:	08 95       	ret

00001cc8 <timer1_init>:
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	8f bd       	out	0x2f, r24	; 47
    1ccc:	8a e1       	ldi	r24, 0x1A	; 26
    1cce:	8e bd       	out	0x2e, r24	; 46
    1cd0:	1d bc       	out	0x2d, r1	; 45
    1cd2:	1c bc       	out	0x2c, r1	; 44
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	87 bd       	out	0x27, r24	; 39
    1cd8:	8f e8       	ldi	r24, 0x8F	; 143
    1cda:	86 bd       	out	0x26, r24	; 38
    1cdc:	87 b7       	in	r24, 0x37	; 55
    1cde:	84 60       	ori	r24, 0x04	; 4
    1ce0:	87 bf       	out	0x37, r24	; 55
    1ce2:	08 95       	ret

00001ce4 <timer3_init>:
    1ce4:	13 9a       	sbi	0x02, 3	; 2
    1ce6:	80 e4       	ldi	r24, 0x40	; 64
    1ce8:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1cec:	8a e1       	ldi	r24, 0x1A	; 26
    1cee:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1cf2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1cf6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1cfa:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1cfe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1d02:	08 95       	ret

00001d04 <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
    1d04:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
    1d08:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1d0c:	08 95       	ret

00001d0e <uart_init>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	ec 01       	movw	r28, r24
    1d14:	9b 01       	movw	r18, r22
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	60 e4       	ldi	r22, 0x40	; 64
    1d1c:	72 e4       	ldi	r23, 0x42	; 66
    1d1e:	8f e0       	ldi	r24, 0x0F	; 15
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	4f d1       	rcall	.+670    	; 0x1fc2 <__udivmodsi4>
    1d24:	21 50       	subi	r18, 0x01	; 1
    1d26:	31 09       	sbc	r19, r1
    1d28:	20 97       	sbiw	r28, 0x00	; 0
    1d2a:	59 f4       	brne	.+22     	; 0x1d42 <uart_init+0x34>
    1d2c:	10 98       	cbi	0x02, 0	; 2
    1d2e:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1d32:	29 b9       	out	0x09, r18	; 9
    1d34:	88 e1       	ldi	r24, 0x18	; 24
    1d36:	8a b9       	out	0x0a, r24	; 10
    1d38:	57 9a       	sbi	0x0a, 7	; 10
    1d3a:	86 e0       	ldi	r24, 0x06	; 6
    1d3c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1d40:	10 c0       	rjmp	.+32     	; 0x1d62 <uart_init+0x54>
    1d42:	21 97       	sbiw	r28, 0x01	; 1
    1d44:	71 f4       	brne	.+28     	; 0x1d62 <uart_init+0x54>
    1d46:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1d4a:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1d4e:	ea e9       	ldi	r30, 0x9A	; 154
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	88 e1       	ldi	r24, 0x18	; 24
    1d54:	80 83       	st	Z, r24
    1d56:	80 81       	ld	r24, Z
    1d58:	80 68       	ori	r24, 0x80	; 128
    1d5a:	80 83       	st	Z, r24
    1d5c:	86 e0       	ldi	r24, 0x06	; 6
    1d5e:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	08 95       	ret

00001d68 <uart0_tx_char>:
    1d68:	5d 9b       	sbis	0x0b, 5	; 11
    1d6a:	fe cf       	rjmp	.-4      	; 0x1d68 <uart0_tx_char>
    1d6c:	8c b9       	out	0x0c, r24	; 12
    1d6e:	08 95       	ret

00001d70 <uart0_tx_string>:
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	ec 01       	movw	r28, r24
    1d76:	88 81       	ld	r24, Y
    1d78:	88 23       	and	r24, r24
    1d7a:	29 f0       	breq	.+10     	; 0x1d86 <uart0_tx_string+0x16>
    1d7c:	21 96       	adiw	r28, 0x01	; 1
    1d7e:	f4 df       	rcall	.-24     	; 0x1d68 <uart0_tx_char>
    1d80:	89 91       	ld	r24, Y+
    1d82:	81 11       	cpse	r24, r1
    1d84:	fc cf       	rjmp	.-8      	; 0x1d7e <uart0_tx_string+0xe>
    1d86:	df 91       	pop	r29
    1d88:	cf 91       	pop	r28
    1d8a:	08 95       	ret

00001d8c <uart1_tx_char>:
    1d8c:	eb e9       	ldi	r30, 0x9B	; 155
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	90 81       	ld	r25, Z
    1d92:	95 ff       	sbrs	r25, 5
    1d94:	fd cf       	rjmp	.-6      	; 0x1d90 <uart1_tx_char+0x4>
    1d96:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1d9a:	08 95       	ret

00001d9c <uart1_tx_string>:
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	ec 01       	movw	r28, r24
    1da2:	88 81       	ld	r24, Y
    1da4:	88 23       	and	r24, r24
    1da6:	29 f0       	breq	.+10     	; 0x1db2 <uart1_tx_string+0x16>
    1da8:	21 96       	adiw	r28, 0x01	; 1
    1daa:	f0 df       	rcall	.-32     	; 0x1d8c <uart1_tx_char>
    1dac:	89 91       	ld	r24, Y+
    1dae:	81 11       	cpse	r24, r1
    1db0:	fc cf       	rjmp	.-8      	; 0x1daa <uart1_tx_string+0xe>
    1db2:	df 91       	pop	r29
    1db4:	cf 91       	pop	r28
    1db6:	08 95       	ret

00001db8 <IntToString>:

char * IntToString(int num)
{
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	64 97       	sbiw	r28, 0x14	; 20
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%02d",num); //고유 자릿값
    1dd0:	9f 93       	push	r25
    1dd2:	8f 93       	push	r24
    1dd4:	87 e7       	ldi	r24, 0x77	; 119
    1dd6:	94 e0       	ldi	r25, 0x04	; 4
    1dd8:	9f 93       	push	r25
    1dda:	8f 93       	push	r24
    1ddc:	8e 01       	movw	r16, r28
    1dde:	0f 5f       	subi	r16, 0xFF	; 255
    1de0:	1f 4f       	sbci	r17, 0xFF	; 255
    1de2:	1f 93       	push	r17
    1de4:	0f 93       	push	r16
    1de6:	4f d1       	rcall	.+670    	; 0x2086 <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
    1de8:	b8 01       	movw	r22, r16
    1dea:	88 e1       	ldi	r24, 0x18	; 24
    1dec:	96 e0       	ldi	r25, 0x06	; 6
    1dee:	3c d1       	rcall	.+632    	; 0x2068 <strcpy>
	
	return (buff.itos_buff);
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
}
    1dfc:	88 e1       	ldi	r24, 0x18	; 24
    1dfe:	96 e0       	ldi	r25, 0x06	; 6
    1e00:	64 96       	adiw	r28, 0x14	; 20
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	08 95       	ret

00001e16 <HexToString>:
 
 char * HexToString(char num)
 {
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	cf 93       	push	r28
    1e1c:	df 93       	push	r29
    1e1e:	cd b7       	in	r28, 0x3d	; 61
    1e20:	de b7       	in	r29, 0x3e	; 62
    1e22:	64 97       	sbiw	r28, 0x14	; 20
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
    1e2e:	1f 92       	push	r1
    1e30:	8f 93       	push	r24
    1e32:	8c e7       	ldi	r24, 0x7C	; 124
    1e34:	94 e0       	ldi	r25, 0x04	; 4
    1e36:	9f 93       	push	r25
    1e38:	8f 93       	push	r24
    1e3a:	8e 01       	movw	r16, r28
    1e3c:	0f 5f       	subi	r16, 0xFF	; 255
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	1f 93       	push	r17
    1e42:	0f 93       	push	r16
    1e44:	20 d1       	rcall	.+576    	; 0x2086 <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
    1e46:	b8 01       	movw	r22, r16
    1e48:	88 e1       	ldi	r24, 0x18	; 24
    1e4a:	96 e0       	ldi	r25, 0x06	; 6
    1e4c:	0d d1       	rcall	.+538    	; 0x2068 <strcpy>
	 
	 return (buff.itos_buff);
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
 }
    1e5a:	88 e1       	ldi	r24, 0x18	; 24
    1e5c:	96 e0       	ldi	r25, 0x06	; 6
    1e5e:	64 96       	adiw	r28, 0x14	; 20
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	08 95       	ret

00001e74 <connect_to_AP>:
 
 
 
char* connect_to_AP(char * cmd,char *ssid,char*password){
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	c0 54       	subi	r28, 0x40	; 64
    1e8a:	d1 09       	sbc	r29, r1
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	6b 01       	movw	r12, r22
    1e98:	7a 01       	movw	r14, r20
	//문자열 변수 ?
	//"AT+CWJAP=\""
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1e9a:	20 e4       	ldi	r18, 0x40	; 64
    1e9c:	e8 e5       	ldi	r30, 0x58	; 88
    1e9e:	f6 e0       	ldi	r31, 0x06	; 6
    1ea0:	df 01       	movw	r26, r30
    1ea2:	1d 92       	st	X+, r1
    1ea4:	2a 95       	dec	r18
    1ea6:	e9 f7       	brne	.-6      	; 0x1ea2 <connect_to_AP+0x2e>
	
	strcpy(buf,cmd);//"AT+CWJAP=\""
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	8e 01       	movw	r16, r28
    1eac:	0f 5f       	subi	r16, 0xFF	; 255
    1eae:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	da d0       	rcall	.+436    	; 0x2068 <strcpy>
	strcat(buf,ssid);
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	c8 01       	movw	r24, r16
    1eb8:	c3 d0       	rcall	.+390    	; 0x2040 <strcat>
	strcat(buf,"\",\"");
    1eba:	f8 01       	movw	r30, r16
    1ebc:	01 90       	ld	r0, Z+
    1ebe:	00 20       	and	r0, r0
    1ec0:	e9 f7       	brne	.-6      	; 0x1ebc <connect_to_AP+0x48>
    1ec2:	31 97       	sbiw	r30, 0x01	; 1
    1ec4:	82 e2       	ldi	r24, 0x22	; 34
    1ec6:	9c e2       	ldi	r25, 0x2C	; 44
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	80 83       	st	Z, r24
    1ecc:	82 e2       	ldi	r24, 0x22	; 34
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	93 83       	std	Z+3, r25	; 0x03
    1ed2:	82 83       	std	Z+2, r24	; 0x02
	strcat(buf,password);
    1ed4:	b7 01       	movw	r22, r14
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	b3 d0       	rcall	.+358    	; 0x2040 <strcat>
	strcat(buf,"\"\r\n");
    1eda:	f8 01       	movw	r30, r16
    1edc:	01 90       	ld	r0, Z+
    1ede:	00 20       	and	r0, r0
    1ee0:	e9 f7       	brne	.-6      	; 0x1edc <connect_to_AP+0x68>
    1ee2:	31 97       	sbiw	r30, 0x01	; 1
    1ee4:	82 e2       	ldi	r24, 0x22	; 34
    1ee6:	9d e0       	ldi	r25, 0x0D	; 13
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
    1eec:	8a e0       	ldi	r24, 0x0A	; 10
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	93 83       	std	Z+3, r25	; 0x03
    1ef2:	82 83       	std	Z+2, r24	; 0x02
	strcpy(buff.esp_buff,buf);
    1ef4:	b8 01       	movw	r22, r16
    1ef6:	88 e5       	ldi	r24, 0x58	; 88
    1ef8:	96 e0       	ldi	r25, 0x06	; 6
    1efa:	b6 d0       	rcall	.+364    	; 0x2068 <strcpy>
	return buff.esp_buff;
	
}
    1efc:	88 e5       	ldi	r24, 0x58	; 88
    1efe:	96 e0       	ldi	r25, 0x06	; 6
    1f00:	c0 5c       	subi	r28, 0xC0	; 192
    1f02:	df 4f       	sbci	r29, 0xFF	; 255
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	ff 90       	pop	r15
    1f18:	ef 90       	pop	r14
    1f1a:	df 90       	pop	r13
    1f1c:	cf 90       	pop	r12
    1f1e:	08 95       	ret

00001f20 <TCP_connect>:

char* TCP_connect(char * ip, char* port)
{//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
    1f20:	ef 92       	push	r14
    1f22:	ff 92       	push	r15
    1f24:	0f 93       	push	r16
    1f26:	1f 93       	push	r17
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
    1f30:	c0 54       	subi	r28, 0x40	; 64
    1f32:	d1 09       	sbc	r29, r1
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	de bf       	out	0x3e, r29	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	cd bf       	out	0x3d, r28	; 61
    1f3e:	9c 01       	movw	r18, r24
    1f40:	7b 01       	movw	r14, r22
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1f42:	80 e4       	ldi	r24, 0x40	; 64
    1f44:	e8 e5       	ldi	r30, 0x58	; 88
    1f46:	f6 e0       	ldi	r31, 0x06	; 6
    1f48:	df 01       	movw	r26, r30
    1f4a:	1d 92       	st	X+, r1
    1f4c:	8a 95       	dec	r24
    1f4e:	e9 f7       	brne	.-6      	; 0x1f4a <TCP_connect+0x2a>
		
	strcpy(buf,"AT+CIPSTART=\"TCP\",\"");
    1f50:	94 e1       	ldi	r25, 0x14	; 20
    1f52:	e1 e8       	ldi	r30, 0x81	; 129
    1f54:	f4 e0       	ldi	r31, 0x04	; 4
    1f56:	8e 01       	movw	r16, r28
    1f58:	0f 5f       	subi	r16, 0xFF	; 255
    1f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5c:	d8 01       	movw	r26, r16
    1f5e:	01 90       	ld	r0, Z+
    1f60:	0d 92       	st	X+, r0
    1f62:	9a 95       	dec	r25
    1f64:	e1 f7       	brne	.-8      	; 0x1f5e <TCP_connect+0x3e>
	strcat(buf,ip);
    1f66:	b9 01       	movw	r22, r18
    1f68:	c8 01       	movw	r24, r16
    1f6a:	6a d0       	rcall	.+212    	; 0x2040 <strcat>
	strcat(buf,"\",");
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	01 90       	ld	r0, Z+
    1f70:	00 20       	and	r0, r0
    1f72:	e9 f7       	brne	.-6      	; 0x1f6e <TCP_connect+0x4e>
    1f74:	31 97       	sbiw	r30, 0x01	; 1
    1f76:	82 e2       	ldi	r24, 0x22	; 34
    1f78:	9c e2       	ldi	r25, 0x2C	; 44
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	12 82       	std	Z+2, r1	; 0x02
	strcat(buf,port);
    1f80:	b7 01       	movw	r22, r14
    1f82:	c8 01       	movw	r24, r16
    1f84:	5d d0       	rcall	.+186    	; 0x2040 <strcat>
	strcat(buf,"\r\n");
    1f86:	f8 01       	movw	r30, r16
    1f88:	01 90       	ld	r0, Z+
    1f8a:	00 20       	and	r0, r0
    1f8c:	e9 f7       	brne	.-6      	; 0x1f88 <TCP_connect+0x68>
    1f8e:	31 97       	sbiw	r30, 0x01	; 1
    1f90:	8d e0       	ldi	r24, 0x0D	; 13
    1f92:	9a e0       	ldi	r25, 0x0A	; 10
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
    1f98:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
    1f9a:	b8 01       	movw	r22, r16
    1f9c:	88 e5       	ldi	r24, 0x58	; 88
    1f9e:	96 e0       	ldi	r25, 0x06	; 6
    1fa0:	63 d0       	rcall	.+198    	; 0x2068 <strcpy>
	
	return buff.esp_buff;
	
}
    1fa2:	88 e5       	ldi	r24, 0x58	; 88
    1fa4:	96 e0       	ldi	r25, 0x06	; 6
    1fa6:	c0 5c       	subi	r28, 0xC0	; 192
    1fa8:	df 4f       	sbci	r29, 0xFF	; 255
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	ff 90       	pop	r15
    1fbe:	ef 90       	pop	r14
    1fc0:	08 95       	ret

00001fc2 <__udivmodsi4>:
    1fc2:	a1 e2       	ldi	r26, 0x21	; 33
    1fc4:	1a 2e       	mov	r1, r26
    1fc6:	aa 1b       	sub	r26, r26
    1fc8:	bb 1b       	sub	r27, r27
    1fca:	fd 01       	movw	r30, r26
    1fcc:	0d c0       	rjmp	.+26     	; 0x1fe8 <__udivmodsi4_ep>

00001fce <__udivmodsi4_loop>:
    1fce:	aa 1f       	adc	r26, r26
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	ee 1f       	adc	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	a2 17       	cp	r26, r18
    1fd8:	b3 07       	cpc	r27, r19
    1fda:	e4 07       	cpc	r30, r20
    1fdc:	f5 07       	cpc	r31, r21
    1fde:	20 f0       	brcs	.+8      	; 0x1fe8 <__udivmodsi4_ep>
    1fe0:	a2 1b       	sub	r26, r18
    1fe2:	b3 0b       	sbc	r27, r19
    1fe4:	e4 0b       	sbc	r30, r20
    1fe6:	f5 0b       	sbc	r31, r21

00001fe8 <__udivmodsi4_ep>:
    1fe8:	66 1f       	adc	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	1a 94       	dec	r1
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <__udivmodsi4_loop>
    1ff4:	60 95       	com	r22
    1ff6:	70 95       	com	r23
    1ff8:	80 95       	com	r24
    1ffa:	90 95       	com	r25
    1ffc:	9b 01       	movw	r18, r22
    1ffe:	ac 01       	movw	r20, r24
    2000:	bd 01       	movw	r22, r26
    2002:	cf 01       	movw	r24, r30
    2004:	08 95       	ret

00002006 <atoi>:
    2006:	fc 01       	movw	r30, r24
    2008:	88 27       	eor	r24, r24
    200a:	99 27       	eor	r25, r25
    200c:	e8 94       	clt
    200e:	21 91       	ld	r18, Z+
    2010:	20 32       	cpi	r18, 0x20	; 32
    2012:	e9 f3       	breq	.-6      	; 0x200e <atoi+0x8>
    2014:	29 30       	cpi	r18, 0x09	; 9
    2016:	10 f0       	brcs	.+4      	; 0x201c <atoi+0x16>
    2018:	2e 30       	cpi	r18, 0x0E	; 14
    201a:	c8 f3       	brcs	.-14     	; 0x200e <atoi+0x8>
    201c:	2b 32       	cpi	r18, 0x2B	; 43
    201e:	39 f0       	breq	.+14     	; 0x202e <atoi+0x28>
    2020:	2d 32       	cpi	r18, 0x2D	; 45
    2022:	31 f4       	brne	.+12     	; 0x2030 <atoi+0x2a>
    2024:	68 94       	set
    2026:	03 c0       	rjmp	.+6      	; 0x202e <atoi+0x28>
    2028:	26 d0       	rcall	.+76     	; 0x2076 <__mulhi_const_10>
    202a:	82 0f       	add	r24, r18
    202c:	91 1d       	adc	r25, r1
    202e:	21 91       	ld	r18, Z+
    2030:	20 53       	subi	r18, 0x30	; 48
    2032:	2a 30       	cpi	r18, 0x0A	; 10
    2034:	c8 f3       	brcs	.-14     	; 0x2028 <atoi+0x22>
    2036:	1e f4       	brtc	.+6      	; 0x203e <atoi+0x38>
    2038:	90 95       	com	r25
    203a:	81 95       	neg	r24
    203c:	9f 4f       	sbci	r25, 0xFF	; 255
    203e:	08 95       	ret

00002040 <strcat>:
    2040:	fb 01       	movw	r30, r22
    2042:	dc 01       	movw	r26, r24
    2044:	0d 90       	ld	r0, X+
    2046:	00 20       	and	r0, r0
    2048:	e9 f7       	brne	.-6      	; 0x2044 <strcat+0x4>
    204a:	11 97       	sbiw	r26, 0x01	; 1
    204c:	01 90       	ld	r0, Z+
    204e:	0d 92       	st	X+, r0
    2050:	00 20       	and	r0, r0
    2052:	e1 f7       	brne	.-8      	; 0x204c <strcat+0xc>
    2054:	08 95       	ret

00002056 <strcmp>:
    2056:	fb 01       	movw	r30, r22
    2058:	dc 01       	movw	r26, r24
    205a:	8d 91       	ld	r24, X+
    205c:	01 90       	ld	r0, Z+
    205e:	80 19       	sub	r24, r0
    2060:	01 10       	cpse	r0, r1
    2062:	d9 f3       	breq	.-10     	; 0x205a <strcmp+0x4>
    2064:	99 0b       	sbc	r25, r25
    2066:	08 95       	ret

00002068 <strcpy>:
    2068:	fb 01       	movw	r30, r22
    206a:	dc 01       	movw	r26, r24
    206c:	01 90       	ld	r0, Z+
    206e:	0d 92       	st	X+, r0
    2070:	00 20       	and	r0, r0
    2072:	e1 f7       	brne	.-8      	; 0x206c <strcpy+0x4>
    2074:	08 95       	ret

00002076 <__mulhi_const_10>:
    2076:	7a e0       	ldi	r23, 0x0A	; 10
    2078:	97 9f       	mul	r25, r23
    207a:	90 2d       	mov	r25, r0
    207c:	87 9f       	mul	r24, r23
    207e:	80 2d       	mov	r24, r0
    2080:	91 0d       	add	r25, r1
    2082:	11 24       	eor	r1, r1
    2084:	08 95       	ret

00002086 <sprintf>:
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	2e 97       	sbiw	r28, 0x0e	; 14
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	0d 89       	ldd	r16, Y+21	; 0x15
    20a0:	1e 89       	ldd	r17, Y+22	; 0x16
    20a2:	86 e0       	ldi	r24, 0x06	; 6
    20a4:	8c 83       	std	Y+4, r24	; 0x04
    20a6:	1a 83       	std	Y+2, r17	; 0x02
    20a8:	09 83       	std	Y+1, r16	; 0x01
    20aa:	8f ef       	ldi	r24, 0xFF	; 255
    20ac:	9f e7       	ldi	r25, 0x7F	; 127
    20ae:	9e 83       	std	Y+6, r25	; 0x06
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	ae 01       	movw	r20, r28
    20b4:	47 5e       	subi	r20, 0xE7	; 231
    20b6:	5f 4f       	sbci	r21, 0xFF	; 255
    20b8:	6f 89       	ldd	r22, Y+23	; 0x17
    20ba:	78 8d       	ldd	r23, Y+24	; 0x18
    20bc:	ce 01       	movw	r24, r28
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	10 d0       	rcall	.+32     	; 0x20e2 <vfprintf>
    20c2:	ef 81       	ldd	r30, Y+7	; 0x07
    20c4:	f8 85       	ldd	r31, Y+8	; 0x08
    20c6:	e0 0f       	add	r30, r16
    20c8:	f1 1f       	adc	r31, r17
    20ca:	10 82       	st	Z, r1
    20cc:	2e 96       	adiw	r28, 0x0e	; 14
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	08 95       	ret

000020e2 <vfprintf>:
    20e2:	2f 92       	push	r2
    20e4:	3f 92       	push	r3
    20e6:	4f 92       	push	r4
    20e8:	5f 92       	push	r5
    20ea:	6f 92       	push	r6
    20ec:	7f 92       	push	r7
    20ee:	8f 92       	push	r8
    20f0:	9f 92       	push	r9
    20f2:	af 92       	push	r10
    20f4:	bf 92       	push	r11
    20f6:	cf 92       	push	r12
    20f8:	df 92       	push	r13
    20fa:	ef 92       	push	r14
    20fc:	ff 92       	push	r15
    20fe:	0f 93       	push	r16
    2100:	1f 93       	push	r17
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	2b 97       	sbiw	r28, 0x0b	; 11
    210c:	0f b6       	in	r0, 0x3f	; 63
    210e:	f8 94       	cli
    2110:	de bf       	out	0x3e, r29	; 62
    2112:	0f be       	out	0x3f, r0	; 63
    2114:	cd bf       	out	0x3d, r28	; 61
    2116:	6c 01       	movw	r12, r24
    2118:	7b 01       	movw	r14, r22
    211a:	8a 01       	movw	r16, r20
    211c:	fc 01       	movw	r30, r24
    211e:	17 82       	std	Z+7, r1	; 0x07
    2120:	16 82       	std	Z+6, r1	; 0x06
    2122:	83 81       	ldd	r24, Z+3	; 0x03
    2124:	81 ff       	sbrs	r24, 1
    2126:	bf c1       	rjmp	.+894    	; 0x24a6 <vfprintf+0x3c4>
    2128:	ce 01       	movw	r24, r28
    212a:	01 96       	adiw	r24, 0x01	; 1
    212c:	3c 01       	movw	r6, r24
    212e:	f6 01       	movw	r30, r12
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	f7 01       	movw	r30, r14
    2134:	93 fd       	sbrc	r25, 3
    2136:	85 91       	lpm	r24, Z+
    2138:	93 ff       	sbrs	r25, 3
    213a:	81 91       	ld	r24, Z+
    213c:	7f 01       	movw	r14, r30
    213e:	88 23       	and	r24, r24
    2140:	09 f4       	brne	.+2      	; 0x2144 <vfprintf+0x62>
    2142:	ad c1       	rjmp	.+858    	; 0x249e <vfprintf+0x3bc>
    2144:	85 32       	cpi	r24, 0x25	; 37
    2146:	39 f4       	brne	.+14     	; 0x2156 <vfprintf+0x74>
    2148:	93 fd       	sbrc	r25, 3
    214a:	85 91       	lpm	r24, Z+
    214c:	93 ff       	sbrs	r25, 3
    214e:	81 91       	ld	r24, Z+
    2150:	7f 01       	movw	r14, r30
    2152:	85 32       	cpi	r24, 0x25	; 37
    2154:	21 f4       	brne	.+8      	; 0x215e <vfprintf+0x7c>
    2156:	b6 01       	movw	r22, r12
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	d6 d1       	rcall	.+940    	; 0x2508 <fputc>
    215c:	e8 cf       	rjmp	.-48     	; 0x212e <vfprintf+0x4c>
    215e:	91 2c       	mov	r9, r1
    2160:	21 2c       	mov	r2, r1
    2162:	31 2c       	mov	r3, r1
    2164:	ff e1       	ldi	r31, 0x1F	; 31
    2166:	f3 15       	cp	r31, r3
    2168:	d8 f0       	brcs	.+54     	; 0x21a0 <vfprintf+0xbe>
    216a:	8b 32       	cpi	r24, 0x2B	; 43
    216c:	79 f0       	breq	.+30     	; 0x218c <vfprintf+0xaa>
    216e:	38 f4       	brcc	.+14     	; 0x217e <vfprintf+0x9c>
    2170:	80 32       	cpi	r24, 0x20	; 32
    2172:	79 f0       	breq	.+30     	; 0x2192 <vfprintf+0xb0>
    2174:	83 32       	cpi	r24, 0x23	; 35
    2176:	a1 f4       	brne	.+40     	; 0x21a0 <vfprintf+0xbe>
    2178:	23 2d       	mov	r18, r3
    217a:	20 61       	ori	r18, 0x10	; 16
    217c:	1d c0       	rjmp	.+58     	; 0x21b8 <vfprintf+0xd6>
    217e:	8d 32       	cpi	r24, 0x2D	; 45
    2180:	61 f0       	breq	.+24     	; 0x219a <vfprintf+0xb8>
    2182:	80 33       	cpi	r24, 0x30	; 48
    2184:	69 f4       	brne	.+26     	; 0x21a0 <vfprintf+0xbe>
    2186:	23 2d       	mov	r18, r3
    2188:	21 60       	ori	r18, 0x01	; 1
    218a:	16 c0       	rjmp	.+44     	; 0x21b8 <vfprintf+0xd6>
    218c:	83 2d       	mov	r24, r3
    218e:	82 60       	ori	r24, 0x02	; 2
    2190:	38 2e       	mov	r3, r24
    2192:	e3 2d       	mov	r30, r3
    2194:	e4 60       	ori	r30, 0x04	; 4
    2196:	3e 2e       	mov	r3, r30
    2198:	2a c0       	rjmp	.+84     	; 0x21ee <vfprintf+0x10c>
    219a:	f3 2d       	mov	r31, r3
    219c:	f8 60       	ori	r31, 0x08	; 8
    219e:	1d c0       	rjmp	.+58     	; 0x21da <vfprintf+0xf8>
    21a0:	37 fc       	sbrc	r3, 7
    21a2:	2d c0       	rjmp	.+90     	; 0x21fe <vfprintf+0x11c>
    21a4:	20 ed       	ldi	r18, 0xD0	; 208
    21a6:	28 0f       	add	r18, r24
    21a8:	2a 30       	cpi	r18, 0x0A	; 10
    21aa:	40 f0       	brcs	.+16     	; 0x21bc <vfprintf+0xda>
    21ac:	8e 32       	cpi	r24, 0x2E	; 46
    21ae:	b9 f4       	brne	.+46     	; 0x21de <vfprintf+0xfc>
    21b0:	36 fc       	sbrc	r3, 6
    21b2:	75 c1       	rjmp	.+746    	; 0x249e <vfprintf+0x3bc>
    21b4:	23 2d       	mov	r18, r3
    21b6:	20 64       	ori	r18, 0x40	; 64
    21b8:	32 2e       	mov	r3, r18
    21ba:	19 c0       	rjmp	.+50     	; 0x21ee <vfprintf+0x10c>
    21bc:	36 fe       	sbrs	r3, 6
    21be:	06 c0       	rjmp	.+12     	; 0x21cc <vfprintf+0xea>
    21c0:	8a e0       	ldi	r24, 0x0A	; 10
    21c2:	98 9e       	mul	r9, r24
    21c4:	20 0d       	add	r18, r0
    21c6:	11 24       	eor	r1, r1
    21c8:	92 2e       	mov	r9, r18
    21ca:	11 c0       	rjmp	.+34     	; 0x21ee <vfprintf+0x10c>
    21cc:	ea e0       	ldi	r30, 0x0A	; 10
    21ce:	2e 9e       	mul	r2, r30
    21d0:	20 0d       	add	r18, r0
    21d2:	11 24       	eor	r1, r1
    21d4:	22 2e       	mov	r2, r18
    21d6:	f3 2d       	mov	r31, r3
    21d8:	f0 62       	ori	r31, 0x20	; 32
    21da:	3f 2e       	mov	r3, r31
    21dc:	08 c0       	rjmp	.+16     	; 0x21ee <vfprintf+0x10c>
    21de:	8c 36       	cpi	r24, 0x6C	; 108
    21e0:	21 f4       	brne	.+8      	; 0x21ea <vfprintf+0x108>
    21e2:	83 2d       	mov	r24, r3
    21e4:	80 68       	ori	r24, 0x80	; 128
    21e6:	38 2e       	mov	r3, r24
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <vfprintf+0x10c>
    21ea:	88 36       	cpi	r24, 0x68	; 104
    21ec:	41 f4       	brne	.+16     	; 0x21fe <vfprintf+0x11c>
    21ee:	f7 01       	movw	r30, r14
    21f0:	93 fd       	sbrc	r25, 3
    21f2:	85 91       	lpm	r24, Z+
    21f4:	93 ff       	sbrs	r25, 3
    21f6:	81 91       	ld	r24, Z+
    21f8:	7f 01       	movw	r14, r30
    21fa:	81 11       	cpse	r24, r1
    21fc:	b3 cf       	rjmp	.-154    	; 0x2164 <vfprintf+0x82>
    21fe:	98 2f       	mov	r25, r24
    2200:	9f 7d       	andi	r25, 0xDF	; 223
    2202:	95 54       	subi	r25, 0x45	; 69
    2204:	93 30       	cpi	r25, 0x03	; 3
    2206:	28 f4       	brcc	.+10     	; 0x2212 <vfprintf+0x130>
    2208:	0c 5f       	subi	r16, 0xFC	; 252
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	9f e3       	ldi	r25, 0x3F	; 63
    220e:	99 83       	std	Y+1, r25	; 0x01
    2210:	0d c0       	rjmp	.+26     	; 0x222c <vfprintf+0x14a>
    2212:	83 36       	cpi	r24, 0x63	; 99
    2214:	31 f0       	breq	.+12     	; 0x2222 <vfprintf+0x140>
    2216:	83 37       	cpi	r24, 0x73	; 115
    2218:	71 f0       	breq	.+28     	; 0x2236 <vfprintf+0x154>
    221a:	83 35       	cpi	r24, 0x53	; 83
    221c:	09 f0       	breq	.+2      	; 0x2220 <vfprintf+0x13e>
    221e:	55 c0       	rjmp	.+170    	; 0x22ca <vfprintf+0x1e8>
    2220:	20 c0       	rjmp	.+64     	; 0x2262 <vfprintf+0x180>
    2222:	f8 01       	movw	r30, r16
    2224:	80 81       	ld	r24, Z
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	0e 5f       	subi	r16, 0xFE	; 254
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
    222c:	88 24       	eor	r8, r8
    222e:	83 94       	inc	r8
    2230:	91 2c       	mov	r9, r1
    2232:	53 01       	movw	r10, r6
    2234:	12 c0       	rjmp	.+36     	; 0x225a <vfprintf+0x178>
    2236:	28 01       	movw	r4, r16
    2238:	f2 e0       	ldi	r31, 0x02	; 2
    223a:	4f 0e       	add	r4, r31
    223c:	51 1c       	adc	r5, r1
    223e:	f8 01       	movw	r30, r16
    2240:	a0 80       	ld	r10, Z
    2242:	b1 80       	ldd	r11, Z+1	; 0x01
    2244:	36 fe       	sbrs	r3, 6
    2246:	03 c0       	rjmp	.+6      	; 0x224e <vfprintf+0x16c>
    2248:	69 2d       	mov	r22, r9
    224a:	70 e0       	ldi	r23, 0x00	; 0
    224c:	02 c0       	rjmp	.+4      	; 0x2252 <vfprintf+0x170>
    224e:	6f ef       	ldi	r22, 0xFF	; 255
    2250:	7f ef       	ldi	r23, 0xFF	; 255
    2252:	c5 01       	movw	r24, r10
    2254:	4e d1       	rcall	.+668    	; 0x24f2 <strnlen>
    2256:	4c 01       	movw	r8, r24
    2258:	82 01       	movw	r16, r4
    225a:	f3 2d       	mov	r31, r3
    225c:	ff 77       	andi	r31, 0x7F	; 127
    225e:	3f 2e       	mov	r3, r31
    2260:	15 c0       	rjmp	.+42     	; 0x228c <vfprintf+0x1aa>
    2262:	28 01       	movw	r4, r16
    2264:	22 e0       	ldi	r18, 0x02	; 2
    2266:	42 0e       	add	r4, r18
    2268:	51 1c       	adc	r5, r1
    226a:	f8 01       	movw	r30, r16
    226c:	a0 80       	ld	r10, Z
    226e:	b1 80       	ldd	r11, Z+1	; 0x01
    2270:	36 fe       	sbrs	r3, 6
    2272:	03 c0       	rjmp	.+6      	; 0x227a <vfprintf+0x198>
    2274:	69 2d       	mov	r22, r9
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	02 c0       	rjmp	.+4      	; 0x227e <vfprintf+0x19c>
    227a:	6f ef       	ldi	r22, 0xFF	; 255
    227c:	7f ef       	ldi	r23, 0xFF	; 255
    227e:	c5 01       	movw	r24, r10
    2280:	2d d1       	rcall	.+602    	; 0x24dc <strnlen_P>
    2282:	4c 01       	movw	r8, r24
    2284:	f3 2d       	mov	r31, r3
    2286:	f0 68       	ori	r31, 0x80	; 128
    2288:	3f 2e       	mov	r3, r31
    228a:	82 01       	movw	r16, r4
    228c:	33 fc       	sbrc	r3, 3
    228e:	19 c0       	rjmp	.+50     	; 0x22c2 <vfprintf+0x1e0>
    2290:	82 2d       	mov	r24, r2
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	88 16       	cp	r8, r24
    2296:	99 06       	cpc	r9, r25
    2298:	a0 f4       	brcc	.+40     	; 0x22c2 <vfprintf+0x1e0>
    229a:	b6 01       	movw	r22, r12
    229c:	80 e2       	ldi	r24, 0x20	; 32
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	33 d1       	rcall	.+614    	; 0x2508 <fputc>
    22a2:	2a 94       	dec	r2
    22a4:	f5 cf       	rjmp	.-22     	; 0x2290 <vfprintf+0x1ae>
    22a6:	f5 01       	movw	r30, r10
    22a8:	37 fc       	sbrc	r3, 7
    22aa:	85 91       	lpm	r24, Z+
    22ac:	37 fe       	sbrs	r3, 7
    22ae:	81 91       	ld	r24, Z+
    22b0:	5f 01       	movw	r10, r30
    22b2:	b6 01       	movw	r22, r12
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	28 d1       	rcall	.+592    	; 0x2508 <fputc>
    22b8:	21 10       	cpse	r2, r1
    22ba:	2a 94       	dec	r2
    22bc:	21 e0       	ldi	r18, 0x01	; 1
    22be:	82 1a       	sub	r8, r18
    22c0:	91 08       	sbc	r9, r1
    22c2:	81 14       	cp	r8, r1
    22c4:	91 04       	cpc	r9, r1
    22c6:	79 f7       	brne	.-34     	; 0x22a6 <vfprintf+0x1c4>
    22c8:	e1 c0       	rjmp	.+450    	; 0x248c <vfprintf+0x3aa>
    22ca:	84 36       	cpi	r24, 0x64	; 100
    22cc:	11 f0       	breq	.+4      	; 0x22d2 <vfprintf+0x1f0>
    22ce:	89 36       	cpi	r24, 0x69	; 105
    22d0:	39 f5       	brne	.+78     	; 0x2320 <vfprintf+0x23e>
    22d2:	f8 01       	movw	r30, r16
    22d4:	37 fe       	sbrs	r3, 7
    22d6:	07 c0       	rjmp	.+14     	; 0x22e6 <vfprintf+0x204>
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	82 81       	ldd	r24, Z+2	; 0x02
    22de:	93 81       	ldd	r25, Z+3	; 0x03
    22e0:	0c 5f       	subi	r16, 0xFC	; 252
    22e2:	1f 4f       	sbci	r17, 0xFF	; 255
    22e4:	08 c0       	rjmp	.+16     	; 0x22f6 <vfprintf+0x214>
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	07 2e       	mov	r0, r23
    22ec:	00 0c       	add	r0, r0
    22ee:	88 0b       	sbc	r24, r24
    22f0:	99 0b       	sbc	r25, r25
    22f2:	0e 5f       	subi	r16, 0xFE	; 254
    22f4:	1f 4f       	sbci	r17, 0xFF	; 255
    22f6:	f3 2d       	mov	r31, r3
    22f8:	ff 76       	andi	r31, 0x6F	; 111
    22fa:	3f 2e       	mov	r3, r31
    22fc:	97 ff       	sbrs	r25, 7
    22fe:	09 c0       	rjmp	.+18     	; 0x2312 <vfprintf+0x230>
    2300:	90 95       	com	r25
    2302:	80 95       	com	r24
    2304:	70 95       	com	r23
    2306:	61 95       	neg	r22
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	8f 4f       	sbci	r24, 0xFF	; 255
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	f0 68       	ori	r31, 0x80	; 128
    2310:	3f 2e       	mov	r3, r31
    2312:	2a e0       	ldi	r18, 0x0A	; 10
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	a3 01       	movw	r20, r6
    2318:	33 d1       	rcall	.+614    	; 0x2580 <__ultoa_invert>
    231a:	88 2e       	mov	r8, r24
    231c:	86 18       	sub	r8, r6
    231e:	44 c0       	rjmp	.+136    	; 0x23a8 <vfprintf+0x2c6>
    2320:	85 37       	cpi	r24, 0x75	; 117
    2322:	31 f4       	brne	.+12     	; 0x2330 <vfprintf+0x24e>
    2324:	23 2d       	mov	r18, r3
    2326:	2f 7e       	andi	r18, 0xEF	; 239
    2328:	b2 2e       	mov	r11, r18
    232a:	2a e0       	ldi	r18, 0x0A	; 10
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	25 c0       	rjmp	.+74     	; 0x237a <vfprintf+0x298>
    2330:	93 2d       	mov	r25, r3
    2332:	99 7f       	andi	r25, 0xF9	; 249
    2334:	b9 2e       	mov	r11, r25
    2336:	8f 36       	cpi	r24, 0x6F	; 111
    2338:	c1 f0       	breq	.+48     	; 0x236a <vfprintf+0x288>
    233a:	18 f4       	brcc	.+6      	; 0x2342 <vfprintf+0x260>
    233c:	88 35       	cpi	r24, 0x58	; 88
    233e:	79 f0       	breq	.+30     	; 0x235e <vfprintf+0x27c>
    2340:	ae c0       	rjmp	.+348    	; 0x249e <vfprintf+0x3bc>
    2342:	80 37       	cpi	r24, 0x70	; 112
    2344:	19 f0       	breq	.+6      	; 0x234c <vfprintf+0x26a>
    2346:	88 37       	cpi	r24, 0x78	; 120
    2348:	21 f0       	breq	.+8      	; 0x2352 <vfprintf+0x270>
    234a:	a9 c0       	rjmp	.+338    	; 0x249e <vfprintf+0x3bc>
    234c:	e9 2f       	mov	r30, r25
    234e:	e0 61       	ori	r30, 0x10	; 16
    2350:	be 2e       	mov	r11, r30
    2352:	b4 fe       	sbrs	r11, 4
    2354:	0d c0       	rjmp	.+26     	; 0x2370 <vfprintf+0x28e>
    2356:	fb 2d       	mov	r31, r11
    2358:	f4 60       	ori	r31, 0x04	; 4
    235a:	bf 2e       	mov	r11, r31
    235c:	09 c0       	rjmp	.+18     	; 0x2370 <vfprintf+0x28e>
    235e:	34 fe       	sbrs	r3, 4
    2360:	0a c0       	rjmp	.+20     	; 0x2376 <vfprintf+0x294>
    2362:	29 2f       	mov	r18, r25
    2364:	26 60       	ori	r18, 0x06	; 6
    2366:	b2 2e       	mov	r11, r18
    2368:	06 c0       	rjmp	.+12     	; 0x2376 <vfprintf+0x294>
    236a:	28 e0       	ldi	r18, 0x08	; 8
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	05 c0       	rjmp	.+10     	; 0x237a <vfprintf+0x298>
    2370:	20 e1       	ldi	r18, 0x10	; 16
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	02 c0       	rjmp	.+4      	; 0x237a <vfprintf+0x298>
    2376:	20 e1       	ldi	r18, 0x10	; 16
    2378:	32 e0       	ldi	r19, 0x02	; 2
    237a:	f8 01       	movw	r30, r16
    237c:	b7 fe       	sbrs	r11, 7
    237e:	07 c0       	rjmp	.+14     	; 0x238e <vfprintf+0x2ac>
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	0c 5f       	subi	r16, 0xFC	; 252
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	06 c0       	rjmp	.+12     	; 0x239a <vfprintf+0x2b8>
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	0e 5f       	subi	r16, 0xFE	; 254
    2398:	1f 4f       	sbci	r17, 0xFF	; 255
    239a:	a3 01       	movw	r20, r6
    239c:	f1 d0       	rcall	.+482    	; 0x2580 <__ultoa_invert>
    239e:	88 2e       	mov	r8, r24
    23a0:	86 18       	sub	r8, r6
    23a2:	fb 2d       	mov	r31, r11
    23a4:	ff 77       	andi	r31, 0x7F	; 127
    23a6:	3f 2e       	mov	r3, r31
    23a8:	36 fe       	sbrs	r3, 6
    23aa:	0d c0       	rjmp	.+26     	; 0x23c6 <vfprintf+0x2e4>
    23ac:	23 2d       	mov	r18, r3
    23ae:	2e 7f       	andi	r18, 0xFE	; 254
    23b0:	a2 2e       	mov	r10, r18
    23b2:	89 14       	cp	r8, r9
    23b4:	58 f4       	brcc	.+22     	; 0x23cc <vfprintf+0x2ea>
    23b6:	34 fe       	sbrs	r3, 4
    23b8:	0b c0       	rjmp	.+22     	; 0x23d0 <vfprintf+0x2ee>
    23ba:	32 fc       	sbrc	r3, 2
    23bc:	09 c0       	rjmp	.+18     	; 0x23d0 <vfprintf+0x2ee>
    23be:	83 2d       	mov	r24, r3
    23c0:	8e 7e       	andi	r24, 0xEE	; 238
    23c2:	a8 2e       	mov	r10, r24
    23c4:	05 c0       	rjmp	.+10     	; 0x23d0 <vfprintf+0x2ee>
    23c6:	b8 2c       	mov	r11, r8
    23c8:	a3 2c       	mov	r10, r3
    23ca:	03 c0       	rjmp	.+6      	; 0x23d2 <vfprintf+0x2f0>
    23cc:	b8 2c       	mov	r11, r8
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <vfprintf+0x2f0>
    23d0:	b9 2c       	mov	r11, r9
    23d2:	a4 fe       	sbrs	r10, 4
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <vfprintf+0x312>
    23d6:	fe 01       	movw	r30, r28
    23d8:	e8 0d       	add	r30, r8
    23da:	f1 1d       	adc	r31, r1
    23dc:	80 81       	ld	r24, Z
    23de:	80 33       	cpi	r24, 0x30	; 48
    23e0:	21 f4       	brne	.+8      	; 0x23ea <vfprintf+0x308>
    23e2:	9a 2d       	mov	r25, r10
    23e4:	99 7e       	andi	r25, 0xE9	; 233
    23e6:	a9 2e       	mov	r10, r25
    23e8:	09 c0       	rjmp	.+18     	; 0x23fc <vfprintf+0x31a>
    23ea:	a2 fe       	sbrs	r10, 2
    23ec:	06 c0       	rjmp	.+12     	; 0x23fa <vfprintf+0x318>
    23ee:	b3 94       	inc	r11
    23f0:	b3 94       	inc	r11
    23f2:	04 c0       	rjmp	.+8      	; 0x23fc <vfprintf+0x31a>
    23f4:	8a 2d       	mov	r24, r10
    23f6:	86 78       	andi	r24, 0x86	; 134
    23f8:	09 f0       	breq	.+2      	; 0x23fc <vfprintf+0x31a>
    23fa:	b3 94       	inc	r11
    23fc:	a3 fc       	sbrc	r10, 3
    23fe:	10 c0       	rjmp	.+32     	; 0x2420 <vfprintf+0x33e>
    2400:	a0 fe       	sbrs	r10, 0
    2402:	06 c0       	rjmp	.+12     	; 0x2410 <vfprintf+0x32e>
    2404:	b2 14       	cp	r11, r2
    2406:	80 f4       	brcc	.+32     	; 0x2428 <vfprintf+0x346>
    2408:	28 0c       	add	r2, r8
    240a:	92 2c       	mov	r9, r2
    240c:	9b 18       	sub	r9, r11
    240e:	0d c0       	rjmp	.+26     	; 0x242a <vfprintf+0x348>
    2410:	b2 14       	cp	r11, r2
    2412:	58 f4       	brcc	.+22     	; 0x242a <vfprintf+0x348>
    2414:	b6 01       	movw	r22, r12
    2416:	80 e2       	ldi	r24, 0x20	; 32
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	76 d0       	rcall	.+236    	; 0x2508 <fputc>
    241c:	b3 94       	inc	r11
    241e:	f8 cf       	rjmp	.-16     	; 0x2410 <vfprintf+0x32e>
    2420:	b2 14       	cp	r11, r2
    2422:	18 f4       	brcc	.+6      	; 0x242a <vfprintf+0x348>
    2424:	2b 18       	sub	r2, r11
    2426:	02 c0       	rjmp	.+4      	; 0x242c <vfprintf+0x34a>
    2428:	98 2c       	mov	r9, r8
    242a:	21 2c       	mov	r2, r1
    242c:	a4 fe       	sbrs	r10, 4
    242e:	0f c0       	rjmp	.+30     	; 0x244e <vfprintf+0x36c>
    2430:	b6 01       	movw	r22, r12
    2432:	80 e3       	ldi	r24, 0x30	; 48
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	68 d0       	rcall	.+208    	; 0x2508 <fputc>
    2438:	a2 fe       	sbrs	r10, 2
    243a:	16 c0       	rjmp	.+44     	; 0x2468 <vfprintf+0x386>
    243c:	a1 fc       	sbrc	r10, 1
    243e:	03 c0       	rjmp	.+6      	; 0x2446 <vfprintf+0x364>
    2440:	88 e7       	ldi	r24, 0x78	; 120
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	02 c0       	rjmp	.+4      	; 0x244a <vfprintf+0x368>
    2446:	88 e5       	ldi	r24, 0x58	; 88
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	b6 01       	movw	r22, r12
    244c:	0c c0       	rjmp	.+24     	; 0x2466 <vfprintf+0x384>
    244e:	8a 2d       	mov	r24, r10
    2450:	86 78       	andi	r24, 0x86	; 134
    2452:	51 f0       	breq	.+20     	; 0x2468 <vfprintf+0x386>
    2454:	a1 fe       	sbrs	r10, 1
    2456:	02 c0       	rjmp	.+4      	; 0x245c <vfprintf+0x37a>
    2458:	8b e2       	ldi	r24, 0x2B	; 43
    245a:	01 c0       	rjmp	.+2      	; 0x245e <vfprintf+0x37c>
    245c:	80 e2       	ldi	r24, 0x20	; 32
    245e:	a7 fc       	sbrc	r10, 7
    2460:	8d e2       	ldi	r24, 0x2D	; 45
    2462:	b6 01       	movw	r22, r12
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	50 d0       	rcall	.+160    	; 0x2508 <fputc>
    2468:	89 14       	cp	r8, r9
    246a:	30 f4       	brcc	.+12     	; 0x2478 <vfprintf+0x396>
    246c:	b6 01       	movw	r22, r12
    246e:	80 e3       	ldi	r24, 0x30	; 48
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	4a d0       	rcall	.+148    	; 0x2508 <fputc>
    2474:	9a 94       	dec	r9
    2476:	f8 cf       	rjmp	.-16     	; 0x2468 <vfprintf+0x386>
    2478:	8a 94       	dec	r8
    247a:	f3 01       	movw	r30, r6
    247c:	e8 0d       	add	r30, r8
    247e:	f1 1d       	adc	r31, r1
    2480:	80 81       	ld	r24, Z
    2482:	b6 01       	movw	r22, r12
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	40 d0       	rcall	.+128    	; 0x2508 <fputc>
    2488:	81 10       	cpse	r8, r1
    248a:	f6 cf       	rjmp	.-20     	; 0x2478 <vfprintf+0x396>
    248c:	22 20       	and	r2, r2
    248e:	09 f4       	brne	.+2      	; 0x2492 <vfprintf+0x3b0>
    2490:	4e ce       	rjmp	.-868    	; 0x212e <vfprintf+0x4c>
    2492:	b6 01       	movw	r22, r12
    2494:	80 e2       	ldi	r24, 0x20	; 32
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	37 d0       	rcall	.+110    	; 0x2508 <fputc>
    249a:	2a 94       	dec	r2
    249c:	f7 cf       	rjmp	.-18     	; 0x248c <vfprintf+0x3aa>
    249e:	f6 01       	movw	r30, r12
    24a0:	86 81       	ldd	r24, Z+6	; 0x06
    24a2:	97 81       	ldd	r25, Z+7	; 0x07
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <vfprintf+0x3c8>
    24a6:	8f ef       	ldi	r24, 0xFF	; 255
    24a8:	9f ef       	ldi	r25, 0xFF	; 255
    24aa:	2b 96       	adiw	r28, 0x0b	; 11
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	df 90       	pop	r13
    24c4:	cf 90       	pop	r12
    24c6:	bf 90       	pop	r11
    24c8:	af 90       	pop	r10
    24ca:	9f 90       	pop	r9
    24cc:	8f 90       	pop	r8
    24ce:	7f 90       	pop	r7
    24d0:	6f 90       	pop	r6
    24d2:	5f 90       	pop	r5
    24d4:	4f 90       	pop	r4
    24d6:	3f 90       	pop	r3
    24d8:	2f 90       	pop	r2
    24da:	08 95       	ret

000024dc <strnlen_P>:
    24dc:	fc 01       	movw	r30, r24
    24de:	05 90       	lpm	r0, Z+
    24e0:	61 50       	subi	r22, 0x01	; 1
    24e2:	70 40       	sbci	r23, 0x00	; 0
    24e4:	01 10       	cpse	r0, r1
    24e6:	d8 f7       	brcc	.-10     	; 0x24de <strnlen_P+0x2>
    24e8:	80 95       	com	r24
    24ea:	90 95       	com	r25
    24ec:	8e 0f       	add	r24, r30
    24ee:	9f 1f       	adc	r25, r31
    24f0:	08 95       	ret

000024f2 <strnlen>:
    24f2:	fc 01       	movw	r30, r24
    24f4:	61 50       	subi	r22, 0x01	; 1
    24f6:	70 40       	sbci	r23, 0x00	; 0
    24f8:	01 90       	ld	r0, Z+
    24fa:	01 10       	cpse	r0, r1
    24fc:	d8 f7       	brcc	.-10     	; 0x24f4 <strnlen+0x2>
    24fe:	80 95       	com	r24
    2500:	90 95       	com	r25
    2502:	8e 0f       	add	r24, r30
    2504:	9f 1f       	adc	r25, r31
    2506:	08 95       	ret

00002508 <fputc>:
    2508:	0f 93       	push	r16
    250a:	1f 93       	push	r17
    250c:	cf 93       	push	r28
    250e:	df 93       	push	r29
    2510:	fb 01       	movw	r30, r22
    2512:	23 81       	ldd	r18, Z+3	; 0x03
    2514:	21 fd       	sbrc	r18, 1
    2516:	03 c0       	rjmp	.+6      	; 0x251e <fputc+0x16>
    2518:	8f ef       	ldi	r24, 0xFF	; 255
    251a:	9f ef       	ldi	r25, 0xFF	; 255
    251c:	2c c0       	rjmp	.+88     	; 0x2576 <fputc+0x6e>
    251e:	22 ff       	sbrs	r18, 2
    2520:	16 c0       	rjmp	.+44     	; 0x254e <fputc+0x46>
    2522:	46 81       	ldd	r20, Z+6	; 0x06
    2524:	57 81       	ldd	r21, Z+7	; 0x07
    2526:	24 81       	ldd	r18, Z+4	; 0x04
    2528:	35 81       	ldd	r19, Z+5	; 0x05
    252a:	42 17       	cp	r20, r18
    252c:	53 07       	cpc	r21, r19
    252e:	44 f4       	brge	.+16     	; 0x2540 <fputc+0x38>
    2530:	a0 81       	ld	r26, Z
    2532:	b1 81       	ldd	r27, Z+1	; 0x01
    2534:	9d 01       	movw	r18, r26
    2536:	2f 5f       	subi	r18, 0xFF	; 255
    2538:	3f 4f       	sbci	r19, 0xFF	; 255
    253a:	31 83       	std	Z+1, r19	; 0x01
    253c:	20 83       	st	Z, r18
    253e:	8c 93       	st	X, r24
    2540:	26 81       	ldd	r18, Z+6	; 0x06
    2542:	37 81       	ldd	r19, Z+7	; 0x07
    2544:	2f 5f       	subi	r18, 0xFF	; 255
    2546:	3f 4f       	sbci	r19, 0xFF	; 255
    2548:	37 83       	std	Z+7, r19	; 0x07
    254a:	26 83       	std	Z+6, r18	; 0x06
    254c:	14 c0       	rjmp	.+40     	; 0x2576 <fputc+0x6e>
    254e:	8b 01       	movw	r16, r22
    2550:	ec 01       	movw	r28, r24
    2552:	fb 01       	movw	r30, r22
    2554:	00 84       	ldd	r0, Z+8	; 0x08
    2556:	f1 85       	ldd	r31, Z+9	; 0x09
    2558:	e0 2d       	mov	r30, r0
    255a:	09 95       	icall
    255c:	89 2b       	or	r24, r25
    255e:	e1 f6       	brne	.-72     	; 0x2518 <fputc+0x10>
    2560:	d8 01       	movw	r26, r16
    2562:	16 96       	adiw	r26, 0x06	; 6
    2564:	8d 91       	ld	r24, X+
    2566:	9c 91       	ld	r25, X
    2568:	17 97       	sbiw	r26, 0x07	; 7
    256a:	01 96       	adiw	r24, 0x01	; 1
    256c:	17 96       	adiw	r26, 0x07	; 7
    256e:	9c 93       	st	X, r25
    2570:	8e 93       	st	-X, r24
    2572:	16 97       	sbiw	r26, 0x06	; 6
    2574:	ce 01       	movw	r24, r28
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	08 95       	ret

00002580 <__ultoa_invert>:
    2580:	fa 01       	movw	r30, r20
    2582:	aa 27       	eor	r26, r26
    2584:	28 30       	cpi	r18, 0x08	; 8
    2586:	51 f1       	breq	.+84     	; 0x25dc <__ultoa_invert+0x5c>
    2588:	20 31       	cpi	r18, 0x10	; 16
    258a:	81 f1       	breq	.+96     	; 0x25ec <__ultoa_invert+0x6c>
    258c:	e8 94       	clt
    258e:	6f 93       	push	r22
    2590:	6e 7f       	andi	r22, 0xFE	; 254
    2592:	6e 5f       	subi	r22, 0xFE	; 254
    2594:	7f 4f       	sbci	r23, 0xFF	; 255
    2596:	8f 4f       	sbci	r24, 0xFF	; 255
    2598:	9f 4f       	sbci	r25, 0xFF	; 255
    259a:	af 4f       	sbci	r26, 0xFF	; 255
    259c:	b1 e0       	ldi	r27, 0x01	; 1
    259e:	3e d0       	rcall	.+124    	; 0x261c <__ultoa_invert+0x9c>
    25a0:	b4 e0       	ldi	r27, 0x04	; 4
    25a2:	3c d0       	rcall	.+120    	; 0x261c <__ultoa_invert+0x9c>
    25a4:	67 0f       	add	r22, r23
    25a6:	78 1f       	adc	r23, r24
    25a8:	89 1f       	adc	r24, r25
    25aa:	9a 1f       	adc	r25, r26
    25ac:	a1 1d       	adc	r26, r1
    25ae:	68 0f       	add	r22, r24
    25b0:	79 1f       	adc	r23, r25
    25b2:	8a 1f       	adc	r24, r26
    25b4:	91 1d       	adc	r25, r1
    25b6:	a1 1d       	adc	r26, r1
    25b8:	6a 0f       	add	r22, r26
    25ba:	71 1d       	adc	r23, r1
    25bc:	81 1d       	adc	r24, r1
    25be:	91 1d       	adc	r25, r1
    25c0:	a1 1d       	adc	r26, r1
    25c2:	20 d0       	rcall	.+64     	; 0x2604 <__ultoa_invert+0x84>
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <__ultoa_invert+0x48>
    25c6:	68 94       	set
    25c8:	3f 91       	pop	r19
    25ca:	2a e0       	ldi	r18, 0x0A	; 10
    25cc:	26 9f       	mul	r18, r22
    25ce:	11 24       	eor	r1, r1
    25d0:	30 19       	sub	r19, r0
    25d2:	30 5d       	subi	r19, 0xD0	; 208
    25d4:	31 93       	st	Z+, r19
    25d6:	de f6       	brtc	.-74     	; 0x258e <__ultoa_invert+0xe>
    25d8:	cf 01       	movw	r24, r30
    25da:	08 95       	ret
    25dc:	46 2f       	mov	r20, r22
    25de:	47 70       	andi	r20, 0x07	; 7
    25e0:	40 5d       	subi	r20, 0xD0	; 208
    25e2:	41 93       	st	Z+, r20
    25e4:	b3 e0       	ldi	r27, 0x03	; 3
    25e6:	0f d0       	rcall	.+30     	; 0x2606 <__ultoa_invert+0x86>
    25e8:	c9 f7       	brne	.-14     	; 0x25dc <__ultoa_invert+0x5c>
    25ea:	f6 cf       	rjmp	.-20     	; 0x25d8 <__ultoa_invert+0x58>
    25ec:	46 2f       	mov	r20, r22
    25ee:	4f 70       	andi	r20, 0x0F	; 15
    25f0:	40 5d       	subi	r20, 0xD0	; 208
    25f2:	4a 33       	cpi	r20, 0x3A	; 58
    25f4:	18 f0       	brcs	.+6      	; 0x25fc <__ultoa_invert+0x7c>
    25f6:	49 5d       	subi	r20, 0xD9	; 217
    25f8:	31 fd       	sbrc	r19, 1
    25fa:	40 52       	subi	r20, 0x20	; 32
    25fc:	41 93       	st	Z+, r20
    25fe:	02 d0       	rcall	.+4      	; 0x2604 <__ultoa_invert+0x84>
    2600:	a9 f7       	brne	.-22     	; 0x25ec <__ultoa_invert+0x6c>
    2602:	ea cf       	rjmp	.-44     	; 0x25d8 <__ultoa_invert+0x58>
    2604:	b4 e0       	ldi	r27, 0x04	; 4
    2606:	a6 95       	lsr	r26
    2608:	97 95       	ror	r25
    260a:	87 95       	ror	r24
    260c:	77 95       	ror	r23
    260e:	67 95       	ror	r22
    2610:	ba 95       	dec	r27
    2612:	c9 f7       	brne	.-14     	; 0x2606 <__ultoa_invert+0x86>
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	61 05       	cpc	r22, r1
    2618:	71 05       	cpc	r23, r1
    261a:	08 95       	ret
    261c:	9b 01       	movw	r18, r22
    261e:	ac 01       	movw	r20, r24
    2620:	0a 2e       	mov	r0, r26
    2622:	06 94       	lsr	r0
    2624:	57 95       	ror	r21
    2626:	47 95       	ror	r20
    2628:	37 95       	ror	r19
    262a:	27 95       	ror	r18
    262c:	ba 95       	dec	r27
    262e:	c9 f7       	brne	.-14     	; 0x2622 <__ultoa_invert+0xa2>
    2630:	62 0f       	add	r22, r18
    2632:	73 1f       	adc	r23, r19
    2634:	84 1f       	adc	r24, r20
    2636:	95 1f       	adc	r25, r21
    2638:	a0 1d       	adc	r26, r0
    263a:	08 95       	ret

0000263c <_exit>:
    263c:	f8 94       	cli

0000263e <__stop_program>:
    263e:	ff cf       	rjmp	.-2      	; 0x263e <__stop_program>
