
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ea  00800100  0000245a  000024ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000245a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001dc  008004ea  008004ea  000028d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002934  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047b6  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001348  00000000  00000000  00007402  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000021ec  00000000  00000000  0000874a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000980  00000000  00000000  0000a938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cfb  00000000  00000000  0000b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c4a  00000000  00000000  0000bfb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000ebfd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	02 c5       	rjmp	.+2564   	; 0xa42 <__vector_15>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c0       	rjmp	.+130    	; 0xcc <__vector_18>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__vector_30>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e5       	ldi	r30, 0x5A	; 90
      a0:	f4 e2       	ldi	r31, 0x24	; 36
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	26 e0       	ldi	r18, 0x06	; 6
      b4:	aa ee       	ldi	r26, 0xEA	; 234
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 3c       	cpi	r26, 0xC6	; 198
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <main>
      c6:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_18>:
	buzz_play(); //
}

//esp8266 테스트
ISR(USART0_RX_vect)
{
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	0b b6       	in	r0, 0x3b	; 59
      d8:	0f 92       	push	r0
      da:	2f 93       	push	r18
      dc:	3f 93       	push	r19
      de:	4f 93       	push	r20
      e0:	5f 93       	push	r21
      e2:	6f 93       	push	r22
      e4:	7f 93       	push	r23
      e6:	8f 93       	push	r24
      e8:	9f 93       	push	r25
      ea:	af 93       	push	r26
      ec:	bf 93       	push	r27
      ee:	ef 93       	push	r30
      f0:	ff 93       	push	r31
	uint8_t buff=UDR0;
      f2:	8c b1       	in	r24, 0x0c	; 12
	uart0.buf=buff;
      f4:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <uart0+0x66>
	
	uart1_tx_char(buff);
      f8:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <uart1_tx_char>
}
      fc:	ff 91       	pop	r31
      fe:	ef 91       	pop	r30
     100:	bf 91       	pop	r27
     102:	af 91       	pop	r26
     104:	9f 91       	pop	r25
     106:	8f 91       	pop	r24
     108:	7f 91       	pop	r23
     10a:	6f 91       	pop	r22
     10c:	5f 91       	pop	r21
     10e:	4f 91       	pop	r20
     110:	3f 91       	pop	r19
     112:	2f 91       	pop	r18
     114:	0f 90       	pop	r0
     116:	0b be       	out	0x3b, r0	; 59
     118:	0f 90       	pop	r0
     11a:	0f be       	out	0x3f, r0	; 63
     11c:	0f 90       	pop	r0
     11e:	1f 90       	pop	r1
     120:	18 95       	reti

00000122 <__vector_30>:

//여기에 들어가있는 코드는 완전 뒤죽박죽임. 수정해야할 상황이 생긴다면, 차라리 새로짜는게 더 낫습니다.
ISR(USART1_RX_vect)
{//esp8266으로 부터 받아오는 데이터
     122:	1f 92       	push	r1
     124:	0f 92       	push	r0
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	0f 92       	push	r0
     12a:	11 24       	eor	r1, r1
     12c:	0b b6       	in	r0, 0x3b	; 59
     12e:	0f 92       	push	r0
     130:	1f 93       	push	r17
     132:	2f 93       	push	r18
     134:	3f 93       	push	r19
     136:	4f 93       	push	r20
     138:	5f 93       	push	r21
     13a:	6f 93       	push	r22
     13c:	7f 93       	push	r23
     13e:	8f 93       	push	r24
     140:	9f 93       	push	r25
     142:	af 93       	push	r26
     144:	bf 93       	push	r27
     146:	ef 93       	push	r30
     148:	ff 93       	push	r31
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	00 d0       	rcall	.+0      	; 0x150 <__vector_30+0x2e>
     150:	1f 92       	push	r1
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
	static uint8_t cnt=0;
	//static uint8_t receive_length=0;
	static uint8_t parse_cnt=0;
	static uint8_t data_cnt=0;
	static uint8_t parse_data_flag=0;
	uint8_t buff=UDR1;
     156:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	if(buff=='>') esp8266_send_ready_flag=1;//서버로 UID정보 송신 준비 완료 flag
     15a:	1e 33       	cpi	r17, 0x3E	; 62
     15c:	21 f4       	brne	.+8      	; 0x166 <__vector_30+0x44>
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <esp8266_send_ready_flag>
     164:	42 c0       	rjmp	.+132    	; 0x1ea <__vector_30+0xc8>
	
	else if(buff=='O') cnt=1;
     166:	1f 34       	cpi	r17, 0x4F	; 79
     168:	21 f4       	brne	.+8      	; 0x172 <__vector_30+0x50>
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <cnt.2420>
     170:	3c c0       	rjmp	.+120    	; 0x1ea <__vector_30+0xc8>
	else if(buff=='K'&&cnt==1) {esp8266_return_result_flag=1;cnt=0;}
     172:	1b 34       	cpi	r17, 0x4B	; 75
     174:	51 f4       	brne	.+20     	; 0x18a <__vector_30+0x68>
     176:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <cnt.2420>
     17a:	81 30       	cpi	r24, 0x01	; 1
     17c:	09 f0       	breq	.+2      	; 0x180 <__vector_30+0x5e>
     17e:	87 c0       	rjmp	.+270    	; 0x28e <__vector_30+0x16c>
     180:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <esp8266_return_result_flag>
     184:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <cnt.2420>
     188:	30 c0       	rjmp	.+96     	; 0x1ea <__vector_30+0xc8>
	else cnt=0;
     18a:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <cnt.2420>
	
	if(buff=='+')parse_cnt=1;//
     18e:	1b 32       	cpi	r17, 0x2B	; 43
     190:	21 f4       	brne	.+8      	; 0x19a <__vector_30+0x78>
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <parse_cnt.2421>
     198:	76 c0       	rjmp	.+236    	; 0x286 <__vector_30+0x164>
	else if(buff=='I'&&parse_cnt==1)parse_cnt++; //cnt=2
     19a:	19 34       	cpi	r17, 0x49	; 73
     19c:	41 f4       	brne	.+16     	; 0x1ae <__vector_30+0x8c>
     19e:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <parse_cnt.2421>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	11 f5       	brne	.+68     	; 0x1ea <__vector_30+0xc8>
     1a6:	82 e0       	ldi	r24, 0x02	; 2
     1a8:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <parse_cnt.2421>
     1ac:	6c c0       	rjmp	.+216    	; 0x286 <__vector_30+0x164>
	else if(buff=='P'&&parse_cnt==2)parse_cnt++; //cnt=3
     1ae:	10 35       	cpi	r17, 0x50	; 80
     1b0:	41 f4       	brne	.+16     	; 0x1c2 <__vector_30+0xa0>
     1b2:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <parse_cnt.2421>
     1b6:	82 30       	cpi	r24, 0x02	; 2
     1b8:	c1 f4       	brne	.+48     	; 0x1ea <__vector_30+0xc8>
     1ba:	83 e0       	ldi	r24, 0x03	; 3
     1bc:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <parse_cnt.2421>
     1c0:	62 c0       	rjmp	.+196    	; 0x286 <__vector_30+0x164>
	else if(buff=='D'&&parse_cnt==3)parse_cnt++; //cnt=4
     1c2:	14 34       	cpi	r17, 0x44	; 68
     1c4:	41 f4       	brne	.+16     	; 0x1d6 <__vector_30+0xb4>
     1c6:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <parse_cnt.2421>
     1ca:	83 30       	cpi	r24, 0x03	; 3
     1cc:	71 f4       	brne	.+28     	; 0x1ea <__vector_30+0xc8>
     1ce:	84 e0       	ldi	r24, 0x04	; 4
     1d0:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <parse_cnt.2421>
     1d4:	58 c0       	rjmp	.+176    	; 0x286 <__vector_30+0x164>
	else if(buff==','&&parse_cnt==4)parse_cnt++;	
     1d6:	1c 32       	cpi	r17, 0x2C	; 44
     1d8:	41 f4       	brne	.+16     	; 0x1ea <__vector_30+0xc8>
     1da:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <parse_cnt.2421>
     1de:	84 30       	cpi	r24, 0x04	; 4
     1e0:	21 f4       	brne	.+8      	; 0x1ea <__vector_30+0xc8>
     1e2:	85 e0       	ldi	r24, 0x05	; 5
     1e4:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <parse_cnt.2421>
     1e8:	4e c0       	rjmp	.+156    	; 0x286 <__vector_30+0x164>
	else if(parse_cnt==5)// 자리수가 일의 자리로 들어왔을 때
     1ea:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <parse_cnt.2421>
     1ee:	85 30       	cpi	r24, 0x05	; 5
     1f0:	91 f4       	brne	.+36     	; 0x216 <__vector_30+0xf4>
	{
		receive_length=buff; parse_cnt++; //
     1f2:	10 93 f5 04 	sts	0x04F5, r17	; 0x8004f5 <receive_length>
     1f6:	86 e0       	ldi	r24, 0x06	; 6
     1f8:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <parse_cnt.2421>
		char buf_1[2]= {receive_length,0};
     1fc:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <receive_length>
     200:	89 83       	std	Y+1, r24	; 0x01
     202:	1a 82       	std	Y+2, r1	; 0x02
		receive_length_int=atoi((char*)buf_1);
     204:	ce 01       	movw	r24, r28
     206:	01 96       	adiw	r24, 0x01	; 1
     208:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <atoi>
     20c:	90 93 b9 06 	sts	0x06B9, r25	; 0x8006b9 <receive_length_int+0x1>
     210:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <receive_length_int>
     214:	38 c0       	rjmp	.+112    	; 0x286 <__vector_30+0x164>
		memset(buf_1,0,sizeof(buf_1));

	}
	else if(parse_cnt==6&&buff!=':') // :가 들어오지 않고 10의 자리 숫자의 길이가 들어왔을 때
     216:	86 30       	cpi	r24, 0x06	; 6
     218:	c1 f4       	brne	.+48     	; 0x24a <__vector_30+0x128>
     21a:	1a 33       	cpi	r17, 0x3A	; 58
     21c:	71 f0       	breq	.+28     	; 0x23a <__vector_30+0x118>
	{
		char buf_2[3]={receive_length,buff,0};
     21e:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <receive_length>
     222:	89 83       	std	Y+1, r24	; 0x01
     224:	1a 83       	std	Y+2, r17	; 0x02
     226:	1b 82       	std	Y+3, r1	; 0x03
		receive_length_int = atoi((char*)buf_2);
     228:	ce 01       	movw	r24, r28
     22a:	01 96       	adiw	r24, 0x01	; 1
     22c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <atoi>
     230:	90 93 b9 06 	sts	0x06B9, r25	; 0x8006b9 <receive_length_int+0x1>
     234:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <receive_length_int>
		receive_length_int=atoi((char*)buf_1);
		memset(buf_1,0,sizeof(buf_1));

	}
	else if(parse_cnt==6&&buff!=':') // :가 들어오지 않고 10의 자리 숫자의 길이가 들어왔을 때
	{
     238:	26 c0       	rjmp	.+76     	; 0x286 <__vector_30+0x164>
		memset(buf_2,0,sizeof(buf_2));
	}
	else if(parse_cnt==6) //:가 들어왔을 때 
	{
		//esp8266_receiving_flag=1;
		parse_cnt=0; data_cnt=0; parse_data_flag=1;
     23a:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <parse_cnt.2421>
     23e:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <data_cnt.2422>
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <parse_data_flag.2423>
     248:	1e c0       	rjmp	.+60     	; 0x286 <__vector_30+0x164>
	}
	else if(parse_data_flag){ //길이가 4인 데이터
     24a:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <parse_data_flag.2423>
     24e:	88 23       	and	r24, r24
     250:	c1 f0       	breq	.+48     	; 0x282 <__vector_30+0x160>
		esp8266_received_data[data_cnt]=buff;
     252:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <data_cnt.2422>
     256:	e8 2f       	mov	r30, r24
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	e2 58       	subi	r30, 0x82	; 130
     25c:	fa 4f       	sbci	r31, 0xFA	; 250
     25e:	10 83       	st	Z, r17
		data_cnt++;
     260:	8f 5f       	subi	r24, 0xFF	; 255
     262:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <data_cnt.2422>
		if(data_cnt==receive_length_int) {esp8266_receiving_flag=1; parse_data_flag=0; }
     266:	20 91 b8 06 	lds	r18, 0x06B8	; 0x8006b8 <receive_length_int>
     26a:	30 91 b9 06 	lds	r19, 0x06B9	; 0x8006b9 <receive_length_int+0x1>
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	82 17       	cp	r24, r18
     272:	93 07       	cpc	r25, r19
     274:	41 f4       	brne	.+16     	; 0x286 <__vector_30+0x164>
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <esp8266_receiving_flag>
     27c:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <parse_data_flag.2423>
     280:	02 c0       	rjmp	.+4      	; 0x286 <__vector_30+0x164>
	}
	else parse_cnt=0;
     282:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <parse_cnt.2421>
	
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff); //1ms 소요되기 떄문에 동작에 장애가 생길수도 있음 분명
     286:	81 2f       	mov	r24, r17
     288:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <uart0_tx_char>
	
}
     28c:	03 c0       	rjmp	.+6      	; 0x294 <__vector_30+0x172>
	uint8_t buff=UDR1;
	if(buff=='>') esp8266_send_ready_flag=1;//서버로 UID정보 송신 준비 완료 flag
	
	else if(buff=='O') cnt=1;
	else if(buff=='K'&&cnt==1) {esp8266_return_result_flag=1;cnt=0;}
	else cnt=0;
     28e:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <cnt.2420>
     292:	ab cf       	rjmp	.-170    	; 0x1ea <__vector_30+0xc8>
	
	
	//바로 터미널창에서 확인시도.
	uart0_tx_char(buff); //1ms 소요되기 떄문에 동작에 장애가 생길수도 있음 분명
	
}
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	ff 91       	pop	r31
     2a0:	ef 91       	pop	r30
     2a2:	bf 91       	pop	r27
     2a4:	af 91       	pop	r26
     2a6:	9f 91       	pop	r25
     2a8:	8f 91       	pop	r24
     2aa:	7f 91       	pop	r23
     2ac:	6f 91       	pop	r22
     2ae:	5f 91       	pop	r21
     2b0:	4f 91       	pop	r20
     2b2:	3f 91       	pop	r19
     2b4:	2f 91       	pop	r18
     2b6:	1f 91       	pop	r17
     2b8:	0f 90       	pop	r0
     2ba:	0b be       	out	0x3b, r0	; 59
     2bc:	0f 90       	pop	r0
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	0f 90       	pop	r0
     2c2:	1f 90       	pop	r1
     2c4:	18 95       	reti

000002c6 <rfid_user_uid_buffer_init>:
	received_state=RECEIVE_NONE;
}


void rfid_user_uid_buffer_init(void)
{
     2c6:	8d ef       	ldi	r24, 0xFD	; 253
     2c8:	94 e0       	ldi	r25, 0x04	; 4
     2ca:	46 e1       	ldi	r20, 0x16	; 22
     2cc:	55 e0       	ldi	r21, 0x05	; 5
	for(int i=0; i<MAX_USER_COUNT;i++)
	{
		
		strcpy((char*)rfid_user_uid_buffer[i],"0000");
     2ce:	25 e0       	ldi	r18, 0x05	; 5
     2d0:	e4 e4       	ldi	r30, 0x44	; 68
     2d2:	f1 e0       	ldi	r31, 0x01	; 1
     2d4:	dc 01       	movw	r26, r24
     2d6:	01 90       	ld	r0, Z+
     2d8:	0d 92       	st	X+, r0
     2da:	2a 95       	dec	r18
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <rfid_user_uid_buffer_init+0x10>
     2de:	05 96       	adiw	r24, 0x05	; 5
}


void rfid_user_uid_buffer_init(void)
{
	for(int i=0; i<MAX_USER_COUNT;i++)
     2e0:	84 17       	cp	r24, r20
     2e2:	95 07       	cpc	r25, r21
     2e4:	a1 f7       	brne	.-24     	; 0x2ce <rfid_user_uid_buffer_init+0x8>
	{
		
		strcpy((char*)rfid_user_uid_buffer[i],"0000");
	}
	i2c_lcd_string(2,0,"     OOOOOOOOOO     ");
     2e6:	49 e4       	ldi	r20, 0x49	; 73
     2e8:	51 e0       	ldi	r21, 0x01	; 1
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	0e 94 16 0a 	call	0x142c	; 0x142c <i2c_lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2f2:	2f ef       	ldi	r18, 0xFF	; 255
     2f4:	89 e6       	ldi	r24, 0x69	; 105
     2f6:	98 e1       	ldi	r25, 0x18	; 24
     2f8:	21 50       	subi	r18, 0x01	; 1
     2fa:	80 40       	sbci	r24, 0x00	; 0
     2fc:	90 40       	sbci	r25, 0x00	; 0
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <rfid_user_uid_buffer_init+0x32>
     300:	00 c0       	rjmp	.+0      	; 0x302 <rfid_user_uid_buffer_init+0x3c>
     302:	00 00       	nop
     304:	08 95       	ret

00000306 <mfrc_print_serial>:
	_delay_ms(500);
}

void mfrc_print_serial(int _type, unsigned char ch)
{
     306:	cf 92       	push	r12
     308:	df 92       	push	r13
     30a:	ef 92       	push	r14
     30c:	ff 92       	push	r15
     30e:	0f 93       	push	r16
     310:	1f 93       	push	r17
     312:	cf 93       	push	r28
     314:	c6 2f       	mov	r28, r22
	switch(_type)
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	91 05       	cpc	r25, r1
     31a:	69 f1       	breq	.+90     	; 0x376 <mfrc_print_serial+0x70>
     31c:	82 30       	cpi	r24, 0x02	; 2
     31e:	91 05       	cpc	r25, r1
     320:	09 f4       	brne	.+2      	; 0x324 <mfrc_print_serial+0x1e>
     322:	55 c0       	rjmp	.+170    	; 0x3ce <mfrc_print_serial+0xc8>
     324:	89 2b       	or	r24, r25
     326:	09 f0       	breq	.+2      	; 0x32a <mfrc_print_serial+0x24>
     328:	7e c0       	rjmp	.+252    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
     32a:	8e e5       	ldi	r24, 0x5E	; 94
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart0_tx_string>
     332:	06 e9       	ldi	r16, 0x96	; 150
     334:	16 e0       	ldi	r17, 0x06	; 6
     336:	0f 2e       	mov	r0, r31
     338:	f8 ea       	ldi	r31, 0xA8	; 168
     33a:	ef 2e       	mov	r14, r31
     33c:	f6 e0       	ldi	r31, 0x06	; 6
     33e:	ff 2e       	mov	r15, r31
     340:	f0 2d       	mov	r31, r0
     342:	0f 2e       	mov	r0, r31
     344:	fa e9       	ldi	r31, 0x9A	; 154
     346:	cf 2e       	mov	r12, r31
     348:	f6 e0       	ldi	r31, 0x06	; 6
     34a:	df 2e       	mov	r13, r31
     34c:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			if(ch==CH0)uart0_tx_char(rfid_uid_ch0[i]);
     34e:	c1 11       	cpse	r28, r1
     350:	05 c0       	rjmp	.+10     	; 0x35c <mfrc_print_serial+0x56>
     352:	f8 01       	movw	r30, r16
     354:	80 81       	ld	r24, Z
     356:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <uart0_tx_char>
     35a:	04 c0       	rjmp	.+8      	; 0x364 <mfrc_print_serial+0x5e>
			else uart0_tx_char(rfid_uid_ch1[i]);
     35c:	f7 01       	movw	r30, r14
     35e:	80 81       	ld	r24, Z
     360:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <uart0_tx_char>
     364:	0f 5f       	subi	r16, 0xFF	; 255
     366:	1f 4f       	sbci	r17, 0xFF	; 255
     368:	ff ef       	ldi	r31, 0xFF	; 255
     36a:	ef 1a       	sub	r14, r31
     36c:	ff 0a       	sbc	r15, r31
	switch(_type)
	{
		case ASCII_TYPE:
		
		uart0_tx_string("\n\tascii: ");
		for(int i=0;i<4;i++){
     36e:	0c 15       	cp	r16, r12
     370:	1d 05       	cpc	r17, r13
     372:	69 f7       	brne	.-38     	; 0x34e <mfrc_print_serial+0x48>
     374:	58 c0       	rjmp	.+176    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		}
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
     376:	88 e6       	ldi	r24, 0x68	; 104
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart0_tx_string>
     37e:	06 e9       	ldi	r16, 0x96	; 150
     380:	16 e0       	ldi	r17, 0x06	; 6
     382:	0f 2e       	mov	r0, r31
     384:	f8 ea       	ldi	r31, 0xA8	; 168
     386:	ef 2e       	mov	r14, r31
     388:	f6 e0       	ldi	r31, 0x06	; 6
     38a:	ff 2e       	mov	r15, r31
     38c:	f0 2d       	mov	r31, r0
     38e:	0f 2e       	mov	r0, r31
     390:	fa e9       	ldi	r31, 0x9A	; 154
     392:	cf 2e       	mov	r12, r31
     394:	f6 e0       	ldi	r31, 0x06	; 6
     396:	df 2e       	mov	r13, r31
     398:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(IntToString(rfid_uid_ch0[i]));
     39a:	c1 11       	cpse	r28, r1
     39c:	08 c0       	rjmp	.+16     	; 0x3ae <mfrc_print_serial+0xa8>
     39e:	f8 01       	movw	r30, r16
     3a0:	80 81       	ld	r24, Z
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <IntToString>
     3a8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart0_tx_string>
     3ac:	07 c0       	rjmp	.+14     	; 0x3bc <mfrc_print_serial+0xb6>
			else uart0_tx_string(IntToString(rfid_uid_ch1[i]));
     3ae:	f7 01       	movw	r30, r14
     3b0:	80 81       	ld	r24, Z
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <IntToString>
     3b8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart0_tx_string>
     3bc:	0f 5f       	subi	r16, 0xFF	; 255
     3be:	1f 4f       	sbci	r17, 0xFF	; 255
     3c0:	ff ef       	ldi	r31, 0xFF	; 255
     3c2:	ef 1a       	sub	r14, r31
     3c4:	ff 0a       	sbc	r15, r31
		
		break;
		case DECIMAL_TYPE:
		
		uart0_tx_string("\n\tdec: ");
		for(int i=0;i<4;i++){
     3c6:	0c 15       	cp	r16, r12
     3c8:	1d 05       	cpc	r17, r13
     3ca:	39 f7       	brne	.-50     	; 0x39a <mfrc_print_serial+0x94>
     3cc:	2c c0       	rjmp	.+88     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
     3ce:	80 e7       	ldi	r24, 0x70	; 112
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart0_tx_string>
     3d6:	06 e9       	ldi	r16, 0x96	; 150
     3d8:	16 e0       	ldi	r17, 0x06	; 6
     3da:	0f 2e       	mov	r0, r31
     3dc:	f8 ea       	ldi	r31, 0xA8	; 168
     3de:	ef 2e       	mov	r14, r31
     3e0:	f6 e0       	ldi	r31, 0x06	; 6
     3e2:	ff 2e       	mov	r15, r31
     3e4:	f0 2d       	mov	r31, r0
     3e6:	0f 2e       	mov	r0, r31
     3e8:	fa e9       	ldi	r31, 0x9A	; 154
     3ea:	cf 2e       	mov	r12, r31
     3ec:	f6 e0       	ldi	r31, 0x06	; 6
     3ee:	df 2e       	mov	r13, r31
     3f0:	f0 2d       	mov	r31, r0
		for(int i=0;i<4;i++){
			//uart0_tx_string_IT(IntToString(str[i]));
			//uart0_tx_char(str[i]);
			if(ch==CH0)uart0_tx_string(HexToString(rfid_uid_ch0[i]));
     3f2:	c1 11       	cpse	r28, r1
     3f4:	07 c0       	rjmp	.+14     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3f6:	f8 01       	movw	r30, r16
     3f8:	80 81       	ld	r24, Z
     3fa:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <HexToString>
     3fe:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart0_tx_string>
     402:	06 c0       	rjmp	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
			else uart0_tx_string(HexToString(rfid_uid_ch1[i]));
     404:	f7 01       	movw	r30, r14
     406:	80 81       	ld	r24, Z
     408:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <HexToString>
     40c:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart0_tx_string>
			uart0_tx_char(' ');
     410:	80 e2       	ldi	r24, 0x20	; 32
     412:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <uart0_tx_char>
     416:	0f 5f       	subi	r16, 0xFF	; 255
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ff ef       	ldi	r31, 0xFF	; 255
     41c:	ef 1a       	sub	r14, r31
     41e:	ff 0a       	sbc	r15, r31
		
		break;
		case HEXDECIMAL_TYPE:
		
		uart0_tx_string("\n\thex: ");
		for(int i=0;i<4;i++){
     420:	0c 15       	cp	r16, r12
     422:	1d 05       	cpc	r17, r13
     424:	31 f7       	brne	.-52     	; 0x3f2 <mfrc_print_serial+0xec>
		
		break;
		
	}
	
}
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	08 95       	ret

00000436 <mfrc_check_and_data_receive_ch0>:
	_delay_ms(2000);
	i2c_lcd_clear();
	i2c_lcd_noBacklight();
}

char mfrc_check_and_data_receive_ch0(void){ 
     436:	cf 93       	push	r28
	
	//원인 모를 버그를 해결하기 위한 용도로 쓰는 flag : 카드 인식 request 시, return 할 때 oxoxoxoxox이짓거리 하는 버그 발생	
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     438:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <noise_flag.2439>
     43c:	81 11       	cpse	r24, r1
     43e:	09 c0       	rjmp	.+18     	; 0x452 <mfrc_check_and_data_receive_ch0+0x1c>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	66 e9       	ldi	r22, 0x96	; 150
     444:	76 e0       	ldi	r23, 0x06	; 6
     446:	82 e5       	ldi	r24, 0x52	; 82
     448:	0e 94 bb 0c 	call	0x1976	; 0x1976 <mfrc522_request>
     44c:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <_byte.2441>
     450:	1d c0       	rjmp	.+58     	; 0x48c <mfrc_check_and_data_receive_ch0+0x56>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		
		
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0); //이상한 데이터 가져올 때
     452:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <toggle_flag.2440>
     456:	88 23       	and	r24, r24
     458:	39 f0       	breq	.+14     	; 0x468 <mfrc_check_and_data_receive_ch0+0x32>
     45a:	40 e0       	ldi	r20, 0x00	; 0
     45c:	66 e9       	ldi	r22, 0x96	; 150
     45e:	76 e0       	ldi	r23, 0x06	; 6
     460:	82 e5       	ldi	r24, 0x52	; 82
     462:	0e 94 bb 0c 	call	0x1976	; 0x1976 <mfrc522_request>
     466:	0c c0       	rjmp	.+24     	; 0x480 <mfrc_check_and_data_receive_ch0+0x4a>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch0,CH0);
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	66 e9       	ldi	r22, 0x96	; 150
     46c:	76 e0       	ldi	r23, 0x06	; 6
     46e:	82 e5       	ldi	r24, 0x52	; 82
     470:	0e 94 bb 0c 	call	0x1976	; 0x1976 <mfrc522_request>
     474:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <_byte.2441>
			if(_byte==ERROR) noise_flag=0;
     478:	83 30       	cpi	r24, 0x03	; 3
     47a:	11 f4       	brne	.+4      	; 0x480 <mfrc_check_and_data_receive_ch0+0x4a>
     47c:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <noise_flag.2439>
		}
			
		toggle_flag^=0x01;
     480:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <toggle_flag.2440>
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	89 27       	eor	r24, r25
     488:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <toggle_flag.2440>
// 	else if(byte==CARD_NOT_FOUND)uart0_tx_char('N');
// 	else if(byte==ERROR)uart0_tx_char('X');
	///////////////////////////////////////////////////
	
	
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     48c:	c0 91 ee 04 	lds	r28, 0x04EE	; 0x8004ee <_byte.2441>
     490:	c1 30       	cpi	r28, 0x01	; 1
     492:	29 f0       	breq	.+10     	; 0x49e <mfrc_check_and_data_receive_ch0+0x68>
	{
		detected_flag_ch0=NON_DETECTED;  
     494:	88 e5       	ldi	r24, 0x58	; 88
     496:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <detected_flag_ch0>
		return RECEIVE_NONE;
     49a:	c0 e0       	ldi	r28, 0x00	; 0
     49c:	2c c0       	rjmp	.+88     	; 0x4f6 <mfrc_check_and_data_receive_ch0+0xc0>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch0==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     49e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <detected_flag_ch0>
     4a2:	88 35       	cpi	r24, 0x58	; 88
     4a4:	29 f5       	brne	.+74     	; 0x4f0 <mfrc_check_and_data_receive_ch0+0xba>
	{
		detected_flag_ch0=DETECED;
     4a6:	8f e4       	ldi	r24, 0x4F	; 79
     4a8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <detected_flag_ch0>
		noise_flag=1; //얘가 첫 순간임.
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <noise_flag.2439>
		toggle_flag=1;
     4b2:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <toggle_flag.2440>
		_byte=mfrc522_get_card_serial(rfid_uid_ch0,CH0);
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	86 e9       	ldi	r24, 0x96	; 150
     4ba:	96 e0       	ldi	r25, 0x06	; 6
     4bc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <mfrc522_get_card_serial>
     4c0:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <_byte.2441>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	b1 f4       	brne	.+44     	; 0x4f4 <mfrc_check_and_data_receive_ch0+0xbe>

			//
			//dummy code
			//setSoundClip(BUZZ_SUCCESS);
			if(DUMMY_TEST_SERIAL){
				uart0_tx_string("[CHECK UID(CH0)]: ");
     4c8:	88 e7       	ldi	r24, 0x78	; 120
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart0_tx_string>
				mfrc_print_serial(ASCII_TYPE,CH0);
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	17 df       	rcall	.-466    	; 0x306 <mfrc_print_serial>
				mfrc_print_serial(DECIMAL_TYPE,CH0);
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	13 df       	rcall	.-474    	; 0x306 <mfrc_print_serial>
				mfrc_print_serial(HEXDECIMAL_TYPE,CH0);
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	82 e0       	ldi	r24, 0x02	; 2
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0f df       	rcall	.-482    	; 0x306 <mfrc_print_serial>
				uart0_tx_char('\n');
     4e8:	8a e0       	ldi	r24, 0x0A	; 10
     4ea:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <uart0_tx_char>
			}
			//////////////////////////
			
			return RECEIVE_SUCCESS;
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <mfrc_check_and_data_receive_ch0+0xc0>
			return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		
		return RECEIVE_NONE;
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
     4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <mfrc_check_and_data_receive_ch0+0xc0>
		else {//카드는 인식됐지만 식별되지 않았을 때 
			//dummy code////////////////
			//uart0_tx_string("\nerror\n");
			////////////////////////////
			
			return RECEIVE_FAIL;
     4f4:	cf ef       	ldi	r28, 0xFF	; 255
		
		return RECEIVE_NONE;
	}
	

}
     4f6:	8c 2f       	mov	r24, r28
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <mfrc_check_and_data_receive_ch1>:

char mfrc_check_and_data_receive_ch1(void){ 
     4fc:	cf 93       	push	r28
	static char noise_flag=0;
	static char toggle_flag=0;
	static char _byte=0;
	if(noise_flag==0){ //CARD_FOUND로 리턴될 떄
     4fe:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <noise_flag.2445>
     502:	81 11       	cpse	r24, r1
     504:	09 c0       	rjmp	.+18     	; 0x518 <mfrc_check_and_data_receive_ch1+0x1c>
		_byte = mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     506:	41 e0       	ldi	r20, 0x01	; 1
     508:	68 ea       	ldi	r22, 0xA8	; 168
     50a:	76 e0       	ldi	r23, 0x06	; 6
     50c:	82 e5       	ldi	r24, 0x52	; 82
     50e:	0e 94 bb 0c 	call	0x1976	; 0x1976 <mfrc522_request>
     512:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <_byte.2447>
     516:	1d c0       	rjmp	.+58     	; 0x552 <mfrc_check_and_data_receive_ch1+0x56>
	}
	else { //인식 성공 이후 인식(ERROR로 리턴될 때) 
		if(toggle_flag) mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1); //이상한 데이터 가져올 때
     518:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <__data_end>
     51c:	88 23       	and	r24, r24
     51e:	39 f0       	breq	.+14     	; 0x52e <mfrc_check_and_data_receive_ch1+0x32>
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	68 ea       	ldi	r22, 0xA8	; 168
     524:	76 e0       	ldi	r23, 0x06	; 6
     526:	82 e5       	ldi	r24, 0x52	; 82
     528:	0e 94 bb 0c 	call	0x1976	; 0x1976 <mfrc522_request>
     52c:	0c c0       	rjmp	.+24     	; 0x546 <mfrc_check_and_data_receive_ch1+0x4a>
		else{ //정상적인 데이터 가져올 때
			_byte=mfrc522_request(PICC_REQALL,rfid_uid_ch1,CH1);
     52e:	41 e0       	ldi	r20, 0x01	; 1
     530:	68 ea       	ldi	r22, 0xA8	; 168
     532:	76 e0       	ldi	r23, 0x06	; 6
     534:	82 e5       	ldi	r24, 0x52	; 82
     536:	0e 94 bb 0c 	call	0x1976	; 0x1976 <mfrc522_request>
     53a:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <_byte.2447>
			if(_byte==ERROR) noise_flag=0;
     53e:	83 30       	cpi	r24, 0x03	; 3
     540:	11 f4       	brne	.+4      	; 0x546 <mfrc_check_and_data_receive_ch1+0x4a>
     542:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <noise_flag.2445>
		}
		toggle_flag^=0x01;
     546:	90 91 ea 04 	lds	r25, 0x04EA	; 0x8004ea <__data_end>
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	89 27       	eor	r24, r25
     54e:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <__data_end>
	}
	if(_byte!=CARD_FOUND) //카드 인식이 안되어 있는 경우
     552:	c0 91 eb 04 	lds	r28, 0x04EB	; 0x8004eb <_byte.2447>
     556:	c1 30       	cpi	r28, 0x01	; 1
     558:	29 f0       	breq	.+10     	; 0x564 <mfrc_check_and_data_receive_ch1+0x68>
	{
		detected_flag_ch1=NON_DETECTED;  
     55a:	88 e5       	ldi	r24, 0x58	; 88
     55c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <detected_flag_ch1>
		return RECEIVE_NONE;
     560:	c0 e0       	ldi	r28, 0x00	; 0
     562:	2c c0       	rjmp	.+88     	; 0x5bc <mfrc_check_and_data_receive_ch1+0xc0>
	}
	else if((_byte==CARD_FOUND)&&(detected_flag_ch1==NON_DETECTED)) //카드를 계속 대고 있다면, 첫 순간만 인정
     564:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <detected_flag_ch1>
     568:	88 35       	cpi	r24, 0x58	; 88
     56a:	29 f5       	brne	.+74     	; 0x5b6 <mfrc_check_and_data_receive_ch1+0xba>
	{
		detected_flag_ch1=DETECED;
     56c:	8f e4       	ldi	r24, 0x4F	; 79
     56e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <detected_flag_ch1>
		noise_flag=1; //얘가 첫 순간임.
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <noise_flag.2445>
		toggle_flag=1;
     578:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <__data_end>
		_byte=mfrc522_get_card_serial(rfid_uid_ch1,CH1);
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	88 ea       	ldi	r24, 0xA8	; 168
     580:	96 e0       	ldi	r25, 0x06	; 6
     582:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <mfrc522_get_card_serial>
     586:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <_byte.2447>
		if(_byte==CARD_FOUND){//카드가 인식됐을 때 
     58a:	81 30       	cpi	r24, 0x01	; 1
     58c:	b1 f4       	brne	.+44     	; 0x5ba <mfrc_check_and_data_receive_ch1+0xbe>
			if(DUMMY_TEST_SERIAL){
						uart0_tx_string("[CHECK UID(CH1)]: ");
     58e:	8b e8       	ldi	r24, 0x8B	; 139
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <uart0_tx_string>
						mfrc_print_serial(ASCII_TYPE,CH1);
     596:	61 e0       	ldi	r22, 0x01	; 1
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	b4 de       	rcall	.-664    	; 0x306 <mfrc_print_serial>
						mfrc_print_serial(DECIMAL_TYPE,CH1);
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	b0 de       	rcall	.-672    	; 0x306 <mfrc_print_serial>
						mfrc_print_serial(HEXDECIMAL_TYPE,CH1);
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	ac de       	rcall	.-680    	; 0x306 <mfrc_print_serial>
						uart0_tx_char('\n');
     5ae:	8a e0       	ldi	r24, 0x0A	; 10
     5b0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <uart0_tx_char>
			}
			return RECEIVE_SUCCESS;
     5b4:	03 c0       	rjmp	.+6      	; 0x5bc <mfrc_check_and_data_receive_ch1+0xc0>
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
		}
	}
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
     5b6:	c0 e0       	ldi	r28, 0x00	; 0
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <mfrc_check_and_data_receive_ch1+0xc0>
						uart0_tx_char('\n');
			}
			return RECEIVE_SUCCESS;
		}
		else {//카드는 인식됐지만 식별되지 않았을 때 
				return RECEIVE_FAIL;
     5ba:	cf ef       	ldi	r28, 0xFF	; 255
	else {  //카드를 계속 대고 있을 때 (byte==CARD_FOUND && detected_flag==1)
		return RECEIVE_NONE;
	}
	

}
     5bc:	8c 2f       	mov	r24, r28
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <RC522_data_request_per_100ms>:


void RC522_data_request_per_100ms(char* tggl)
{
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	ec 01       	movw	r28, r24
	
	if((TICK.tick_1ms % 100) ==0) {
     5c8:	60 91 ba 06 	lds	r22, 0x06BA	; 0x8006ba <TICK>
     5cc:	70 91 bb 06 	lds	r23, 0x06BB	; 0x8006bb <TICK+0x1>
     5d0:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <TICK+0x2>
     5d4:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <TICK+0x3>
     5d8:	24 e6       	ldi	r18, 0x64	; 100
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__udivmodsi4>
     5e4:	67 2b       	or	r22, r23
     5e6:	68 2b       	or	r22, r24
     5e8:	69 2b       	or	r22, r25
     5ea:	89 f4       	brne	.+34     	; 0x60e <RC522_data_request_per_100ms+0x4c>
		
		//toggle = 0 : entrance gate
		//toggle = 1 : exit gate
		(*tggl)^=0x01; //start toggling :
     5ec:	98 81       	ld	r25, Y
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	89 27       	eor	r24, r25
     5f2:	88 83       	st	Y, r24
		
		if((*tggl)==0){
     5f4:	81 11       	cpse	r24, r1
     5f6:	06 c0       	rjmp	.+12     	; 0x604 <RC522_data_request_per_100ms+0x42>
			received_state = mfrc_check_and_data_receive_ch0();
     5f8:	1e df       	rcall	.-452    	; 0x436 <mfrc_check_and_data_receive_ch0>
     5fa:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <received_state>
			rfid_uid_ch0[4]=0; //배열을 문자열처럼 사용하기 위해 (문자 끝에 null을 넣어주기 위함. "abcd")
     5fe:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <rfid_uid_ch0+0x4>
		}//RFID check and receive UID data per 100ms
		else {
			received_state = mfrc_check_and_data_receive_ch1();  //UID values are in 'rfid_uid_chX[]'
     602:	05 c0       	rjmp	.+10     	; 0x60e <RC522_data_request_per_100ms+0x4c>
     604:	7b df       	rcall	.-266    	; 0x4fc <mfrc_check_and_data_receive_ch1>
     606:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <received_state>
			rfid_uid_ch1[4]=0;
     60a:	10 92 ac 06 	sts	0x06AC, r1	; 0x8006ac <rfid_uid_ch1+0x4>
		}
	}
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <setSoundClip>:



void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 TICK.buzz_1ms=0;
     614:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <TICK+0x4>
     618:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <TICK+0x5>
     61c:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <TICK+0x6>
     620:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <TICK+0x7>
	 switch(clip)
     624:	82 30       	cpi	r24, 0x02	; 2
     626:	99 f0       	breq	.+38     	; 0x64e <setSoundClip+0x3a>
     628:	28 f4       	brcc	.+10     	; 0x634 <setSoundClip+0x20>
     62a:	88 23       	and	r24, r24
     62c:	49 f0       	breq	.+18     	; 0x640 <setSoundClip+0x2c>
     62e:	81 30       	cpi	r24, 0x01	; 1
     630:	51 f0       	breq	.+20     	; 0x646 <setSoundClip+0x32>
     632:	1c c0       	rjmp	.+56     	; 0x66c <setSoundClip+0x58>
     634:	84 30       	cpi	r24, 0x04	; 4
     636:	99 f0       	breq	.+38     	; 0x65e <setSoundClip+0x4a>
     638:	70 f0       	brcs	.+28     	; 0x656 <setSoundClip+0x42>
     63a:	85 30       	cpi	r24, 0x05	; 5
     63c:	a1 f0       	breq	.+40     	; 0x666 <setSoundClip+0x52>
     63e:	16 c0       	rjmp	.+44     	; 0x66c <setSoundClip+0x58>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     640:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <music_flag>
     644:	13 c0       	rjmp	.+38     	; 0x66c <setSoundClip+0x58>
		   case BUZZ_ON: music_flag=BUZZ_ON; break;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <music_flag>
     64c:	0f c0       	rjmp	.+30     	; 0x66c <setSoundClip+0x58>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <music_flag>
     654:	0b c0       	rjmp	.+22     	; 0x66c <setSoundClip+0x58>
		   case BUZZ_UNENROLLED: music_flag=BUZZ_UNENROLLED; break;
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <music_flag>
     65c:	07 c0       	rjmp	.+14     	; 0x66c <setSoundClip+0x58>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     65e:	84 e0       	ldi	r24, 0x04	; 4
     660:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <music_flag>
     664:	03 c0       	rjmp	.+6      	; 0x66c <setSoundClip+0x58>
		   case BUZZ_ESP8266_CONNECTED: music_flag=BUZZ_ESP8266_CONNECTED; break;
     666:	85 e0       	ldi	r24, 0x05	; 5
     668:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <music_flag>
		   
	 }
	 TICK.buzz_1ms=0;
     66c:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <TICK+0x4>
     670:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <TICK+0x5>
     674:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <TICK+0x6>
     678:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <TICK+0x7>
     67c:	08 95       	ret

0000067e <buzz_MUTE>:
		  break;
	  }

}
void buzz_MUTE(){
	 TCCR3A &= ~(1<<COM3A0); // 타이머카운터3번 A채널 고유 핀 출력 X
     67e:	eb e8       	ldi	r30, 0x8B	; 139
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	80 81       	ld	r24, Z
     684:	8f 7b       	andi	r24, 0xBF	; 191
     686:	80 83       	st	Z, r24
	 music_flag = BUZZ_MUTE;
     688:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <music_flag>
     68c:	08 95       	ret

0000068e <setSoundNote>:
	 /*setSoundClip(BUZZ_MUTE);*/
}
void setSoundNote(int note){
	 if(BUZZ_MUTE!=note){
     68e:	00 97       	sbiw	r24, 0x00	; 0
     690:	41 f0       	breq	.+16     	; 0x6a2 <setSoundNote+0x14>
		 TCCR3A |= (1<<COM3A0);setICR3(note);
     692:	eb e8       	ldi	r30, 0x8B	; 139
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	20 81       	ld	r18, Z
     698:	20 64       	ori	r18, 0x40	; 64
     69a:	20 83       	st	Z, r18
     69c:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <setICR3>
     6a0:	08 95       	ret
	 }
	 else {TCCR3A &= ~(1<<COM3A0);}
     6a2:	eb e8       	ldi	r30, 0x8B	; 139
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	8f 7b       	andi	r24, 0xBF	; 191
     6aa:	80 83       	st	Z, r24
     6ac:	08 95       	ret

000006ae <buzz_play>:
}


void buzz_play(){
	 //재생이 끝났으면 music_flag는 확실하게 MUTE로 들어가야 함. 안그러면 꼬이는 것 같다.
	  switch(music_flag)
     6ae:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <music_flag>
     6b2:	82 30       	cpi	r24, 0x02	; 2
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <buzz_play+0xa>
     6b6:	76 c0       	rjmp	.+236    	; 0x7a4 <buzz_play+0xf6>
     6b8:	28 f4       	brcc	.+10     	; 0x6c4 <buzz_play+0x16>
     6ba:	88 23       	and	r24, r24
     6bc:	61 f0       	breq	.+24     	; 0x6d6 <buzz_play+0x28>
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	61 f0       	breq	.+24     	; 0x6da <buzz_play+0x2c>
     6c2:	08 95       	ret
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	09 f4       	brne	.+2      	; 0x6ca <buzz_play+0x1c>
     6c8:	37 c1       	rjmp	.+622    	; 0x938 <buzz_play+0x28a>
     6ca:	08 f4       	brcc	.+2      	; 0x6ce <buzz_play+0x20>
     6cc:	d0 c0       	rjmp	.+416    	; 0x86e <buzz_play+0x1c0>
     6ce:	85 30       	cpi	r24, 0x05	; 5
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <buzz_play+0x26>
     6d2:	75 c1       	rjmp	.+746    	; 0x9be <buzz_play+0x310>
     6d4:	08 95       	ret
	  {
		  case BUZZ_MUTE:  buzz_MUTE(); break; //setICR3(0);. buzz_MUTE() 안에 music_flag=MUTE 넣어주는 명령 들어있음.
     6d6:	d3 cf       	rjmp	.-90     	; 0x67e <buzz_MUTE>
     6d8:	08 95       	ret
		  
		  case BUZZ_ON: 
		   if(TICK.buzz_1ms<200)setSoundNote(Ca);
     6da:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     6de:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     6e2:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     6e6:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     6ea:	88 3c       	cpi	r24, 0xC8	; 200
     6ec:	91 05       	cpc	r25, r1
     6ee:	a1 05       	cpc	r26, r1
     6f0:	b1 05       	cpc	r27, r1
     6f2:	20 f4       	brcc	.+8      	; 0x6fc <buzz_play+0x4e>
     6f4:	8b e9       	ldi	r24, 0x9B	; 155
     6f6:	96 e0       	ldi	r25, 0x06	; 6
     6f8:	ca cf       	rjmp	.-108    	; 0x68e <setSoundNote>
     6fa:	08 95       	ret
		   else if(TICK.buzz_1ms==200) setSoundNote(E);
     6fc:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     700:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     704:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     708:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     70c:	88 3c       	cpi	r24, 0xC8	; 200
     70e:	91 05       	cpc	r25, r1
     710:	a1 05       	cpc	r26, r1
     712:	b1 05       	cpc	r27, r1
     714:	21 f4       	brne	.+8      	; 0x71e <buzz_play+0x70>
     716:	87 ee       	ldi	r24, 0xE7	; 231
     718:	95 e0       	ldi	r25, 0x05	; 5
     71a:	b9 cf       	rjmp	.-142    	; 0x68e <setSoundNote>
     71c:	08 95       	ret
		   else if(TICK.buzz_1ms==400) setSoundNote(A);
     71e:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     722:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     726:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     72a:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     72e:	80 39       	cpi	r24, 0x90	; 144
     730:	91 40       	sbci	r25, 0x01	; 1
     732:	a1 05       	cpc	r26, r1
     734:	b1 05       	cpc	r27, r1
     736:	21 f4       	brne	.+8      	; 0x740 <buzz_play+0x92>
     738:	85 e6       	ldi	r24, 0x65	; 101
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	a8 cf       	rjmp	.-176    	; 0x68e <setSoundNote>
     73e:	08 95       	ret
		   else if(TICK.buzz_1ms==600) setSoundNote(BUZZ_B);
     740:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     744:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     748:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     74c:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     750:	88 35       	cpi	r24, 0x58	; 88
     752:	92 40       	sbci	r25, 0x02	; 2
     754:	a1 05       	cpc	r26, r1
     756:	b1 05       	cpc	r27, r1
     758:	21 f4       	brne	.+8      	; 0x762 <buzz_play+0xb4>
     75a:	8d ef       	ldi	r24, 0xFD	; 253
     75c:	93 e0       	ldi	r25, 0x03	; 3
     75e:	97 cf       	rjmp	.-210    	; 0x68e <setSoundNote>
     760:	08 95       	ret
		   else if(TICK.buzz_1ms==800) setSoundNote(BUZZ_Cs);
     762:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     766:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     76a:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     76e:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     772:	80 32       	cpi	r24, 0x20	; 32
     774:	93 40       	sbci	r25, 0x03	; 3
     776:	a1 05       	cpc	r26, r1
     778:	b1 05       	cpc	r27, r1
     77a:	21 f4       	brne	.+8      	; 0x784 <buzz_play+0xd6>
     77c:	88 ef       	ldi	r24, 0xF8	; 248
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	86 cf       	rjmp	.-244    	; 0x68e <setSoundNote>
     782:	08 95       	ret
		   else if(TICK.buzz_1ms==1200) buzz_MUTE();
     784:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     788:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     78c:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     790:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     794:	80 3b       	cpi	r24, 0xB0	; 176
     796:	94 40       	sbci	r25, 0x04	; 4
     798:	a1 05       	cpc	r26, r1
     79a:	b1 05       	cpc	r27, r1
     79c:	09 f0       	breq	.+2      	; 0x7a0 <buzz_play+0xf2>
     79e:	50 c1       	rjmp	.+672    	; 0xa40 <buzz_play+0x392>
     7a0:	6e cf       	rjmp	.-292    	; 0x67e <buzz_MUTE>
     7a2:	08 95       	ret
		   break;

		  case BUZZ_SUCCESS:
		  //TCCR3A |= (1<<COM3A0); //재생 시 타이머카운터 3번 채널 A채널 고유 핀 토글모드로 출력 설정.
		  if(TICK.buzz_1ms<200)setSoundNote(Ca);
     7a4:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     7a8:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     7ac:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     7b0:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     7b4:	88 3c       	cpi	r24, 0xC8	; 200
     7b6:	91 05       	cpc	r25, r1
     7b8:	a1 05       	cpc	r26, r1
     7ba:	b1 05       	cpc	r27, r1
     7bc:	20 f4       	brcc	.+8      	; 0x7c6 <buzz_play+0x118>
     7be:	8b e9       	ldi	r24, 0x9B	; 155
     7c0:	96 e0       	ldi	r25, 0x06	; 6
     7c2:	65 cf       	rjmp	.-310    	; 0x68e <setSoundNote>
     7c4:	08 95       	ret
		  else if(TICK.buzz_1ms==210) setSoundNote(BUZZ_MUTE);
     7c6:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     7ca:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     7ce:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     7d2:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     7d6:	82 3d       	cpi	r24, 0xD2	; 210
     7d8:	91 05       	cpc	r25, r1
     7da:	a1 05       	cpc	r26, r1
     7dc:	b1 05       	cpc	r27, r1
     7de:	21 f4       	brne	.+8      	; 0x7e8 <buzz_play+0x13a>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	54 cf       	rjmp	.-344    	; 0x68e <setSoundNote>
     7e6:	08 95       	ret
		  else if(TICK.buzz_1ms==220) setSoundNote(E);
     7e8:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     7ec:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     7f0:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     7f4:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     7f8:	8c 3d       	cpi	r24, 0xDC	; 220
     7fa:	91 05       	cpc	r25, r1
     7fc:	a1 05       	cpc	r26, r1
     7fe:	b1 05       	cpc	r27, r1
     800:	21 f4       	brne	.+8      	; 0x80a <buzz_play+0x15c>
     802:	87 ee       	ldi	r24, 0xE7	; 231
     804:	95 e0       	ldi	r25, 0x05	; 5
     806:	43 cf       	rjmp	.-378    	; 0x68e <setSoundNote>
     808:	08 95       	ret
		  else if(TICK.buzz_1ms==400) setSoundNote(BUZZ_MUTE);
     80a:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     80e:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     812:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     816:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     81a:	80 39       	cpi	r24, 0x90	; 144
     81c:	91 40       	sbci	r25, 0x01	; 1
     81e:	a1 05       	cpc	r26, r1
     820:	b1 05       	cpc	r27, r1
     822:	21 f4       	brne	.+8      	; 0x82c <buzz_play+0x17e>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	32 cf       	rjmp	.-412    	; 0x68e <setSoundNote>
     82a:	08 95       	ret
		  else if(TICK.buzz_1ms==430) setSoundNote(A);
     82c:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     830:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     834:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     838:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     83c:	8e 3a       	cpi	r24, 0xAE	; 174
     83e:	91 40       	sbci	r25, 0x01	; 1
     840:	a1 05       	cpc	r26, r1
     842:	b1 05       	cpc	r27, r1
     844:	21 f4       	brne	.+8      	; 0x84e <buzz_play+0x1a0>
     846:	85 e6       	ldi	r24, 0x65	; 101
     848:	94 e0       	ldi	r25, 0x04	; 4
     84a:	21 cf       	rjmp	.-446    	; 0x68e <setSoundNote>
     84c:	08 95       	ret
		  else if(TICK.buzz_1ms==600) buzz_MUTE();
     84e:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     852:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     856:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     85a:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     85e:	88 35       	cpi	r24, 0x58	; 88
     860:	92 40       	sbci	r25, 0x02	; 2
     862:	a1 05       	cpc	r26, r1
     864:	b1 05       	cpc	r27, r1
     866:	09 f0       	breq	.+2      	; 0x86a <buzz_play+0x1bc>
     868:	eb c0       	rjmp	.+470    	; 0xa40 <buzz_play+0x392>
     86a:	09 cf       	rjmp	.-494    	; 0x67e <buzz_MUTE>
     86c:	08 95       	ret
		  break;
		  case BUZZ_UNENROLLED:
		  		  if(TICK.buzz_1ms<75)setSoundNote(_960Hz);
     86e:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     872:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     876:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     87a:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     87e:	8b 34       	cpi	r24, 0x4B	; 75
     880:	91 05       	cpc	r25, r1
     882:	a1 05       	cpc	r26, r1
     884:	b1 05       	cpc	r27, r1
     886:	20 f4       	brcc	.+8      	; 0x890 <buzz_play+0x1e2>
     888:	82 e1       	ldi	r24, 0x12	; 18
     88a:	94 e0       	ldi	r25, 0x04	; 4
     88c:	00 cf       	rjmp	.-512    	; 0x68e <setSoundNote>
     88e:	08 95       	ret
		  		  else if(TICK.buzz_1ms<150)setSoundNote(BUZZ_MUTE);
     890:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     894:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     898:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     89c:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     8a0:	86 39       	cpi	r24, 0x96	; 150
     8a2:	91 05       	cpc	r25, r1
     8a4:	a1 05       	cpc	r26, r1
     8a6:	b1 05       	cpc	r27, r1
     8a8:	20 f4       	brcc	.+8      	; 0x8b2 <buzz_play+0x204>
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	ef ce       	rjmp	.-546    	; 0x68e <setSoundNote>
     8b0:	08 95       	ret
		  		  else if(TICK.buzz_1ms<225)setSoundNote(_960Hz);
     8b2:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     8b6:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     8ba:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     8be:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     8c2:	81 3e       	cpi	r24, 0xE1	; 225
     8c4:	91 05       	cpc	r25, r1
     8c6:	a1 05       	cpc	r26, r1
     8c8:	b1 05       	cpc	r27, r1
     8ca:	20 f4       	brcc	.+8      	; 0x8d4 <buzz_play+0x226>
     8cc:	82 e1       	ldi	r24, 0x12	; 18
     8ce:	94 e0       	ldi	r25, 0x04	; 4
     8d0:	de ce       	rjmp	.-580    	; 0x68e <setSoundNote>
		  		  else if(TICK.buzz_1ms<300)setSoundNote(BUZZ_MUTE);
     8d2:	08 95       	ret
     8d4:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     8d8:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     8dc:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     8e0:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     8e4:	8c 32       	cpi	r24, 0x2C	; 44
     8e6:	91 40       	sbci	r25, 0x01	; 1
     8e8:	a1 05       	cpc	r26, r1
     8ea:	b1 05       	cpc	r27, r1
     8ec:	20 f4       	brcc	.+8      	; 0x8f6 <buzz_play+0x248>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	cd ce       	rjmp	.-614    	; 0x68e <setSoundNote>
		  		  else if(TICK.buzz_1ms<375)setSoundNote(_960Hz);
     8f4:	08 95       	ret
     8f6:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     8fa:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     8fe:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     902:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     906:	87 37       	cpi	r24, 0x77	; 119
     908:	91 40       	sbci	r25, 0x01	; 1
     90a:	a1 05       	cpc	r26, r1
     90c:	b1 05       	cpc	r27, r1
     90e:	20 f4       	brcc	.+8      	; 0x918 <buzz_play+0x26a>
     910:	82 e1       	ldi	r24, 0x12	; 18
     912:	94 e0       	ldi	r25, 0x04	; 4
     914:	bc ce       	rjmp	.-648    	; 0x68e <setSoundNote>
		  		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     916:	08 95       	ret
     918:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     91c:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     920:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     924:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     928:	82 3c       	cpi	r24, 0xC2	; 194
     92a:	91 40       	sbci	r25, 0x01	; 1
     92c:	a1 05       	cpc	r26, r1
     92e:	b1 05       	cpc	r27, r1
     930:	09 f0       	breq	.+2      	; 0x934 <buzz_play+0x286>
     932:	86 c0       	rjmp	.+268    	; 0xa40 <buzz_play+0x392>
     934:	a4 ce       	rjmp	.-696    	; 0x67e <buzz_MUTE>
		  		  break;
		  break;
		  case BUZZ_FAIL:
		  if(TICK.buzz_1ms<100)setSoundNote(_960Hz);
     936:	08 95       	ret
     938:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     93c:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     940:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     944:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     948:	84 36       	cpi	r24, 0x64	; 100
     94a:	91 05       	cpc	r25, r1
     94c:	a1 05       	cpc	r26, r1
     94e:	b1 05       	cpc	r27, r1
     950:	20 f4       	brcc	.+8      	; 0x95a <buzz_play+0x2ac>
     952:	82 e1       	ldi	r24, 0x12	; 18
     954:	94 e0       	ldi	r25, 0x04	; 4
     956:	9b ce       	rjmp	.-714    	; 0x68e <setSoundNote>
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     958:	08 95       	ret
     95a:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     95e:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     962:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     966:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     96a:	88 3c       	cpi	r24, 0xC8	; 200
     96c:	91 05       	cpc	r25, r1
     96e:	a1 05       	cpc	r26, r1
     970:	b1 05       	cpc	r27, r1
     972:	20 f4       	brcc	.+8      	; 0x97c <buzz_play+0x2ce>
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	8a ce       	rjmp	.-748    	; 0x68e <setSoundNote>
		  else if(TICK.buzz_1ms<300)setSoundNote(_960Hz);
     97a:	08 95       	ret
     97c:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     980:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     984:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     988:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     98c:	8c 32       	cpi	r24, 0x2C	; 44
     98e:	91 40       	sbci	r25, 0x01	; 1
     990:	a1 05       	cpc	r26, r1
     992:	b1 05       	cpc	r27, r1
     994:	20 f4       	brcc	.+8      	; 0x99e <buzz_play+0x2f0>
     996:	82 e1       	ldi	r24, 0x12	; 18
     998:	94 e0       	ldi	r25, 0x04	; 4
     99a:	79 ce       	rjmp	.-782    	; 0x68e <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     99c:	08 95       	ret
     99e:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     9a2:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     9a6:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     9aa:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     9ae:	82 3c       	cpi	r24, 0xC2	; 194
     9b0:	91 40       	sbci	r25, 0x01	; 1
     9b2:	a1 05       	cpc	r26, r1
     9b4:	b1 05       	cpc	r27, r1
     9b6:	09 f0       	breq	.+2      	; 0x9ba <buzz_play+0x30c>
     9b8:	43 c0       	rjmp	.+134    	; 0xa40 <buzz_play+0x392>
     9ba:	61 ce       	rjmp	.-830    	; 0x67e <buzz_MUTE>
		  break;
		  case BUZZ_ESP8266_CONNECTED:
		  if(TICK.buzz_1ms<100)setSoundNote(BUZZ_240Hz);
     9bc:	08 95       	ret
     9be:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     9c2:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     9c6:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     9ca:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     9ce:	84 36       	cpi	r24, 0x64	; 100
     9d0:	91 05       	cpc	r25, r1
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	20 f4       	brcc	.+8      	; 0x9e0 <buzz_play+0x332>
     9d8:	87 e4       	ldi	r24, 0x47	; 71
     9da:	90 e1       	ldi	r25, 0x10	; 16
     9dc:	58 ce       	rjmp	.-848    	; 0x68e <setSoundNote>
		  else if(TICK.buzz_1ms<200)setSoundNote(BUZZ_MUTE);
     9de:	08 95       	ret
     9e0:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     9e4:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     9e8:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     9ec:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     9f0:	88 3c       	cpi	r24, 0xC8	; 200
     9f2:	91 05       	cpc	r25, r1
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	20 f4       	brcc	.+8      	; 0xa02 <buzz_play+0x354>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	47 ce       	rjmp	.-882    	; 0x68e <setSoundNote>
		  else if(TICK.buzz_1ms<300)setSoundNote(BUZZ_480Hz);
     a00:	08 95       	ret
     a02:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     a06:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     a0a:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     a0e:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     a12:	8c 32       	cpi	r24, 0x2C	; 44
     a14:	91 40       	sbci	r25, 0x01	; 1
     a16:	a1 05       	cpc	r26, r1
     a18:	b1 05       	cpc	r27, r1
     a1a:	20 f4       	brcc	.+8      	; 0xa24 <buzz_play+0x376>
     a1c:	84 e2       	ldi	r24, 0x24	; 36
     a1e:	98 e0       	ldi	r25, 0x08	; 8
     a20:	36 ce       	rjmp	.-916    	; 0x68e <setSoundNote>
		  else if(TICK.buzz_1ms==450) buzz_MUTE(); //buzz_MUTE();
     a22:	08 95       	ret
     a24:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     a28:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     a2c:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     a30:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     a34:	82 3c       	cpi	r24, 0xC2	; 194
     a36:	91 40       	sbci	r25, 0x01	; 1
     a38:	a1 05       	cpc	r26, r1
     a3a:	b1 05       	cpc	r27, r1
     a3c:	09 f4       	brne	.+2      	; 0xa40 <buzz_play+0x392>
     a3e:	1f ce       	rjmp	.-962    	; 0x67e <buzz_MUTE>
     a40:	08 95       	ret

00000a42 <__vector_15>:
void logojector_OFF();

int start_timer_flag=1;
int start_timeout_count_flag=1;
ISR(TIMER0_COMP_vect) // 1khz 속도로 ISR 진입
{
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	0b b6       	in	r0, 0x3b	; 59
     a4e:	0f 92       	push	r0
     a50:	2f 93       	push	r18
     a52:	3f 93       	push	r19
     a54:	4f 93       	push	r20
     a56:	5f 93       	push	r21
     a58:	6f 93       	push	r22
     a5a:	7f 93       	push	r23
     a5c:	8f 93       	push	r24
     a5e:	9f 93       	push	r25
     a60:	af 93       	push	r26
     a62:	bf 93       	push	r27
     a64:	ef 93       	push	r30
     a66:	ff 93       	push	r31
	//PORTA ^=0x02;
	
// 	static u32 ticks=0;
// 	ticks++;
// 	if(ticks%10==0){//0.1khz마다 증가
	TICK.buzz_1ms++;
     a68:	ea eb       	ldi	r30, 0xBA	; 186
     a6a:	f6 e0       	ldi	r31, 0x06	; 6
     a6c:	84 81       	ldd	r24, Z+4	; 0x04
     a6e:	95 81       	ldd	r25, Z+5	; 0x05
     a70:	a6 81       	ldd	r26, Z+6	; 0x06
     a72:	b7 81       	ldd	r27, Z+7	; 0x07
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	a1 1d       	adc	r26, r1
     a78:	b1 1d       	adc	r27, r1
     a7a:	84 83       	std	Z+4, r24	; 0x04
     a7c:	95 83       	std	Z+5, r25	; 0x05
     a7e:	a6 83       	std	Z+6, r26	; 0x06
     a80:	b7 83       	std	Z+7, r27	; 0x07
	TICK.tick_1ms++;
     a82:	80 81       	ld	r24, Z
     a84:	91 81       	ldd	r25, Z+1	; 0x01
     a86:	a2 81       	ldd	r26, Z+2	; 0x02
     a88:	b3 81       	ldd	r27, Z+3	; 0x03
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	a1 1d       	adc	r26, r1
     a8e:	b1 1d       	adc	r27, r1
     a90:	80 83       	st	Z, r24
     a92:	91 83       	std	Z+1, r25	; 0x01
     a94:	a2 83       	std	Z+2, r26	; 0x02
     a96:	b3 83       	std	Z+3, r27	; 0x03
	TICK.timeout_tick_1ms++;
     a98:	80 85       	ldd	r24, Z+8	; 0x08
     a9a:	91 85       	ldd	r25, Z+9	; 0x09
     a9c:	a2 85       	ldd	r26, Z+10	; 0x0a
     a9e:	b3 85       	ldd	r27, Z+11	; 0x0b
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	a1 1d       	adc	r26, r1
     aa4:	b1 1d       	adc	r27, r1
     aa6:	80 87       	std	Z+8, r24	; 0x08
     aa8:	91 87       	std	Z+9, r25	; 0x09
     aaa:	a2 87       	std	Z+10, r26	; 0x0a
     aac:	b3 87       	std	Z+11, r27	; 0x0b
	buzz_play(); //
     aae:	ff dd       	rcall	.-1026   	; 0x6ae <buzz_play>
}
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	7f 91       	pop	r23
     abe:	6f 91       	pop	r22
     ac0:	5f 91       	pop	r21
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	0f 90       	pop	r0
     aca:	0b be       	out	0x3b, r0	; 59
     acc:	0f 90       	pop	r0
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	0f 90       	pop	r0
     ad2:	1f 90       	pop	r1
     ad4:	18 95       	reti

00000ad6 <start_timer>:
	 
}

void start_timer(void)
{
	TICK.tick_1ms=0;
     ad6:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <TICK>
     ada:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <TICK+0x1>
     ade:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <TICK+0x2>
     ae2:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <TICK+0x3>
	start_timer_flag=1;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <start_timer_flag+0x1>
     aee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <start_timer_flag>
     af2:	08 95       	ret

00000af4 <start_timeout_count>:
}
void start_timeout_count(void){
	TICK.timeout_tick_1ms=0;
     af4:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <TICK+0x8>
     af8:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <TICK+0x9>
     afc:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <TICK+0xa>
     b00:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <TICK+0xb>
	start_timeout_count_flag=0;
     b04:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b08:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     b0c:	08 95       	ret

00000b0e <request_reset_to_admin>:
		start_timeout_count_flag=1;request_reset_to_admin(state);
	}
	while(start_timeout_count_flag); //시스템 중지v
}
void request_reset_to_admin(char* state)
{
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	65 97       	sbiw	r28, 0x15	; 21
     b18:	0f b6       	in	r0, 0x3f	; 63
     b1a:	f8 94       	cli
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	0f be       	out	0x3f, r0	; 63
     b20:	cd bf       	out	0x3d, r28	; 61
     b22:	bc 01       	movw	r22, r24
	
	char buf[21]="ERR Code:";
     b24:	9a e0       	ldi	r25, 0x0A	; 10
     b26:	e7 e0       	ldi	r30, 0x07	; 7
     b28:	f1 e0       	ldi	r31, 0x01	; 1
     b2a:	de 01       	movw	r26, r28
     b2c:	11 96       	adiw	r26, 0x01	; 1
     b2e:	01 90       	ld	r0, Z+
     b30:	0d 92       	st	X+, r0
     b32:	9a 95       	dec	r25
     b34:	e1 f7       	brne	.-8      	; 0xb2e <request_reset_to_admin+0x20>
     b36:	fe 01       	movw	r30, r28
     b38:	3b 96       	adiw	r30, 0x0b	; 11
     b3a:	8b e0       	ldi	r24, 0x0B	; 11
     b3c:	df 01       	movw	r26, r30
     b3e:	1d 92       	st	X+, r1
     b40:	8a 95       	dec	r24
     b42:	e9 f7       	brne	.-6      	; 0xb3e <request_reset_to_admin+0x30>
	strcat(buf,state);
     b44:	ce 01       	movw	r24, r28
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <strcat>
	
	i2c_lcd_clear();
     b4c:	7e d4       	rcall	.+2300   	; 0x144a <i2c_lcd_clear>
	i2c_lcd_string(1,0,"Initial err.");
     b4e:	4e e9       	ldi	r20, 0x9E	; 158
     b50:	51 e0       	ldi	r21, 0x01	; 1
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	6a d4       	rcall	.+2260   	; 0x142c <i2c_lcd_string>
	i2c_lcd_string(2,0,"Plz, Trying reset.");
     b58:	4b ea       	ldi	r20, 0xAB	; 171
     b5a:	51 e0       	ldi	r21, 0x01	; 1
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	65 d4       	rcall	.+2250   	; 0x142c <i2c_lcd_string>
	i2c_lcd_string(3,0,buf);//따로 전역으로 빼주지 않아도 상관없음. 함수 안에서 다 처리하므로.
     b62:	ae 01       	movw	r20, r28
     b64:	4f 5f       	subi	r20, 0xFF	; 255
     b66:	5f 4f       	sbci	r21, 0xFF	; 255
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	5f d4       	rcall	.+2238   	; 0x142c <i2c_lcd_string>
}
     b6e:	65 96       	adiw	r28, 0x15	; 21
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	f8 94       	cli
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	0f be       	out	0x3f, r0	; 63
     b78:	cd bf       	out	0x3d, r28	; 61
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <timeout_check>:
}

void timeout_check(char* state){
	//timeout_tick_1ms 변수가 10000을 넘지 않는다면 if구문을 돌지 않으며, 마찬가지로 while루프도 돌지 않음.
	
	if(TICK.timeout_tick_1ms>10000) {//10초 이상 경과 한 뒤 해당 구문을 들어갈 경우.
     b80:	40 91 c2 06 	lds	r20, 0x06C2	; 0x8006c2 <TICK+0x8>
     b84:	50 91 c3 06 	lds	r21, 0x06C3	; 0x8006c3 <TICK+0x9>
     b88:	60 91 c4 06 	lds	r22, 0x06C4	; 0x8006c4 <TICK+0xa>
     b8c:	70 91 c5 06 	lds	r23, 0x06C5	; 0x8006c5 <TICK+0xb>
     b90:	41 31       	cpi	r20, 0x11	; 17
     b92:	57 42       	sbci	r21, 0x27	; 39
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	38 f0       	brcs	.+14     	; 0xba8 <timeout_check+0x28>
		start_timeout_count_flag=1;request_reset_to_admin(state);
     b9a:	21 e0       	ldi	r18, 0x01	; 1
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ba2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     ba6:	b3 df       	rcall	.-154    	; 0xb0e <request_reset_to_admin>
	}
	while(start_timeout_count_flag); //시스템 중지v
     ba8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	f1 f7       	brne	.-4      	; 0xbb0 <timeout_check+0x30>
}
     bb4:	08 95       	ret

00000bb6 <esp8266_init>:

//AP 끊는함수하고, TCP끊는거, 다시연결하는거 등등 > 터미널환경에서 가능케 할수도 있어야함
//리셋, 실패시 ssid, passward 묻고, 마찬가지로 TCP연결 실패시 또한 다시 ip, port 묻는다

void esp8266_init(unsigned char* ssid, unsigned char* pw, unsigned char * ip, unsigned char* port)
{
     bb6:	cf 92       	push	r12
     bb8:	df 92       	push	r13
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	7c 01       	movw	r14, r24
     bc8:	6b 01       	movw	r12, r22
     bca:	ea 01       	movw	r28, r20
     bcc:	89 01       	movw	r16, r18
	//타임아웃 시작
	start_timeout_count();
     bce:	92 df       	rcall	.-220    	; 0xaf4 <start_timeout_count>
	uart1_tx_string("AT+RST\r\n");	 //리셋 신호 이후 추가 데이터가 들어와서, 딜레이로 강제 정지 시켜줘야 함
     bd0:	8e eb       	ldi	r24, 0xBE	; 190
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	f0 d7       	rcall	.+4064   	; 0x1bb6 <uart1_tx_string>
     bd6:	2f ef       	ldi	r18, 0xFF	; 255
     bd8:	81 e1       	ldi	r24, 0x11	; 17
     bda:	9a e7       	ldi	r25, 0x7A	; 122
     bdc:	21 50       	subi	r18, 0x01	; 1
     bde:	80 40       	sbci	r24, 0x00	; 0
     be0:	90 40       	sbci	r25, 0x00	; 0
     be2:	e1 f7       	brne	.-8      	; 0xbdc <esp8266_init+0x26>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <esp8266_init+0x30>
     be6:	00 00       	nop
	_delay_ms(2500);
	timeout_check(TIMEOUT_ATRST);
     be8:	87 ec       	ldi	r24, 0xC7	; 199
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	c9 df       	rcall	.-110    	; 0xb80 <timeout_check>
	i2c_lcd_string(2,0,"     OOO_______     ");
     bee:	4e ec       	ldi	r20, 0xCE	; 206
     bf0:	51 e0       	ldi	r21, 0x01	; 1
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	82 e0       	ldi	r24, 0x02	; 2
	
	
	start_timeout_count();
     bf6:	1a d4       	rcall	.+2100   	; 0x142c <i2c_lcd_string>
     bf8:	7d df       	rcall	.-262    	; 0xaf4 <start_timeout_count>
	uart1_tx_string("AT+GMR\r\n");
     bfa:	83 ee       	ldi	r24, 0xE3	; 227
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	db d7       	rcall	.+4022   	; 0x1bb6 <uart1_tx_string>
     c00:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     c04:	81 11       	cpse	r24, r1
     c06:	07 c0       	rjmp	.+14     	; 0xc16 <esp8266_init+0x60>
		timeout_check(TIMEOUT_ATGMR);
     c08:	8c ee       	ldi	r24, 0xEC	; 236
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	b9 df       	rcall	.-142    	; 0xb80 <timeout_check>
     c0e:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
	
	
	start_timeout_count();
	uart1_tx_string("AT+GMR\r\n");
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     c12:	88 23       	and	r24, r24
		timeout_check(TIMEOUT_ATGMR);
	}
	esp8266_return_result_flag=0;
     c14:	c9 f3       	breq	.-14     	; 0xc08 <esp8266_init+0x52>
     c16:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <esp8266_return_result_flag>
	
	
	start_timeout_count();
     c1a:	6c df       	rcall	.-296    	; 0xaf4 <start_timeout_count>
	uart1_tx_string("AT+CWMODE=1\r\n"); // OK sign 말고도 다른 신호도 들어오기 때문에 걸어놓음
     c1c:	83 ef       	ldi	r24, 0xF3	; 243
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	ca d7       	rcall	.+3988   	; 0x1bb6 <uart1_tx_string>
     c22:	2f ef       	ldi	r18, 0xFF	; 255
     c24:	87 ea       	ldi	r24, 0xA7	; 167
     c26:	91 e6       	ldi	r25, 0x61	; 97
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	80 40       	sbci	r24, 0x00	; 0
     c2c:	90 40       	sbci	r25, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <esp8266_init+0x72>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <esp8266_init+0x7c>
     c32:	00 00       	nop
	_delay_ms(2000);
	esp8266_return_result_flag=0;
     c34:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <esp8266_return_result_flag>
	timeout_check(TIMEOUT_ATCWMODE);
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	92 e0       	ldi	r25, 0x02	; 2
	i2c_lcd_string(2,0,"     OOOO______     ");
     c3c:	a1 df       	rcall	.-190    	; 0xb80 <timeout_check>
     c3e:	4b e0       	ldi	r20, 0x0B	; 11
     c40:	52 e0       	ldi	r21, 0x02	; 2
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	f2 d3       	rcall	.+2020   	; 0x142c <i2c_lcd_string>
	
	
	//
	
	start_timeout_count();
     c48:	55 df       	rcall	.-342    	; 0xaf4 <start_timeout_count>
     c4a:	80 e2       	ldi	r24, 0x20	; 32
	uart1_tx_string("AT+CWMODE?\r\n");
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	b3 d7       	rcall	.+3942   	; 0x1bb6 <uart1_tx_string>
     c50:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag) {
     c54:	81 11       	cpse	r24, r1
     c56:	07 c0       	rjmp	.+14     	; 0xc66 <esp8266_init+0xb0>
		timeout_check(TIMEOUT_ATCWMODE_);
     c58:	8d e2       	ldi	r24, 0x2D	; 45
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	91 df       	rcall	.-222    	; 0xb80 <timeout_check>
	//
	
	start_timeout_count();
	uart1_tx_string("AT+CWMODE?\r\n");
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag) {
     c5e:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
     c62:	88 23       	and	r24, r24
     c64:	c9 f3       	breq	.-14     	; 0xc58 <esp8266_init+0xa2>
		timeout_check(TIMEOUT_ATCWMODE_);
	}
	esp8266_return_result_flag=0;
     c66:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <esp8266_return_result_flag>
	
		
	start_timeout_count();
     c6a:	44 df       	rcall	.-376    	; 0xaf4 <start_timeout_count>
	uart1_tx_string("AT+CWLAP\r\n");
     c6c:	88 e3       	ldi	r24, 0x38	; 56
     c6e:	92 e0       	ldi	r25, 0x02	; 2
     c70:	a2 d7       	rcall	.+3908   	; 0x1bb6 <uart1_tx_string>
     c72:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     c76:	81 11       	cpse	r24, r1
     c78:	07 c0       	rjmp	.+14     	; 0xc88 <esp8266_init+0xd2>
     c7a:	83 e4       	ldi	r24, 0x43	; 67
		timeout_check(TIMEOUT_ATCWLAP);
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	80 df       	rcall	.-256    	; 0xb80 <timeout_check>
     c80:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
	
		
	start_timeout_count();
	uart1_tx_string("AT+CWLAP\r\n");
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     c84:	88 23       	and	r24, r24
     c86:	c9 f3       	breq	.-14     	; 0xc7a <esp8266_init+0xc4>
		timeout_check(TIMEOUT_ATCWLAP);
	}
	esp8266_return_result_flag=0;
     c88:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <esp8266_return_result_flag>
	i2c_lcd_string(2,0,"     OOOOO_____     ");
     c8c:	4c e4       	ldi	r20, 0x4C	; 76
     c8e:	52 e0       	ldi	r21, 0x02	; 2
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	cb d3       	rcall	.+1942   	; 0x142c <i2c_lcd_string>
     c96:	2e df       	rcall	.-420    	; 0xaf4 <start_timeout_count>
	
	
	start_timeout_count();
     c98:	a6 01       	movw	r20, r12
     c9a:	b7 01       	movw	r22, r14
	uart1_tx_string(connect_to_AP("AT+CWJAP=\"",(char*)ssid,(char*)pw));
     c9c:	81 e6       	ldi	r24, 0x61	; 97
     c9e:	92 e0       	ldi	r25, 0x02	; 2
     ca0:	f6 d7       	rcall	.+4076   	; 0x1c8e <connect_to_AP>
     ca2:	89 d7       	rcall	.+3858   	; 0x1bb6 <uart1_tx_string>
     ca4:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
     ca8:	81 11       	cpse	r24, r1
	 //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     caa:	07 c0       	rjmp	.+14     	; 0xcba <esp8266_init+0x104>
     cac:	8c e6       	ldi	r24, 0x6C	; 108
		timeout_check(TIMEOUT_ATCWJAP);
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	67 df       	rcall	.-306    	; 0xb80 <timeout_check>
     cb2:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
	
	
	start_timeout_count();
	uart1_tx_string(connect_to_AP("AT+CWJAP=\"",(char*)ssid,(char*)pw));
	 //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     cb6:	88 23       	and	r24, r24
     cb8:	c9 f3       	breq	.-14     	; 0xcac <esp8266_init+0xf6>
     cba:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <esp8266_return_result_flag>
		timeout_check(TIMEOUT_ATCWJAP);
	}
	esp8266_return_result_flag=0;
     cbe:	45 e7       	ldi	r20, 0x75	; 117
	i2c_lcd_string(2,0,"     OOOOOO____     ");
     cc0:	52 e0       	ldi	r21, 0x02	; 2
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	b2 d3       	rcall	.+1892   	; 0x142c <i2c_lcd_string>
     cc8:	15 df       	rcall	.-470    	; 0xaf4 <start_timeout_count>
	
	//AT+SWQAP  AP 접속 끊기
	
	start_timeout_count();
     cca:	8a e8       	ldi	r24, 0x8A	; 138
     ccc:	92 e0       	ldi	r25, 0x02	; 2
	uart1_tx_string("AT+CIFSR\r\n");
     cce:	73 d7       	rcall	.+3814   	; 0x1bb6 <uart1_tx_string>
     cd0:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     cd4:	81 11       	cpse	r24, r1
     cd6:	07 c0       	rjmp	.+14     	; 0xce6 <esp8266_init+0x130>
		timeout_check(TIMEOUT_ATCIFSR);
     cd8:	85 e9       	ldi	r24, 0x95	; 149
     cda:	92 e0       	ldi	r25, 0x02	; 2
     cdc:	51 df       	rcall	.-350    	; 0xb80 <timeout_check>
     cde:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
	//AT+SWQAP  AP 접속 끊기
	
	start_timeout_count();
	uart1_tx_string("AT+CIFSR\r\n");
	//기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     ce2:	88 23       	and	r24, r24
     ce4:	c9 f3       	breq	.-14     	; 0xcd8 <esp8266_init+0x122>
     ce6:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <esp8266_return_result_flag>
		timeout_check(TIMEOUT_ATCIFSR);
	} 
	esp8266_return_result_flag=0;
     cea:	4e e9       	ldi	r20, 0x9E	; 158
	i2c_lcd_string(2,0,"     OOOOOOO___     ");
     cec:	52 e0       	ldi	r21, 0x02	; 2
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	9c d3       	rcall	.+1848   	; 0x142c <i2c_lcd_string>
     cf4:	ff de       	rcall	.-514    	; 0xaf4 <start_timeout_count>
	
	
	
	start_timeout_count();
     cf6:	b8 01       	movw	r22, r16
     cf8:	ce 01       	movw	r24, r28
	uart1_tx_string(TCP_connect((char*)ip, (char*)port));
     cfa:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <TCP_connect>
     cfe:	5b d7       	rcall	.+3766   	; 0x1bb6 <uart1_tx_string>
     d00:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
	//AT+CIPCLOSE 
	 //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     d04:	81 11       	cpse	r24, r1
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <esp8266_init+0x160>
     d08:	83 eb       	ldi	r24, 0xB3	; 179
     d0a:	92 e0       	ldi	r25, 0x02	; 2
		timeout_check(TIMEOUT_ATCIPSTART);
     d0c:	39 df       	rcall	.-398    	; 0xb80 <timeout_check>
     d0e:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_return_result_flag>
     d12:	88 23       	and	r24, r24
	
	start_timeout_count();
	uart1_tx_string(TCP_connect((char*)ip, (char*)port));
	//AT+CIPCLOSE 
	 //기본은 0이므로 무조건 돌고, OK 사인 들어오면 1로 set되어 while문 나옴
	while(!esp8266_return_result_flag){
     d14:	c9 f3       	breq	.-14     	; 0xd08 <esp8266_init+0x152>
     d16:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <esp8266_return_result_flag>
		timeout_check(TIMEOUT_ATCIPSTART);
	}
	esp8266_return_result_flag=0;
     d1a:	4f eb       	ldi	r20, 0xBF	; 191
     d1c:	52 e0       	ldi	r21, 0x02	; 2
	i2c_lcd_string(2,0,"     OOOOOOOO__     ");
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	84 d3       	rcall	.+1800   	; 0x142c <i2c_lcd_string>
     d24:	2f ef       	ldi	r18, 0xFF	; 255
     d26:	81 ee       	ldi	r24, 0xE1	; 225
     d28:	94 e0       	ldi	r25, 0x04	; 4
     d2a:	21 50       	subi	r18, 0x01	; 1
     d2c:	80 40       	sbci	r24, 0x00	; 0
     d2e:	90 40       	sbci	r25, 0x00	; 0
     d30:	e1 f7       	brne	.-8      	; 0xd2a <esp8266_init+0x174>
     d32:	00 c0       	rjmp	.+0      	; 0xd34 <esp8266_init+0x17e>
     d34:	00 00       	nop
     d36:	44 ed       	ldi	r20, 0xD4	; 212
     d38:	52 e0       	ldi	r21, 0x02	; 2
     d3a:	60 e0       	ldi	r22, 0x00	; 0
	//1byte당 해봐야 1ms 정도밖에 소요되지 않는다.
	_delay_ms(100);// OK sign 말고도 Linked sign까지 들어온다. 이 문자까지 잡아내려면 또 구문을 추가해야되는데, 번거로워서 일단 딜레이로 처리함.

	i2c_lcd_string(2,0,"     OOOOOOOOO_     ");
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	76 d3       	rcall	.+1772   	; 0x142c <i2c_lcd_string>
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
	
}
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	cf 90       	pop	r12
     d50:	08 95       	ret

00000d52 <logojector_ON>:
     d52:	ac 9a       	sbi	0x15, 4	; 21
     d54:	08 95       	ret

00000d56 <RC522_data_state_check_and_actuate>:
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
		}
	}
}

void RC522_data_state_check_and_actuate(char *tggl)
{
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	ce 54       	subi	r28, 0x4E	; 78
     d70:	d1 09       	sbc	r29, r1
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	9c 01       	movw	r18, r24
	if(received_state==RECEIVE_NONE); //do nothing
	else if(received_state==RECEIVE_SUCCESS){//Received data service routine.
     d7e:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <received_state>
     d82:	91 30       	cpi	r25, 0x01	; 1
     d84:	09 f0       	breq	.+2      	; 0xd88 <RC522_data_state_check_and_actuate+0x32>
     d86:	71 c1       	rjmp	.+738    	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
     d88:	f9 01       	movw	r30, r18
		//send to esp8266 and receive result data.
		if((*tggl)==ENTRANCE_GATE){
     d8a:	80 81       	ld	r24, Z
     d8c:	81 11       	cpse	r24, r1
     d8e:	28 c1       	rjmp	.+592    	; 0xfe0 <RC522_data_state_check_and_actuate+0x28a>
			//esp8266에 uid와 입구게이트 정보 전송 함수
			//while(전송 완료될 때 까지 대기)???
			
			
			/*이부분은 esp8266 구현한 뒤에 넣어야 된다 */
			uart1_tx_string("AT+CIPSEND=11\r\n"); //4byte길이 데이터 전송 예정
     d90:	89 ee       	ldi	r24, 0xE9	; 233
     d92:	92 e0       	ldi	r25, 0x02	; 2
     d94:	10 d7       	rcall	.+3616   	; 0x1bb6 <uart1_tx_string>
			//_delay_ms(20); //위 데이터 다 보낼때 까지 대기해야 하는데, 사실 없어도 되는 라인
			// '>' 문자가 확인될 때까지 대기
			while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
     d96:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <esp8266_send_ready_flag>
     d9a:	88 23       	and	r24, r24
     d9c:	e1 f3       	breq	.-8      	; 0xd96 <RC522_data_state_check_and_actuate+0x40>
			esp8266_send_ready_flag=0;
     d9e:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <esp8266_send_ready_flag>
			
			//esp8266으로 uid데이터 전송
			
			//미리 받을 준비 시작
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
     da2:	82 e3       	ldi	r24, 0x32	; 50
     da4:	ee e7       	ldi	r30, 0x7E	; 126
     da6:	f5 e0       	ldi	r31, 0x05	; 5
     da8:	df 01       	movw	r26, r30
     daa:	1d 92       	st	X+, r1
     dac:	8a 95       	dec	r24
     dae:	e9 f7       	brne	.-6      	; 0xdaa <RC522_data_state_check_and_actuate+0x54>
     db0:	06 e9       	ldi	r16, 0x96	; 150
     db2:	16 e0       	ldi	r17, 0x06	; 6
     db4:	0f 2e       	mov	r0, r31
     db6:	fa e9       	ldi	r31, 0x9A	; 154
     db8:	ef 2e       	mov	r14, r31
     dba:	f6 e0       	ldi	r31, 0x06	; 6
     dbc:	ff 2e       	mov	r15, r31
     dbe:	f0 2d       	mov	r31, r0
			for(int i=0; i<4; i++)
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
     dc0:	f8 01       	movw	r30, r16
     dc2:	81 91       	ld	r24, Z+
     dc4:	8f 01       	movw	r16, r30
     dc6:	34 d7       	rcall	.+3688   	; 0x1c30 <HexToString>
     dc8:	f6 d6       	rcall	.+3564   	; 0x1bb6 <uart1_tx_string>
				uart1_tx_char(' ');
     dca:	80 e2       	ldi	r24, 0x20	; 32
     dcc:	ec d6       	rcall	.+3544   	; 0x1ba6 <uart1_tx_char>
     dce:	0e 15       	cp	r16, r14
			
			//esp8266으로 uid데이터 전송
			
			//미리 받을 준비 시작
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
			for(int i=0; i<4; i++)
     dd0:	1f 05       	cpc	r17, r15
     dd2:	b1 f7       	brne	.-20     	; 0xdc0 <RC522_data_state_check_and_actuate+0x6a>
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
				uart1_tx_char(' ');
			}
			uart1_tx_string("\r\n");
     dd4:	88 ef       	ldi	r24, 0xF8	; 248
     dd6:	93 e0       	ldi	r25, 0x03	; 3
     dd8:	ee d6       	rcall	.+3548   	; 0x1bb6 <uart1_tx_string>
     dda:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <esp8266_receiving_flag>

			/*이 부분은 esp8266 구현한 뒤에 넣어야 된다.*/
			//전송 후, 서버에서 결과물을 다시 전송해주기까지 대기
			while(!esp8266_receiving_flag); //ISR내에서 버퍼에 모두 담을때 까지 대기 esp8266_received_data[] 에 저장
     dde:	88 23       	and	r24, r24
     de0:	e1 f3       	breq	.-8      	; 0xdda <RC522_data_state_check_and_actuate+0x84>
     de2:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <esp8266_receiving_flag>
			esp8266_receiving_flag=0;
     de6:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <esp8266_received_data>
			//uart0_tx_string("\nline:309\n");
			//esp8266_receive_complete_flag=0;
			if(esp8266_received_data[0]=='O'){
     dea:	8f 34       	cpi	r24, 0x4F	; 79
     dec:	09 f0       	breq	.+2      	; 0xdf0 <RC522_data_state_check_and_actuate+0x9a>
     dee:	b0 c0       	rjmp	.+352    	; 0xf50 <RC522_data_state_check_and_actuate+0x1fa>
     df0:	6e e7       	ldi	r22, 0x7E	; 126
				//DB 테이블에 존재하는 uid일 경우 해당 구문을 무조건 돌음
				
				
				
				uint8_t esp8266_received_data_buffer[50];
				strcpy((char*)esp8266_received_data_buffer,(char*)esp8266_received_data);
     df2:	75 e0       	ldi	r23, 0x05	; 5
     df4:	ce 01       	movw	r24, r28
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <strcpy>
				strncpy((char*)esp8266_received_data_buffer,"HI",2);
     dfc:	88 e4       	ldi	r24, 0x48	; 72
     dfe:	99 e4       	ldi	r25, 0x49	; 73
     e00:	9a 83       	std	Y+2, r25	; 0x02
				
				start_timer(); //ticktim을 0으로 클리어시킴.
     e02:	89 83       	std	Y+1, r24	; 0x01
     e04:	68 de       	rcall	.-816    	; 0xad6 <start_timer>
				logojector_ON();
     e06:	a5 df       	rcall	.-182    	; 0xd52 <logojector_ON>
     e08:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <rfid_user_flag+0x1>
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
     e0c:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <rfid_user_flag>
     e10:	0d ef       	ldi	r16, 0xFD	; 253
     e12:	14 e0       	ldi	r17, 0x04	; 4
     e14:	e1 2c       	mov	r14, r1
				for(int i=0; i<MAX_USER_COUNT;i++)
     e16:	f1 2c       	mov	r15, r1
     e18:	cc 24       	eor	r12, r12
					// 다시 카드 인식시키지 않도록 구현
					
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
						rfid_user_flag=1;
     e1a:	c3 94       	inc	r12
     e1c:	d1 2c       	mov	r13, r1
     e1e:	64 e4       	ldi	r22, 0x44	; 68
				{
					
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
     e20:	71 e0       	ldi	r23, 0x01	; 1
     e22:	c8 01       	movw	r24, r16
     e24:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <strcmp>
     e28:	89 2b       	or	r24, r25
     e2a:	49 f4       	brne	.+18     	; 0xe3e <RC522_data_state_check_and_actuate+0xe8>
     e2c:	f0 92 fc 04 	sts	0x04FC, r15	; 0x8004fc <rfid_user_count_pointer+0x1>
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
     e30:	e0 92 fb 04 	sts	0x04FB, r14	; 0x8004fb <rfid_user_count_pointer>
     e34:	d0 92 fa 04 	sts	0x04FA, r13	; 0x8004fa <rfid_user_flag+0x1>
						rfid_user_flag=1;
     e38:	c0 92 f9 04 	sts	0x04F9, r12	; 0x8004f9 <rfid_user_flag>
     e3c:	0c c0       	rjmp	.+24     	; 0xe56 <RC522_data_state_check_and_actuate+0x100>
     e3e:	66 e9       	ldi	r22, 0x96	; 150
						//i=MAX_USER_COUNT;//루프를 나오기 위함
					}
					else if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch0)==0)
     e40:	76 e0       	ldi	r23, 0x06	; 6
     e42:	c8 01       	movw	r24, r16
     e44:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <strcmp>
     e48:	89 2b       	or	r24, r25
     e4a:	29 f4       	brne	.+10     	; 0xe56 <RC522_data_state_check_and_actuate+0x100>
     e4c:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <rfid_user_flag+0x1>
					{
						//만일 버퍼 안에 기존 유저가 들어있다면
						i=MAX_USER_COUNT; //그 이후는 의미 없기 때문에 그냥 빠져나옴
						rfid_user_flag=0;
     e50:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <rfid_user_flag>
     e54:	6b c0       	rjmp	.+214    	; 0xf2c <RC522_data_state_check_and_actuate+0x1d6>
     e56:	ff ef       	ldi	r31, 0xFF	; 255
				
				start_timer(); //ticktim을 0으로 클리어시킴.
				logojector_ON();
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
				for(int i=0; i<MAX_USER_COUNT;i++)
     e58:	ef 1a       	sub	r14, r31
     e5a:	ff 0a       	sbc	r15, r31
     e5c:	0b 5f       	subi	r16, 0xFB	; 251
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	85 e0       	ldi	r24, 0x05	; 5
     e62:	e8 16       	cp	r14, r24
     e64:	f1 04       	cpc	r15, r1
     e66:	d9 f6       	brne	.-74     	; 0xe1e <RC522_data_state_check_and_actuate+0xc8>
     e68:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <rfid_user_flag>
						rfid_user_flag=0;
					}
					//else rfid_user_flag=0;//모두 꽉 차 있음.
					
				}
				if(rfid_user_flag){//DB에 uid가 존재할뿐더러, 최초 입장시에만 해당 구문을 들어감. 이후에는 인식안됨.
     e6c:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <rfid_user_flag+0x1>
     e70:	89 2b       	or	r24, r25
     e72:	09 f4       	brne	.+2      	; 0xe76 <RC522_data_state_check_and_actuate+0x120>
     e74:	5b c0       	rjmp	.+182    	; 0xf2c <RC522_data_state_check_and_actuate+0x1d6>
     e76:	80 91 fb 04 	lds	r24, 0x04FB	; 0x8004fb <rfid_user_count_pointer>
					strcpy((char*)rfid_user_uid_buffer[rfid_user_count_pointer],(char*)rfid_uid_ch0);
     e7a:	90 91 fc 04 	lds	r25, 0x04FC	; 0x8004fc <rfid_user_count_pointer+0x1>
     e7e:	9c 01       	movw	r18, r24
     e80:	22 0f       	add	r18, r18
     e82:	33 1f       	adc	r19, r19
     e84:	22 0f       	add	r18, r18
     e86:	33 1f       	adc	r19, r19
     e88:	82 0f       	add	r24, r18
     e8a:	93 1f       	adc	r25, r19
     e8c:	66 e9       	ldi	r22, 0x96	; 150
     e8e:	76 e0       	ldi	r23, 0x06	; 6
     e90:	83 50       	subi	r24, 0x03	; 3
     e92:	9b 4f       	sbci	r25, 0xFB	; 251
     e94:	f6 d7       	rcall	.+4076   	; 0x1e82 <strcpy>
					
					char MAX_USER_COUNT_STR[4];
					strcpy(MAX_USER_COUNT_STR,IntToString((int)MAX_USER_COUNT));
     e96:	85 e0       	ldi	r24, 0x05	; 5
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	9b d6       	rcall	.+3382   	; 0x1bd2 <IntToString>
     e9c:	bc 01       	movw	r22, r24
     e9e:	ce 01       	movw	r24, r28
     ea0:	85 5b       	subi	r24, 0xB5	; 181
     ea2:	9f 4f       	sbci	r25, 0xFF	; 255
     ea4:	ee d7       	rcall	.+4060   	; 0x1e82 <strcpy>
					
					char USER_COUNT_STR[4];
					char dummy_value=1;
					strcpy(USER_COUNT_STR,IntToString((int)MAX_USER_COUNT-dummy_value));
     ea6:	84 e0       	ldi	r24, 0x04	; 4
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	93 d6       	rcall	.+3366   	; 0x1bd2 <IntToString>
     eac:	bc 01       	movw	r22, r24
     eae:	ce 01       	movw	r24, r28
     eb0:	89 5b       	subi	r24, 0xB9	; 185
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	e6 d7       	rcall	.+4044   	; 0x1e82 <strcpy>
     eb6:	8e e0       	ldi	r24, 0x0E	; 14
     eb8:	ec e1       	ldi	r30, 0x1C	; 28
					
					
					//LCD ON
					
					char empty_space_str[20]="Empty Space=[";
     eba:	f1 e0       	ldi	r31, 0x01	; 1
     ebc:	de 01       	movw	r26, r28
     ebe:	d3 96       	adiw	r26, 0x33	; 51
     ec0:	01 90       	ld	r0, Z+
     ec2:	0d 92       	st	X+, r0
     ec4:	8a 95       	dec	r24
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <RC522_data_state_check_and_actuate+0x16a>
     ec8:	fe 01       	movw	r30, r28
     eca:	ef 5b       	subi	r30, 0xBF	; 191
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	86 e0       	ldi	r24, 0x06	; 6
     ed0:	df 01       	movw	r26, r30
     ed2:	1d 92       	st	X+, r1
     ed4:	8a 95       	dec	r24
     ed6:	e9 f7       	brne	.-6      	; 0xed2 <RC522_data_state_check_and_actuate+0x17c>
     ed8:	8e 01       	movw	r16, r28
					strcat((char*)empty_space_str,USER_COUNT_STR);
     eda:	0d 5c       	subi	r16, 0xCD	; 205
     edc:	1f 4f       	sbci	r17, 0xFF	; 255
     ede:	be 01       	movw	r22, r28
     ee0:	69 5b       	subi	r22, 0xB9	; 185
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	c8 01       	movw	r24, r16
     ee6:	b9 d7       	rcall	.+3954   	; 0x1e5a <strcat>
     ee8:	f8 01       	movw	r30, r16
     eea:	01 90       	ld	r0, Z+
					strcat((char*)empty_space_str,"/");
     eec:	00 20       	and	r0, r0
     eee:	e9 f7       	brne	.-6      	; 0xeea <RC522_data_state_check_and_actuate+0x194>
     ef0:	31 97       	sbiw	r30, 0x01	; 1
     ef2:	8f e2       	ldi	r24, 0x2F	; 47
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	80 83       	st	Z, r24
					//start_timer(); //ticktim을 0으로 클리어시킴.
					i2c_lcd_clear();
     efa:	a7 d2       	rcall	.+1358   	; 0x144a <i2c_lcd_clear>
     efc:	49 ef       	ldi	r20, 0xF9	; 249
					i2c_lcd_string(0,0,"Welcome,");
     efe:	52 e0       	ldi	r21, 0x02	; 2
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	93 d2       	rcall	.+1318   	; 0x142c <i2c_lcd_string>
     f06:	ae 01       	movw	r20, r28
					i2c_lcd_string(1,2,(char*)esp8266_received_data_buffer);
     f08:	4f 5f       	subi	r20, 0xFF	; 255
     f0a:	5f 4f       	sbci	r21, 0xFF	; 255
     f0c:	62 e0       	ldi	r22, 0x02	; 2
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	8d d2       	rcall	.+1306   	; 0x142c <i2c_lcd_string>
     f12:	42 e0       	ldi	r20, 0x02	; 2
					i2c_lcd_string(2,0,"Empty Space=[00 /42]");
     f14:	53 e0       	ldi	r21, 0x03	; 3
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	88 d2       	rcall	.+1296   	; 0x142c <i2c_lcd_string>
     f1c:	47 e1       	ldi	r20, 0x17	; 23
					i2c_lcd_string(2,13,"40");
     f1e:	53 e0       	ldi	r21, 0x03	; 3
     f20:	6d e0       	ldi	r22, 0x0D	; 13
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	83 d2       	rcall	.+1286   	; 0x142c <i2c_lcd_string>
     f26:	82 e0       	ldi	r24, 0x02	; 2
					setSoundClip(BUZZ_SUCCESS);
     f28:	75 db       	rcall	.-2326   	; 0x614 <setSoundClip>
     f2a:	24 c0       	rjmp	.+72     	; 0xf74 <RC522_data_state_check_and_actuate+0x21e>
     f2c:	8e d2       	rcall	.+1308   	; 0x144a <i2c_lcd_clear>
				}
				else {//한 번 초과로 인식시켰을 때 지나는 구문
					i2c_lcd_clear();  
     f2e:	49 ef       	ldi	r20, 0xF9	; 249
					i2c_lcd_string(0,0,"Welcome,");
     f30:	52 e0       	ldi	r21, 0x02	; 2
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	7a d2       	rcall	.+1268   	; 0x142c <i2c_lcd_string>
     f38:	ae 01       	movw	r20, r28
					i2c_lcd_string(1,2,(char*)esp8266_received_data_buffer);
     f3a:	4f 5f       	subi	r20, 0xFF	; 255
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255
     f3e:	62 e0       	ldi	r22, 0x02	; 2
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	74 d2       	rcall	.+1256   	; 0x142c <i2c_lcd_string>
					i2c_lcd_string(2,0,"Already Recognized");
     f44:	4a e1       	ldi	r20, 0x1A	; 26
     f46:	53 e0       	ldi	r21, 0x03	; 3
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	6f d2       	rcall	.+1246   	; 0x142c <i2c_lcd_string>
					
				}
			}//if(esp8266_received_data[0]=='O') end
			else if(esp8266_received_data[0]!='O') 
			{
				i2c_lcd_clear();
     f4e:	12 c0       	rjmp	.+36     	; 0xf74 <RC522_data_state_check_and_actuate+0x21e>
				i2c_lcd_string(0,0,"Sorry,");
     f50:	7c d2       	rcall	.+1272   	; 0x144a <i2c_lcd_clear>
     f52:	4d e2       	ldi	r20, 0x2D	; 45
     f54:	53 e0       	ldi	r21, 0x03	; 3
     f56:	60 e0       	ldi	r22, 0x00	; 0
				i2c_lcd_string(1,2,"This card is");
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	68 d2       	rcall	.+1232   	; 0x142c <i2c_lcd_string>
     f5c:	44 e3       	ldi	r20, 0x34	; 52
     f5e:	53 e0       	ldi	r21, 0x03	; 3
     f60:	62 e0       	ldi	r22, 0x02	; 2
				i2c_lcd_string(2,2,"not registered.");
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	63 d2       	rcall	.+1222   	; 0x142c <i2c_lcd_string>
     f66:	41 e4       	ldi	r20, 0x41	; 65
     f68:	53 e0       	ldi	r21, 0x03	; 3
     f6a:	62 e0       	ldi	r22, 0x02	; 2
     f6c:	82 e0       	ldi	r24, 0x02	; 2
				setSoundClip(BUZZ_FAIL);
     f6e:	5e d2       	rcall	.+1212   	; 0x142c <i2c_lcd_string>
     f70:	84 e0       	ldi	r24, 0x04	; 4
			}
			//_delay_ms(20);
			//dummy test code (서버로부터 결과 값 수신 결과 확인)
			uart0_tx_char('\n');
     f72:	50 db       	rcall	.-2400   	; 0x614 <setSoundClip>
     f74:	8a e0       	ldi	r24, 0x0A	; 10
     f76:	05 d6       	rcall	.+3082   	; 0x1b82 <uart0_tx_char>
			uart0_tx_string("From server : ");
     f78:	81 e5       	ldi	r24, 0x51	; 81
     f7a:	93 e0       	ldi	r25, 0x03	; 3
			uart0_tx_string((char*)esp8266_received_data);
     f7c:	06 d6       	rcall	.+3084   	; 0x1b8a <uart0_tx_string>
     f7e:	8e e7       	ldi	r24, 0x7E	; 126
     f80:	95 e0       	ldi	r25, 0x05	; 5
			uart0_tx_char('\n');
     f82:	03 d6       	rcall	.+3078   	; 0x1b8a <uart0_tx_string>
     f84:	8a e0       	ldi	r24, 0x0A	; 10
     f86:	fd d5       	rcall	.+3066   	; 0x1b82 <uart0_tx_char>
     f88:	0f 2e       	mov	r0, r31
     f8a:	fd ef       	ldi	r31, 0xFD	; 253
     f8c:	cf 2e       	mov	r12, r31
     f8e:	f4 e0       	ldi	r31, 0x04	; 4
     f90:	df 2e       	mov	r13, r31
     f92:	f0 2d       	mov	r31, r0
     f94:	0f 2e       	mov	r0, r31
     f96:	f6 e1       	ldi	r31, 0x16	; 22
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
				uart0_tx_char('[');
     f98:	af 2e       	mov	r10, r31
     f9a:	f5 e0       	ldi	r31, 0x05	; 5
     f9c:	bf 2e       	mov	r11, r31
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     f9e:	f0 2d       	mov	r31, r0
     fa0:	8b e5       	ldi	r24, 0x5B	; 91
     fa2:	ef d5       	rcall	.+3038   	; 0x1b82 <uart0_tx_char>
     fa4:	f6 01       	movw	r30, r12
     fa6:	81 91       	ld	r24, Z+
     fa8:	7f 01       	movw	r14, r30
     faa:	42 d6       	rcall	.+3204   	; 0x1c30 <HexToString>
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
     fac:	ee d5       	rcall	.+3036   	; 0x1b8a <uart0_tx_string>
     fae:	00 e0       	ldi	r16, 0x00	; 0
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
					if(j!=3)uart0_tx_char(' ');
     fb0:	10 e0       	ldi	r17, 0x00	; 0
     fb2:	80 e2       	ldi	r24, 0x20	; 32
     fb4:	e6 d5       	rcall	.+3020   	; 0x1b82 <uart0_tx_char>
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
     fb6:	0f 5f       	subi	r16, 0xFF	; 255
     fb8:	1f 4f       	sbci	r17, 0xFF	; 255
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
     fba:	d7 01       	movw	r26, r14
     fbc:	8d 91       	ld	r24, X+
     fbe:	7d 01       	movw	r14, r26
     fc0:	37 d6       	rcall	.+3182   	; 0x1c30 <HexToString>
     fc2:	e3 d5       	rcall	.+3014   	; 0x1b8a <uart0_tx_string>
     fc4:	03 30       	cpi	r16, 0x03	; 3
					if(j!=3)uart0_tx_char(' ');
     fc6:	11 05       	cpc	r17, r1
     fc8:	a1 f7       	brne	.-24     	; 0xfb2 <RC522_data_state_check_and_actuate+0x25c>
     fca:	8d e5       	ldi	r24, 0x5D	; 93
					//_delay_ms(10);
				}
				
				
				uart0_tx_char(']');
     fcc:	da d5       	rcall	.+2996   	; 0x1b82 <uart0_tx_char>
     fce:	8a e0       	ldi	r24, 0x0A	; 10
     fd0:	d8 d5       	rcall	.+2992   	; 0x1b82 <uart0_tx_char>
				uart0_tx_char('\n');
     fd2:	b5 e0       	ldi	r27, 0x05	; 5
     fd4:	cb 0e       	add	r12, r27
     fd6:	d1 1c       	adc	r13, r1
     fd8:	ac 14       	cp	r10, r12
     fda:	bd 04       	cpc	r11, r13
			uart0_tx_string("From server : ");
			uart0_tx_string((char*)esp8266_received_data);
			uart0_tx_char('\n');
			
			//dummy test code (이용객 저장 버퍼 상태 표시)
			for(int i=0;i<MAX_USER_COUNT;i++){
     fdc:	09 f7       	brne	.-62     	; 0xfa0 <RC522_data_state_check_and_actuate+0x24a>
     fde:	45 c0       	rjmp	.+138    	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
     fe0:	81 30       	cpi	r24, 0x01	; 1
			
			//LCD 뷰어 및 5초 카운트 후 다시 리셋
			
		}//if(toggle==ENTRANCE_GATE) end
		
		else if((*tggl)==EXIT_GATE){
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <RC522_data_state_check_and_actuate+0x290>
     fe4:	42 c0       	rjmp	.+132    	; 0x106a <__DATA_REGION_LENGTH__+0x6a>
     fe6:	0f 2e       	mov	r0, r31
     fe8:	fd ef       	ldi	r31, 0xFD	; 253
     fea:	cf 2e       	mov	r12, r31
     fec:	f4 e0       	ldi	r31, 0x04	; 4
     fee:	df 2e       	mov	r13, r31
     ff0:	f0 2d       	mov	r31, r0
     ff2:	0f 2e       	mov	r0, r31
     ff4:	f6 e1       	ldi	r31, 0x16	; 22
     ff6:	af 2e       	mov	r10, r31
     ff8:	f5 e0       	ldi	r31, 0x05	; 5
			
			//흠.... 등록되어있는사람일 경우에 무조건 열어주는방식으로 할까		: esp8266으로부터 데이터 받은 뒤에 그냥 열어줌
			//입장한 사람에 한정해서만 나갈 수 있도록 제한하는 방식으로 할까		:  >> 이게 타당하다 :
			for(int i=0; i<MAX_USER_COUNT;i++)
			{
				if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch1)==0){//출구에서 찍은 카드가 이용객 버퍼에 존재한다면
     ffa:	bf 2e       	mov	r11, r31
     ffc:	f0 2d       	mov	r31, r0
     ffe:	86 01       	movw	r16, r12
    1000:	68 ea       	ldi	r22, 0xA8	; 168
    1002:	76 e0       	ldi	r23, 0x06	; 6
					strcpy((char*)rfid_user_uid_buffer[i],"0000");
    1004:	c8 01       	movw	r24, r16
    1006:	34 d7       	rcall	.+3688   	; 0x1e70 <strcmp>
    1008:	89 2b       	or	r24, r25
    100a:	59 f4       	brne	.+22     	; 0x1022 <__DATA_REGION_LENGTH__+0x22>
    100c:	85 e0       	ldi	r24, 0x05	; 5
    100e:	e4 e4       	ldi	r30, 0x44	; 68
					//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
					start_timer(); //ticktim을 0으로 클리어시킴.
    1010:	f1 e0       	ldi	r31, 0x01	; 1
    1012:	d8 01       	movw	r26, r16
					setSoundClip(BUZZ_SUCCESS);
    1014:	01 90       	ld	r0, Z+
    1016:	0d 92       	st	X+, r0
    1018:	8a 95       	dec	r24
    101a:	e1 f7       	brne	.-8      	; 0x1014 <__DATA_REGION_LENGTH__+0x14>
    101c:	5c dd       	rcall	.-1352   	; 0xad6 <start_timer>
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			
			//흠.... 등록되어있는사람일 경우에 무조건 열어주는방식으로 할까		: esp8266으로부터 데이터 받은 뒤에 그냥 열어줌
			//입장한 사람에 한정해서만 나갈 수 있도록 제한하는 방식으로 할까		:  >> 이게 타당하다 :
			for(int i=0; i<MAX_USER_COUNT;i++)
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	f9 da       	rcall	.-2574   	; 0x614 <setSoundClip>
    1022:	0b 5f       	subi	r16, 0xFB	; 251
				
			}
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
				
				uart0_tx_char('[');
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
    1026:	0a 15       	cp	r16, r10
    1028:	1b 05       	cpc	r17, r11
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    102a:	51 f7       	brne	.-44     	; 0x1000 <__DATA_REGION_LENGTH__>
    102c:	8b e5       	ldi	r24, 0x5B	; 91
    102e:	a9 d5       	rcall	.+2898   	; 0x1b82 <uart0_tx_char>
    1030:	f6 01       	movw	r30, r12
    1032:	81 91       	ld	r24, Z+
    1034:	7f 01       	movw	r14, r30
    1036:	fc d5       	rcall	.+3064   	; 0x1c30 <HexToString>
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
				
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
    1038:	a8 d5       	rcall	.+2896   	; 0x1b8a <uart0_tx_string>
    103a:	00 e0       	ldi	r16, 0x00	; 0
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
					if(j!=3)uart0_tx_char(' ');
    103c:	10 e0       	ldi	r17, 0x00	; 0
    103e:	80 e2       	ldi	r24, 0x20	; 32
    1040:	a0 d5       	rcall	.+2880   	; 0x1b82 <uart0_tx_char>
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
				
				uart0_tx_char('[');
				//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
				for(int j=0;j<4;j++){
    1042:	0f 5f       	subi	r16, 0xFF	; 255
    1044:	1f 4f       	sbci	r17, 0xFF	; 255
					uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    1046:	d7 01       	movw	r26, r14
    1048:	8d 91       	ld	r24, X+
    104a:	7d 01       	movw	r14, r26
    104c:	f1 d5       	rcall	.+3042   	; 0x1c30 <HexToString>
    104e:	9d d5       	rcall	.+2874   	; 0x1b8a <uart0_tx_string>
    1050:	03 30       	cpi	r16, 0x03	; 3
    1052:	11 05       	cpc	r17, r1
					if(j!=3)uart0_tx_char(' ');
    1054:	a1 f7       	brne	.-24     	; 0x103e <__DATA_REGION_LENGTH__+0x3e>
    1056:	8d e5       	ldi	r24, 0x5D	; 93
    1058:	94 d5       	rcall	.+2856   	; 0x1b82 <uart0_tx_char>
					//_delay_ms(10);
				}
				uart0_tx_char(']');
    105a:	8a e0       	ldi	r24, 0x0A	; 10
    105c:	92 d5       	rcall	.+2852   	; 0x1b82 <uart0_tx_char>
    105e:	b5 e0       	ldi	r27, 0x05	; 5
				uart0_tx_char('\n');
    1060:	cb 0e       	add	r12, r27
    1062:	d1 1c       	adc	r13, r1
    1064:	ca 14       	cp	r12, r10
    1066:	db 04       	cpc	r13, r11
    1068:	09 f7       	brne	.-62     	; 0x102c <__DATA_REGION_LENGTH__+0x2c>
    106a:	10 92 a6 06 	sts	0x06A6, r1	; 0x8006a6 <received_state>
					setSoundClip(BUZZ_SUCCESS);
				}//그곳 버퍼를 비움
				
			}
			//dummy test code
			for(int i=0;i<MAX_USER_COUNT;i++){
    106e:	c2 5b       	subi	r28, 0xB2	; 178
    1070:	df 4f       	sbci	r29, 0xFF	; 255
		//i2c_lcd_string(1,2,esp8266_received_data);
		i2c_lcd_string(2,0,"Plz, Re-tagging. ");
		
	}
	
	received_state=RECEIVE_NONE;
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
}
    1076:	de bf       	out	0x3e, r29	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	cd bf       	out	0x3d, r28	; 61
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	ff 90       	pop	r15
    1086:	ef 90       	pop	r14
    1088:	df 90       	pop	r13
    108a:	cf 90       	pop	r12
    108c:	bf 90       	pop	r11
    108e:	af 90       	pop	r10
    1090:	08 95       	ret

00001092 <logojector_OFF>:
    1092:	ac 98       	cbi	0x15, 4	; 21
    1094:	08 95       	ret

00001096 <systems_init>:
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
	// buzz_play();이 함수가 타이밍에 영향을 크게 안준다면, ISR에 넣는것도 고려해봄.	
	//	
    }
}

void systems_init(void){
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	64 97       	sbiw	r28, 0x14	; 20
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
	sei();
    10ae:	78 94       	sei
	//DDRA|=0x03; //test Port
	//0~3번비트	: 스테핑모터 제어
	DDRA=0x0f;
    10b0:	8f e0       	ldi	r24, 0x0F	; 15
    10b2:	8a bb       	out	0x1a, r24	; 26
	//4번비트	: 릴레이스위치
	DDRC |= (1<<4);
    10b4:	a4 9a       	sbi	0x14, 4	; 20
	cli(); //전역 인터럽트 해제
    10b6:	f8 94       	cli
	
	timer0_init();
    10b8:	19 d5       	rcall	.+2610   	; 0x1aec <timer0_init>
	timer3_init();
    10ba:	21 d5       	rcall	.+2626   	; 0x1afe <timer3_init>
    10bc:	78 94       	sei
	sei(); //전역 인터럽트 허용
    10be:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <TICK>
	TICK.tick_1ms=0;
    10c2:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <TICK+0x1>
    10c6:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <TICK+0x2>
    10ca:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <TICK+0x3>
	//사용하는 기능들 초기화 작업
	
	logojector_OFF();
    10ce:	e1 df       	rcall	.-62     	; 0x1092 <logojector_OFF>
	
	mfrc522_init(CH0);
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	9f d3       	rcall	.+1854   	; 0x1812 <mfrc522_init>
	mfrc522_init(CH1);
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	9d d3       	rcall	.+1850   	; 0x1812 <mfrc522_init>
	uart_init(0,BAUD_9600); //debug channel
    10d8:	60 e8       	ldi	r22, 0x80	; 128
    10da:	75 e2       	ldi	r23, 0x25	; 37
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	23 d5       	rcall	.+2630   	; 0x1b28 <uart_init>
	uart_init(1,BAUD_9600);//esp8266() : Rx:PD2, Tx:PD3
    10e2:	60 e8       	ldi	r22, 0x80	; 128
    10e4:	75 e2       	ldi	r23, 0x25	; 37
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	1e d5       	rcall	.+2620   	; 0x1b28 <uart_init>
	i2c_lcd_init();
    10ec:	14 d1       	rcall	.+552    	; 0x1316 <i2c_lcd_init>
    10ee:	40 e6       	ldi	r20, 0x60	; 96
	
	
	i2c_lcd_string(0,0,"====================");
    10f0:	53 e0       	ldi	r21, 0x03	; 3
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	9a d1       	rcall	.+820    	; 0x142c <i2c_lcd_string>
    10f8:	45 e7       	ldi	r20, 0x75	; 117
	i2c_lcd_string(1,0,"  SYSTEM BOOTING...");
    10fa:	53 e0       	ldi	r21, 0x03	; 3
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	95 d1       	rcall	.+810    	; 0x142c <i2c_lcd_string>
    1102:	49 e8       	ldi	r20, 0x89	; 137
	i2c_lcd_string(2,0,"     __________     ");
    1104:	53 e0       	ldi	r21, 0x03	; 3
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	90 d1       	rcall	.+800    	; 0x142c <i2c_lcd_string>
    110c:	40 e6       	ldi	r20, 0x60	; 96
	i2c_lcd_string(3,0,"====================");
    110e:	53 e0       	ldi	r21, 0x03	; 3
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	8b d1       	rcall	.+790    	; 0x142c <i2c_lcd_string>
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	7d da       	rcall	.-2822   	; 0x614 <setSoundClip>
	setSoundClip(BUZZ_ON);
    111a:	2f ef       	ldi	r18, 0xFF	; 255
    111c:	81 e1       	ldi	r24, 0x11	; 17
    111e:	9a e7       	ldi	r25, 0x7A	; 122
    1120:	21 50       	subi	r18, 0x01	; 1
    1122:	80 40       	sbci	r24, 0x00	; 0
    1124:	90 40       	sbci	r25, 0x00	; 0
    1126:	e1 f7       	brne	.-8      	; 0x1120 <__stack+0x21>
    1128:	00 c0       	rjmp	.+0      	; 0x112a <__stack+0x2b>
    112a:	00 00       	nop
	_delay_ms(2500);
	
	//로딩 시작. RFID모듈체크, ESP8266 연결 체크
	
	mfrc522_version_check(CH0);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	b9 d3       	rcall	.+1906   	; 0x18a2 <mfrc522_version_check>
    1130:	80 e0       	ldi	r24, 0x00	; 0
	mfrc522_IRQ_enable(CH0);
    1132:	0d d4       	rcall	.+2074   	; 0x194e <mfrc522_IRQ_enable>
	mfrc522_version_check(CH1);
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	b5 d3       	rcall	.+1898   	; 0x18a2 <mfrc522_version_check>
    1138:	81 e0       	ldi	r24, 0x01	; 1
	mfrc522_IRQ_enable(CH1);
    113a:	09 d4       	rcall	.+2066   	; 0x194e <mfrc522_IRQ_enable>
    113c:	2e e9       	ldi	r18, 0x9E	; 158
    113e:	33 e0       	ldi	r19, 0x03	; 3
	
	
	esp8266_init((unsigned char*)SSID,(unsigned char*)PASSWORD,(unsigned char*)IP,(unsigned char*)PORT);
    1140:	43 ea       	ldi	r20, 0xA3	; 163
    1142:	53 e0       	ldi	r21, 0x03	; 3
    1144:	61 eb       	ldi	r22, 0xB1	; 177
    1146:	73 e0       	ldi	r23, 0x03	; 3
    1148:	8a eb       	ldi	r24, 0xBA	; 186
    114a:	93 e0       	ldi	r25, 0x03	; 3
    114c:	34 dd       	rcall	.-1432   	; 0xbb6 <esp8266_init>
    114e:	bb d8       	rcall	.-3722   	; 0x2c6 <rfid_user_uid_buffer_init>
    1150:	8f e0       	ldi	r24, 0x0F	; 15
    1152:	e0 e3       	ldi	r30, 0x30	; 48
	rfid_user_uid_buffer_init();
    1154:	f1 e0       	ldi	r31, 0x01	; 1
    1156:	8e 01       	movw	r16, r28
	
	char version_buf[20] = " Firmware Ver ";
    1158:	0f 5f       	subi	r16, 0xFF	; 255
    115a:	1f 4f       	sbci	r17, 0xFF	; 255
    115c:	d8 01       	movw	r26, r16
    115e:	01 90       	ld	r0, Z+
    1160:	0d 92       	st	X+, r0
    1162:	8a 95       	dec	r24
    1164:	e1 f7       	brne	.-8      	; 0x115e <__stack+0x5f>
    1166:	fe 01       	movw	r30, r28
    1168:	70 96       	adiw	r30, 0x10	; 16
    116a:	85 e0       	ldi	r24, 0x05	; 5
    116c:	df 01       	movw	r26, r30
    116e:	1d 92       	st	X+, r1
    1170:	8a 95       	dec	r24
    1172:	e9 f7       	brne	.-6      	; 0x116e <__stack+0x6f>
    1174:	d8 01       	movw	r26, r16
    1176:	0d 90       	ld	r0, X+
    1178:	00 20       	and	r0, r0
	strcat(version_buf,(const char*)FIRMWARE_VERSION);
    117a:	e9 f7       	brne	.-6      	; 0x1176 <__stack+0x77>
    117c:	11 97       	sbiw	r26, 0x01	; 1
    117e:	86 e0       	ldi	r24, 0x06	; 6
    1180:	e0 ec       	ldi	r30, 0xC0	; 192
    1182:	f3 e0       	ldi	r31, 0x03	; 3
    1184:	01 90       	ld	r0, Z+
    1186:	0d 92       	st	X+, r0
    1188:	8a 95       	dec	r24
    118a:	e1 f7       	brne	.-8      	; 0x1184 <__stack+0x85>
    118c:	40 e6       	ldi	r20, 0x60	; 96
	i2c_lcd_string(0,0,"====================");
    118e:	53 e0       	ldi	r21, 0x03	; 3
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	4b d1       	rcall	.+662    	; 0x142c <i2c_lcd_string>
    1196:	46 ec       	ldi	r20, 0xC6	; 198
	i2c_lcd_string(1,0,"  Parking System    ");
    1198:	53 e0       	ldi	r21, 0x03	; 3
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	46 d1       	rcall	.+652    	; 0x142c <i2c_lcd_string>
    11a0:	a8 01       	movw	r20, r16
	i2c_lcd_string(2,0,version_buf);
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	82 e0       	ldi	r24, 0x02	; 2
    11a6:	42 d1       	rcall	.+644    	; 0x142c <i2c_lcd_string>
    11a8:	40 e6       	ldi	r20, 0x60	; 96
	i2c_lcd_string(3,0,"====================");
    11aa:	53 e0       	ldi	r21, 0x03	; 3
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	3d d1       	rcall	.+634    	; 0x142c <i2c_lcd_string>
    11b2:	85 e0       	ldi	r24, 0x05	; 5
    11b4:	2f da       	rcall	.-2978   	; 0x614 <setSoundClip>
	setSoundClip(BUZZ_ESP8266_CONNECTED);
    11b6:	bf ef       	ldi	r27, 0xFF	; 255
    11b8:	27 ea       	ldi	r18, 0xA7	; 167
    11ba:	81 e6       	ldi	r24, 0x61	; 97
    11bc:	b1 50       	subi	r27, 0x01	; 1
    11be:	20 40       	sbci	r18, 0x00	; 0
    11c0:	80 40       	sbci	r24, 0x00	; 0
    11c2:	e1 f7       	brne	.-8      	; 0x11bc <__stack+0xbd>
    11c4:	00 c0       	rjmp	.+0      	; 0x11c6 <__stack+0xc7>
    11c6:	00 00       	nop
    11c8:	40 d1       	rcall	.+640    	; 0x144a <i2c_lcd_clear>
    11ca:	40 d0       	rcall	.+128    	; 0x124c <i2c_lcd_noBacklight>
    11cc:	64 96       	adiw	r28, 0x14	; 20
	//main loop start.
	_delay_ms(2000);
	i2c_lcd_clear();
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
	i2c_lcd_noBacklight();
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
}
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	08 95       	ret

000011e2 <main>:
    11e2:	59 df       	rcall	.-334    	; 0x1096 <systems_init>
    11e4:	ca eb       	ldi	r28, 0xBA	; 186
    11e6:	d6 e0       	ldi	r29, 0x06	; 6
    11e8:	80 ef       	ldi	r24, 0xF0	; 240
    11ea:	94 e0       	ldi	r25, 0x04	; 4
		//PORTA^=0x01;
		
		//to use RFID channels
		static char toggle=0; 
		//every 100ms, return RFID Reader state
		RC522_data_request_per_100ms(&toggle);
    11ec:	ea d9       	rcall	.-3116   	; 0x5c2 <RC522_data_request_per_100ms>
		RC522_data_state_check_and_actuate(&toggle);
    11ee:	80 ef       	ldi	r24, 0xF0	; 240
    11f0:	94 e0       	ldi	r25, 0x04	; 4
    11f2:	b1 dd       	rcall	.-1182   	; 0xd56 <RC522_data_state_check_and_actuate>
		if(start_timer_flag==1)
    11f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <start_timer_flag>
    11f8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <start_timer_flag+0x1>
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	a1 f7       	brne	.-24     	; 0x11e8 <main+0x6>
		{
			
			if(TICK.tick_1ms==7000)//5초
    1200:	88 81       	ld	r24, Y
    1202:	99 81       	ldd	r25, Y+1	; 0x01
    1204:	aa 81       	ldd	r26, Y+2	; 0x02
    1206:	bb 81       	ldd	r27, Y+3	; 0x03
    1208:	88 35       	cpi	r24, 0x58	; 88
    120a:	9b 41       	sbci	r25, 0x1B	; 27
    120c:	a1 05       	cpc	r26, r1
    120e:	b1 05       	cpc	r27, r1
			{
				//문을 닫아주는 동시에 백라이트 꺼줌
				setSoundClip(BUZZ_FAIL);
    1210:	19 f4       	brne	.+6      	; 0x1218 <main+0x36>
    1212:	84 e0       	ldi	r24, 0x04	; 4
    1214:	ff d9       	rcall	.-3074   	; 0x614 <setSoundClip>
    1216:	e8 cf       	rjmp	.-48     	; 0x11e8 <main+0x6>
				
			}
			else if(TICK.tick_1ms==10000){//10초
    1218:	88 81       	ld	r24, Y
    121a:	99 81       	ldd	r25, Y+1	; 0x01
    121c:	aa 81       	ldd	r26, Y+2	; 0x02
    121e:	bb 81       	ldd	r27, Y+3	; 0x03
    1220:	80 31       	cpi	r24, 0x10	; 16
    1222:	97 42       	sbci	r25, 0x27	; 39
    1224:	a1 05       	cpc	r26, r1
    1226:	b1 05       	cpc	r27, r1
				//10초가 지나면 화면 클리어시키고, 백라이트 꺼줌
				i2c_lcd_noBacklight();
    1228:	11 f4       	brne	.+4      	; 0x122e <main+0x4c>
    122a:	10 d0       	rcall	.+32     	; 0x124c <i2c_lcd_noBacklight>
    122c:	dd cf       	rjmp	.-70     	; 0x11e8 <main+0x6>
			}
			else if(TICK.tick_1ms>12000)
    122e:	88 81       	ld	r24, Y
    1230:	99 81       	ldd	r25, Y+1	; 0x01
    1232:	aa 81       	ldd	r26, Y+2	; 0x02
    1234:	bb 81       	ldd	r27, Y+3	; 0x03
    1236:	81 3e       	cpi	r24, 0xE1	; 225
    1238:	9e 42       	sbci	r25, 0x2E	; 46
    123a:	a1 05       	cpc	r26, r1
    123c:	b1 05       	cpc	r27, r1
			{
				//로고젝터 오프 
				logojector_OFF();
    123e:	a0 f2       	brcs	.-88     	; 0x11e8 <main+0x6>
    1240:	28 df       	rcall	.-432    	; 0x1092 <logojector_OFF>
				start_timer_flag=0;
    1242:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <start_timer_flag+0x1>
    1246:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <start_timer_flag>
    124a:	ce cf       	rjmp	.-100    	; 0x11e8 <main+0x6>

0000124c <i2c_lcd_noBacklight>:
			
			while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
	}
}
void i2c_lcd_command_8(uint8_t command)
{
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	00 d0       	rcall	.+0      	; 0x1252 <i2c_lcd_noBacklight+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <i2c_lcd_noBacklight+0x8>
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	84 e0       	ldi	r24, 0x04	; 4
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	1a 82       	std	Y+2, r1	; 0x02
    125e:	84 e1       	ldi	r24, 0x14	; 20
    1260:	8b 83       	std	Y+3, r24	; 0x03
    1262:	80 e1       	ldi	r24, 0x10	; 16
    1264:	8c 83       	std	Y+4, r24	; 0x04
    1266:	44 e0       	ldi	r20, 0x04	; 4
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	be 01       	movw	r22, r28
    126c:	6f 5f       	subi	r22, 0xFF	; 255
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_addr_PCF8574>
    1274:	4a d1       	rcall	.+660    	; 0x150a <i2c_transmit>
    1276:	81 11       	cpse	r24, r1
    1278:	f6 cf       	rjmp	.-20     	; 0x1266 <i2c_lcd_noBacklight+0x1a>
    127a:	8f e3       	ldi	r24, 0x3F	; 63
    127c:	9c e9       	ldi	r25, 0x9C	; 156
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <i2c_lcd_noBacklight+0x32>
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <i2c_lcd_noBacklight+0x38>
    1284:	00 00       	nop
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <i2c_lcd_command_8>:
	uint8_t c_buf[2];
	
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	00 d0       	rcall	.+0      	; 0x129a <i2c_lcd_command_8+0x6>
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
	
    129e:	80 7f       	andi	r24, 0xF0	; 240
    12a0:	98 2f       	mov	r25, r24
    12a2:	9c 60       	ori	r25, 0x0C	; 12
    12a4:	99 83       	std	Y+1, r25	; 0x01
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
    12a6:	88 60       	ori	r24, 0x08	; 8
    12a8:	8a 83       	std	Y+2, r24	; 0x02
}

    12aa:	42 e0       	ldi	r20, 0x02	; 2
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	be 01       	movw	r22, r28
    12b0:	6f 5f       	subi	r22, 0xFF	; 255
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_addr_PCF8574>
    12b8:	28 d1       	rcall	.+592    	; 0x150a <i2c_transmit>
    12ba:	81 11       	cpse	r24, r1
    12bc:	f6 cf       	rjmp	.-20     	; 0x12aa <i2c_lcd_command_8+0x16>
void i2c_lcd_command(uint8_t command)
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <i2c_lcd_command>:
{
	uint8_t c_buf[4];
	
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <i2c_lcd_command+0x6>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <i2c_lcd_command+0x8>
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
	
    12d4:	98 2f       	mov	r25, r24
    12d6:	90 7f       	andi	r25, 0xF0	; 240
    12d8:	29 2f       	mov	r18, r25
    12da:	2c 60       	ori	r18, 0x0C	; 12
    12dc:	29 83       	std	Y+1, r18	; 0x01
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
    12de:	98 60       	ori	r25, 0x08	; 8
    12e0:	9a 83       	std	Y+2, r25	; 0x02
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
	
    12e2:	20 e1       	ldi	r18, 0x10	; 16
    12e4:	82 9f       	mul	r24, r18
    12e6:	c0 01       	movw	r24, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	98 2f       	mov	r25, r24
    12ec:	9c 60       	ori	r25, 0x0C	; 12
    12ee:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    12f0:	88 60       	ori	r24, 0x08	; 8
    12f2:	8c 83       	std	Y+4, r24	; 0x04
}

    12f4:	44 e0       	ldi	r20, 0x04	; 4
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	be 01       	movw	r22, r28
    12fa:	6f 5f       	subi	r22, 0xFF	; 255
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_addr_PCF8574>
    1302:	03 d1       	rcall	.+518    	; 0x150a <i2c_transmit>
    1304:	81 11       	cpse	r24, r1
    1306:	f6 cf       	rjmp	.-20     	; 0x12f4 <i2c_lcd_command+0x2c>
void i2c_lcd_data(uint8_t data)
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
    1316:	be d0       	rcall	.+380    	; 0x1494 <i2c_init>
    1318:	2f ef       	ldi	r18, 0xFF	; 255
    131a:	89 e6       	ldi	r24, 0x69	; 105
    131c:	98 e1       	ldi	r25, 0x18	; 24
    131e:	21 50       	subi	r18, 0x01	; 1
    1320:	80 40       	sbci	r24, 0x00	; 0
    1322:	90 40       	sbci	r25, 0x00	; 0
    1324:	e1 f7       	brne	.-8      	; 0x131e <i2c_lcd_init+0x8>
    1326:	00 c0       	rjmp	.+0      	; 0x1328 <i2c_lcd_init+0x12>
    1328:	00 00       	nop
	_delay_ms(500);

	uart0_tx_string("Before i2c lcd Initialize... \r\n");
    132a:	8b ed       	ldi	r24, 0xDB	; 219
    132c:	93 e0       	ldi	r25, 0x03	; 3
    132e:	2d d4       	rcall	.+2138   	; 0x1b8a <uart0_tx_string>
	i2c_lcd_command_8(0x30); _delay_ms(5);
    1330:	80 e3       	ldi	r24, 0x30	; 48
    1332:	b0 df       	rcall	.-160    	; 0x1294 <i2c_lcd_command_8>
    1334:	8f e1       	ldi	r24, 0x1F	; 31
    1336:	9e e4       	ldi	r25, 0x4E	; 78
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <i2c_lcd_init+0x22>
    133c:	00 c0       	rjmp	.+0      	; 0x133e <i2c_lcd_init+0x28>
    133e:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    1340:	80 e3       	ldi	r24, 0x30	; 48
    1342:	a8 df       	rcall	.-176    	; 0x1294 <i2c_lcd_command_8>
    1344:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <i2c_lcd_init+0x32>
    134c:	00 c0       	rjmp	.+0      	; 0x134e <i2c_lcd_init+0x38>
    134e:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    1350:	80 e3       	ldi	r24, 0x30	; 48
    1352:	a0 df       	rcall	.-192    	; 0x1294 <i2c_lcd_command_8>
    1354:	8f e8       	ldi	r24, 0x8F	; 143
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <i2c_lcd_init+0x42>
    135c:	00 c0       	rjmp	.+0      	; 0x135e <i2c_lcd_init+0x48>
    135e:	00 00       	nop
	i2c_lcd_command_8(0x20); _delay_us(100);
    1360:	80 e2       	ldi	r24, 0x20	; 32
    1362:	98 df       	rcall	.-208    	; 0x1294 <i2c_lcd_command_8>
    1364:	8f e8       	ldi	r24, 0x8F	; 143
    1366:	91 e0       	ldi	r25, 0x01	; 1
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <i2c_lcd_init+0x52>
    136c:	00 c0       	rjmp	.+0      	; 0x136e <i2c_lcd_init+0x58>
    136e:	00 00       	nop
	
	i2c_lcd_command(0x28); _delay_us(50);// function set(4-bit, 2 line, 5x7 dot)
    1370:	88 e2       	ldi	r24, 0x28	; 40
    1372:	aa df       	rcall	.-172    	; 0x12c8 <i2c_lcd_command>
    1374:	87 ec       	ldi	r24, 0xC7	; 199
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <i2c_lcd_init+0x62>
    137c:	00 c0       	rjmp	.+0      	; 0x137e <i2c_lcd_init+0x68>
    137e:	00 00       	nop
	i2c_lcd_command(0x08); _delay_us(50);// display control(display ON, cursor OFF)
    1380:	88 e0       	ldi	r24, 0x08	; 8
    1382:	a2 df       	rcall	.-188    	; 0x12c8 <i2c_lcd_command>
    1384:	87 ec       	ldi	r24, 0xC7	; 199
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <i2c_lcd_init+0x72>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <i2c_lcd_init+0x78>
    138e:	00 00       	nop
	i2c_lcd_command(0x01); _delay_ms(3);// clear display 
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	9a df       	rcall	.-204    	; 0x12c8 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1394:	8f ed       	ldi	r24, 0xDF	; 223
    1396:	9e e2       	ldi	r25, 0x2E	; 46
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <i2c_lcd_init+0x82>
    139c:	00 c0       	rjmp	.+0      	; 0x139e <i2c_lcd_init+0x88>
    139e:	00 00       	nop
	i2c_lcd_command(0x06); _delay_us(50); // entry mode set(increment, not shift)
    13a0:	86 e0       	ldi	r24, 0x06	; 6
    13a2:	92 df       	rcall	.-220    	; 0x12c8 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13a4:	87 ec       	ldi	r24, 0xC7	; 199
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <i2c_lcd_init+0x92>
    13ac:	00 c0       	rjmp	.+0      	; 0x13ae <i2c_lcd_init+0x98>
    13ae:	00 00       	nop
	i2c_lcd_command(0x0C); _delay_us(50); // entry mode set(increment, not shift)
    13b0:	8c e0       	ldi	r24, 0x0C	; 12
    13b2:	8a df       	rcall	.-236    	; 0x12c8 <i2c_lcd_command>
    13b4:	87 ec       	ldi	r24, 0xC7	; 199
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <i2c_lcd_init+0xa2>
    13bc:	00 c0       	rjmp	.+0      	; 0x13be <i2c_lcd_init+0xa8>
    13be:	00 00       	nop
	
	uart0_tx_string("i2c CLCD Connect Ok\r\n");
    13c0:	8b ef       	ldi	r24, 0xFB	; 251
    13c2:	93 e0       	ldi	r25, 0x03	; 3
    13c4:	e2 c3       	rjmp	.+1988   	; 0x1b8a <uart0_tx_string>
    13c6:	08 95       	ret

000013c8 <i2c_lcd_data>:
    13c8:	cf 93       	push	r28
}

void i2c_lcd_data(uint8_t data)
{
	uint8_t d_buf[4];
	
    13ca:	df 93       	push	r29
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <i2c_lcd_data+0x6>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <i2c_lcd_data+0x8>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
	
    13d4:	98 2f       	mov	r25, r24
    13d6:	90 7f       	andi	r25, 0xF0	; 240
    13d8:	29 2f       	mov	r18, r25
    13da:	2d 60       	ori	r18, 0x0D	; 13
    13dc:	29 83       	std	Y+1, r18	; 0x01
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
    13de:	99 60       	ori	r25, 0x09	; 9
    13e0:	9a 83       	std	Y+2, r25	; 0x02
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
	
    13e2:	20 e1       	ldi	r18, 0x10	; 16
    13e4:	82 9f       	mul	r24, r18
    13e6:	c0 01       	movw	r24, r0
    13e8:	11 24       	eor	r1, r1
    13ea:	98 2f       	mov	r25, r24
    13ec:	9d 60       	ori	r25, 0x0D	; 13
    13ee:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
    13f0:	89 60       	ori	r24, 0x09	; 9
    13f2:	8c 83       	std	Y+4, r24	; 0x04
}

    13f4:	44 e0       	ldi	r20, 0x04	; 4
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	be 01       	movw	r22, r28
    13fa:	6f 5f       	subi	r22, 0xFF	; 255
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_addr_PCF8574>
    1402:	83 d0       	rcall	.+262    	; 0x150a <i2c_transmit>
    1404:	81 11       	cpse	r24, r1
    1406:	f6 cf       	rjmp	.-20     	; 0x13f4 <i2c_lcd_data+0x2c>
void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <i2c_lcd_goto_XY>:
{
	static int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	
	uint8_t address = (row_offsets[row]) + col;
	uint8_t command = 0x80 | address;
	
    1416:	e8 2f       	mov	r30, r24
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	ee 0f       	add	r30, r30
    141c:	ff 1f       	adc	r31, r31
    141e:	ef 5e       	subi	r30, 0xEF	; 239
    1420:	fb 4f       	sbci	r31, 0xFB	; 251
	i2c_lcd_command(command);
}

    1422:	80 81       	ld	r24, Z
    1424:	86 0f       	add	r24, r22
    1426:	80 68       	ori	r24, 0x80	; 128
    1428:	4f cf       	rjmp	.-354    	; 0x12c8 <i2c_lcd_command>
    142a:	08 95       	ret

0000142c <i2c_lcd_string>:
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	ea 01       	movw	r28, r20
		i2c_lcd_data(*string++);
    1432:	f1 df       	rcall	.-30     	; 0x1416 <i2c_lcd_goto_XY>
	}
    1434:	88 81       	ld	r24, Y
    1436:	88 23       	and	r24, r24
    1438:	29 f0       	breq	.+10     	; 0x1444 <i2c_lcd_string+0x18>
}
    143a:	21 96       	adiw	r28, 0x01	; 1
    143c:	c5 df       	rcall	.-118    	; 0x13c8 <i2c_lcd_data>
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
		i2c_lcd_data(*string++);
	}
    143e:	89 91       	ld	r24, Y+
    1440:	81 11       	cpse	r24, r1
    1442:	fc cf       	rjmp	.-8      	; 0x143c <i2c_lcd_string+0x10>
}
void i2c_lcd_clear()
{
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <i2c_lcd_clear>:
		uint8_t c_buf[4];
		
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	00 d0       	rcall	.+0      	; 0x1450 <i2c_lcd_clear+0x6>
    1450:	00 d0       	rcall	.+0      	; 0x1452 <i2c_lcd_clear+0x8>
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
		c_buf[0] = (0x01 &0xF0) | RS0_EN1 | BackLight;
		c_buf[1] = (0x01&0xF0) | RS0_EN0 | BackLight;
		
    1456:	8c e0       	ldi	r24, 0x0C	; 12
    1458:	89 83       	std	Y+1, r24	; 0x01
		c_buf[2] = ((0x01<<4)&0xF0) | RS0_EN1 | BackLight;
    145a:	88 e0       	ldi	r24, 0x08	; 8
    145c:	8a 83       	std	Y+2, r24	; 0x02
		c_buf[3] = ((0x01<<4)&0xF0) | RS0_EN0 | BackLight;
		
    145e:	8c e1       	ldi	r24, 0x1C	; 28
    1460:	8b 83       	std	Y+3, r24	; 0x03
		while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    1462:	88 e1       	ldi	r24, 0x18	; 24
    1464:	8c 83       	std	Y+4, r24	; 0x04
    1466:	44 e0       	ldi	r20, 0x04	; 4
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	be 01       	movw	r22, r28
    146c:	6f 5f       	subi	r22, 0xFF	; 255
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <I2C_addr_PCF8574>
    1474:	4a d0       	rcall	.+148    	; 0x150a <i2c_transmit>
    1476:	81 11       	cpse	r24, r1
    1478:	f6 cf       	rjmp	.-20     	; 0x1466 <i2c_lcd_clear+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    147a:	8f e3       	ldi	r24, 0x3F	; 63
    147c:	9c e9       	ldi	r25, 0x9C	; 156
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <i2c_lcd_clear+0x34>
    1482:	00 c0       	rjmp	.+0      	; 0x1484 <i2c_lcd_clear+0x3a>
    1484:	00 00       	nop
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
    1494:	88 e4       	ldi	r24, 0x48	; 72
    1496:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    149a:	08 95       	ret

0000149c <i2c_start>:
    149c:	e4 e7       	ldi	r30, 0x74	; 116
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	10 82       	st	Z, r1
    14a2:	94 ea       	ldi	r25, 0xA4	; 164
    14a4:	90 83       	st	Z, r25
    14a6:	90 81       	ld	r25, Z
    14a8:	99 23       	and	r25, r25
    14aa:	ec f7       	brge	.-6      	; 0x14a6 <i2c_start+0xa>
    14ac:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    14b0:	98 7f       	andi	r25, 0xF8	; 248
    14b2:	98 30       	cpi	r25, 0x08	; 8
    14b4:	a1 f4       	brne	.+40     	; 0x14de <i2c_start+0x42>
    14b6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    14ba:	84 e8       	ldi	r24, 0x84	; 132
    14bc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    14c0:	e4 e7       	ldi	r30, 0x74	; 116
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	88 23       	and	r24, r24
    14c8:	ec f7       	brge	.-6      	; 0x14c4 <i2c_start+0x28>
    14ca:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    14ce:	98 7f       	andi	r25, 0xF8	; 248
    14d0:	98 31       	cpi	r25, 0x18	; 24
    14d2:	39 f0       	breq	.+14     	; 0x14e2 <i2c_start+0x46>
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 34       	cpi	r25, 0x40	; 64
    14d8:	29 f4       	brne	.+10     	; 0x14e4 <i2c_start+0x48>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	08 95       	ret
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	08 95       	ret
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	08 95       	ret

000014e6 <i2c_write>:
    14e6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    14ea:	84 e8       	ldi	r24, 0x84	; 132
    14ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    14f0:	e4 e7       	ldi	r30, 0x74	; 116
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	88 23       	and	r24, r24
    14f8:	ec f7       	brge	.-6      	; 0x14f4 <i2c_write+0xe>
    14fa:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    14fe:	98 7f       	andi	r25, 0xF8	; 248
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	98 32       	cpi	r25, 0x28	; 40
    1504:	09 f4       	brne	.+2      	; 0x1508 <i2c_write+0x22>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	08 95       	ret

0000150a <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    150a:	cf 92       	push	r12
    150c:	df 92       	push	r13
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	6b 01       	movw	r12, r22
    151a:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
    151c:	bf df       	rcall	.-130    	; 0x149c <i2c_start>
    151e:	f8 2e       	mov	r15, r24
    1520:	81 11       	cpse	r24, r1
    1522:	17 c0       	rjmp	.+46     	; 0x1552 <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
    1524:	01 15       	cp	r16, r1
    1526:	11 05       	cpc	r17, r1
    1528:	81 f0       	breq	.+32     	; 0x154a <i2c_transmit+0x40>
    152a:	e6 01       	movw	r28, r12
    152c:	0c 0d       	add	r16, r12
    152e:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
    1530:	89 91       	ld	r24, Y+
    1532:	d9 df       	rcall	.-78     	; 0x14e6 <i2c_write>
    1534:	81 11       	cpse	r24, r1
    1536:	10 c0       	rjmp	.+32     	; 0x1558 <i2c_transmit+0x4e>
    1538:	8f e9       	ldi	r24, 0x9F	; 159
    153a:	9f e0       	ldi	r25, 0x0F	; 15
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <i2c_transmit+0x32>
    1540:	00 c0       	rjmp	.+0      	; 0x1542 <i2c_transmit+0x38>
    1542:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
    1544:	0c 17       	cp	r16, r28
    1546:	1d 07       	cpc	r17, r29
    1548:	99 f7       	brne	.-26     	; 0x1530 <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    154a:	84 e9       	ldi	r24, 0x94	; 148
    154c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1550:	05 c0       	rjmp	.+10     	; 0x155c <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
    1552:	ff 24       	eor	r15, r15
    1554:	f3 94       	inc	r15
    1556:	02 c0       	rjmp	.+4      	; 0x155c <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
    1558:	ff 24       	eor	r15, r15
    155a:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
    155c:	8f 2d       	mov	r24, r15
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	df 90       	pop	r13
    156a:	cf 90       	pop	r12
    156c:	08 95       	ret

0000156e <mfrc522_write>:
void mfrc522_init(unsigned char ch)
{
	unsigned char byte;
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
	
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	16 2f       	mov	r17, r22
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
	SS_PORT=0; //입력핀이 전원에 영향 끼치는 행위를 막기 위함
	//이렇게 케어해두니, 이상 동작하지 않아서 좋음
    1576:	95 b3       	in	r25, 0x15	; 21
    1578:	c1 e0       	ldi	r28, 0x01	; 1
    157a:	d0 e0       	ldi	r29, 0x00	; 0
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <mfrc522_write+0x14>
    157e:	cc 0f       	add	r28, r28
    1580:	dd 1f       	adc	r29, r29
    1582:	4a 95       	dec	r20
    1584:	e2 f7       	brpl	.-8      	; 0x157e <mfrc522_write+0x10>
    1586:	2c 2f       	mov	r18, r28
    1588:	20 95       	com	r18
    158a:	92 23       	and	r25, r18
    158c:	95 bb       	out	0x15, r25	; 21
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
    158e:	88 0f       	add	r24, r24
    1590:	8e 77       	andi	r24, 0x7E	; 126
    1592:	a3 d2       	rcall	.+1350   	; 0x1ada <spi_master_tx>
	mfrc522_reset(ch);
	
    1594:	81 2f       	mov	r24, r17
    1596:	a1 d2       	rcall	.+1346   	; 0x1ada <spi_master_tx>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
    1598:	85 b3       	in	r24, 0x15	; 21
    159a:	c8 2b       	or	r28, r24
    159c:	c5 bb       	out	0x15, r28	; 21
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	08 95       	ret

000015a6 <mfrc522_read>:
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
	
	
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
    15aa:	95 b3       	in	r25, 0x15	; 21
    15ac:	c1 e0       	ldi	r28, 0x01	; 1
    15ae:	d0 e0       	ldi	r29, 0x00	; 0
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <mfrc522_read+0x10>
    15b2:	cc 0f       	add	r28, r28
    15b4:	dd 1f       	adc	r29, r29
    15b6:	6a 95       	dec	r22
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <mfrc522_read+0xc>
    15ba:	2c 2f       	mov	r18, r28
    15bc:	20 95       	com	r18
    15be:	92 23       	and	r25, r18
    15c0:	95 bb       	out	0x15, r25	; 21
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
    15c2:	88 0f       	add	r24, r24
    15c4:	8e 77       	andi	r24, 0x7E	; 126
    15c6:	80 68       	ori	r24, 0x80	; 128
    15c8:	88 d2       	rcall	.+1296   	; 0x1ada <spi_master_tx>
	}
    15ca:	8b d2       	rcall	.+1302   	; 0x1ae2 <spi_master_rx>
    15cc:	95 b3       	in	r25, 0x15	; 21
}

    15ce:	c9 2b       	or	r28, r25
    15d0:	c5 bb       	out	0x15, r28	; 21
    15d2:	df 91       	pop	r29

void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <mfrc522_to_card>:
    15d8:	2f 92       	push	r2
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

    15da:	3f 92       	push	r3
    15dc:	4f 92       	push	r4
    15de:	5f 92       	push	r5
    15e0:	6f 92       	push	r6
    15e2:	7f 92       	push	r7
    15e4:	8f 92       	push	r8
    15e6:	9f 92       	push	r9
    15e8:	af 92       	push	r10
    15ea:	bf 92       	push	r11
    15ec:	cf 92       	push	r12
    15ee:	df 92       	push	r13
    15f0:	ef 92       	push	r14
    15f2:	ff 92       	push	r15
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	f8 2e       	mov	r15, r24
    15fe:	a6 2e       	mov	r10, r22
    1600:	b7 2e       	mov	r11, r23
    1602:	44 2e       	mov	r4, r20
    1604:	22 2e       	mov	r2, r18
    1606:	d3 2e       	mov	r13, r19
void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
    1608:	8c e0       	ldi	r24, 0x0C	; 12
    160a:	f8 16       	cp	r15, r24
    160c:	59 f0       	breq	.+22     	; 0x1624 <mfrc522_to_card+0x4c>
    160e:	ee e0       	ldi	r30, 0x0E	; 14
    1610:	fe 12       	cpse	r15, r30
    1612:	11 c0       	rjmp	.+34     	; 0x1636 <mfrc522_to_card+0x5e>
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
	//RC522와 연결된 SS핀 HIGH출력
    1614:	68 94       	set
    1616:	cc 24       	eor	r12, r12
    1618:	c4 f8       	bld	r12, 4
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
    161a:	0f 2e       	mov	r0, r31
    161c:	f2 e1       	ldi	r31, 0x12	; 18
    161e:	3f 2e       	mov	r3, r31
    1620:	f0 2d       	mov	r31, r0
    1622:	0b c0       	rjmp	.+22     	; 0x163a <mfrc522_to_card+0x62>
	SS_PORT |= (1<<channel);
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}

    1624:	0f 2e       	mov	r0, r31
    1626:	f0 e3       	ldi	r31, 0x30	; 48
    1628:	cf 2e       	mov	r12, r31
    162a:	f0 2d       	mov	r31, r0
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
    162c:	0f 2e       	mov	r0, r31
    162e:	f7 e7       	ldi	r31, 0x77	; 119
    1630:	3f 2e       	mov	r3, r31
    1632:	f0 2d       	mov	r31, r0


    1634:	02 c0       	rjmp	.+4      	; 0x163a <mfrc522_to_card+0x62>
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}


    1636:	c1 2c       	mov	r12, r1
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}

    1638:	31 2c       	mov	r3, r1
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
	value = spi_master_rx(); //send dummy data and receive data.
    163a:	4e 2d       	mov	r20, r14
    163c:	63 2d       	mov	r22, r3
    163e:	60 68       	ori	r22, 0x80	; 128
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	95 df       	rcall	.-214    	; 0x156e <mfrc522_write>
	//RC522와 연결된 SS핀 HIGH출력
    1644:	6e 2d       	mov	r22, r14
    1646:	84 e0       	ldi	r24, 0x04	; 4
    1648:	ae df       	rcall	.-164    	; 0x15a6 <mfrc522_read>
	SS_PORT |= (1<<channel);
    164a:	68 2f       	mov	r22, r24
    164c:	6f 77       	andi	r22, 0x7F	; 127
    164e:	4e 2d       	mov	r20, r14
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	8d df       	rcall	.-230    	; 0x156e <mfrc522_write>
	
    1654:	6e 2d       	mov	r22, r14
    1656:	8a e0       	ldi	r24, 0x0A	; 10
    1658:	a6 df       	rcall	.-180    	; 0x15a6 <mfrc522_read>
    165a:	68 2f       	mov	r22, r24
	return value;
    165c:	60 68       	ori	r22, 0x80	; 128
    165e:	4e 2d       	mov	r20, r14
    1660:	8a e0       	ldi	r24, 0x0A	; 10
    1662:	85 df       	rcall	.-246    	; 0x156e <mfrc522_write>
}

    1664:	4e 2d       	mov	r20, r14
    1666:	60 e0       	ldi	r22, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	81 df       	rcall	.-254    	; 0x156e <mfrc522_write>
    166c:	51 2c       	mov	r5, r1
void mfrc522_version_check(unsigned char ch){
	
	unsigned char byte;
    166e:	61 2c       	mov	r6, r1
    1670:	71 2c       	mov	r7, r1
    1672:	41 14       	cp	r4, r1
    1674:	51 04       	cpc	r5, r1
    1676:	61 04       	cpc	r6, r1
    1678:	71 04       	cpc	r7, r1
    167a:	99 f0       	breq	.+38     	; 0x16a2 <mfrc522_to_card+0xca>
    167c:	ca 2d       	mov	r28, r10
    167e:	db 2d       	mov	r29, r11
    1680:	81 2c       	mov	r8, r1
    1682:	91 2c       	mov	r9, r1
    1684:	54 01       	movw	r10, r8
	
	byte = mfrc522_read(VersionReg, ch);
    1686:	69 91       	ld	r22, Y+
    1688:	4e 2d       	mov	r20, r14
    168a:	89 e0       	ldi	r24, 0x09	; 9
    168c:	70 df       	rcall	.-288    	; 0x156e <mfrc522_write>
    168e:	ff ef       	ldi	r31, 0xFF	; 255
	return value;
}

void mfrc522_version_check(unsigned char ch){
	
	unsigned char byte;
    1690:	8f 1a       	sub	r8, r31
    1692:	9f 0a       	sbc	r9, r31
    1694:	af 0a       	sbc	r10, r31
    1696:	bf 0a       	sbc	r11, r31
    1698:	84 14       	cp	r8, r4
    169a:	95 04       	cpc	r9, r5
    169c:	a6 04       	cpc	r10, r6
    169e:	b7 04       	cpc	r11, r7
    16a0:	90 f3       	brcs	.-28     	; 0x1686 <mfrc522_to_card+0xae>
	
	byte = mfrc522_read(VersionReg, ch);
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
    16a2:	4e 2d       	mov	r20, r14
    16a4:	6f 2d       	mov	r22, r15
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	62 df       	rcall	.-316    	; 0x156e <mfrc522_write>
	else uart0_tx_string("\n[channel 1");
    16aa:	8c e0       	ldi	r24, 0x0C	; 12
    16ac:	f8 12       	cpse	r15, r24
	
	if(byte == 0x92)
    16ae:	08 c0       	rjmp	.+16     	; 0x16c0 <mfrc522_to_card+0xe8>
    16b0:	6e 2d       	mov	r22, r14
    16b2:	8d e0       	ldi	r24, 0x0D	; 13
	{
    16b4:	78 df       	rcall	.-272    	; 0x15a6 <mfrc522_read>
    16b6:	68 2f       	mov	r22, r24
    16b8:	60 68       	ori	r22, 0x80	; 128
    16ba:	4e 2d       	mov	r20, r14
    16bc:	8d e0       	ldi	r24, 0x0D	; 13
    16be:	57 df       	rcall	.-338    	; 0x156e <mfrc522_write>
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    16c0:	6e 2d       	mov	r22, r14
    16c2:	84 e0       	ldi	r24, 0x04	; 4
    16c4:	70 df       	rcall	.-288    	; 0x15a6 <mfrc522_read>
    16c6:	b8 2e       	mov	r11, r24
    16c8:	c0 e0       	ldi	r28, 0x00	; 0
    16ca:	d0 e0       	ldi	r29, 0x00	; 0
	}else
	{
		uart0_tx_string(" No reader found]\n");
    16cc:	ec 2d       	mov	r30, r12
    16ce:	e1 60       	ori	r30, 0x01	; 1
    16d0:	ce 2e       	mov	r12, r30
    16d2:	0a c0       	rjmp	.+20     	; 0x16e8 <mfrc522_to_card+0x110>
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    16d4:	6e 2d       	mov	r22, r14
    16d6:	84 e0       	ldi	r24, 0x04	; 4
    16d8:	66 df       	rcall	.-308    	; 0x15a6 <mfrc522_read>
    16da:	b8 2e       	mov	r11, r24
    16dc:	21 96       	adiw	r28, 0x01	; 1
    16de:	cf 3c       	cpi	r28, 0xCF	; 207
	}else
	{
		uart0_tx_string(" No reader found]\n");
    16e0:	f7 e0       	ldi	r31, 0x07	; 7
    16e2:	df 07       	cpc	r29, r31
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <mfrc522_to_card+0x110>
    16e6:	68 c0       	rjmp	.+208    	; 0x17b8 <mfrc522_to_card+0x1e0>
    16e8:	8c 2d       	mov	r24, r12
    16ea:	8b 21       	and	r24, r11
    16ec:	99 f3       	breq	.-26     	; 0x16d4 <mfrc522_to_card+0xfc>
    16ee:	6e c0       	rjmp	.+220    	; 0x17cc <mfrc522_to_card+0x1f4>
    16f0:	83 2d       	mov	r24, r3
}

void mfrc522_IRQ_enable(unsigned char ch)
{
	unsigned char byte;
	
    16f2:	81 70       	andi	r24, 0x01	; 1
    16f4:	b8 22       	and	r11, r24
    16f6:	11 f0       	breq	.+4      	; 0x16fc <mfrc522_to_card+0x124>
	byte=mfrc522_read(ComIEnReg, ch);
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
    16f8:	c2 e0       	ldi	r28, 0x02	; 2
	
}

void mfrc522_IRQ_enable(unsigned char ch)
{
	unsigned char byte;
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <mfrc522_to_card+0x126>
	
	byte=mfrc522_read(ComIEnReg, ch);
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
	byte=mfrc522_read(DivIEnReg, ch);
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
}
    16fc:	c1 e0       	ldi	r28, 0x01	; 1
    16fe:	8c e0       	ldi	r24, 0x0C	; 12
    1700:	f8 12       	cpse	r15, r24


    1702:	73 c0       	rjmp	.+230    	; 0x17ea <mfrc522_to_card+0x212>
    1704:	6e 2d       	mov	r22, r14
    1706:	8a e0       	ldi	r24, 0x0A	; 10
    1708:	4e df       	rcall	.-356    	; 0x15a6 <mfrc522_read>
    170a:	88 2e       	mov	r8, r24
unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
    170c:	6e 2d       	mov	r22, r14
    170e:	8c e0       	ldi	r24, 0x0C	; 12
    1710:	4a df       	rcall	.-364    	; 0x15a6 <mfrc522_read>
    1712:	28 2f       	mov	r18, r24
    1714:	27 70       	andi	r18, 0x07	; 7
    1716:	a9 f0       	breq	.+42     	; 0x1742 <mfrc522_to_card+0x16a>
{
    1718:	88 2d       	mov	r24, r8
	uint8_t  status;
	uint32_t backBits;//The received data bits
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	82 0f       	add	r24, r18
    172c:	91 1d       	adc	r25, r1
    172e:	09 2e       	mov	r0, r25
    1730:	00 0c       	add	r0, r0
    1732:	aa 0b       	sbc	r26, r26
    1734:	bb 0b       	sbc	r27, r27
    1736:	f8 01       	movw	r30, r16
    1738:	80 83       	st	Z, r24
    173a:	91 83       	std	Z+1, r25	; 0x01
    173c:	a2 83       	std	Z+2, r26	; 0x02
    173e:	b3 83       	std	Z+3, r27	; 0x03
    1740:	11 c0       	rjmp	.+34     	; 0x1764 <mfrc522_to_card+0x18c>
    1742:	88 2d       	mov	r24, r8

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
	
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	09 2e       	mov	r0, r25
    1754:	00 0c       	add	r0, r0
    1756:	aa 0b       	sbc	r26, r26
    1758:	bb 0b       	sbc	r27, r27
    175a:	f8 01       	movw	r30, r16
    175c:	80 83       	st	Z, r24
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	a2 83       	std	Z+2, r26	; 0x02
    1762:	b3 83       	std	Z+3, r27	; 0x03
    1764:	88 20       	and	r8, r8
	tag_type[0] = req_mode;
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);

    1766:	71 f0       	breq	.+28     	; 0x1784 <mfrc522_to_card+0x1ac>
    1768:	88 2d       	mov	r24, r8
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    176a:	81 31       	cpi	r24, 0x11	; 17
    176c:	08 f0       	brcs	.+2      	; 0x1770 <mfrc522_to_card+0x198>
    176e:	80 e1       	ldi	r24, 0x10	; 16
    1770:	88 2e       	mov	r8, r24
    1772:	91 2c       	mov	r9, r1
    1774:	a1 2c       	mov	r10, r1
    1776:	b1 2c       	mov	r11, r1
    1778:	81 14       	cp	r8, r1
    177a:	91 04       	cpc	r9, r1
    177c:	a1 04       	cpc	r10, r1
    177e:	b1 04       	cpc	r11, r1
    1780:	29 f4       	brne	.+10     	; 0x178c <mfrc522_to_card+0x1b4>
    1782:	33 c0       	rjmp	.+102    	; 0x17ea <mfrc522_to_card+0x212>
    1784:	81 2c       	mov	r8, r1
    1786:	91 2c       	mov	r9, r1
    1788:	54 01       	movw	r10, r8
    178a:	83 94       	inc	r8
    178c:	02 2d       	mov	r16, r2
    178e:	1d 2d       	mov	r17, r13
    1790:	41 2c       	mov	r4, r1
    1792:	51 2c       	mov	r5, r1
    1794:	32 01       	movw	r6, r4
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
    1796:	6e 2d       	mov	r22, r14
    1798:	89 e0       	ldi	r24, 0x09	; 9
    179a:	05 df       	rcall	.-502    	; 0x15a6 <mfrc522_read>
    179c:	f8 01       	movw	r30, r16
    179e:	81 93       	st	Z+, r24
    17a0:	8f 01       	movw	r16, r30
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    17a2:	ff ef       	ldi	r31, 0xFF	; 255
    17a4:	4f 1a       	sub	r4, r31
    17a6:	5f 0a       	sbc	r5, r31
    17a8:	6f 0a       	sbc	r6, r31
    17aa:	7f 0a       	sbc	r7, r31
    17ac:	48 14       	cp	r4, r8
    17ae:	59 04       	cpc	r5, r9
    17b0:	6a 04       	cpc	r6, r10
    17b2:	7b 04       	cpc	r7, r11
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
    17b4:	80 f3       	brcs	.-32     	; 0x1796 <mfrc522_to_card+0x1be>
    17b6:	19 c0       	rjmp	.+50     	; 0x17ea <mfrc522_to_card+0x212>
    17b8:	6e 2d       	mov	r22, r14
	}
    17ba:	8d e0       	ldi	r24, 0x0D	; 13
    17bc:	f4 de       	rcall	.-536    	; 0x15a6 <mfrc522_read>
    17be:	68 2f       	mov	r22, r24
    17c0:	6f 77       	andi	r22, 0x7F	; 127
    17c2:	4e 2d       	mov	r20, r14
void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}
    17c4:	8d e0       	ldi	r24, 0x0D	; 13
    17c6:	d3 de       	rcall	.-602    	; 0x156e <mfrc522_write>
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
    17c8:	c3 e0       	ldi	r28, 0x03	; 3
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <mfrc522_to_card+0x212>
    17cc:	6e 2d       	mov	r22, r14
    17ce:	8d e0       	ldi	r24, 0x0D	; 13
	}
    17d0:	ea de       	rcall	.-556    	; 0x15a6 <mfrc522_read>
    17d2:	68 2f       	mov	r22, r24
    17d4:	6f 77       	andi	r22, 0x7F	; 127
    17d6:	4e 2d       	mov	r20, r14
    17d8:	8d e0       	ldi	r24, 0x0D	; 13
    17da:	c9 de       	rcall	.-622    	; 0x156e <mfrc522_write>
	
}

void mfrc522_IRQ_enable(unsigned char ch)
    17dc:	6e 2d       	mov	r22, r14
    17de:	86 e0       	ldi	r24, 0x06	; 6
    17e0:	e2 de       	rcall	.-572    	; 0x15a6 <mfrc522_read>
    17e2:	8b 71       	andi	r24, 0x1B	; 27
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <mfrc522_to_card+0x210>
    17e6:	84 cf       	rjmp	.-248    	; 0x16f0 <mfrc522_to_card+0x118>
    17e8:	c3 e0       	ldi	r28, 0x03	; 3
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

    17ea:	8c 2f       	mov	r24, r28
		{
			irqEn = 0x12;
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
    17ec:	df 91       	pop	r29
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	ff 90       	pop	r15
    17f6:	ef 90       	pop	r14
    17f8:	df 90       	pop	r13
    17fa:	cf 90       	pop	r12
    17fc:	bf 90       	pop	r11
    17fe:	af 90       	pop	r10
    1800:	9f 90       	pop	r9
    1802:	8f 90       	pop	r8
    1804:	7f 90       	pop	r7
    1806:	6f 90       	pop	r6
    1808:	5f 90       	pop	r5
    180a:	4f 90       	pop	r4
    180c:	3f 90       	pop	r3
    180e:	2f 90       	pop	r2
    1810:	08 95       	ret

00001812 <mfrc522_init>:
    1812:	cf 93       	push	r28
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    1814:	c8 2f       	mov	r28, r24
			break;
		}
		default:
    1816:	1f 92       	push	r1
    1818:	1f 92       	push	r1
    181a:	1f 92       	push	r1
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	8f 93       	push	r24
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	8f 93       	push	r24
    1824:	17 d1       	rcall	.+558    	; 0x1a54 <spi_init>
		break;
	}
	
    1826:	84 b3       	in	r24, 0x14	; 20
    1828:	83 60       	ori	r24, 0x03	; 3
    182a:	84 bb       	out	0x14, r24	; 20
	///////////////////////////////////////////============여기-==========//////////
    182c:	15 ba       	out	0x15, r1	; 21
    182e:	2f ef       	ldi	r18, 0xFF	; 255
    1830:	89 ef       	ldi	r24, 0xF9	; 249
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	21 50       	subi	r18, 0x01	; 1
    1836:	80 40       	sbci	r24, 0x00	; 0
    1838:	90 40       	sbci	r25, 0x00	; 0
    183a:	e1 f7       	brne	.-8      	; 0x1834 <mfrc522_init+0x22>
    183c:	00 c0       	rjmp	.+0      	; 0x183e <mfrc522_init+0x2c>
    183e:	00 00       	nop
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
	n=mfrc522_read(ComIrqReg,ch);
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
    1840:	85 b3       	in	r24, 0x15	; 21
    1842:	83 60       	ori	r24, 0x03	; 3
    1844:	85 bb       	out	0x15, r24	; 21
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
	
	
    1846:	4c 2f       	mov	r20, r28
    1848:	6f e0       	ldi	r22, 0x0F	; 15
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 de       	rcall	.-736    	; 0x156e <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
	{
    184e:	4c 2f       	mov	r20, r28
    1850:	6d e8       	ldi	r22, 0x8D	; 141
    1852:	8a e2       	ldi	r24, 0x2A	; 42
    1854:	8c de       	rcall	.-744    	; 0x156e <mfrc522_write>
		mfrc522_write(FIFODataReg, send_data[i],ch);
    1856:	4c 2f       	mov	r20, r28
    1858:	6e e3       	ldi	r22, 0x3E	; 62
    185a:	8b e2       	ldi	r24, 0x2B	; 43
    185c:	88 de       	rcall	.-752    	; 0x156e <mfrc522_write>
	}
    185e:	4c 2f       	mov	r20, r28
    1860:	6e e1       	ldi	r22, 0x1E	; 30
    1862:	8c e2       	ldi	r24, 0x2C	; 44
    1864:	84 de       	rcall	.-760    	; 0x156e <mfrc522_write>

    1866:	4c 2f       	mov	r20, r28
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	8d e2       	ldi	r24, 0x2D	; 45
    186c:	80 de       	rcall	.-768    	; 0x156e <mfrc522_write>
	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
	if (cmd == MFRC522_CMD_Transceive)
    186e:	4c 2f       	mov	r20, r28
    1870:	60 e4       	ldi	r22, 0x40	; 64
    1872:	85 e1       	ldi	r24, 0x15	; 21
    1874:	7c de       	rcall	.-776    	; 0x156e <mfrc522_write>
	{
    1876:	4c 2f       	mov	r20, r28
    1878:	6d e3       	ldi	r22, 0x3D	; 61
    187a:	81 e1       	ldi	r24, 0x11	; 17
    187c:	78 de       	rcall	.-784    	; 0x156e <mfrc522_write>
    187e:	6c 2f       	mov	r22, r28
		n=mfrc522_read(BitFramingReg,ch);
		mfrc522_write(BitFramingReg,n|0x80,ch);
	}
	
    1880:	84 e1       	ldi	r24, 0x14	; 20
    1882:	91 de       	rcall	.-734    	; 0x15a6 <mfrc522_read>
    1884:	98 2f       	mov	r25, r24
    1886:	93 70       	andi	r25, 0x03	; 3
	//Waiting to receive data to complete
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	29 f4       	brne	.+10     	; 0x189e <mfrc522_init+0x8c>
    1894:	68 2f       	mov	r22, r24
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
    1896:	63 60       	ori	r22, 0x03	; 3
    1898:	4c 2f       	mov	r20, r28
    189a:	84 e1       	ldi	r24, 0x14	; 20
    189c:	68 de       	rcall	.-816    	; 0x156e <mfrc522_write>
    189e:	cf 91       	pop	r28
    18a0:	08 95       	ret

000018a2 <mfrc522_version_check>:
	{
		//CommIrqReg[7..0]
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    18a6:	d8 2f       	mov	r29, r24

	tmp=mfrc522_read(BitFramingReg,ch);
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
	
    18a8:	68 2f       	mov	r22, r24
    18aa:	87 e3       	ldi	r24, 0x37	; 55
    18ac:	7c de       	rcall	.-776    	; 0x15a6 <mfrc522_read>
    18ae:	c8 2f       	mov	r28, r24
    18b0:	2f ef       	ldi	r18, 0xFF	; 255
    18b2:	89 ef       	ldi	r24, 0xF9	; 249
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	21 50       	subi	r18, 0x01	; 1
    18b8:	80 40       	sbci	r24, 0x00	; 0
    18ba:	90 40       	sbci	r25, 0x00	; 0
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <mfrc522_version_check+0x14>
    18be:	00 c0       	rjmp	.+0      	; 0x18c0 <mfrc522_version_check+0x1e>
    18c0:	00 00       	nop
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
    18c2:	d1 11       	cpse	r29, r1
    18c4:	06 c0       	rjmp	.+12     	; 0x18d2 <mfrc522_version_check+0x30>
    18c6:	89 e1       	ldi	r24, 0x19	; 25
    18c8:	94 e0       	ldi	r25, 0x04	; 4
    18ca:	5f d1       	rcall	.+702    	; 0x1b8a <uart0_tx_string>
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
    18cc:	c2 39       	cpi	r28, 0x92	; 146
    18ce:	59 f5       	brne	.+86     	; 0x1926 <mfrc522_version_check+0x84>
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <mfrc522_version_check+0x4e>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
    18d2:	85 e2       	ldi	r24, 0x25	; 37
    18d4:	94 e0       	ldi	r25, 0x04	; 4
    18d6:	59 d1       	rcall	.+690    	; 0x1b8a <uart0_tx_string>
			if (n & irqEn & 0x01)
			{
    18d8:	c2 39       	cpi	r28, 0x92	; 146
    18da:	91 f5       	brne	.+100    	; 0x1940 <mfrc522_version_check+0x9e>
				if (lastBits)
				{
					*back_data_len = (n-1)*8 + lastBits;
				}
				else
				{
    18dc:	12 c0       	rjmp	.+36     	; 0x1902 <mfrc522_version_check+0x60>
    18de:	81 e3       	ldi	r24, 0x31	; 49
    18e0:	94 e0       	ldi	r25, 0x04	; 4
    18e2:	53 d1       	rcall	.+678    	; 0x1b8a <uart0_tx_string>
					*back_data_len = n*8;
    18e4:	44 e4       	ldi	r20, 0x44	; 68
    18e6:	54 e0       	ldi	r21, 0x04	; 4
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	9f dd       	rcall	.-1218   	; 0x142c <i2c_lcd_string>
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}
    18ee:	ff cf       	rjmp	.-2      	; 0x18ee <mfrc522_version_check+0x4c>
    18f0:	88 e5       	ldi	r24, 0x58	; 88
    18f2:	94 e0       	ldi	r25, 0x04	; 4

    18f4:	4a d1       	rcall	.+660    	; 0x1b8a <uart0_tx_string>
    18f6:	4c e7       	ldi	r20, 0x7C	; 124
    18f8:	54 e0       	ldi	r21, 0x04	; 4
    18fa:	60 e0       	ldi	r22, 0x00	; 0
    18fc:	82 e0       	ldi	r24, 0x02	; 2
    18fe:	96 dd       	rcall	.-1236   	; 0x142c <i2c_lcd_string>
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}
    1900:	23 c0       	rjmp	.+70     	; 0x1948 <mfrc522_version_check+0xa6>
    1902:	88 e5       	ldi	r24, 0x58	; 88
    1904:	94 e0       	ldi	r25, 0x04	; 4

			if (cmd == MFRC522_CMD_Transceive)
    1906:	41 d1       	rcall	.+642    	; 0x1b8a <uart0_tx_string>
    1908:	41 e9       	ldi	r20, 0x91	; 145
    190a:	54 e0       	ldi	r21, 0x04	; 4
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	82 e0       	ldi	r24, 0x02	; 2
			{
				n = mfrc522_read(FIFOLevelReg,ch);
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
				if (lastBits)
    1910:	8d dd       	rcall	.-1254   	; 0x142c <i2c_lcd_string>
    1912:	1a c0       	rjmp	.+52     	; 0x1948 <mfrc522_version_check+0xa6>
    1914:	86 ea       	ldi	r24, 0xA6	; 166
    1916:	94 e0       	ldi	r25, 0x04	; 4
				{
    1918:	38 d1       	rcall	.+624    	; 0x1b8a <uart0_tx_string>
    191a:	4c e7       	ldi	r20, 0x7C	; 124
    191c:	54 e0       	ldi	r21, 0x04	; 4
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	82 e0       	ldi	r24, 0x02	; 2
    1922:	84 dd       	rcall	.-1272   	; 0x142c <i2c_lcd_string>
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1924:	11 c0       	rjmp	.+34     	; 0x1948 <mfrc522_version_check+0xa6>
    1926:	c0 59       	subi	r28, 0x90	; 144
    1928:	c2 30       	cpi	r28, 0x02	; 2
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
				if (lastBits)
    192a:	c8 f6       	brcc	.-78     	; 0x18de <mfrc522_version_check+0x3c>
    192c:	f3 cf       	rjmp	.-26     	; 0x1914 <mfrc522_version_check+0x72>
    192e:	86 ea       	ldi	r24, 0xA6	; 166
    1930:	94 e0       	ldi	r25, 0x04	; 4
				{
					*back_data_len = (n-1)*8 + lastBits;
    1932:	2b d1       	rcall	.+598    	; 0x1b8a <uart0_tx_string>
    1934:	41 e9       	ldi	r20, 0x91	; 145
    1936:	54 e0       	ldi	r21, 0x04	; 4
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	77 dd       	rcall	.-1298   	; 0x142c <i2c_lcd_string>
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <mfrc522_version_check+0xa6>
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1940:	c0 59       	subi	r28, 0x90	; 144
    1942:	c2 30       	cpi	r28, 0x02	; 2
    1944:	60 f6       	brcc	.-104    	; 0x18de <mfrc522_version_check+0x3c>
    1946:	f3 cf       	rjmp	.-26     	; 0x192e <mfrc522_version_check+0x8c>
				{
					*back_data_len = n*8;
				}

				if (n == 0)
				{
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <mfrc522_IRQ_enable>:
					n = 1;
				}
				if (n > MAX_LEN)
    194e:	cf 93       	push	r28
    1950:	c8 2f       	mov	r28, r24
				{
					n = MAX_LEN;
				}
    1952:	68 2f       	mov	r22, r24
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	27 de       	rcall	.-946    	; 0x15a6 <mfrc522_read>
				
    1958:	68 2f       	mov	r22, r24
    195a:	60 62       	ori	r22, 0x20	; 32
    195c:	4c 2f       	mov	r20, r28
    195e:	82 e0       	ldi	r24, 0x02	; 2
    1960:	06 de       	rcall	.-1012   	; 0x156e <mfrc522_write>
				//Reading the received data in FIFO
    1962:	6c 2f       	mov	r22, r28
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	1f de       	rcall	.-962    	; 0x15a6 <mfrc522_read>
				for (i=0; i<n; i++)
    1968:	68 2f       	mov	r22, r24
    196a:	60 68       	ori	r22, 0x80	; 128
    196c:	4c 2f       	mov	r20, r28
    196e:	83 e0       	ldi	r24, 0x03	; 3
    1970:	fe dd       	rcall	.-1028   	; 0x156e <mfrc522_write>
				{
    1972:	cf 91       	pop	r28
    1974:	08 95       	ret

00001976 <mfrc522_request>:
					back_data[i] = mfrc522_read(FIFODataReg,ch);
				}
			}
		}
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	00 d0       	rcall	.+0      	; 0x1986 <mfrc522_request+0x10>
    1986:	00 d0       	rcall	.+0      	; 0x1988 <mfrc522_request+0x12>
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	18 2f       	mov	r17, r24
    198e:	6b 01       	movw	r12, r22
    1990:	e4 2e       	mov	r14, r20
		else
		{
			status = ERROR;
		}
		
    1992:	67 e0       	ldi	r22, 0x07	; 7
    1994:	8d e0       	ldi	r24, 0x0D	; 13
    1996:	eb dd       	rcall	.-1066   	; 0x156e <mfrc522_write>
	}
	
    1998:	f6 01       	movw	r30, r12
    199a:	10 83       	st	Z, r17
// 	SetBitMask(ControlReg,0x80);           //timer stops
    199c:	8e 01       	movw	r16, r28
    199e:	0f 5f       	subi	r16, 0xFF	; 255
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255
    19a2:	96 01       	movw	r18, r12
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	b6 01       	movw	r22, r12
    19a8:	8c e0       	ldi	r24, 0x0C	; 12
    19aa:	16 de       	rcall	.-980    	; 0x15d8 <mfrc522_to_card>
 //mfrc522_write(CommandReg, MFRC522_CMD_Idle);

    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	59 f4       	brne	.+22     	; 0x19c6 <mfrc522_request+0x50>
    19b0:	49 81       	ldd	r20, Y+1	; 0x01
    19b2:	5a 81       	ldd	r21, Y+2	; 0x02
    19b4:	6b 81       	ldd	r22, Y+3	; 0x03
    19b6:	7c 81       	ldd	r23, Y+4	; 0x04
    19b8:	40 31       	cpi	r20, 0x10	; 16
    19ba:	51 05       	cpc	r21, r1
    19bc:	61 05       	cpc	r22, r1
    19be:	71 05       	cpc	r23, r1
    19c0:	19 f0       	breq	.+6      	; 0x19c8 <mfrc522_request+0x52>
	return status;
}
    19c2:	83 e0       	ldi	r24, 0x03	; 3
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <mfrc522_request+0x52>
    19c6:	83 e0       	ldi	r24, 0x03	; 3


unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ef 90       	pop	r14
    19da:	df 90       	pop	r13
    19dc:	cf 90       	pop	r12
    19de:	08 95       	ret

000019e0 <mfrc522_get_card_serial>:
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
    19e0:	cf 92       	push	r12
    19e2:	df 92       	push	r13
    19e4:	ef 92       	push	r14
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <mfrc522_get_card_serial+0x10>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <mfrc522_get_card_serial+0x12>
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	6c 01       	movw	r12, r24
    19f8:	e6 2e       	mov	r14, r22
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
	
	serial_out[0] = PICC_ANTICOLL;
	serial_out[1] = 0x20;
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

    19fa:	46 2f       	mov	r20, r22
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	8d e0       	ldi	r24, 0x0D	; 13
    1a00:	b6 dd       	rcall	.-1172   	; 0x156e <mfrc522_write>
	if (status == CARD_FOUND)
	{
    1a02:	83 e9       	ldi	r24, 0x93	; 147
    1a04:	f6 01       	movw	r30, r12
    1a06:	80 83       	st	Z, r24
		//Check card serial number
    1a08:	80 e2       	ldi	r24, 0x20	; 32
    1a0a:	81 83       	std	Z+1, r24	; 0x01
		for (i=0; i<4; i++)
    1a0c:	8e 01       	movw	r16, r28
    1a0e:	0f 5f       	subi	r16, 0xFF	; 255
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
    1a12:	96 01       	movw	r18, r12
    1a14:	42 e0       	ldi	r20, 0x02	; 2
    1a16:	b6 01       	movw	r22, r12
    1a18:	8c e0       	ldi	r24, 0x0C	; 12
    1a1a:	de dd       	rcall	.-1092   	; 0x15d8 <mfrc522_to_card>
		{
			serNumCheck ^= serial_out[i];
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	71 f4       	brne	.+28     	; 0x1a3c <mfrc522_get_card_serial+0x5c>
    1a20:	f6 01       	movw	r30, r12
    1a22:	a6 01       	movw	r20, r12
    1a24:	4c 5f       	subi	r20, 0xFC	; 252
    1a26:	5f 4f       	sbci	r21, 0xFF	; 255
    1a28:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (serNumCheck != serial_out[i])
		{
			status = ERROR;
		}
    1a2a:	21 91       	ld	r18, Z+
    1a2c:	92 27       	eor	r25, r18
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
		{
    1a2e:	4e 17       	cp	r20, r30
    1a30:	5f 07       	cpc	r21, r31
    1a32:	d9 f7       	brne	.-10     	; 0x1a2a <mfrc522_get_card_serial+0x4a>
			status = ERROR;
		}
	}
	return status;
    1a34:	f6 01       	movw	r30, r12
    1a36:	24 81       	ldd	r18, Z+4	; 0x04
    1a38:	92 13       	cpse	r25, r18
}

    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ef 90       	pop	r14
    1a4e:	df 90       	pop	r13
    1a50:	cf 90       	pop	r12
    1a52:	08 95       	ret

00001a54 <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(uint8_t spi_mode, ...){
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <spi_init+0x6>
    1a5a:	1f 92       	push	r1
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
    1a62:	83 30       	cpi	r24, 0x03	; 3
    1a64:	21 f1       	breq	.+72     	; 0x1aae <spi_init+0x5a>
    1a66:	81 11       	cpse	r24, r1
    1a68:	32 c0       	rjmp	.+100    	; 0x1ace <spi_init+0x7a>
    1a6a:	29 c0       	rjmp	.+82     	; 0x1abe <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
    1a6c:	9c 91       	ld	r25, X
    1a6e:	12 96       	adiw	r26, 0x02	; 2
    1a70:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
    1a72:	e2 17       	cp	r30, r18
    1a74:	f3 07       	cpc	r31, r19
    1a76:	d1 f7       	brne	.-12     	; 0x1a6c <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1a78:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7a:	92 30       	cpi	r25, 0x02	; 2
    1a7c:	20 f1       	brcs	.+72     	; 0x1ac6 <spi_init+0x72>
    1a7e:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
    1a80:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
    1a82:	83 30       	cpi	r24, 0x03	; 3
    1a84:	71 f4       	brne	.+28     	; 0x1aa2 <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
    1a86:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
    1a88:	87 b3       	in	r24, 0x17	; 23
    1a8a:	87 60       	ori	r24, 0x07	; 7
    1a8c:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
    1a8e:	99 81       	ldd	r25, Y+1	; 0x01
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	89 2b       	or	r24, r25
    1a94:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
    1a96:	2e b1       	in	r18, 0x0e	; 14
    1a98:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9a:	92 2b       	or	r25, r18
    1a9c:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
    1a9e:	8d b9       	out	0x0d, r24	; 13
    1aa0:	16 c0       	rjmp	.+44     	; 0x1ace <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	14 c0       	rjmp	.+40     	; 0x1ace <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
    1aa6:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
    1aa8:	80 e4       	ldi	r24, 0x40	; 64
    1aaa:	8d b9       	out	0x0d, r24	; 13
    1aac:	10 c0       	rjmp	.+32     	; 0x1ace <spi_init+0x7a>
    1aae:	de 01       	movw	r26, r28
    1ab0:	19 96       	adiw	r26, 0x09	; 9
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	31 96       	adiw	r30, 0x01	; 1
    1ab6:	9e 01       	movw	r18, r28
    1ab8:	2c 5f       	subi	r18, 0xFC	; 252
    1aba:	3f 4f       	sbci	r19, 0xFF	; 255
    1abc:	d7 cf       	rjmp	.-82     	; 0x1a6c <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1abe:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac0:	92 30       	cpi	r25, 0x02	; 2
    1ac2:	e8 f6       	brcc	.-70     	; 0x1a7e <spi_init+0x2a>
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
    1ac6:	1d b8       	out	0x0d, r1	; 13
    1ac8:	de cf       	rjmp	.-68     	; 0x1a86 <spi_init+0x32>
    1aca:	1d b8       	out	0x0d, r1	; 13
    1acc:	ec cf       	rjmp	.-40     	; 0x1aa6 <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	08 95       	ret

00001ada <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
    1ada:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
    1adc:	77 9b       	sbis	0x0e, 7	; 14
    1ade:	fe cf       	rjmp	.-4      	; 0x1adc <spi_master_tx+0x2>
}
    1ae0:	08 95       	ret

00001ae2 <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
    1ae2:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
    1ae4:	77 9b       	sbis	0x0e, 7	; 14
    1ae6:	fe cf       	rjmp	.-4      	; 0x1ae4 <spi_master_rx+0x2>
	
	return SPDR;
    1ae8:	8f b1       	in	r24, 0x0f	; 15
}
    1aea:	08 95       	ret

00001aec <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
    1aec:	bc 9a       	sbi	0x17, 4	; 23
    1aee:	8c e0       	ldi	r24, 0x0C	; 12
    1af0:	83 bf       	out	0x33, r24	; 51
    1af2:	8a ef       	ldi	r24, 0xFA	; 250
    1af4:	81 bf       	out	0x31, r24	; 49
    1af6:	87 b7       	in	r24, 0x37	; 55
    1af8:	82 60       	ori	r24, 0x02	; 2
    1afa:	87 bf       	out	0x37, r24	; 55
    1afc:	08 95       	ret

00001afe <timer3_init>:
    1afe:	13 9a       	sbi	0x02, 3	; 2
    1b00:	80 e4       	ldi	r24, 0x40	; 64
    1b02:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1b06:	8a e1       	ldi	r24, 0x1A	; 26
    1b08:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1b0c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1b10:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1b14:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1b18:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b1c:	08 95       	ret

00001b1e <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
    1b1e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
    1b22:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b26:	08 95       	ret

00001b28 <uart_init>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	ec 01       	movw	r28, r24
    1b2e:	9b 01       	movw	r18, r22
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	60 e4       	ldi	r22, 0x40	; 64
    1b36:	72 e4       	ldi	r23, 0x42	; 66
    1b38:	8f e0       	ldi	r24, 0x0F	; 15
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	4f d1       	rcall	.+670    	; 0x1ddc <__udivmodsi4>
    1b3e:	21 50       	subi	r18, 0x01	; 1
    1b40:	31 09       	sbc	r19, r1
    1b42:	20 97       	sbiw	r28, 0x00	; 0
    1b44:	59 f4       	brne	.+22     	; 0x1b5c <uart_init+0x34>
    1b46:	10 98       	cbi	0x02, 0	; 2
    1b48:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1b4c:	29 b9       	out	0x09, r18	; 9
    1b4e:	88 e1       	ldi	r24, 0x18	; 24
    1b50:	8a b9       	out	0x0a, r24	; 10
    1b52:	57 9a       	sbi	0x0a, 7	; 10
    1b54:	86 e0       	ldi	r24, 0x06	; 6
    1b56:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1b5a:	10 c0       	rjmp	.+32     	; 0x1b7c <uart_init+0x54>
    1b5c:	21 97       	sbiw	r28, 0x01	; 1
    1b5e:	71 f4       	brne	.+28     	; 0x1b7c <uart_init+0x54>
    1b60:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1b64:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1b68:	ea e9       	ldi	r30, 0x9A	; 154
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	88 e1       	ldi	r24, 0x18	; 24
    1b6e:	80 83       	st	Z, r24
    1b70:	80 81       	ld	r24, Z
    1b72:	80 68       	ori	r24, 0x80	; 128
    1b74:	80 83       	st	Z, r24
    1b76:	86 e0       	ldi	r24, 0x06	; 6
    1b78:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	08 95       	ret

00001b82 <uart0_tx_char>:
    1b82:	5d 9b       	sbis	0x0b, 5	; 11
    1b84:	fe cf       	rjmp	.-4      	; 0x1b82 <uart0_tx_char>
    1b86:	8c b9       	out	0x0c, r24	; 12
    1b88:	08 95       	ret

00001b8a <uart0_tx_string>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	ec 01       	movw	r28, r24
    1b90:	88 81       	ld	r24, Y
    1b92:	88 23       	and	r24, r24
    1b94:	29 f0       	breq	.+10     	; 0x1ba0 <uart0_tx_string+0x16>
    1b96:	21 96       	adiw	r28, 0x01	; 1
    1b98:	f4 df       	rcall	.-24     	; 0x1b82 <uart0_tx_char>
    1b9a:	89 91       	ld	r24, Y+
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	fc cf       	rjmp	.-8      	; 0x1b98 <uart0_tx_string+0xe>
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	08 95       	ret

00001ba6 <uart1_tx_char>:
    1ba6:	eb e9       	ldi	r30, 0x9B	; 155
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	90 81       	ld	r25, Z
    1bac:	95 ff       	sbrs	r25, 5
    1bae:	fd cf       	rjmp	.-6      	; 0x1baa <uart1_tx_char+0x4>
    1bb0:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1bb4:	08 95       	ret

00001bb6 <uart1_tx_string>:
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	ec 01       	movw	r28, r24
    1bbc:	88 81       	ld	r24, Y
    1bbe:	88 23       	and	r24, r24
    1bc0:	29 f0       	breq	.+10     	; 0x1bcc <uart1_tx_string+0x16>
    1bc2:	21 96       	adiw	r28, 0x01	; 1
    1bc4:	f0 df       	rcall	.-32     	; 0x1ba6 <uart1_tx_char>
    1bc6:	89 91       	ld	r24, Y+
    1bc8:	81 11       	cpse	r24, r1
    1bca:	fc cf       	rjmp	.-8      	; 0x1bc4 <uart1_tx_string+0xe>
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	08 95       	ret

00001bd2 <IntToString>:

char * IntToString(int num)
{
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	64 97       	sbiw	r28, 0x14	; 20
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%02d ",num); //고유 자릿값
    1bea:	9f 93       	push	r25
    1bec:	8f 93       	push	r24
    1bee:	8a ec       	ldi	r24, 0xCA	; 202
    1bf0:	94 e0       	ldi	r25, 0x04	; 4
    1bf2:	9f 93       	push	r25
    1bf4:	8f 93       	push	r24
    1bf6:	8e 01       	movw	r16, r28
    1bf8:	0f 5f       	subi	r16, 0xFF	; 255
    1bfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfc:	1f 93       	push	r17
    1bfe:	0f 93       	push	r16
    1c00:	4f d1       	rcall	.+670    	; 0x1ea0 <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
    1c02:	b8 01       	movw	r22, r16
    1c04:	86 e1       	ldi	r24, 0x16	; 22
    1c06:	96 e0       	ldi	r25, 0x06	; 6
    1c08:	3c d1       	rcall	.+632    	; 0x1e82 <strcpy>
	
	return (buff.itos_buff);
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
}
    1c16:	86 e1       	ldi	r24, 0x16	; 22
    1c18:	96 e0       	ldi	r25, 0x06	; 6
    1c1a:	64 96       	adiw	r28, 0x14	; 20
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	08 95       	ret

00001c30 <HexToString>:
 
 char * HexToString(char num)
 {
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	64 97       	sbiw	r28, 0x14	; 20
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
    1c48:	1f 92       	push	r1
    1c4a:	8f 93       	push	r24
    1c4c:	80 ed       	ldi	r24, 0xD0	; 208
    1c4e:	94 e0       	ldi	r25, 0x04	; 4
    1c50:	9f 93       	push	r25
    1c52:	8f 93       	push	r24
    1c54:	8e 01       	movw	r16, r28
    1c56:	0f 5f       	subi	r16, 0xFF	; 255
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	1f 93       	push	r17
    1c5c:	0f 93       	push	r16
    1c5e:	20 d1       	rcall	.+576    	; 0x1ea0 <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
    1c60:	b8 01       	movw	r22, r16
    1c62:	86 e1       	ldi	r24, 0x16	; 22
    1c64:	96 e0       	ldi	r25, 0x06	; 6
    1c66:	0d d1       	rcall	.+538    	; 0x1e82 <strcpy>
	 
	 return (buff.itos_buff);
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
 }
    1c74:	86 e1       	ldi	r24, 0x16	; 22
    1c76:	96 e0       	ldi	r25, 0x06	; 6
    1c78:	64 96       	adiw	r28, 0x14	; 20
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	08 95       	ret

00001c8e <connect_to_AP>:
 
 
 
char* connect_to_AP(char * cmd,char *ssid,char*password){
    1c8e:	cf 92       	push	r12
    1c90:	df 92       	push	r13
    1c92:	ef 92       	push	r14
    1c94:	ff 92       	push	r15
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	c0 54       	subi	r28, 0x40	; 64
    1ca4:	d1 09       	sbc	r29, r1
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	6b 01       	movw	r12, r22
    1cb2:	7a 01       	movw	r14, r20
	//문자열 변수 ?
	//"AT+CWJAP=\""
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1cb4:	20 e4       	ldi	r18, 0x40	; 64
    1cb6:	e6 e5       	ldi	r30, 0x56	; 86
    1cb8:	f6 e0       	ldi	r31, 0x06	; 6
    1cba:	df 01       	movw	r26, r30
    1cbc:	1d 92       	st	X+, r1
    1cbe:	2a 95       	dec	r18
    1cc0:	e9 f7       	brne	.-6      	; 0x1cbc <connect_to_AP+0x2e>
	
	strcpy(buf,cmd);//"AT+CWJAP=\""
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	8e 01       	movw	r16, r28
    1cc6:	0f 5f       	subi	r16, 0xFF	; 255
    1cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cca:	c8 01       	movw	r24, r16
    1ccc:	da d0       	rcall	.+436    	; 0x1e82 <strcpy>
	strcat(buf,ssid);
    1cce:	b6 01       	movw	r22, r12
    1cd0:	c8 01       	movw	r24, r16
    1cd2:	c3 d0       	rcall	.+390    	; 0x1e5a <strcat>
	strcat(buf,"\",\"");
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	01 90       	ld	r0, Z+
    1cd8:	00 20       	and	r0, r0
    1cda:	e9 f7       	brne	.-6      	; 0x1cd6 <connect_to_AP+0x48>
    1cdc:	31 97       	sbiw	r30, 0x01	; 1
    1cde:	82 e2       	ldi	r24, 0x22	; 34
    1ce0:	9c e2       	ldi	r25, 0x2C	; 44
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	80 83       	st	Z, r24
    1ce6:	82 e2       	ldi	r24, 0x22	; 34
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	93 83       	std	Z+3, r25	; 0x03
    1cec:	82 83       	std	Z+2, r24	; 0x02
	strcat(buf,password);
    1cee:	b7 01       	movw	r22, r14
    1cf0:	c8 01       	movw	r24, r16
    1cf2:	b3 d0       	rcall	.+358    	; 0x1e5a <strcat>
	strcat(buf,"\"\r\n");
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	01 90       	ld	r0, Z+
    1cf8:	00 20       	and	r0, r0
    1cfa:	e9 f7       	brne	.-6      	; 0x1cf6 <connect_to_AP+0x68>
    1cfc:	31 97       	sbiw	r30, 0x01	; 1
    1cfe:	82 e2       	ldi	r24, 0x22	; 34
    1d00:	9d e0       	ldi	r25, 0x0D	; 13
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
    1d06:	8a e0       	ldi	r24, 0x0A	; 10
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	93 83       	std	Z+3, r25	; 0x03
    1d0c:	82 83       	std	Z+2, r24	; 0x02
	strcpy(buff.esp_buff,buf);
    1d0e:	b8 01       	movw	r22, r16
    1d10:	86 e5       	ldi	r24, 0x56	; 86
    1d12:	96 e0       	ldi	r25, 0x06	; 6
    1d14:	b6 d0       	rcall	.+364    	; 0x1e82 <strcpy>
	return buff.esp_buff;
	
}
    1d16:	86 e5       	ldi	r24, 0x56	; 86
    1d18:	96 e0       	ldi	r25, 0x06	; 6
    1d1a:	c0 5c       	subi	r28, 0xC0	; 192
    1d1c:	df 4f       	sbci	r29, 0xFF	; 255
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	ff 90       	pop	r15
    1d32:	ef 90       	pop	r14
    1d34:	df 90       	pop	r13
    1d36:	cf 90       	pop	r12
    1d38:	08 95       	ret

00001d3a <TCP_connect>:

char* TCP_connect(char * ip, char* port)
{//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
    1d3a:	ef 92       	push	r14
    1d3c:	ff 92       	push	r15
    1d3e:	0f 93       	push	r16
    1d40:	1f 93       	push	r17
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	c0 54       	subi	r28, 0x40	; 64
    1d4c:	d1 09       	sbc	r29, r1
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	9c 01       	movw	r18, r24
    1d5a:	7b 01       	movw	r14, r22
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1d5c:	80 e4       	ldi	r24, 0x40	; 64
    1d5e:	e6 e5       	ldi	r30, 0x56	; 86
    1d60:	f6 e0       	ldi	r31, 0x06	; 6
    1d62:	df 01       	movw	r26, r30
    1d64:	1d 92       	st	X+, r1
    1d66:	8a 95       	dec	r24
    1d68:	e9 f7       	brne	.-6      	; 0x1d64 <TCP_connect+0x2a>
		
	strcpy(buf,"AT+CIPSTART=\"TCP\",\"");
    1d6a:	94 e1       	ldi	r25, 0x14	; 20
    1d6c:	e5 ed       	ldi	r30, 0xD5	; 213
    1d6e:	f4 e0       	ldi	r31, 0x04	; 4
    1d70:	8e 01       	movw	r16, r28
    1d72:	0f 5f       	subi	r16, 0xFF	; 255
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	d8 01       	movw	r26, r16
    1d78:	01 90       	ld	r0, Z+
    1d7a:	0d 92       	st	X+, r0
    1d7c:	9a 95       	dec	r25
    1d7e:	e1 f7       	brne	.-8      	; 0x1d78 <TCP_connect+0x3e>
	strcat(buf,ip);
    1d80:	b9 01       	movw	r22, r18
    1d82:	c8 01       	movw	r24, r16
    1d84:	6a d0       	rcall	.+212    	; 0x1e5a <strcat>
	strcat(buf,"\",");
    1d86:	f8 01       	movw	r30, r16
    1d88:	01 90       	ld	r0, Z+
    1d8a:	00 20       	and	r0, r0
    1d8c:	e9 f7       	brne	.-6      	; 0x1d88 <TCP_connect+0x4e>
    1d8e:	31 97       	sbiw	r30, 0x01	; 1
    1d90:	82 e2       	ldi	r24, 0x22	; 34
    1d92:	9c e2       	ldi	r25, 0x2C	; 44
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	12 82       	std	Z+2, r1	; 0x02
	strcat(buf,port);
    1d9a:	b7 01       	movw	r22, r14
    1d9c:	c8 01       	movw	r24, r16
    1d9e:	5d d0       	rcall	.+186    	; 0x1e5a <strcat>
	strcat(buf,"\r\n");
    1da0:	f8 01       	movw	r30, r16
    1da2:	01 90       	ld	r0, Z+
    1da4:	00 20       	and	r0, r0
    1da6:	e9 f7       	brne	.-6      	; 0x1da2 <TCP_connect+0x68>
    1da8:	31 97       	sbiw	r30, 0x01	; 1
    1daa:	8d e0       	ldi	r24, 0x0D	; 13
    1dac:	9a e0       	ldi	r25, 0x0A	; 10
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
    1db4:	b8 01       	movw	r22, r16
    1db6:	86 e5       	ldi	r24, 0x56	; 86
    1db8:	96 e0       	ldi	r25, 0x06	; 6
    1dba:	63 d0       	rcall	.+198    	; 0x1e82 <strcpy>
	
	return buff.esp_buff;
	
}
    1dbc:	86 e5       	ldi	r24, 0x56	; 86
    1dbe:	96 e0       	ldi	r25, 0x06	; 6
    1dc0:	c0 5c       	subi	r28, 0xC0	; 192
    1dc2:	df 4f       	sbci	r29, 0xFF	; 255
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	08 95       	ret

00001ddc <__udivmodsi4>:
    1ddc:	a1 e2       	ldi	r26, 0x21	; 33
    1dde:	1a 2e       	mov	r1, r26
    1de0:	aa 1b       	sub	r26, r26
    1de2:	bb 1b       	sub	r27, r27
    1de4:	fd 01       	movw	r30, r26
    1de6:	0d c0       	rjmp	.+26     	; 0x1e02 <__udivmodsi4_ep>

00001de8 <__udivmodsi4_loop>:
    1de8:	aa 1f       	adc	r26, r26
    1dea:	bb 1f       	adc	r27, r27
    1dec:	ee 1f       	adc	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	a2 17       	cp	r26, r18
    1df2:	b3 07       	cpc	r27, r19
    1df4:	e4 07       	cpc	r30, r20
    1df6:	f5 07       	cpc	r31, r21
    1df8:	20 f0       	brcs	.+8      	; 0x1e02 <__udivmodsi4_ep>
    1dfa:	a2 1b       	sub	r26, r18
    1dfc:	b3 0b       	sbc	r27, r19
    1dfe:	e4 0b       	sbc	r30, r20
    1e00:	f5 0b       	sbc	r31, r21

00001e02 <__udivmodsi4_ep>:
    1e02:	66 1f       	adc	r22, r22
    1e04:	77 1f       	adc	r23, r23
    1e06:	88 1f       	adc	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	1a 94       	dec	r1
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <__udivmodsi4_loop>
    1e0e:	60 95       	com	r22
    1e10:	70 95       	com	r23
    1e12:	80 95       	com	r24
    1e14:	90 95       	com	r25
    1e16:	9b 01       	movw	r18, r22
    1e18:	ac 01       	movw	r20, r24
    1e1a:	bd 01       	movw	r22, r26
    1e1c:	cf 01       	movw	r24, r30
    1e1e:	08 95       	ret

00001e20 <atoi>:
    1e20:	fc 01       	movw	r30, r24
    1e22:	88 27       	eor	r24, r24
    1e24:	99 27       	eor	r25, r25
    1e26:	e8 94       	clt
    1e28:	21 91       	ld	r18, Z+
    1e2a:	20 32       	cpi	r18, 0x20	; 32
    1e2c:	e9 f3       	breq	.-6      	; 0x1e28 <atoi+0x8>
    1e2e:	29 30       	cpi	r18, 0x09	; 9
    1e30:	10 f0       	brcs	.+4      	; 0x1e36 <atoi+0x16>
    1e32:	2e 30       	cpi	r18, 0x0E	; 14
    1e34:	c8 f3       	brcs	.-14     	; 0x1e28 <atoi+0x8>
    1e36:	2b 32       	cpi	r18, 0x2B	; 43
    1e38:	39 f0       	breq	.+14     	; 0x1e48 <atoi+0x28>
    1e3a:	2d 32       	cpi	r18, 0x2D	; 45
    1e3c:	31 f4       	brne	.+12     	; 0x1e4a <atoi+0x2a>
    1e3e:	68 94       	set
    1e40:	03 c0       	rjmp	.+6      	; 0x1e48 <atoi+0x28>
    1e42:	26 d0       	rcall	.+76     	; 0x1e90 <__mulhi_const_10>
    1e44:	82 0f       	add	r24, r18
    1e46:	91 1d       	adc	r25, r1
    1e48:	21 91       	ld	r18, Z+
    1e4a:	20 53       	subi	r18, 0x30	; 48
    1e4c:	2a 30       	cpi	r18, 0x0A	; 10
    1e4e:	c8 f3       	brcs	.-14     	; 0x1e42 <atoi+0x22>
    1e50:	1e f4       	brtc	.+6      	; 0x1e58 <atoi+0x38>
    1e52:	90 95       	com	r25
    1e54:	81 95       	neg	r24
    1e56:	9f 4f       	sbci	r25, 0xFF	; 255
    1e58:	08 95       	ret

00001e5a <strcat>:
    1e5a:	fb 01       	movw	r30, r22
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	0d 90       	ld	r0, X+
    1e60:	00 20       	and	r0, r0
    1e62:	e9 f7       	brne	.-6      	; 0x1e5e <strcat+0x4>
    1e64:	11 97       	sbiw	r26, 0x01	; 1
    1e66:	01 90       	ld	r0, Z+
    1e68:	0d 92       	st	X+, r0
    1e6a:	00 20       	and	r0, r0
    1e6c:	e1 f7       	brne	.-8      	; 0x1e66 <strcat+0xc>
    1e6e:	08 95       	ret

00001e70 <strcmp>:
    1e70:	fb 01       	movw	r30, r22
    1e72:	dc 01       	movw	r26, r24
    1e74:	8d 91       	ld	r24, X+
    1e76:	01 90       	ld	r0, Z+
    1e78:	80 19       	sub	r24, r0
    1e7a:	01 10       	cpse	r0, r1
    1e7c:	d9 f3       	breq	.-10     	; 0x1e74 <strcmp+0x4>
    1e7e:	99 0b       	sbc	r25, r25
    1e80:	08 95       	ret

00001e82 <strcpy>:
    1e82:	fb 01       	movw	r30, r22
    1e84:	dc 01       	movw	r26, r24
    1e86:	01 90       	ld	r0, Z+
    1e88:	0d 92       	st	X+, r0
    1e8a:	00 20       	and	r0, r0
    1e8c:	e1 f7       	brne	.-8      	; 0x1e86 <strcpy+0x4>
    1e8e:	08 95       	ret

00001e90 <__mulhi_const_10>:
    1e90:	7a e0       	ldi	r23, 0x0A	; 10
    1e92:	97 9f       	mul	r25, r23
    1e94:	90 2d       	mov	r25, r0
    1e96:	87 9f       	mul	r24, r23
    1e98:	80 2d       	mov	r24, r0
    1e9a:	91 0d       	add	r25, r1
    1e9c:	11 24       	eor	r1, r1
    1e9e:	08 95       	ret

00001ea0 <sprintf>:
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	cf 93       	push	r28
    1ea6:	df 93       	push	r29
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	2e 97       	sbiw	r28, 0x0e	; 14
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	de bf       	out	0x3e, r29	; 62
    1eb4:	0f be       	out	0x3f, r0	; 63
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	0d 89       	ldd	r16, Y+21	; 0x15
    1eba:	1e 89       	ldd	r17, Y+22	; 0x16
    1ebc:	86 e0       	ldi	r24, 0x06	; 6
    1ebe:	8c 83       	std	Y+4, r24	; 0x04
    1ec0:	1a 83       	std	Y+2, r17	; 0x02
    1ec2:	09 83       	std	Y+1, r16	; 0x01
    1ec4:	8f ef       	ldi	r24, 0xFF	; 255
    1ec6:	9f e7       	ldi	r25, 0x7F	; 127
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	ae 01       	movw	r20, r28
    1ece:	47 5e       	subi	r20, 0xE7	; 231
    1ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed2:	6f 89       	ldd	r22, Y+23	; 0x17
    1ed4:	78 8d       	ldd	r23, Y+24	; 0x18
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	01 96       	adiw	r24, 0x01	; 1
    1eda:	10 d0       	rcall	.+32     	; 0x1efc <vfprintf>
    1edc:	ef 81       	ldd	r30, Y+7	; 0x07
    1ede:	f8 85       	ldd	r31, Y+8	; 0x08
    1ee0:	e0 0f       	add	r30, r16
    1ee2:	f1 1f       	adc	r31, r17
    1ee4:	10 82       	st	Z, r1
    1ee6:	2e 96       	adiw	r28, 0x0e	; 14
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	f8 94       	cli
    1eec:	de bf       	out	0x3e, r29	; 62
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	cd bf       	out	0x3d, r28	; 61
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	08 95       	ret

00001efc <vfprintf>:
    1efc:	2f 92       	push	r2
    1efe:	3f 92       	push	r3
    1f00:	4f 92       	push	r4
    1f02:	5f 92       	push	r5
    1f04:	6f 92       	push	r6
    1f06:	7f 92       	push	r7
    1f08:	8f 92       	push	r8
    1f0a:	9f 92       	push	r9
    1f0c:	af 92       	push	r10
    1f0e:	bf 92       	push	r11
    1f10:	cf 92       	push	r12
    1f12:	df 92       	push	r13
    1f14:	ef 92       	push	r14
    1f16:	ff 92       	push	r15
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	2b 97       	sbiw	r28, 0x0b	; 11
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	6c 01       	movw	r12, r24
    1f32:	7b 01       	movw	r14, r22
    1f34:	8a 01       	movw	r16, r20
    1f36:	fc 01       	movw	r30, r24
    1f38:	17 82       	std	Z+7, r1	; 0x07
    1f3a:	16 82       	std	Z+6, r1	; 0x06
    1f3c:	83 81       	ldd	r24, Z+3	; 0x03
    1f3e:	81 ff       	sbrs	r24, 1
    1f40:	bf c1       	rjmp	.+894    	; 0x22c0 <vfprintf+0x3c4>
    1f42:	ce 01       	movw	r24, r28
    1f44:	01 96       	adiw	r24, 0x01	; 1
    1f46:	3c 01       	movw	r6, r24
    1f48:	f6 01       	movw	r30, r12
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	f7 01       	movw	r30, r14
    1f4e:	93 fd       	sbrc	r25, 3
    1f50:	85 91       	lpm	r24, Z+
    1f52:	93 ff       	sbrs	r25, 3
    1f54:	81 91       	ld	r24, Z+
    1f56:	7f 01       	movw	r14, r30
    1f58:	88 23       	and	r24, r24
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <vfprintf+0x62>
    1f5c:	ad c1       	rjmp	.+858    	; 0x22b8 <vfprintf+0x3bc>
    1f5e:	85 32       	cpi	r24, 0x25	; 37
    1f60:	39 f4       	brne	.+14     	; 0x1f70 <vfprintf+0x74>
    1f62:	93 fd       	sbrc	r25, 3
    1f64:	85 91       	lpm	r24, Z+
    1f66:	93 ff       	sbrs	r25, 3
    1f68:	81 91       	ld	r24, Z+
    1f6a:	7f 01       	movw	r14, r30
    1f6c:	85 32       	cpi	r24, 0x25	; 37
    1f6e:	21 f4       	brne	.+8      	; 0x1f78 <vfprintf+0x7c>
    1f70:	b6 01       	movw	r22, r12
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	d6 d1       	rcall	.+940    	; 0x2322 <fputc>
    1f76:	e8 cf       	rjmp	.-48     	; 0x1f48 <vfprintf+0x4c>
    1f78:	91 2c       	mov	r9, r1
    1f7a:	21 2c       	mov	r2, r1
    1f7c:	31 2c       	mov	r3, r1
    1f7e:	ff e1       	ldi	r31, 0x1F	; 31
    1f80:	f3 15       	cp	r31, r3
    1f82:	d8 f0       	brcs	.+54     	; 0x1fba <vfprintf+0xbe>
    1f84:	8b 32       	cpi	r24, 0x2B	; 43
    1f86:	79 f0       	breq	.+30     	; 0x1fa6 <vfprintf+0xaa>
    1f88:	38 f4       	brcc	.+14     	; 0x1f98 <vfprintf+0x9c>
    1f8a:	80 32       	cpi	r24, 0x20	; 32
    1f8c:	79 f0       	breq	.+30     	; 0x1fac <vfprintf+0xb0>
    1f8e:	83 32       	cpi	r24, 0x23	; 35
    1f90:	a1 f4       	brne	.+40     	; 0x1fba <vfprintf+0xbe>
    1f92:	23 2d       	mov	r18, r3
    1f94:	20 61       	ori	r18, 0x10	; 16
    1f96:	1d c0       	rjmp	.+58     	; 0x1fd2 <vfprintf+0xd6>
    1f98:	8d 32       	cpi	r24, 0x2D	; 45
    1f9a:	61 f0       	breq	.+24     	; 0x1fb4 <vfprintf+0xb8>
    1f9c:	80 33       	cpi	r24, 0x30	; 48
    1f9e:	69 f4       	brne	.+26     	; 0x1fba <vfprintf+0xbe>
    1fa0:	23 2d       	mov	r18, r3
    1fa2:	21 60       	ori	r18, 0x01	; 1
    1fa4:	16 c0       	rjmp	.+44     	; 0x1fd2 <vfprintf+0xd6>
    1fa6:	83 2d       	mov	r24, r3
    1fa8:	82 60       	ori	r24, 0x02	; 2
    1faa:	38 2e       	mov	r3, r24
    1fac:	e3 2d       	mov	r30, r3
    1fae:	e4 60       	ori	r30, 0x04	; 4
    1fb0:	3e 2e       	mov	r3, r30
    1fb2:	2a c0       	rjmp	.+84     	; 0x2008 <vfprintf+0x10c>
    1fb4:	f3 2d       	mov	r31, r3
    1fb6:	f8 60       	ori	r31, 0x08	; 8
    1fb8:	1d c0       	rjmp	.+58     	; 0x1ff4 <vfprintf+0xf8>
    1fba:	37 fc       	sbrc	r3, 7
    1fbc:	2d c0       	rjmp	.+90     	; 0x2018 <vfprintf+0x11c>
    1fbe:	20 ed       	ldi	r18, 0xD0	; 208
    1fc0:	28 0f       	add	r18, r24
    1fc2:	2a 30       	cpi	r18, 0x0A	; 10
    1fc4:	40 f0       	brcs	.+16     	; 0x1fd6 <vfprintf+0xda>
    1fc6:	8e 32       	cpi	r24, 0x2E	; 46
    1fc8:	b9 f4       	brne	.+46     	; 0x1ff8 <vfprintf+0xfc>
    1fca:	36 fc       	sbrc	r3, 6
    1fcc:	75 c1       	rjmp	.+746    	; 0x22b8 <vfprintf+0x3bc>
    1fce:	23 2d       	mov	r18, r3
    1fd0:	20 64       	ori	r18, 0x40	; 64
    1fd2:	32 2e       	mov	r3, r18
    1fd4:	19 c0       	rjmp	.+50     	; 0x2008 <vfprintf+0x10c>
    1fd6:	36 fe       	sbrs	r3, 6
    1fd8:	06 c0       	rjmp	.+12     	; 0x1fe6 <vfprintf+0xea>
    1fda:	8a e0       	ldi	r24, 0x0A	; 10
    1fdc:	98 9e       	mul	r9, r24
    1fde:	20 0d       	add	r18, r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	92 2e       	mov	r9, r18
    1fe4:	11 c0       	rjmp	.+34     	; 0x2008 <vfprintf+0x10c>
    1fe6:	ea e0       	ldi	r30, 0x0A	; 10
    1fe8:	2e 9e       	mul	r2, r30
    1fea:	20 0d       	add	r18, r0
    1fec:	11 24       	eor	r1, r1
    1fee:	22 2e       	mov	r2, r18
    1ff0:	f3 2d       	mov	r31, r3
    1ff2:	f0 62       	ori	r31, 0x20	; 32
    1ff4:	3f 2e       	mov	r3, r31
    1ff6:	08 c0       	rjmp	.+16     	; 0x2008 <vfprintf+0x10c>
    1ff8:	8c 36       	cpi	r24, 0x6C	; 108
    1ffa:	21 f4       	brne	.+8      	; 0x2004 <vfprintf+0x108>
    1ffc:	83 2d       	mov	r24, r3
    1ffe:	80 68       	ori	r24, 0x80	; 128
    2000:	38 2e       	mov	r3, r24
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <vfprintf+0x10c>
    2004:	88 36       	cpi	r24, 0x68	; 104
    2006:	41 f4       	brne	.+16     	; 0x2018 <vfprintf+0x11c>
    2008:	f7 01       	movw	r30, r14
    200a:	93 fd       	sbrc	r25, 3
    200c:	85 91       	lpm	r24, Z+
    200e:	93 ff       	sbrs	r25, 3
    2010:	81 91       	ld	r24, Z+
    2012:	7f 01       	movw	r14, r30
    2014:	81 11       	cpse	r24, r1
    2016:	b3 cf       	rjmp	.-154    	; 0x1f7e <vfprintf+0x82>
    2018:	98 2f       	mov	r25, r24
    201a:	9f 7d       	andi	r25, 0xDF	; 223
    201c:	95 54       	subi	r25, 0x45	; 69
    201e:	93 30       	cpi	r25, 0x03	; 3
    2020:	28 f4       	brcc	.+10     	; 0x202c <vfprintf+0x130>
    2022:	0c 5f       	subi	r16, 0xFC	; 252
    2024:	1f 4f       	sbci	r17, 0xFF	; 255
    2026:	9f e3       	ldi	r25, 0x3F	; 63
    2028:	99 83       	std	Y+1, r25	; 0x01
    202a:	0d c0       	rjmp	.+26     	; 0x2046 <vfprintf+0x14a>
    202c:	83 36       	cpi	r24, 0x63	; 99
    202e:	31 f0       	breq	.+12     	; 0x203c <vfprintf+0x140>
    2030:	83 37       	cpi	r24, 0x73	; 115
    2032:	71 f0       	breq	.+28     	; 0x2050 <vfprintf+0x154>
    2034:	83 35       	cpi	r24, 0x53	; 83
    2036:	09 f0       	breq	.+2      	; 0x203a <vfprintf+0x13e>
    2038:	55 c0       	rjmp	.+170    	; 0x20e4 <vfprintf+0x1e8>
    203a:	20 c0       	rjmp	.+64     	; 0x207c <vfprintf+0x180>
    203c:	f8 01       	movw	r30, r16
    203e:	80 81       	ld	r24, Z
    2040:	89 83       	std	Y+1, r24	; 0x01
    2042:	0e 5f       	subi	r16, 0xFE	; 254
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	88 24       	eor	r8, r8
    2048:	83 94       	inc	r8
    204a:	91 2c       	mov	r9, r1
    204c:	53 01       	movw	r10, r6
    204e:	12 c0       	rjmp	.+36     	; 0x2074 <vfprintf+0x178>
    2050:	28 01       	movw	r4, r16
    2052:	f2 e0       	ldi	r31, 0x02	; 2
    2054:	4f 0e       	add	r4, r31
    2056:	51 1c       	adc	r5, r1
    2058:	f8 01       	movw	r30, r16
    205a:	a0 80       	ld	r10, Z
    205c:	b1 80       	ldd	r11, Z+1	; 0x01
    205e:	36 fe       	sbrs	r3, 6
    2060:	03 c0       	rjmp	.+6      	; 0x2068 <vfprintf+0x16c>
    2062:	69 2d       	mov	r22, r9
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	02 c0       	rjmp	.+4      	; 0x206c <vfprintf+0x170>
    2068:	6f ef       	ldi	r22, 0xFF	; 255
    206a:	7f ef       	ldi	r23, 0xFF	; 255
    206c:	c5 01       	movw	r24, r10
    206e:	4e d1       	rcall	.+668    	; 0x230c <strnlen>
    2070:	4c 01       	movw	r8, r24
    2072:	82 01       	movw	r16, r4
    2074:	f3 2d       	mov	r31, r3
    2076:	ff 77       	andi	r31, 0x7F	; 127
    2078:	3f 2e       	mov	r3, r31
    207a:	15 c0       	rjmp	.+42     	; 0x20a6 <vfprintf+0x1aa>
    207c:	28 01       	movw	r4, r16
    207e:	22 e0       	ldi	r18, 0x02	; 2
    2080:	42 0e       	add	r4, r18
    2082:	51 1c       	adc	r5, r1
    2084:	f8 01       	movw	r30, r16
    2086:	a0 80       	ld	r10, Z
    2088:	b1 80       	ldd	r11, Z+1	; 0x01
    208a:	36 fe       	sbrs	r3, 6
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <vfprintf+0x198>
    208e:	69 2d       	mov	r22, r9
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <vfprintf+0x19c>
    2094:	6f ef       	ldi	r22, 0xFF	; 255
    2096:	7f ef       	ldi	r23, 0xFF	; 255
    2098:	c5 01       	movw	r24, r10
    209a:	2d d1       	rcall	.+602    	; 0x22f6 <strnlen_P>
    209c:	4c 01       	movw	r8, r24
    209e:	f3 2d       	mov	r31, r3
    20a0:	f0 68       	ori	r31, 0x80	; 128
    20a2:	3f 2e       	mov	r3, r31
    20a4:	82 01       	movw	r16, r4
    20a6:	33 fc       	sbrc	r3, 3
    20a8:	19 c0       	rjmp	.+50     	; 0x20dc <vfprintf+0x1e0>
    20aa:	82 2d       	mov	r24, r2
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	88 16       	cp	r8, r24
    20b0:	99 06       	cpc	r9, r25
    20b2:	a0 f4       	brcc	.+40     	; 0x20dc <vfprintf+0x1e0>
    20b4:	b6 01       	movw	r22, r12
    20b6:	80 e2       	ldi	r24, 0x20	; 32
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	33 d1       	rcall	.+614    	; 0x2322 <fputc>
    20bc:	2a 94       	dec	r2
    20be:	f5 cf       	rjmp	.-22     	; 0x20aa <vfprintf+0x1ae>
    20c0:	f5 01       	movw	r30, r10
    20c2:	37 fc       	sbrc	r3, 7
    20c4:	85 91       	lpm	r24, Z+
    20c6:	37 fe       	sbrs	r3, 7
    20c8:	81 91       	ld	r24, Z+
    20ca:	5f 01       	movw	r10, r30
    20cc:	b6 01       	movw	r22, r12
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	28 d1       	rcall	.+592    	; 0x2322 <fputc>
    20d2:	21 10       	cpse	r2, r1
    20d4:	2a 94       	dec	r2
    20d6:	21 e0       	ldi	r18, 0x01	; 1
    20d8:	82 1a       	sub	r8, r18
    20da:	91 08       	sbc	r9, r1
    20dc:	81 14       	cp	r8, r1
    20de:	91 04       	cpc	r9, r1
    20e0:	79 f7       	brne	.-34     	; 0x20c0 <vfprintf+0x1c4>
    20e2:	e1 c0       	rjmp	.+450    	; 0x22a6 <vfprintf+0x3aa>
    20e4:	84 36       	cpi	r24, 0x64	; 100
    20e6:	11 f0       	breq	.+4      	; 0x20ec <vfprintf+0x1f0>
    20e8:	89 36       	cpi	r24, 0x69	; 105
    20ea:	39 f5       	brne	.+78     	; 0x213a <vfprintf+0x23e>
    20ec:	f8 01       	movw	r30, r16
    20ee:	37 fe       	sbrs	r3, 7
    20f0:	07 c0       	rjmp	.+14     	; 0x2100 <vfprintf+0x204>
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	0c 5f       	subi	r16, 0xFC	; 252
    20fc:	1f 4f       	sbci	r17, 0xFF	; 255
    20fe:	08 c0       	rjmp	.+16     	; 0x2110 <vfprintf+0x214>
    2100:	60 81       	ld	r22, Z
    2102:	71 81       	ldd	r23, Z+1	; 0x01
    2104:	07 2e       	mov	r0, r23
    2106:	00 0c       	add	r0, r0
    2108:	88 0b       	sbc	r24, r24
    210a:	99 0b       	sbc	r25, r25
    210c:	0e 5f       	subi	r16, 0xFE	; 254
    210e:	1f 4f       	sbci	r17, 0xFF	; 255
    2110:	f3 2d       	mov	r31, r3
    2112:	ff 76       	andi	r31, 0x6F	; 111
    2114:	3f 2e       	mov	r3, r31
    2116:	97 ff       	sbrs	r25, 7
    2118:	09 c0       	rjmp	.+18     	; 0x212c <vfprintf+0x230>
    211a:	90 95       	com	r25
    211c:	80 95       	com	r24
    211e:	70 95       	com	r23
    2120:	61 95       	neg	r22
    2122:	7f 4f       	sbci	r23, 0xFF	; 255
    2124:	8f 4f       	sbci	r24, 0xFF	; 255
    2126:	9f 4f       	sbci	r25, 0xFF	; 255
    2128:	f0 68       	ori	r31, 0x80	; 128
    212a:	3f 2e       	mov	r3, r31
    212c:	2a e0       	ldi	r18, 0x0A	; 10
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	a3 01       	movw	r20, r6
    2132:	33 d1       	rcall	.+614    	; 0x239a <__ultoa_invert>
    2134:	88 2e       	mov	r8, r24
    2136:	86 18       	sub	r8, r6
    2138:	44 c0       	rjmp	.+136    	; 0x21c2 <vfprintf+0x2c6>
    213a:	85 37       	cpi	r24, 0x75	; 117
    213c:	31 f4       	brne	.+12     	; 0x214a <vfprintf+0x24e>
    213e:	23 2d       	mov	r18, r3
    2140:	2f 7e       	andi	r18, 0xEF	; 239
    2142:	b2 2e       	mov	r11, r18
    2144:	2a e0       	ldi	r18, 0x0A	; 10
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	25 c0       	rjmp	.+74     	; 0x2194 <vfprintf+0x298>
    214a:	93 2d       	mov	r25, r3
    214c:	99 7f       	andi	r25, 0xF9	; 249
    214e:	b9 2e       	mov	r11, r25
    2150:	8f 36       	cpi	r24, 0x6F	; 111
    2152:	c1 f0       	breq	.+48     	; 0x2184 <vfprintf+0x288>
    2154:	18 f4       	brcc	.+6      	; 0x215c <vfprintf+0x260>
    2156:	88 35       	cpi	r24, 0x58	; 88
    2158:	79 f0       	breq	.+30     	; 0x2178 <vfprintf+0x27c>
    215a:	ae c0       	rjmp	.+348    	; 0x22b8 <vfprintf+0x3bc>
    215c:	80 37       	cpi	r24, 0x70	; 112
    215e:	19 f0       	breq	.+6      	; 0x2166 <vfprintf+0x26a>
    2160:	88 37       	cpi	r24, 0x78	; 120
    2162:	21 f0       	breq	.+8      	; 0x216c <vfprintf+0x270>
    2164:	a9 c0       	rjmp	.+338    	; 0x22b8 <vfprintf+0x3bc>
    2166:	e9 2f       	mov	r30, r25
    2168:	e0 61       	ori	r30, 0x10	; 16
    216a:	be 2e       	mov	r11, r30
    216c:	b4 fe       	sbrs	r11, 4
    216e:	0d c0       	rjmp	.+26     	; 0x218a <vfprintf+0x28e>
    2170:	fb 2d       	mov	r31, r11
    2172:	f4 60       	ori	r31, 0x04	; 4
    2174:	bf 2e       	mov	r11, r31
    2176:	09 c0       	rjmp	.+18     	; 0x218a <vfprintf+0x28e>
    2178:	34 fe       	sbrs	r3, 4
    217a:	0a c0       	rjmp	.+20     	; 0x2190 <vfprintf+0x294>
    217c:	29 2f       	mov	r18, r25
    217e:	26 60       	ori	r18, 0x06	; 6
    2180:	b2 2e       	mov	r11, r18
    2182:	06 c0       	rjmp	.+12     	; 0x2190 <vfprintf+0x294>
    2184:	28 e0       	ldi	r18, 0x08	; 8
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	05 c0       	rjmp	.+10     	; 0x2194 <vfprintf+0x298>
    218a:	20 e1       	ldi	r18, 0x10	; 16
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <vfprintf+0x298>
    2190:	20 e1       	ldi	r18, 0x10	; 16
    2192:	32 e0       	ldi	r19, 0x02	; 2
    2194:	f8 01       	movw	r30, r16
    2196:	b7 fe       	sbrs	r11, 7
    2198:	07 c0       	rjmp	.+14     	; 0x21a8 <vfprintf+0x2ac>
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	0c 5f       	subi	r16, 0xFC	; 252
    21a4:	1f 4f       	sbci	r17, 0xFF	; 255
    21a6:	06 c0       	rjmp	.+12     	; 0x21b4 <vfprintf+0x2b8>
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 5f       	subi	r16, 0xFE	; 254
    21b2:	1f 4f       	sbci	r17, 0xFF	; 255
    21b4:	a3 01       	movw	r20, r6
    21b6:	f1 d0       	rcall	.+482    	; 0x239a <__ultoa_invert>
    21b8:	88 2e       	mov	r8, r24
    21ba:	86 18       	sub	r8, r6
    21bc:	fb 2d       	mov	r31, r11
    21be:	ff 77       	andi	r31, 0x7F	; 127
    21c0:	3f 2e       	mov	r3, r31
    21c2:	36 fe       	sbrs	r3, 6
    21c4:	0d c0       	rjmp	.+26     	; 0x21e0 <vfprintf+0x2e4>
    21c6:	23 2d       	mov	r18, r3
    21c8:	2e 7f       	andi	r18, 0xFE	; 254
    21ca:	a2 2e       	mov	r10, r18
    21cc:	89 14       	cp	r8, r9
    21ce:	58 f4       	brcc	.+22     	; 0x21e6 <vfprintf+0x2ea>
    21d0:	34 fe       	sbrs	r3, 4
    21d2:	0b c0       	rjmp	.+22     	; 0x21ea <vfprintf+0x2ee>
    21d4:	32 fc       	sbrc	r3, 2
    21d6:	09 c0       	rjmp	.+18     	; 0x21ea <vfprintf+0x2ee>
    21d8:	83 2d       	mov	r24, r3
    21da:	8e 7e       	andi	r24, 0xEE	; 238
    21dc:	a8 2e       	mov	r10, r24
    21de:	05 c0       	rjmp	.+10     	; 0x21ea <vfprintf+0x2ee>
    21e0:	b8 2c       	mov	r11, r8
    21e2:	a3 2c       	mov	r10, r3
    21e4:	03 c0       	rjmp	.+6      	; 0x21ec <vfprintf+0x2f0>
    21e6:	b8 2c       	mov	r11, r8
    21e8:	01 c0       	rjmp	.+2      	; 0x21ec <vfprintf+0x2f0>
    21ea:	b9 2c       	mov	r11, r9
    21ec:	a4 fe       	sbrs	r10, 4
    21ee:	0f c0       	rjmp	.+30     	; 0x220e <vfprintf+0x312>
    21f0:	fe 01       	movw	r30, r28
    21f2:	e8 0d       	add	r30, r8
    21f4:	f1 1d       	adc	r31, r1
    21f6:	80 81       	ld	r24, Z
    21f8:	80 33       	cpi	r24, 0x30	; 48
    21fa:	21 f4       	brne	.+8      	; 0x2204 <vfprintf+0x308>
    21fc:	9a 2d       	mov	r25, r10
    21fe:	99 7e       	andi	r25, 0xE9	; 233
    2200:	a9 2e       	mov	r10, r25
    2202:	09 c0       	rjmp	.+18     	; 0x2216 <vfprintf+0x31a>
    2204:	a2 fe       	sbrs	r10, 2
    2206:	06 c0       	rjmp	.+12     	; 0x2214 <vfprintf+0x318>
    2208:	b3 94       	inc	r11
    220a:	b3 94       	inc	r11
    220c:	04 c0       	rjmp	.+8      	; 0x2216 <vfprintf+0x31a>
    220e:	8a 2d       	mov	r24, r10
    2210:	86 78       	andi	r24, 0x86	; 134
    2212:	09 f0       	breq	.+2      	; 0x2216 <vfprintf+0x31a>
    2214:	b3 94       	inc	r11
    2216:	a3 fc       	sbrc	r10, 3
    2218:	10 c0       	rjmp	.+32     	; 0x223a <vfprintf+0x33e>
    221a:	a0 fe       	sbrs	r10, 0
    221c:	06 c0       	rjmp	.+12     	; 0x222a <vfprintf+0x32e>
    221e:	b2 14       	cp	r11, r2
    2220:	80 f4       	brcc	.+32     	; 0x2242 <vfprintf+0x346>
    2222:	28 0c       	add	r2, r8
    2224:	92 2c       	mov	r9, r2
    2226:	9b 18       	sub	r9, r11
    2228:	0d c0       	rjmp	.+26     	; 0x2244 <vfprintf+0x348>
    222a:	b2 14       	cp	r11, r2
    222c:	58 f4       	brcc	.+22     	; 0x2244 <vfprintf+0x348>
    222e:	b6 01       	movw	r22, r12
    2230:	80 e2       	ldi	r24, 0x20	; 32
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	76 d0       	rcall	.+236    	; 0x2322 <fputc>
    2236:	b3 94       	inc	r11
    2238:	f8 cf       	rjmp	.-16     	; 0x222a <vfprintf+0x32e>
    223a:	b2 14       	cp	r11, r2
    223c:	18 f4       	brcc	.+6      	; 0x2244 <vfprintf+0x348>
    223e:	2b 18       	sub	r2, r11
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <vfprintf+0x34a>
    2242:	98 2c       	mov	r9, r8
    2244:	21 2c       	mov	r2, r1
    2246:	a4 fe       	sbrs	r10, 4
    2248:	0f c0       	rjmp	.+30     	; 0x2268 <vfprintf+0x36c>
    224a:	b6 01       	movw	r22, r12
    224c:	80 e3       	ldi	r24, 0x30	; 48
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	68 d0       	rcall	.+208    	; 0x2322 <fputc>
    2252:	a2 fe       	sbrs	r10, 2
    2254:	16 c0       	rjmp	.+44     	; 0x2282 <vfprintf+0x386>
    2256:	a1 fc       	sbrc	r10, 1
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <vfprintf+0x364>
    225a:	88 e7       	ldi	r24, 0x78	; 120
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <vfprintf+0x368>
    2260:	88 e5       	ldi	r24, 0x58	; 88
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	b6 01       	movw	r22, r12
    2266:	0c c0       	rjmp	.+24     	; 0x2280 <vfprintf+0x384>
    2268:	8a 2d       	mov	r24, r10
    226a:	86 78       	andi	r24, 0x86	; 134
    226c:	51 f0       	breq	.+20     	; 0x2282 <vfprintf+0x386>
    226e:	a1 fe       	sbrs	r10, 1
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <vfprintf+0x37a>
    2272:	8b e2       	ldi	r24, 0x2B	; 43
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <vfprintf+0x37c>
    2276:	80 e2       	ldi	r24, 0x20	; 32
    2278:	a7 fc       	sbrc	r10, 7
    227a:	8d e2       	ldi	r24, 0x2D	; 45
    227c:	b6 01       	movw	r22, r12
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	50 d0       	rcall	.+160    	; 0x2322 <fputc>
    2282:	89 14       	cp	r8, r9
    2284:	30 f4       	brcc	.+12     	; 0x2292 <vfprintf+0x396>
    2286:	b6 01       	movw	r22, r12
    2288:	80 e3       	ldi	r24, 0x30	; 48
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	4a d0       	rcall	.+148    	; 0x2322 <fputc>
    228e:	9a 94       	dec	r9
    2290:	f8 cf       	rjmp	.-16     	; 0x2282 <vfprintf+0x386>
    2292:	8a 94       	dec	r8
    2294:	f3 01       	movw	r30, r6
    2296:	e8 0d       	add	r30, r8
    2298:	f1 1d       	adc	r31, r1
    229a:	80 81       	ld	r24, Z
    229c:	b6 01       	movw	r22, r12
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	40 d0       	rcall	.+128    	; 0x2322 <fputc>
    22a2:	81 10       	cpse	r8, r1
    22a4:	f6 cf       	rjmp	.-20     	; 0x2292 <vfprintf+0x396>
    22a6:	22 20       	and	r2, r2
    22a8:	09 f4       	brne	.+2      	; 0x22ac <vfprintf+0x3b0>
    22aa:	4e ce       	rjmp	.-868    	; 0x1f48 <vfprintf+0x4c>
    22ac:	b6 01       	movw	r22, r12
    22ae:	80 e2       	ldi	r24, 0x20	; 32
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	37 d0       	rcall	.+110    	; 0x2322 <fputc>
    22b4:	2a 94       	dec	r2
    22b6:	f7 cf       	rjmp	.-18     	; 0x22a6 <vfprintf+0x3aa>
    22b8:	f6 01       	movw	r30, r12
    22ba:	86 81       	ldd	r24, Z+6	; 0x06
    22bc:	97 81       	ldd	r25, Z+7	; 0x07
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <vfprintf+0x3c8>
    22c0:	8f ef       	ldi	r24, 0xFF	; 255
    22c2:	9f ef       	ldi	r25, 0xFF	; 255
    22c4:	2b 96       	adiw	r28, 0x0b	; 11
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	1f 91       	pop	r17
    22d6:	0f 91       	pop	r16
    22d8:	ff 90       	pop	r15
    22da:	ef 90       	pop	r14
    22dc:	df 90       	pop	r13
    22de:	cf 90       	pop	r12
    22e0:	bf 90       	pop	r11
    22e2:	af 90       	pop	r10
    22e4:	9f 90       	pop	r9
    22e6:	8f 90       	pop	r8
    22e8:	7f 90       	pop	r7
    22ea:	6f 90       	pop	r6
    22ec:	5f 90       	pop	r5
    22ee:	4f 90       	pop	r4
    22f0:	3f 90       	pop	r3
    22f2:	2f 90       	pop	r2
    22f4:	08 95       	ret

000022f6 <strnlen_P>:
    22f6:	fc 01       	movw	r30, r24
    22f8:	05 90       	lpm	r0, Z+
    22fa:	61 50       	subi	r22, 0x01	; 1
    22fc:	70 40       	sbci	r23, 0x00	; 0
    22fe:	01 10       	cpse	r0, r1
    2300:	d8 f7       	brcc	.-10     	; 0x22f8 <strnlen_P+0x2>
    2302:	80 95       	com	r24
    2304:	90 95       	com	r25
    2306:	8e 0f       	add	r24, r30
    2308:	9f 1f       	adc	r25, r31
    230a:	08 95       	ret

0000230c <strnlen>:
    230c:	fc 01       	movw	r30, r24
    230e:	61 50       	subi	r22, 0x01	; 1
    2310:	70 40       	sbci	r23, 0x00	; 0
    2312:	01 90       	ld	r0, Z+
    2314:	01 10       	cpse	r0, r1
    2316:	d8 f7       	brcc	.-10     	; 0x230e <strnlen+0x2>
    2318:	80 95       	com	r24
    231a:	90 95       	com	r25
    231c:	8e 0f       	add	r24, r30
    231e:	9f 1f       	adc	r25, r31
    2320:	08 95       	ret

00002322 <fputc>:
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	fb 01       	movw	r30, r22
    232c:	23 81       	ldd	r18, Z+3	; 0x03
    232e:	21 fd       	sbrc	r18, 1
    2330:	03 c0       	rjmp	.+6      	; 0x2338 <fputc+0x16>
    2332:	8f ef       	ldi	r24, 0xFF	; 255
    2334:	9f ef       	ldi	r25, 0xFF	; 255
    2336:	2c c0       	rjmp	.+88     	; 0x2390 <fputc+0x6e>
    2338:	22 ff       	sbrs	r18, 2
    233a:	16 c0       	rjmp	.+44     	; 0x2368 <fputc+0x46>
    233c:	46 81       	ldd	r20, Z+6	; 0x06
    233e:	57 81       	ldd	r21, Z+7	; 0x07
    2340:	24 81       	ldd	r18, Z+4	; 0x04
    2342:	35 81       	ldd	r19, Z+5	; 0x05
    2344:	42 17       	cp	r20, r18
    2346:	53 07       	cpc	r21, r19
    2348:	44 f4       	brge	.+16     	; 0x235a <fputc+0x38>
    234a:	a0 81       	ld	r26, Z
    234c:	b1 81       	ldd	r27, Z+1	; 0x01
    234e:	9d 01       	movw	r18, r26
    2350:	2f 5f       	subi	r18, 0xFF	; 255
    2352:	3f 4f       	sbci	r19, 0xFF	; 255
    2354:	31 83       	std	Z+1, r19	; 0x01
    2356:	20 83       	st	Z, r18
    2358:	8c 93       	st	X, r24
    235a:	26 81       	ldd	r18, Z+6	; 0x06
    235c:	37 81       	ldd	r19, Z+7	; 0x07
    235e:	2f 5f       	subi	r18, 0xFF	; 255
    2360:	3f 4f       	sbci	r19, 0xFF	; 255
    2362:	37 83       	std	Z+7, r19	; 0x07
    2364:	26 83       	std	Z+6, r18	; 0x06
    2366:	14 c0       	rjmp	.+40     	; 0x2390 <fputc+0x6e>
    2368:	8b 01       	movw	r16, r22
    236a:	ec 01       	movw	r28, r24
    236c:	fb 01       	movw	r30, r22
    236e:	00 84       	ldd	r0, Z+8	; 0x08
    2370:	f1 85       	ldd	r31, Z+9	; 0x09
    2372:	e0 2d       	mov	r30, r0
    2374:	09 95       	icall
    2376:	89 2b       	or	r24, r25
    2378:	e1 f6       	brne	.-72     	; 0x2332 <fputc+0x10>
    237a:	d8 01       	movw	r26, r16
    237c:	16 96       	adiw	r26, 0x06	; 6
    237e:	8d 91       	ld	r24, X+
    2380:	9c 91       	ld	r25, X
    2382:	17 97       	sbiw	r26, 0x07	; 7
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	17 96       	adiw	r26, 0x07	; 7
    2388:	9c 93       	st	X, r25
    238a:	8e 93       	st	-X, r24
    238c:	16 97       	sbiw	r26, 0x06	; 6
    238e:	ce 01       	movw	r24, r28
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	08 95       	ret

0000239a <__ultoa_invert>:
    239a:	fa 01       	movw	r30, r20
    239c:	aa 27       	eor	r26, r26
    239e:	28 30       	cpi	r18, 0x08	; 8
    23a0:	51 f1       	breq	.+84     	; 0x23f6 <__ultoa_invert+0x5c>
    23a2:	20 31       	cpi	r18, 0x10	; 16
    23a4:	81 f1       	breq	.+96     	; 0x2406 <__ultoa_invert+0x6c>
    23a6:	e8 94       	clt
    23a8:	6f 93       	push	r22
    23aa:	6e 7f       	andi	r22, 0xFE	; 254
    23ac:	6e 5f       	subi	r22, 0xFE	; 254
    23ae:	7f 4f       	sbci	r23, 0xFF	; 255
    23b0:	8f 4f       	sbci	r24, 0xFF	; 255
    23b2:	9f 4f       	sbci	r25, 0xFF	; 255
    23b4:	af 4f       	sbci	r26, 0xFF	; 255
    23b6:	b1 e0       	ldi	r27, 0x01	; 1
    23b8:	3e d0       	rcall	.+124    	; 0x2436 <__ultoa_invert+0x9c>
    23ba:	b4 e0       	ldi	r27, 0x04	; 4
    23bc:	3c d0       	rcall	.+120    	; 0x2436 <__ultoa_invert+0x9c>
    23be:	67 0f       	add	r22, r23
    23c0:	78 1f       	adc	r23, r24
    23c2:	89 1f       	adc	r24, r25
    23c4:	9a 1f       	adc	r25, r26
    23c6:	a1 1d       	adc	r26, r1
    23c8:	68 0f       	add	r22, r24
    23ca:	79 1f       	adc	r23, r25
    23cc:	8a 1f       	adc	r24, r26
    23ce:	91 1d       	adc	r25, r1
    23d0:	a1 1d       	adc	r26, r1
    23d2:	6a 0f       	add	r22, r26
    23d4:	71 1d       	adc	r23, r1
    23d6:	81 1d       	adc	r24, r1
    23d8:	91 1d       	adc	r25, r1
    23da:	a1 1d       	adc	r26, r1
    23dc:	20 d0       	rcall	.+64     	; 0x241e <__ultoa_invert+0x84>
    23de:	09 f4       	brne	.+2      	; 0x23e2 <__ultoa_invert+0x48>
    23e0:	68 94       	set
    23e2:	3f 91       	pop	r19
    23e4:	2a e0       	ldi	r18, 0x0A	; 10
    23e6:	26 9f       	mul	r18, r22
    23e8:	11 24       	eor	r1, r1
    23ea:	30 19       	sub	r19, r0
    23ec:	30 5d       	subi	r19, 0xD0	; 208
    23ee:	31 93       	st	Z+, r19
    23f0:	de f6       	brtc	.-74     	; 0x23a8 <__ultoa_invert+0xe>
    23f2:	cf 01       	movw	r24, r30
    23f4:	08 95       	ret
    23f6:	46 2f       	mov	r20, r22
    23f8:	47 70       	andi	r20, 0x07	; 7
    23fa:	40 5d       	subi	r20, 0xD0	; 208
    23fc:	41 93       	st	Z+, r20
    23fe:	b3 e0       	ldi	r27, 0x03	; 3
    2400:	0f d0       	rcall	.+30     	; 0x2420 <__ultoa_invert+0x86>
    2402:	c9 f7       	brne	.-14     	; 0x23f6 <__ultoa_invert+0x5c>
    2404:	f6 cf       	rjmp	.-20     	; 0x23f2 <__ultoa_invert+0x58>
    2406:	46 2f       	mov	r20, r22
    2408:	4f 70       	andi	r20, 0x0F	; 15
    240a:	40 5d       	subi	r20, 0xD0	; 208
    240c:	4a 33       	cpi	r20, 0x3A	; 58
    240e:	18 f0       	brcs	.+6      	; 0x2416 <__ultoa_invert+0x7c>
    2410:	49 5d       	subi	r20, 0xD9	; 217
    2412:	31 fd       	sbrc	r19, 1
    2414:	40 52       	subi	r20, 0x20	; 32
    2416:	41 93       	st	Z+, r20
    2418:	02 d0       	rcall	.+4      	; 0x241e <__ultoa_invert+0x84>
    241a:	a9 f7       	brne	.-22     	; 0x2406 <__ultoa_invert+0x6c>
    241c:	ea cf       	rjmp	.-44     	; 0x23f2 <__ultoa_invert+0x58>
    241e:	b4 e0       	ldi	r27, 0x04	; 4
    2420:	a6 95       	lsr	r26
    2422:	97 95       	ror	r25
    2424:	87 95       	ror	r24
    2426:	77 95       	ror	r23
    2428:	67 95       	ror	r22
    242a:	ba 95       	dec	r27
    242c:	c9 f7       	brne	.-14     	; 0x2420 <__ultoa_invert+0x86>
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	61 05       	cpc	r22, r1
    2432:	71 05       	cpc	r23, r1
    2434:	08 95       	ret
    2436:	9b 01       	movw	r18, r22
    2438:	ac 01       	movw	r20, r24
    243a:	0a 2e       	mov	r0, r26
    243c:	06 94       	lsr	r0
    243e:	57 95       	ror	r21
    2440:	47 95       	ror	r20
    2442:	37 95       	ror	r19
    2444:	27 95       	ror	r18
    2446:	ba 95       	dec	r27
    2448:	c9 f7       	brne	.-14     	; 0x243c <__ultoa_invert+0xa2>
    244a:	62 0f       	add	r22, r18
    244c:	73 1f       	adc	r23, r19
    244e:	84 1f       	adc	r24, r20
    2450:	95 1f       	adc	r25, r21
    2452:	a0 1d       	adc	r26, r0
    2454:	08 95       	ret

00002456 <_exit>:
    2456:	f8 94       	cli

00002458 <__stop_program>:
    2458:	ff cf       	rjmp	.-2      	; 0x2458 <__stop_program>
