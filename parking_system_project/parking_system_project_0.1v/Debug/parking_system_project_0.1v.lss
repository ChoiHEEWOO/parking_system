
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000039a  00800100  0000257a  0000260e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000257a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000253  0080049a  0080049a  000029a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00002a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049c5  00000000  00000000  00002d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013fa  00000000  00000000  00007729  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002440  00000000  00000000  00008b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009e4  00000000  00000000  0000af64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ea7  00000000  00000000  0000b948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e52  00000000  00000000  0000c7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000f641  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__vector_14>
      3a:	00 00       	nop
      3c:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__vector_15>
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	73 c0       	rjmp	.+230    	; 0x130 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	6a c0       	rjmp	.+212    	; 0x14e <__vector_30>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e7       	ldi	r30, 0x7A	; 122
      a0:	f5 e2       	ldi	r31, 0x25	; 37
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 39       	cpi	r26, 0x9A	; 154
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	26 e0       	ldi	r18, 0x06	; 6
      b4:	aa e9       	ldi	r26, 0x9A	; 154
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 3e       	cpi	r26, 0xED	; 237
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	c8 d7       	rcall	.+3984   	; 0x1054 <main>
      c4:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_14>:


//0~9단계 까지 가능 
int set_step_speed(int _spd){
	return (11-_spd);
}
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	8f 93       	push	r24
      d6:	9f 93       	push	r25
      d8:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <servo_count>
      dc:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <servo_count+0x1>
      e0:	88 3c       	cpi	r24, 0xC8	; 200
      e2:	91 05       	cpc	r25, r1
      e4:	39 f4       	brne	.+14     	; 0xf4 <__vector_14+0x2a>
      e6:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <servo_count+0x1>
      ea:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <servo_count>
      ee:	8b b3       	in	r24, 0x1b	; 27
      f0:	89 60       	ori	r24, 0x09	; 9
      f2:	8b bb       	out	0x1b, r24	; 27
      f4:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <servo_count>
      f8:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <servo_count+0x1>
      fc:	0a 97       	sbiw	r24, 0x0a	; 10
      fe:	09 f4       	brne	.+2      	; 0x102 <__vector_14+0x38>
     100:	d8 98       	cbi	0x1b, 0	; 27
     102:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <servo_count>
     106:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <servo_count+0x1>
     10a:	44 97       	sbiw	r24, 0x14	; 20
     10c:	09 f4       	brne	.+2      	; 0x110 <__vector_14+0x46>
     10e:	db 98       	cbi	0x1b, 3	; 27
     110:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <servo_count>
     114:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <servo_count+0x1>
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <servo_count+0x1>
     11e:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <servo_count>
     122:	9f 91       	pop	r25
     124:	8f 91       	pop	r24
     126:	0f 90       	pop	r0
     128:	0f be       	out	0x3f, r0	; 63
     12a:	0f 90       	pop	r0
     12c:	1f 90       	pop	r1
     12e:	18 95       	reti

00000130 <__vector_18>:
     130:	1f 92       	push	r1
     132:	0f 92       	push	r0
     134:	0f b6       	in	r0, 0x3f	; 63
     136:	0f 92       	push	r0
     138:	11 24       	eor	r1, r1
     13a:	8f 93       	push	r24
     13c:	8c b1       	in	r24, 0x0c	; 12
     13e:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <uart0+0x66>
     142:	8f 91       	pop	r24
     144:	0f 90       	pop	r0
     146:	0f be       	out	0x3f, r0	; 63
     148:	0f 90       	pop	r0
     14a:	1f 90       	pop	r1
     14c:	18 95       	reti

0000014e <__vector_30>:
     14e:	1f 92       	push	r1
     150:	0f 92       	push	r0
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	0f 92       	push	r0
     156:	11 24       	eor	r1, r1
     158:	0b b6       	in	r0, 0x3b	; 59
     15a:	0f 92       	push	r0
     15c:	1f 93       	push	r17
     15e:	2f 93       	push	r18
     160:	3f 93       	push	r19
     162:	4f 93       	push	r20
     164:	5f 93       	push	r21
     166:	6f 93       	push	r22
     168:	7f 93       	push	r23
     16a:	8f 93       	push	r24
     16c:	9f 93       	push	r25
     16e:	af 93       	push	r26
     170:	bf 93       	push	r27
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	00 d0       	rcall	.+0      	; 0x17c <__vector_30+0x2e>
     17c:	1f 92       	push	r1
     17e:	cd b7       	in	r28, 0x3d	; 61
     180:	de b7       	in	r29, 0x3e	; 62
     182:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     186:	1e 33       	cpi	r17, 0x3E	; 62
     188:	21 f4       	brne	.+8      	; 0x192 <__vector_30+0x44>
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <esp8266_send_ready_flag>
     190:	42 c0       	rjmp	.+132    	; 0x216 <__vector_30+0xc8>
     192:	1f 34       	cpi	r17, 0x4F	; 79
     194:	21 f4       	brne	.+8      	; 0x19e <__vector_30+0x50>
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	80 93 aa 04 	sts	0x04AA, r24	; 0x8004aa <cnt.2458>
     19c:	3c c0       	rjmp	.+120    	; 0x216 <__vector_30+0xc8>
     19e:	1b 34       	cpi	r17, 0x4B	; 75
     1a0:	51 f4       	brne	.+20     	; 0x1b6 <__vector_30+0x68>
     1a2:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <cnt.2458>
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	09 f0       	breq	.+2      	; 0x1ac <__vector_30+0x5e>
     1aa:	87 c0       	rjmp	.+270    	; 0x2ba <__vector_30+0x16c>
     1ac:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <esp8266_return_result_flag>
     1b0:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <cnt.2458>
     1b4:	30 c0       	rjmp	.+96     	; 0x216 <__vector_30+0xc8>
     1b6:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <cnt.2458>
     1ba:	1b 32       	cpi	r17, 0x2B	; 43
     1bc:	21 f4       	brne	.+8      	; 0x1c6 <__vector_30+0x78>
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <parse_cnt.2459>
     1c4:	76 c0       	rjmp	.+236    	; 0x2b2 <__vector_30+0x164>
     1c6:	19 34       	cpi	r17, 0x49	; 73
     1c8:	41 f4       	brne	.+16     	; 0x1da <__vector_30+0x8c>
     1ca:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <parse_cnt.2459>
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	11 f5       	brne	.+68     	; 0x216 <__vector_30+0xc8>
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <parse_cnt.2459>
     1d8:	6c c0       	rjmp	.+216    	; 0x2b2 <__vector_30+0x164>
     1da:	10 35       	cpi	r17, 0x50	; 80
     1dc:	41 f4       	brne	.+16     	; 0x1ee <__vector_30+0xa0>
     1de:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <parse_cnt.2459>
     1e2:	82 30       	cpi	r24, 0x02	; 2
     1e4:	c1 f4       	brne	.+48     	; 0x216 <__vector_30+0xc8>
     1e6:	83 e0       	ldi	r24, 0x03	; 3
     1e8:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <parse_cnt.2459>
     1ec:	62 c0       	rjmp	.+196    	; 0x2b2 <__vector_30+0x164>
     1ee:	14 34       	cpi	r17, 0x44	; 68
     1f0:	41 f4       	brne	.+16     	; 0x202 <__vector_30+0xb4>
     1f2:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <parse_cnt.2459>
     1f6:	83 30       	cpi	r24, 0x03	; 3
     1f8:	71 f4       	brne	.+28     	; 0x216 <__vector_30+0xc8>
     1fa:	84 e0       	ldi	r24, 0x04	; 4
     1fc:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <parse_cnt.2459>
     200:	58 c0       	rjmp	.+176    	; 0x2b2 <__vector_30+0x164>
     202:	1c 32       	cpi	r17, 0x2C	; 44
     204:	41 f4       	brne	.+16     	; 0x216 <__vector_30+0xc8>
     206:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <parse_cnt.2459>
     20a:	84 30       	cpi	r24, 0x04	; 4
     20c:	21 f4       	brne	.+8      	; 0x216 <__vector_30+0xc8>
     20e:	85 e0       	ldi	r24, 0x05	; 5
     210:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <parse_cnt.2459>
     214:	4e c0       	rjmp	.+156    	; 0x2b2 <__vector_30+0x164>
     216:	80 91 a9 04 	lds	r24, 0x04A9	; 0x8004a9 <parse_cnt.2459>
     21a:	85 30       	cpi	r24, 0x05	; 5
     21c:	91 f4       	brne	.+36     	; 0x242 <__vector_30+0xf4>
     21e:	10 93 bf 04 	sts	0x04BF, r17	; 0x8004bf <receive_length>
     222:	86 e0       	ldi	r24, 0x06	; 6
     224:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <parse_cnt.2459>
     228:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <receive_length>
     22c:	89 83       	std	Y+1, r24	; 0x01
     22e:	1a 82       	std	Y+2, r1	; 0x02
     230:	ce 01       	movw	r24, r28
     232:	01 96       	adiw	r24, 0x01	; 1
     234:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <atoi>
     238:	90 93 d0 06 	sts	0x06D0, r25	; 0x8006d0 <receive_length_int+0x1>
     23c:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <receive_length_int>
     240:	38 c0       	rjmp	.+112    	; 0x2b2 <__vector_30+0x164>
     242:	86 30       	cpi	r24, 0x06	; 6
     244:	c1 f4       	brne	.+48     	; 0x276 <__vector_30+0x128>
     246:	1a 33       	cpi	r17, 0x3A	; 58
     248:	71 f0       	breq	.+28     	; 0x266 <__vector_30+0x118>
     24a:	80 91 bf 04 	lds	r24, 0x04BF	; 0x8004bf <receive_length>
     24e:	89 83       	std	Y+1, r24	; 0x01
     250:	1a 83       	std	Y+2, r17	; 0x02
     252:	1b 82       	std	Y+3, r1	; 0x03
     254:	ce 01       	movw	r24, r28
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <atoi>
     25c:	90 93 d0 06 	sts	0x06D0, r25	; 0x8006d0 <receive_length_int+0x1>
     260:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <receive_length_int>
     264:	26 c0       	rjmp	.+76     	; 0x2b2 <__vector_30+0x164>
     266:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <parse_cnt.2459>
     26a:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <data_cnt.2460>
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <parse_data_flag.2461>
     274:	1e c0       	rjmp	.+60     	; 0x2b2 <__vector_30+0x164>
     276:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <parse_data_flag.2461>
     27a:	88 23       	and	r24, r24
     27c:	c1 f0       	breq	.+48     	; 0x2ae <__vector_30+0x160>
     27e:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <data_cnt.2460>
     282:	e8 2f       	mov	r30, r24
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	ed 56       	subi	r30, 0x6D	; 109
     288:	fa 4f       	sbci	r31, 0xFA	; 250
     28a:	10 83       	st	Z, r17
     28c:	8f 5f       	subi	r24, 0xFF	; 255
     28e:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <data_cnt.2460>
     292:	20 91 cf 06 	lds	r18, 0x06CF	; 0x8006cf <receive_length_int>
     296:	30 91 d0 06 	lds	r19, 0x06D0	; 0x8006d0 <receive_length_int+0x1>
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	82 17       	cp	r24, r18
     29e:	93 07       	cpc	r25, r19
     2a0:	41 f4       	brne	.+16     	; 0x2b2 <__vector_30+0x164>
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <esp8266_receiving_flag>
     2a8:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <parse_data_flag.2461>
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <__vector_30+0x164>
     2ae:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <parse_cnt.2459>
     2b2:	81 2f       	mov	r24, r17
     2b4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <uart0_tx_char>
     2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <__vector_30+0x172>
     2ba:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <cnt.2458>
     2be:	ab cf       	rjmp	.-170    	; 0x216 <__vector_30+0xc8>
     2c0:	0f 90       	pop	r0
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	ff 91       	pop	r31
     2cc:	ef 91       	pop	r30
     2ce:	bf 91       	pop	r27
     2d0:	af 91       	pop	r26
     2d2:	9f 91       	pop	r25
     2d4:	8f 91       	pop	r24
     2d6:	7f 91       	pop	r23
     2d8:	6f 91       	pop	r22
     2da:	5f 91       	pop	r21
     2dc:	4f 91       	pop	r20
     2de:	3f 91       	pop	r19
     2e0:	2f 91       	pop	r18
     2e2:	1f 91       	pop	r17
     2e4:	0f 90       	pop	r0
     2e6:	0b be       	out	0x3b, r0	; 59
     2e8:	0f 90       	pop	r0
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	0f 90       	pop	r0
     2ee:	1f 90       	pop	r1
     2f0:	18 95       	reti

000002f2 <mfrc_check_and_data_receive_ch0>:
     2f2:	cf 93       	push	r28
     2f4:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <noise_flag.2477>
     2f8:	81 11       	cpse	r24, r1
     2fa:	09 c0       	rjmp	.+18     	; 0x30e <mfrc_check_and_data_receive_ch0+0x1c>
     2fc:	40 e0       	ldi	r20, 0x00	; 0
     2fe:	6d ea       	ldi	r22, 0xAD	; 173
     300:	76 e0       	ldi	r23, 0x06	; 6
     302:	82 e5       	ldi	r24, 0x52	; 82
     304:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <mfrc522_request>
     308:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <_byte.2479>
     30c:	1d c0       	rjmp	.+58     	; 0x348 <mfrc_check_and_data_receive_ch0+0x56>
     30e:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <toggle_flag.2478>
     312:	88 23       	and	r24, r24
     314:	39 f0       	breq	.+14     	; 0x324 <mfrc_check_and_data_receive_ch0+0x32>
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	6d ea       	ldi	r22, 0xAD	; 173
     31a:	76 e0       	ldi	r23, 0x06	; 6
     31c:	82 e5       	ldi	r24, 0x52	; 82
     31e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <mfrc522_request>
     322:	0c c0       	rjmp	.+24     	; 0x33c <mfrc_check_and_data_receive_ch0+0x4a>
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	6d ea       	ldi	r22, 0xAD	; 173
     328:	76 e0       	ldi	r23, 0x06	; 6
     32a:	82 e5       	ldi	r24, 0x52	; 82
     32c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <mfrc522_request>
     330:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <_byte.2479>
     334:	83 30       	cpi	r24, 0x03	; 3
     336:	11 f4       	brne	.+4      	; 0x33c <mfrc_check_and_data_receive_ch0+0x4a>
     338:	10 92 a5 04 	sts	0x04A5, r1	; 0x8004a5 <noise_flag.2477>
     33c:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <toggle_flag.2478>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	89 27       	eor	r24, r25
     344:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <toggle_flag.2478>
     348:	c0 91 a4 04 	lds	r28, 0x04A4	; 0x8004a4 <_byte.2479>
     34c:	c1 30       	cpi	r28, 0x01	; 1
     34e:	29 f0       	breq	.+10     	; 0x35a <mfrc_check_and_data_receive_ch0+0x68>
     350:	88 e5       	ldi	r24, 0x58	; 88
     352:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <detected_flag_ch0>
     356:	c0 e0       	ldi	r28, 0x00	; 0
     358:	18 c0       	rjmp	.+48     	; 0x38a <mfrc_check_and_data_receive_ch0+0x98>
     35a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <detected_flag_ch0>
     35e:	88 35       	cpi	r24, 0x58	; 88
     360:	99 f4       	brne	.+38     	; 0x388 <mfrc_check_and_data_receive_ch0+0x96>
     362:	8f e4       	ldi	r24, 0x4F	; 79
     364:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <detected_flag_ch0>
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <noise_flag.2477>
     36e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <toggle_flag.2478>
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	8d ea       	ldi	r24, 0xAD	; 173
     376:	96 e0       	ldi	r25, 0x06	; 6
     378:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <mfrc522_get_card_serial>
     37c:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <_byte.2479>
     380:	81 30       	cpi	r24, 0x01	; 1
     382:	19 f0       	breq	.+6      	; 0x38a <mfrc_check_and_data_receive_ch0+0x98>
     384:	cf ef       	ldi	r28, 0xFF	; 255
     386:	01 c0       	rjmp	.+2      	; 0x38a <mfrc_check_and_data_receive_ch0+0x98>
     388:	c0 e0       	ldi	r28, 0x00	; 0
     38a:	8c 2f       	mov	r24, r28
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <mfrc_check_and_data_receive_ch1>:
     390:	cf 93       	push	r28
     392:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <noise_flag.2483>
     396:	81 11       	cpse	r24, r1
     398:	09 c0       	rjmp	.+18     	; 0x3ac <mfrc_check_and_data_receive_ch1+0x1c>
     39a:	41 e0       	ldi	r20, 0x01	; 1
     39c:	6f eb       	ldi	r22, 0xBF	; 191
     39e:	76 e0       	ldi	r23, 0x06	; 6
     3a0:	82 e5       	ldi	r24, 0x52	; 82
     3a2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <mfrc522_request>
     3a6:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_byte.2485>
     3aa:	1d c0       	rjmp	.+58     	; 0x3e6 <mfrc_check_and_data_receive_ch1+0x56>
     3ac:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <toggle_flag.2484>
     3b0:	88 23       	and	r24, r24
     3b2:	39 f0       	breq	.+14     	; 0x3c2 <mfrc_check_and_data_receive_ch1+0x32>
     3b4:	41 e0       	ldi	r20, 0x01	; 1
     3b6:	6f eb       	ldi	r22, 0xBF	; 191
     3b8:	76 e0       	ldi	r23, 0x06	; 6
     3ba:	82 e5       	ldi	r24, 0x52	; 82
     3bc:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <mfrc522_request>
     3c0:	0c c0       	rjmp	.+24     	; 0x3da <mfrc_check_and_data_receive_ch1+0x4a>
     3c2:	41 e0       	ldi	r20, 0x01	; 1
     3c4:	6f eb       	ldi	r22, 0xBF	; 191
     3c6:	76 e0       	ldi	r23, 0x06	; 6
     3c8:	82 e5       	ldi	r24, 0x52	; 82
     3ca:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <mfrc522_request>
     3ce:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_byte.2485>
     3d2:	83 30       	cpi	r24, 0x03	; 3
     3d4:	11 f4       	brne	.+4      	; 0x3da <mfrc_check_and_data_receive_ch1+0x4a>
     3d6:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <noise_flag.2483>
     3da:	90 91 a0 04 	lds	r25, 0x04A0	; 0x8004a0 <toggle_flag.2484>
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	89 27       	eor	r24, r25
     3e2:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <toggle_flag.2484>
     3e6:	c0 91 a1 04 	lds	r28, 0x04A1	; 0x8004a1 <_byte.2485>
     3ea:	c1 30       	cpi	r28, 0x01	; 1
     3ec:	29 f0       	breq	.+10     	; 0x3f8 <mfrc_check_and_data_receive_ch1+0x68>
     3ee:	88 e5       	ldi	r24, 0x58	; 88
     3f0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <detected_flag_ch1>
     3f4:	c0 e0       	ldi	r28, 0x00	; 0
     3f6:	18 c0       	rjmp	.+48     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     3f8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <detected_flag_ch1>
     3fc:	88 35       	cpi	r24, 0x58	; 88
     3fe:	99 f4       	brne	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     400:	8f e4       	ldi	r24, 0x4F	; 79
     402:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <detected_flag_ch1>
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <noise_flag.2483>
     40c:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <toggle_flag.2484>
     410:	61 e0       	ldi	r22, 0x01	; 1
     412:	8f eb       	ldi	r24, 0xBF	; 191
     414:	96 e0       	ldi	r25, 0x06	; 6
     416:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <mfrc522_get_card_serial>
     41a:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <_byte.2485>
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	19 f0       	breq	.+6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     422:	cf ef       	ldi	r28, 0xFF	; 255
     424:	01 c0       	rjmp	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	c0 e0       	ldi	r28, 0x00	; 0
     428:	8c 2f       	mov	r24, r28
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <RC522_data_request_per_100ms>:
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	ec 01       	movw	r28, r24
     434:	60 91 d1 06 	lds	r22, 0x06D1	; 0x8006d1 <TICK>
     438:	70 91 d2 06 	lds	r23, 0x06D2	; 0x8006d2 <TICK+0x1>
     43c:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <TICK+0x2>
     440:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <TICK+0x3>
     444:	24 e6       	ldi	r18, 0x64	; 100
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__udivmodsi4>
     450:	67 2b       	or	r22, r23
     452:	68 2b       	or	r22, r24
     454:	69 2b       	or	r22, r25
     456:	89 f4       	brne	.+34     	; 0x47a <RC522_data_request_per_100ms+0x4c>
     458:	98 81       	ld	r25, Y
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	89 27       	eor	r24, r25
     45e:	88 83       	st	Y, r24
     460:	81 11       	cpse	r24, r1
     462:	06 c0       	rjmp	.+12     	; 0x470 <RC522_data_request_per_100ms+0x42>
     464:	46 df       	rcall	.-372    	; 0x2f2 <mfrc_check_and_data_receive_ch0>
     466:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <received_state>
     46a:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <rfid_uid_ch0+0x4>
     46e:	05 c0       	rjmp	.+10     	; 0x47a <RC522_data_request_per_100ms+0x4c>
     470:	8f df       	rcall	.-226    	; 0x390 <mfrc_check_and_data_receive_ch1>
     472:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <received_state>
     476:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <rfid_uid_ch1+0x4>
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <rfid_user_uid_buffer_init>:
     480:	87 ec       	ldi	r24, 0xC7	; 199
     482:	94 e0       	ldi	r25, 0x04	; 4
     484:	4b e2       	ldi	r20, 0x2B	; 43
     486:	55 e0       	ldi	r21, 0x05	; 5
     488:	25 e0       	ldi	r18, 0x05	; 5
     48a:	e6 e1       	ldi	r30, 0x16	; 22
     48c:	f3 e0       	ldi	r31, 0x03	; 3
     48e:	dc 01       	movw	r26, r24
     490:	01 90       	ld	r0, Z+
     492:	0d 92       	st	X+, r0
     494:	2a 95       	dec	r18
     496:	e1 f7       	brne	.-8      	; 0x490 <rfid_user_uid_buffer_init+0x10>
     498:	05 96       	adiw	r24, 0x05	; 5
     49a:	84 17       	cp	r24, r20
     49c:	95 07       	cpc	r25, r21
     49e:	a1 f7       	brne	.-24     	; 0x488 <rfid_user_uid_buffer_init+0x8>
     4a0:	47 e4       	ldi	r20, 0x47	; 71
     4a2:	51 e0       	ldi	r21, 0x01	; 1
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	82 e0       	ldi	r24, 0x02	; 2
     4a8:	0e 94 99 0a 	call	0x1532	; 0x1532 <i2c_lcd_string>
     4ac:	2f ef       	ldi	r18, 0xFF	; 255
     4ae:	89 e6       	ldi	r24, 0x69	; 105
     4b0:	98 e1       	ldi	r25, 0x18	; 24
     4b2:	21 50       	subi	r18, 0x01	; 1
     4b4:	80 40       	sbci	r24, 0x00	; 0
     4b6:	90 40       	sbci	r25, 0x00	; 0
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <rfid_user_uid_buffer_init+0x32>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <rfid_user_uid_buffer_init+0x3c>
     4bc:	00 00       	nop
     4be:	08 95       	ret

000004c0 <setSoundClip>:
     4c0:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <TICK+0x4>
     4c4:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <TICK+0x5>
     4c8:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <TICK+0x6>
     4cc:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <TICK+0x7>
     4d0:	82 30       	cpi	r24, 0x02	; 2
     4d2:	99 f0       	breq	.+38     	; 0x4fa <setSoundClip+0x3a>
     4d4:	28 f4       	brcc	.+10     	; 0x4e0 <setSoundClip+0x20>
     4d6:	88 23       	and	r24, r24
     4d8:	49 f0       	breq	.+18     	; 0x4ec <setSoundClip+0x2c>
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	51 f0       	breq	.+20     	; 0x4f2 <setSoundClip+0x32>
     4de:	1c c0       	rjmp	.+56     	; 0x518 <setSoundClip+0x58>
     4e0:	84 30       	cpi	r24, 0x04	; 4
     4e2:	99 f0       	breq	.+38     	; 0x50a <setSoundClip+0x4a>
     4e4:	70 f0       	brcs	.+28     	; 0x502 <setSoundClip+0x42>
     4e6:	85 30       	cpi	r24, 0x05	; 5
     4e8:	a1 f0       	breq	.+40     	; 0x512 <setSoundClip+0x52>
     4ea:	16 c0       	rjmp	.+44     	; 0x518 <setSoundClip+0x58>
     4ec:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <music_flag>
     4f0:	13 c0       	rjmp	.+38     	; 0x518 <setSoundClip+0x58>
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <music_flag>
     4f8:	0f c0       	rjmp	.+30     	; 0x518 <setSoundClip+0x58>
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <music_flag>
     500:	0b c0       	rjmp	.+22     	; 0x518 <setSoundClip+0x58>
     502:	83 e0       	ldi	r24, 0x03	; 3
     504:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <music_flag>
     508:	07 c0       	rjmp	.+14     	; 0x518 <setSoundClip+0x58>
     50a:	84 e0       	ldi	r24, 0x04	; 4
     50c:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <music_flag>
     510:	03 c0       	rjmp	.+6      	; 0x518 <setSoundClip+0x58>
     512:	85 e0       	ldi	r24, 0x05	; 5
     514:	80 93 2b 05 	sts	0x052B, r24	; 0x80052b <music_flag>
     518:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <TICK+0x4>
     51c:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <TICK+0x5>
     520:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <TICK+0x6>
     524:	10 92 d8 06 	sts	0x06D8, r1	; 0x8006d8 <TICK+0x7>
     528:	08 95       	ret

0000052a <buzz_MUTE>:
     52a:	eb e8       	ldi	r30, 0x8B	; 139
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	8f 7b       	andi	r24, 0xBF	; 191
     532:	80 83       	st	Z, r24
     534:	10 92 2b 05 	sts	0x052B, r1	; 0x80052b <music_flag>
     538:	08 95       	ret

0000053a <setSoundNote>:
     53a:	00 97       	sbiw	r24, 0x00	; 0
     53c:	41 f0       	breq	.+16     	; 0x54e <setSoundNote+0x14>
     53e:	eb e8       	ldi	r30, 0x8B	; 139
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	20 81       	ld	r18, Z
     544:	20 64       	ori	r18, 0x40	; 64
     546:	20 83       	st	Z, r18
     548:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <setICR3>
     54c:	08 95       	ret
     54e:	eb e8       	ldi	r30, 0x8B	; 139
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	80 81       	ld	r24, Z
     554:	8f 7b       	andi	r24, 0xBF	; 191
     556:	80 83       	st	Z, r24
     558:	08 95       	ret

0000055a <buzz_play>:
     55a:	80 91 2b 05 	lds	r24, 0x052B	; 0x80052b <music_flag>
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	09 f4       	brne	.+2      	; 0x564 <buzz_play+0xa>
     562:	76 c0       	rjmp	.+236    	; 0x650 <buzz_play+0xf6>
     564:	28 f4       	brcc	.+10     	; 0x570 <buzz_play+0x16>
     566:	88 23       	and	r24, r24
     568:	61 f0       	breq	.+24     	; 0x582 <buzz_play+0x28>
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	61 f0       	breq	.+24     	; 0x586 <buzz_play+0x2c>
     56e:	08 95       	ret
     570:	84 30       	cpi	r24, 0x04	; 4
     572:	09 f4       	brne	.+2      	; 0x576 <buzz_play+0x1c>
     574:	37 c1       	rjmp	.+622    	; 0x7e4 <buzz_play+0x28a>
     576:	08 f4       	brcc	.+2      	; 0x57a <buzz_play+0x20>
     578:	d0 c0       	rjmp	.+416    	; 0x71a <buzz_play+0x1c0>
     57a:	85 30       	cpi	r24, 0x05	; 5
     57c:	09 f4       	brne	.+2      	; 0x580 <buzz_play+0x26>
     57e:	75 c1       	rjmp	.+746    	; 0x86a <buzz_play+0x310>
     580:	08 95       	ret
     582:	d3 cf       	rjmp	.-90     	; 0x52a <buzz_MUTE>
     584:	08 95       	ret
     586:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     58a:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     58e:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     592:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     596:	88 3c       	cpi	r24, 0xC8	; 200
     598:	91 05       	cpc	r25, r1
     59a:	a1 05       	cpc	r26, r1
     59c:	b1 05       	cpc	r27, r1
     59e:	20 f4       	brcc	.+8      	; 0x5a8 <buzz_play+0x4e>
     5a0:	8b e9       	ldi	r24, 0x9B	; 155
     5a2:	96 e0       	ldi	r25, 0x06	; 6
     5a4:	ca cf       	rjmp	.-108    	; 0x53a <setSoundNote>
     5a6:	08 95       	ret
     5a8:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     5ac:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     5b0:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     5b4:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     5b8:	88 3c       	cpi	r24, 0xC8	; 200
     5ba:	91 05       	cpc	r25, r1
     5bc:	a1 05       	cpc	r26, r1
     5be:	b1 05       	cpc	r27, r1
     5c0:	21 f4       	brne	.+8      	; 0x5ca <buzz_play+0x70>
     5c2:	87 ee       	ldi	r24, 0xE7	; 231
     5c4:	95 e0       	ldi	r25, 0x05	; 5
     5c6:	b9 cf       	rjmp	.-142    	; 0x53a <setSoundNote>
     5c8:	08 95       	ret
     5ca:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     5ce:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     5d2:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     5d6:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     5da:	80 39       	cpi	r24, 0x90	; 144
     5dc:	91 40       	sbci	r25, 0x01	; 1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	21 f4       	brne	.+8      	; 0x5ec <buzz_play+0x92>
     5e4:	85 e6       	ldi	r24, 0x65	; 101
     5e6:	94 e0       	ldi	r25, 0x04	; 4
     5e8:	a8 cf       	rjmp	.-176    	; 0x53a <setSoundNote>
     5ea:	08 95       	ret
     5ec:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     5f0:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     5f4:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     5f8:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     5fc:	88 35       	cpi	r24, 0x58	; 88
     5fe:	92 40       	sbci	r25, 0x02	; 2
     600:	a1 05       	cpc	r26, r1
     602:	b1 05       	cpc	r27, r1
     604:	21 f4       	brne	.+8      	; 0x60e <buzz_play+0xb4>
     606:	8d ef       	ldi	r24, 0xFD	; 253
     608:	93 e0       	ldi	r25, 0x03	; 3
     60a:	97 cf       	rjmp	.-210    	; 0x53a <setSoundNote>
     60c:	08 95       	ret
     60e:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     612:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     616:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     61a:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     61e:	80 32       	cpi	r24, 0x20	; 32
     620:	93 40       	sbci	r25, 0x03	; 3
     622:	a1 05       	cpc	r26, r1
     624:	b1 05       	cpc	r27, r1
     626:	21 f4       	brne	.+8      	; 0x630 <buzz_play+0xd6>
     628:	88 ef       	ldi	r24, 0xF8	; 248
     62a:	92 e0       	ldi	r25, 0x02	; 2
     62c:	86 cf       	rjmp	.-244    	; 0x53a <setSoundNote>
     62e:	08 95       	ret
     630:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     634:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     638:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     63c:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     640:	80 3b       	cpi	r24, 0xB0	; 176
     642:	94 40       	sbci	r25, 0x04	; 4
     644:	a1 05       	cpc	r26, r1
     646:	b1 05       	cpc	r27, r1
     648:	09 f0       	breq	.+2      	; 0x64c <buzz_play+0xf2>
     64a:	50 c1       	rjmp	.+672    	; 0x8ec <buzz_play+0x392>
     64c:	6e cf       	rjmp	.-292    	; 0x52a <buzz_MUTE>
     64e:	08 95       	ret
     650:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     654:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     658:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     65c:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     660:	88 3c       	cpi	r24, 0xC8	; 200
     662:	91 05       	cpc	r25, r1
     664:	a1 05       	cpc	r26, r1
     666:	b1 05       	cpc	r27, r1
     668:	20 f4       	brcc	.+8      	; 0x672 <buzz_play+0x118>
     66a:	8b e9       	ldi	r24, 0x9B	; 155
     66c:	96 e0       	ldi	r25, 0x06	; 6
     66e:	65 cf       	rjmp	.-310    	; 0x53a <setSoundNote>
     670:	08 95       	ret
     672:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     676:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     67a:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     67e:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     682:	82 3d       	cpi	r24, 0xD2	; 210
     684:	91 05       	cpc	r25, r1
     686:	a1 05       	cpc	r26, r1
     688:	b1 05       	cpc	r27, r1
     68a:	21 f4       	brne	.+8      	; 0x694 <buzz_play+0x13a>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	54 cf       	rjmp	.-344    	; 0x53a <setSoundNote>
     692:	08 95       	ret
     694:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     698:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     69c:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     6a0:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     6a4:	8c 3d       	cpi	r24, 0xDC	; 220
     6a6:	91 05       	cpc	r25, r1
     6a8:	a1 05       	cpc	r26, r1
     6aa:	b1 05       	cpc	r27, r1
     6ac:	21 f4       	brne	.+8      	; 0x6b6 <buzz_play+0x15c>
     6ae:	87 ee       	ldi	r24, 0xE7	; 231
     6b0:	95 e0       	ldi	r25, 0x05	; 5
     6b2:	43 cf       	rjmp	.-378    	; 0x53a <setSoundNote>
     6b4:	08 95       	ret
     6b6:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     6ba:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     6be:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     6c2:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     6c6:	80 39       	cpi	r24, 0x90	; 144
     6c8:	91 40       	sbci	r25, 0x01	; 1
     6ca:	a1 05       	cpc	r26, r1
     6cc:	b1 05       	cpc	r27, r1
     6ce:	21 f4       	brne	.+8      	; 0x6d8 <buzz_play+0x17e>
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	32 cf       	rjmp	.-412    	; 0x53a <setSoundNote>
     6d6:	08 95       	ret
     6d8:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     6dc:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     6e0:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     6e4:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     6e8:	8e 3a       	cpi	r24, 0xAE	; 174
     6ea:	91 40       	sbci	r25, 0x01	; 1
     6ec:	a1 05       	cpc	r26, r1
     6ee:	b1 05       	cpc	r27, r1
     6f0:	21 f4       	brne	.+8      	; 0x6fa <buzz_play+0x1a0>
     6f2:	85 e6       	ldi	r24, 0x65	; 101
     6f4:	94 e0       	ldi	r25, 0x04	; 4
     6f6:	21 cf       	rjmp	.-446    	; 0x53a <setSoundNote>
     6f8:	08 95       	ret
     6fa:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     6fe:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     702:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     706:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     70a:	88 35       	cpi	r24, 0x58	; 88
     70c:	92 40       	sbci	r25, 0x02	; 2
     70e:	a1 05       	cpc	r26, r1
     710:	b1 05       	cpc	r27, r1
     712:	09 f0       	breq	.+2      	; 0x716 <buzz_play+0x1bc>
     714:	eb c0       	rjmp	.+470    	; 0x8ec <buzz_play+0x392>
     716:	09 cf       	rjmp	.-494    	; 0x52a <buzz_MUTE>
     718:	08 95       	ret
     71a:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     71e:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     722:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     726:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     72a:	8b 34       	cpi	r24, 0x4B	; 75
     72c:	91 05       	cpc	r25, r1
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	20 f4       	brcc	.+8      	; 0x73c <buzz_play+0x1e2>
     734:	82 e1       	ldi	r24, 0x12	; 18
     736:	94 e0       	ldi	r25, 0x04	; 4
     738:	00 cf       	rjmp	.-512    	; 0x53a <setSoundNote>
     73a:	08 95       	ret
     73c:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     740:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     744:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     748:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     74c:	86 39       	cpi	r24, 0x96	; 150
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	20 f4       	brcc	.+8      	; 0x75e <buzz_play+0x204>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	ef ce       	rjmp	.-546    	; 0x53a <setSoundNote>
     75c:	08 95       	ret
     75e:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     762:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     766:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     76a:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     76e:	81 3e       	cpi	r24, 0xE1	; 225
     770:	91 05       	cpc	r25, r1
     772:	a1 05       	cpc	r26, r1
     774:	b1 05       	cpc	r27, r1
     776:	20 f4       	brcc	.+8      	; 0x780 <buzz_play+0x226>
     778:	82 e1       	ldi	r24, 0x12	; 18
     77a:	94 e0       	ldi	r25, 0x04	; 4
     77c:	de ce       	rjmp	.-580    	; 0x53a <setSoundNote>
     77e:	08 95       	ret
     780:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     784:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     788:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     78c:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     790:	8c 32       	cpi	r24, 0x2C	; 44
     792:	91 40       	sbci	r25, 0x01	; 1
     794:	a1 05       	cpc	r26, r1
     796:	b1 05       	cpc	r27, r1
     798:	20 f4       	brcc	.+8      	; 0x7a2 <buzz_play+0x248>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	cd ce       	rjmp	.-614    	; 0x53a <setSoundNote>
     7a0:	08 95       	ret
     7a2:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     7a6:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     7aa:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     7ae:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     7b2:	87 37       	cpi	r24, 0x77	; 119
     7b4:	91 40       	sbci	r25, 0x01	; 1
     7b6:	a1 05       	cpc	r26, r1
     7b8:	b1 05       	cpc	r27, r1
     7ba:	20 f4       	brcc	.+8      	; 0x7c4 <buzz_play+0x26a>
     7bc:	82 e1       	ldi	r24, 0x12	; 18
     7be:	94 e0       	ldi	r25, 0x04	; 4
     7c0:	bc ce       	rjmp	.-648    	; 0x53a <setSoundNote>
     7c2:	08 95       	ret
     7c4:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     7c8:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     7cc:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     7d0:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     7d4:	82 3c       	cpi	r24, 0xC2	; 194
     7d6:	91 40       	sbci	r25, 0x01	; 1
     7d8:	a1 05       	cpc	r26, r1
     7da:	b1 05       	cpc	r27, r1
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <buzz_play+0x286>
     7de:	86 c0       	rjmp	.+268    	; 0x8ec <buzz_play+0x392>
     7e0:	a4 ce       	rjmp	.-696    	; 0x52a <buzz_MUTE>
     7e2:	08 95       	ret
     7e4:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     7e8:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     7ec:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     7f0:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     7f4:	84 36       	cpi	r24, 0x64	; 100
     7f6:	91 05       	cpc	r25, r1
     7f8:	a1 05       	cpc	r26, r1
     7fa:	b1 05       	cpc	r27, r1
     7fc:	20 f4       	brcc	.+8      	; 0x806 <buzz_play+0x2ac>
     7fe:	82 e1       	ldi	r24, 0x12	; 18
     800:	94 e0       	ldi	r25, 0x04	; 4
     802:	9b ce       	rjmp	.-714    	; 0x53a <setSoundNote>
     804:	08 95       	ret
     806:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     80a:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     80e:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     812:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     816:	88 3c       	cpi	r24, 0xC8	; 200
     818:	91 05       	cpc	r25, r1
     81a:	a1 05       	cpc	r26, r1
     81c:	b1 05       	cpc	r27, r1
     81e:	20 f4       	brcc	.+8      	; 0x828 <buzz_play+0x2ce>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	8a ce       	rjmp	.-748    	; 0x53a <setSoundNote>
     826:	08 95       	ret
     828:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     82c:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     830:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     834:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     838:	8c 32       	cpi	r24, 0x2C	; 44
     83a:	91 40       	sbci	r25, 0x01	; 1
     83c:	a1 05       	cpc	r26, r1
     83e:	b1 05       	cpc	r27, r1
     840:	20 f4       	brcc	.+8      	; 0x84a <buzz_play+0x2f0>
     842:	82 e1       	ldi	r24, 0x12	; 18
     844:	94 e0       	ldi	r25, 0x04	; 4
     846:	79 ce       	rjmp	.-782    	; 0x53a <setSoundNote>
     848:	08 95       	ret
     84a:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     84e:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     852:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     856:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     85a:	82 3c       	cpi	r24, 0xC2	; 194
     85c:	91 40       	sbci	r25, 0x01	; 1
     85e:	a1 05       	cpc	r26, r1
     860:	b1 05       	cpc	r27, r1
     862:	09 f0       	breq	.+2      	; 0x866 <buzz_play+0x30c>
     864:	43 c0       	rjmp	.+134    	; 0x8ec <buzz_play+0x392>
     866:	61 ce       	rjmp	.-830    	; 0x52a <buzz_MUTE>
     868:	08 95       	ret
     86a:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     86e:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     872:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     876:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     87a:	84 36       	cpi	r24, 0x64	; 100
     87c:	91 05       	cpc	r25, r1
     87e:	a1 05       	cpc	r26, r1
     880:	b1 05       	cpc	r27, r1
     882:	20 f4       	brcc	.+8      	; 0x88c <buzz_play+0x332>
     884:	87 e4       	ldi	r24, 0x47	; 71
     886:	90 e1       	ldi	r25, 0x10	; 16
     888:	58 ce       	rjmp	.-848    	; 0x53a <setSoundNote>
     88a:	08 95       	ret
     88c:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     890:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     894:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     898:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     89c:	88 3c       	cpi	r24, 0xC8	; 200
     89e:	91 05       	cpc	r25, r1
     8a0:	a1 05       	cpc	r26, r1
     8a2:	b1 05       	cpc	r27, r1
     8a4:	20 f4       	brcc	.+8      	; 0x8ae <buzz_play+0x354>
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	47 ce       	rjmp	.-882    	; 0x53a <setSoundNote>
     8ac:	08 95       	ret
     8ae:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     8b2:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     8b6:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     8ba:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     8be:	8c 32       	cpi	r24, 0x2C	; 44
     8c0:	91 40       	sbci	r25, 0x01	; 1
     8c2:	a1 05       	cpc	r26, r1
     8c4:	b1 05       	cpc	r27, r1
     8c6:	20 f4       	brcc	.+8      	; 0x8d0 <buzz_play+0x376>
     8c8:	84 e2       	ldi	r24, 0x24	; 36
     8ca:	98 e0       	ldi	r25, 0x08	; 8
     8cc:	36 ce       	rjmp	.-916    	; 0x53a <setSoundNote>
     8ce:	08 95       	ret
     8d0:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <TICK+0x4>
     8d4:	90 91 d6 06 	lds	r25, 0x06D6	; 0x8006d6 <TICK+0x5>
     8d8:	a0 91 d7 06 	lds	r26, 0x06D7	; 0x8006d7 <TICK+0x6>
     8dc:	b0 91 d8 06 	lds	r27, 0x06D8	; 0x8006d8 <TICK+0x7>
     8e0:	82 3c       	cpi	r24, 0xC2	; 194
     8e2:	91 40       	sbci	r25, 0x01	; 1
     8e4:	a1 05       	cpc	r26, r1
     8e6:	b1 05       	cpc	r27, r1
     8e8:	09 f4       	brne	.+2      	; 0x8ec <buzz_play+0x392>
     8ea:	1f ce       	rjmp	.-962    	; 0x52a <buzz_MUTE>
     8ec:	08 95       	ret

000008ee <start_timeout_count>:
     8ee:	10 92 e9 06 	sts	0x06E9, r1	; 0x8006e9 <TICK+0x18>
     8f2:	10 92 ea 06 	sts	0x06EA, r1	; 0x8006ea <TICK+0x19>
     8f6:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <TICK+0x1a>
     8fa:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <TICK+0x1b>
     8fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <start_timeout_count_flag+0x1>
     902:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <start_timeout_count_flag>
     906:	08 95       	ret

00000908 <request_reset_to_admin>:
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	65 97       	sbiw	r28, 0x15	; 21
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
     91c:	bc 01       	movw	r22, r24
     91e:	9a e0       	ldi	r25, 0x0A	; 10
     920:	ea e0       	ldi	r30, 0x0A	; 10
     922:	f1 e0       	ldi	r31, 0x01	; 1
     924:	de 01       	movw	r26, r28
     926:	11 96       	adiw	r26, 0x01	; 1
     928:	01 90       	ld	r0, Z+
     92a:	0d 92       	st	X+, r0
     92c:	9a 95       	dec	r25
     92e:	e1 f7       	brne	.-8      	; 0x928 <request_reset_to_admin+0x20>
     930:	fe 01       	movw	r30, r28
     932:	3b 96       	adiw	r30, 0x0b	; 11
     934:	8b e0       	ldi	r24, 0x0B	; 11
     936:	df 01       	movw	r26, r30
     938:	1d 92       	st	X+, r1
     93a:	8a 95       	dec	r24
     93c:	e9 f7       	brne	.-6      	; 0x938 <request_reset_to_admin+0x30>
     93e:	ce 01       	movw	r24, r28
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <strcat>
     946:	04 d6       	rcall	.+3080   	; 0x1550 <i2c_lcd_clear>
     948:	46 e7       	ldi	r20, 0x76	; 118
     94a:	51 e0       	ldi	r21, 0x01	; 1
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	f0 d5       	rcall	.+3040   	; 0x1532 <i2c_lcd_string>
     952:	43 e8       	ldi	r20, 0x83	; 131
     954:	51 e0       	ldi	r21, 0x01	; 1
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	eb d5       	rcall	.+3030   	; 0x1532 <i2c_lcd_string>
     95c:	ae 01       	movw	r20, r28
     95e:	4f 5f       	subi	r20, 0xFF	; 255
     960:	5f 4f       	sbci	r21, 0xFF	; 255
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	83 e0       	ldi	r24, 0x03	; 3
     966:	e5 d5       	rcall	.+3018   	; 0x1532 <i2c_lcd_string>
     968:	65 96       	adiw	r28, 0x15	; 21
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <timeout_check>:
     97a:	40 91 e9 06 	lds	r20, 0x06E9	; 0x8006e9 <TICK+0x18>
     97e:	50 91 ea 06 	lds	r21, 0x06EA	; 0x8006ea <TICK+0x19>
     982:	60 91 eb 06 	lds	r22, 0x06EB	; 0x8006eb <TICK+0x1a>
     986:	70 91 ec 06 	lds	r23, 0x06EC	; 0x8006ec <TICK+0x1b>
     98a:	41 31       	cpi	r20, 0x11	; 17
     98c:	57 42       	sbci	r21, 0x27	; 39
     98e:	61 05       	cpc	r22, r1
     990:	71 05       	cpc	r23, r1
     992:	38 f0       	brcs	.+14     	; 0x9a2 <timeout_check+0x28>
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <start_timeout_count_flag+0x1>
     99c:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <start_timeout_count_flag>
     9a0:	b3 df       	rcall	.-154    	; 0x908 <request_reset_to_admin>
     9a2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <start_timeout_count_flag>
     9a6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <start_timeout_count_flag+0x1>
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <timeout_check+0x30>
     9ae:	08 95       	ret

000009b0 <esp8266_init>:
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	7c 01       	movw	r14, r24
     9c2:	6b 01       	movw	r12, r22
     9c4:	ea 01       	movw	r28, r20
     9c6:	89 01       	movw	r16, r18
     9c8:	92 df       	rcall	.-220    	; 0x8ee <start_timeout_count>
     9ca:	86 e9       	ldi	r24, 0x96	; 150
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <uart1_tx_string>
     9d2:	2f ef       	ldi	r18, 0xFF	; 255
     9d4:	81 e1       	ldi	r24, 0x11	; 17
     9d6:	9a e7       	ldi	r25, 0x7A	; 122
     9d8:	21 50       	subi	r18, 0x01	; 1
     9da:	80 40       	sbci	r24, 0x00	; 0
     9dc:	90 40       	sbci	r25, 0x00	; 0
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <esp8266_init+0x28>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <esp8266_init+0x32>
     9e2:	00 00       	nop
     9e4:	8f e9       	ldi	r24, 0x9F	; 159
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	c8 df       	rcall	.-112    	; 0x97a <timeout_check>
     9ea:	46 ea       	ldi	r20, 0xA6	; 166
     9ec:	51 e0       	ldi	r21, 0x01	; 1
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	82 e0       	ldi	r24, 0x02	; 2
     9f2:	9f d5       	rcall	.+2878   	; 0x1532 <i2c_lcd_string>
     9f4:	7c df       	rcall	.-264    	; 0x8ee <start_timeout_count>
     9f6:	8b eb       	ldi	r24, 0xBB	; 187
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <uart1_tx_string>
     9fe:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a02:	81 11       	cpse	r24, r1
     a04:	07 c0       	rjmp	.+14     	; 0xa14 <esp8266_init+0x64>
     a06:	84 ec       	ldi	r24, 0xC4	; 196
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	b7 df       	rcall	.-146    	; 0x97a <timeout_check>
     a0c:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a10:	88 23       	and	r24, r24
     a12:	c9 f3       	breq	.-14     	; 0xa06 <esp8266_init+0x56>
     a14:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     a18:	6a df       	rcall	.-300    	; 0x8ee <start_timeout_count>
     a1a:	8b ec       	ldi	r24, 0xCB	; 203
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <uart1_tx_string>
     a22:	2f ef       	ldi	r18, 0xFF	; 255
     a24:	87 ea       	ldi	r24, 0xA7	; 167
     a26:	91 e6       	ldi	r25, 0x61	; 97
     a28:	21 50       	subi	r18, 0x01	; 1
     a2a:	80 40       	sbci	r24, 0x00	; 0
     a2c:	90 40       	sbci	r25, 0x00	; 0
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <esp8266_init+0x78>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <esp8266_init+0x82>
     a32:	00 00       	nop
     a34:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     a38:	89 ed       	ldi	r24, 0xD9	; 217
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	9e df       	rcall	.-196    	; 0x97a <timeout_check>
     a3e:	43 ee       	ldi	r20, 0xE3	; 227
     a40:	51 e0       	ldi	r21, 0x01	; 1
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	75 d5       	rcall	.+2794   	; 0x1532 <i2c_lcd_string>
     a48:	52 df       	rcall	.-348    	; 0x8ee <start_timeout_count>
     a4a:	88 ef       	ldi	r24, 0xF8	; 248
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <uart1_tx_string>
     a52:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a56:	81 11       	cpse	r24, r1
     a58:	07 c0       	rjmp	.+14     	; 0xa68 <esp8266_init+0xb8>
     a5a:	85 e0       	ldi	r24, 0x05	; 5
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	8d df       	rcall	.-230    	; 0x97a <timeout_check>
     a60:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a64:	88 23       	and	r24, r24
     a66:	c9 f3       	breq	.-14     	; 0xa5a <esp8266_init+0xaa>
     a68:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     a6c:	40 df       	rcall	.-384    	; 0x8ee <start_timeout_count>
     a6e:	80 e1       	ldi	r24, 0x10	; 16
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <uart1_tx_string>
     a76:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a7a:	81 11       	cpse	r24, r1
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <esp8266_init+0xdc>
     a7e:	8b e1       	ldi	r24, 0x1B	; 27
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	7b df       	rcall	.-266    	; 0x97a <timeout_check>
     a84:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     a88:	88 23       	and	r24, r24
     a8a:	c9 f3       	breq	.-14     	; 0xa7e <esp8266_init+0xce>
     a8c:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     a90:	44 e2       	ldi	r20, 0x24	; 36
     a92:	52 e0       	ldi	r21, 0x02	; 2
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	4c d5       	rcall	.+2712   	; 0x1532 <i2c_lcd_string>
     a9a:	29 df       	rcall	.-430    	; 0x8ee <start_timeout_count>
     a9c:	a6 01       	movw	r20, r12
     a9e:	b7 01       	movw	r22, r14
     aa0:	89 e3       	ldi	r24, 0x39	; 57
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <connect_to_AP>
     aa8:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <uart1_tx_string>
     aac:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     ab0:	81 11       	cpse	r24, r1
     ab2:	07 c0       	rjmp	.+14     	; 0xac2 <esp8266_init+0x112>
     ab4:	84 e4       	ldi	r24, 0x44	; 68
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	60 df       	rcall	.-320    	; 0x97a <timeout_check>
     aba:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     abe:	88 23       	and	r24, r24
     ac0:	c9 f3       	breq	.-14     	; 0xab4 <esp8266_init+0x104>
     ac2:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     ac6:	4d e4       	ldi	r20, 0x4D	; 77
     ac8:	52 e0       	ldi	r21, 0x02	; 2
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	31 d5       	rcall	.+2658   	; 0x1532 <i2c_lcd_string>
     ad0:	0e df       	rcall	.-484    	; 0x8ee <start_timeout_count>
     ad2:	82 e6       	ldi	r24, 0x62	; 98
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <uart1_tx_string>
     ada:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     ade:	81 11       	cpse	r24, r1
     ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <esp8266_init+0x140>
     ae2:	8d e6       	ldi	r24, 0x6D	; 109
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	49 df       	rcall	.-366    	; 0x97a <timeout_check>
     ae8:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     aec:	88 23       	and	r24, r24
     aee:	c9 f3       	breq	.-14     	; 0xae2 <esp8266_init+0x132>
     af0:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     af4:	46 e7       	ldi	r20, 0x76	; 118
     af6:	52 e0       	ldi	r21, 0x02	; 2
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	1a d5       	rcall	.+2612   	; 0x1532 <i2c_lcd_string>
     afe:	f7 de       	rcall	.-530    	; 0x8ee <start_timeout_count>
     b00:	b8 01       	movw	r22, r16
     b02:	ce 01       	movw	r24, r28
     b04:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <TCP_connect>
     b08:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <uart1_tx_string>
     b0c:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     b10:	81 11       	cpse	r24, r1
     b12:	07 c0       	rjmp	.+14     	; 0xb22 <esp8266_init+0x172>
     b14:	8b e8       	ldi	r24, 0x8B	; 139
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	30 df       	rcall	.-416    	; 0x97a <timeout_check>
     b1a:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <esp8266_return_result_flag>
     b1e:	88 23       	and	r24, r24
     b20:	c9 f3       	breq	.-14     	; 0xb14 <esp8266_init+0x164>
     b22:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <esp8266_return_result_flag>
     b26:	47 e9       	ldi	r20, 0x97	; 151
     b28:	52 e0       	ldi	r21, 0x02	; 2
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	01 d5       	rcall	.+2562   	; 0x1532 <i2c_lcd_string>
     b30:	2f ef       	ldi	r18, 0xFF	; 255
     b32:	81 ee       	ldi	r24, 0xE1	; 225
     b34:	94 e0       	ldi	r25, 0x04	; 4
     b36:	21 50       	subi	r18, 0x01	; 1
     b38:	80 40       	sbci	r24, 0x00	; 0
     b3a:	90 40       	sbci	r25, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <esp8266_init+0x186>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <esp8266_init+0x190>
     b40:	00 00       	nop
     b42:	4c ea       	ldi	r20, 0xAC	; 172
     b44:	52 e0       	ldi	r21, 0x02	; 2
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	f3 d4       	rcall	.+2534   	; 0x1532 <i2c_lcd_string>
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	cf 90       	pop	r12
     b5c:	08 95       	ret

00000b5e <logojector_ON>:
     b5e:	ac 9a       	sbi	0x15, 4	; 21
     b60:	08 95       	ret

00000b62 <logojector_OFF>:
     b62:	ac 98       	cbi	0x15, 4	; 21
     b64:	08 95       	ret

00000b66 <systems_init>:
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	64 97       	sbiw	r28, 0x14	; 20
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
     b7e:	78 94       	sei
     b80:	89 e0       	ldi	r24, 0x09	; 9
     b82:	8a bb       	out	0x1a, r24	; 26
     b84:	a4 9a       	sbi	0x14, 4	; 20
     b86:	f8 94       	cli
     b88:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <timer0_init>
     b8c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <timer1_init>
     b90:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <timer3_init>
     b94:	78 94       	sei
     b96:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <TICK>
     b9a:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <TICK+0x1>
     b9e:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <TICK+0x2>
     ba2:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <TICK+0x3>
     ba6:	dd df       	rcall	.-70     	; 0xb62 <logojector_OFF>
     ba8:	60 e8       	ldi	r22, 0x80	; 128
     baa:	75 e2       	ldi	r23, 0x25	; 37
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <uart_init>
     bb4:	60 e8       	ldi	r22, 0x80	; 128
     bb6:	75 e2       	ldi	r23, 0x25	; 37
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <uart_init>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	aa d6       	rcall	.+3412   	; 0x1918 <mfrc522_init>
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	a8 d6       	rcall	.+3408   	; 0x1918 <mfrc522_init>
     bc8:	29 d4       	rcall	.+2130   	; 0x141c <i2c_lcd_init>
     bca:	41 ec       	ldi	r20, 0xC1	; 193
     bcc:	52 e0       	ldi	r21, 0x02	; 2
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	af d4       	rcall	.+2398   	; 0x1532 <i2c_lcd_string>
     bd4:	46 ed       	ldi	r20, 0xD6	; 214
     bd6:	52 e0       	ldi	r21, 0x02	; 2
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	aa d4       	rcall	.+2388   	; 0x1532 <i2c_lcd_string>
     bde:	4a ee       	ldi	r20, 0xEA	; 234
     be0:	52 e0       	ldi	r21, 0x02	; 2
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	82 e0       	ldi	r24, 0x02	; 2
     be6:	a5 d4       	rcall	.+2378   	; 0x1532 <i2c_lcd_string>
     be8:	41 ec       	ldi	r20, 0xC1	; 193
     bea:	52 e0       	ldi	r21, 0x02	; 2
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	a0 d4       	rcall	.+2368   	; 0x1532 <i2c_lcd_string>
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	65 dc       	rcall	.-1846   	; 0x4c0 <setSoundClip>
     bf6:	2f ef       	ldi	r18, 0xFF	; 255
     bf8:	81 e1       	ldi	r24, 0x11	; 17
     bfa:	9a e7       	ldi	r25, 0x7A	; 122
     bfc:	21 50       	subi	r18, 0x01	; 1
     bfe:	80 40       	sbci	r24, 0x00	; 0
     c00:	90 40       	sbci	r25, 0x00	; 0
     c02:	e1 f7       	brne	.-8      	; 0xbfc <systems_init+0x96>
     c04:	00 c0       	rjmp	.+0      	; 0xc06 <systems_init+0xa0>
     c06:	00 00       	nop
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	ce d6       	rcall	.+3484   	; 0x19a8 <mfrc522_version_check>
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	22 d7       	rcall	.+3652   	; 0x1a54 <mfrc522_IRQ_enable>
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	ca d6       	rcall	.+3476   	; 0x19a8 <mfrc522_version_check>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	1e d7       	rcall	.+3644   	; 0x1a54 <mfrc522_IRQ_enable>
     c18:	2f ef       	ldi	r18, 0xFF	; 255
     c1a:	32 e0       	ldi	r19, 0x02	; 2
     c1c:	42 e0       	ldi	r20, 0x02	; 2
     c1e:	53 e0       	ldi	r21, 0x03	; 3
     c20:	6e e0       	ldi	r22, 0x0E	; 14
     c22:	73 e0       	ldi	r23, 0x03	; 3
     c24:	8b e1       	ldi	r24, 0x1B	; 27
     c26:	93 e0       	ldi	r25, 0x03	; 3
     c28:	c3 de       	rcall	.-634    	; 0x9b0 <esp8266_init>
     c2a:	2a dc       	rcall	.-1964   	; 0x480 <rfid_user_uid_buffer_init>
     c2c:	8f e0       	ldi	r24, 0x0F	; 15
     c2e:	ef e1       	ldi	r30, 0x1F	; 31
     c30:	f1 e0       	ldi	r31, 0x01	; 1
     c32:	8e 01       	movw	r16, r28
     c34:	0f 5f       	subi	r16, 0xFF	; 255
     c36:	1f 4f       	sbci	r17, 0xFF	; 255
     c38:	d8 01       	movw	r26, r16
     c3a:	01 90       	ld	r0, Z+
     c3c:	0d 92       	st	X+, r0
     c3e:	8a 95       	dec	r24
     c40:	e1 f7       	brne	.-8      	; 0xc3a <systems_init+0xd4>
     c42:	fe 01       	movw	r30, r28
     c44:	70 96       	adiw	r30, 0x10	; 16
     c46:	85 e0       	ldi	r24, 0x05	; 5
     c48:	df 01       	movw	r26, r30
     c4a:	1d 92       	st	X+, r1
     c4c:	8a 95       	dec	r24
     c4e:	e9 f7       	brne	.-6      	; 0xc4a <systems_init+0xe4>
     c50:	d8 01       	movw	r26, r16
     c52:	0d 90       	ld	r0, X+
     c54:	00 20       	and	r0, r0
     c56:	e9 f7       	brne	.-6      	; 0xc52 <systems_init+0xec>
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	86 e0       	ldi	r24, 0x06	; 6
     c5c:	e2 e2       	ldi	r30, 0x22	; 34
     c5e:	f3 e0       	ldi	r31, 0x03	; 3
     c60:	01 90       	ld	r0, Z+
     c62:	0d 92       	st	X+, r0
     c64:	8a 95       	dec	r24
     c66:	e1 f7       	brne	.-8      	; 0xc60 <systems_init+0xfa>
     c68:	41 ec       	ldi	r20, 0xC1	; 193
     c6a:	52 e0       	ldi	r21, 0x02	; 2
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	60 d4       	rcall	.+2240   	; 0x1532 <i2c_lcd_string>
     c72:	48 e2       	ldi	r20, 0x28	; 40
     c74:	53 e0       	ldi	r21, 0x03	; 3
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	5b d4       	rcall	.+2230   	; 0x1532 <i2c_lcd_string>
     c7c:	a8 01       	movw	r20, r16
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	57 d4       	rcall	.+2222   	; 0x1532 <i2c_lcd_string>
     c84:	41 ec       	ldi	r20, 0xC1	; 193
     c86:	52 e0       	ldi	r21, 0x02	; 2
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	52 d4       	rcall	.+2212   	; 0x1532 <i2c_lcd_string>
     c8e:	85 e0       	ldi	r24, 0x05	; 5
     c90:	17 dc       	rcall	.-2002   	; 0x4c0 <setSoundClip>
     c92:	bf ef       	ldi	r27, 0xFF	; 255
     c94:	27 ea       	ldi	r18, 0xA7	; 167
     c96:	81 e6       	ldi	r24, 0x61	; 97
     c98:	b1 50       	subi	r27, 0x01	; 1
     c9a:	20 40       	sbci	r18, 0x00	; 0
     c9c:	80 40       	sbci	r24, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <systems_init+0x132>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <systems_init+0x13c>
     ca2:	00 00       	nop
     ca4:	55 d4       	rcall	.+2218   	; 0x1550 <i2c_lcd_clear>
     ca6:	55 d3       	rcall	.+1706   	; 0x1352 <i2c_lcd_noBacklight>
     ca8:	64 96       	adiw	r28, 0x14	; 20
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	1f 91       	pop	r17
     cba:	0f 91       	pop	r16
     cbc:	08 95       	ret

00000cbe <flag_switch>:
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	31 f0       	breq	.+12     	; 0xcd0 <flag_switch+0x12>
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	91 05       	cpc	r25, r1
     cc8:	69 f1       	breq	.+90     	; 0xd24 <flag_switch+0x66>
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	c9 f5       	brne	.+114    	; 0xd40 <flag_switch+0x82>
     cce:	17 c0       	rjmp	.+46     	; 0xcfe <flag_switch+0x40>
     cd0:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <start_after_exit_user_timer_flag+0x1>
     cd4:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <start_after_exit_user_timer_flag>
     cd8:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <start_after_no_registered_timer_flag+0x1>
     cdc:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <start_after_no_registered_timer_flag>
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <start_after_verified_timer_flag+0x1>
     ce8:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <start_after_verified_timer_flag>
     cec:	90 93 ba 04 	sts	0x04BA, r25	; 0x8004ba <logojector_timer_flag+0x1>
     cf0:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <logojector_timer_flag>
     cf4:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <lcd_timer_flag+0x1>
     cf8:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <lcd_timer_flag>
     cfc:	08 95       	ret
     cfe:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <start_after_exit_user_timer_flag+0x1>
     d02:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <start_after_exit_user_timer_flag>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <start_after_no_registered_timer_flag+0x1>
     d0e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <start_after_no_registered_timer_flag>
     d12:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <start_after_verified_timer_flag+0x1>
     d16:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <start_after_verified_timer_flag>
     d1a:	90 93 b2 04 	sts	0x04B2, r25	; 0x8004b2 <lcd_timer_flag+0x1>
     d1e:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <lcd_timer_flag>
     d22:	08 95       	ret
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <start_after_exit_user_timer_flag+0x1>
     d2c:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <start_after_exit_user_timer_flag>
     d30:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <start_after_no_registered_timer_flag+0x1>
     d34:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <start_after_no_registered_timer_flag>
     d38:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <start_after_verified_timer_flag+0x1>
     d3c:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <start_after_verified_timer_flag>
     d40:	08 95       	ret

00000d42 <start_timer>:
     d42:	10 92 d1 06 	sts	0x06D1, r1	; 0x8006d1 <TICK>
     d46:	10 92 d2 06 	sts	0x06D2, r1	; 0x8006d2 <TICK+0x1>
     d4a:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <TICK+0x2>
     d4e:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <TICK+0x3>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	91 05       	cpc	r25, r1
     d56:	99 f0       	breq	.+38     	; 0xd7e <start_timer+0x3c>
     d58:	10 92 dd 06 	sts	0x06DD, r1	; 0x8006dd <TICK+0xc>
     d5c:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <TICK+0xd>
     d60:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <TICK+0xe>
     d64:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <TICK+0xf>
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	91 05       	cpc	r25, r1
     d6c:	41 f4       	brne	.+16     	; 0xd7e <start_timer+0x3c>
     d6e:	10 92 d9 06 	sts	0x06D9, r1	; 0x8006d9 <TICK+0x8>
     d72:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <TICK+0x9>
     d76:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <TICK+0xa>
     d7a:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <TICK+0xb>
     d7e:	9f cf       	rjmp	.-194    	; 0xcbe <flag_switch>
     d80:	08 95       	ret

00000d82 <RC522_data_state_check_and_actuate>:
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	6c 97       	sbiw	r28, 0x1c	; 28
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	9c 01       	movw	r18, r24
     da4:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <received_state>
     da8:	91 30       	cpi	r25, 0x01	; 1
     daa:	09 f0       	breq	.+2      	; 0xdae <RC522_data_state_check_and_actuate+0x2c>
     dac:	42 c1       	rjmp	.+644    	; 0x1032 <__DATA_REGION_LENGTH__+0x32>
     dae:	f9 01       	movw	r30, r18
     db0:	80 81       	ld	r24, Z
     db2:	81 11       	cpse	r24, r1
     db4:	13 c1       	rjmp	.+550    	; 0xfdc <RC522_data_state_check_and_actuate+0x25a>
     db6:	8d e3       	ldi	r24, 0x3D	; 61
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	8d d7       	rcall	.+3866   	; 0x1cd6 <uart1_tx_string>
     dbc:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <esp8266_send_ready_flag>
     dc0:	88 23       	and	r24, r24
     dc2:	e1 f3       	breq	.-8      	; 0xdbc <RC522_data_state_check_and_actuate+0x3a>
     dc4:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <esp8266_send_ready_flag>
     dc8:	82 e3       	ldi	r24, 0x32	; 50
     dca:	e3 e9       	ldi	r30, 0x93	; 147
     dcc:	f5 e0       	ldi	r31, 0x05	; 5
     dce:	df 01       	movw	r26, r30
     dd0:	1d 92       	st	X+, r1
     dd2:	8a 95       	dec	r24
     dd4:	e9 f7       	brne	.-6      	; 0xdd0 <RC522_data_state_check_and_actuate+0x4e>
     dd6:	0d ea       	ldi	r16, 0xAD	; 173
     dd8:	16 e0       	ldi	r17, 0x06	; 6
     dda:	0f 2e       	mov	r0, r31
     ddc:	f1 eb       	ldi	r31, 0xB1	; 177
     dde:	ef 2e       	mov	r14, r31
     de0:	f6 e0       	ldi	r31, 0x06	; 6
     de2:	ff 2e       	mov	r15, r31
     de4:	f0 2d       	mov	r31, r0
     de6:	f8 01       	movw	r30, r16
     de8:	81 91       	ld	r24, Z+
     dea:	8f 01       	movw	r16, r30
     dec:	b1 d7       	rcall	.+3938   	; 0x1d50 <HexToString>
     dee:	73 d7       	rcall	.+3814   	; 0x1cd6 <uart1_tx_string>
     df0:	80 e2       	ldi	r24, 0x20	; 32
     df2:	69 d7       	rcall	.+3794   	; 0x1cc6 <uart1_tx_char>
     df4:	0e 15       	cp	r16, r14
     df6:	1f 05       	cpc	r17, r15
     df8:	b1 f7       	brne	.-20     	; 0xde6 <RC522_data_state_check_and_actuate+0x64>
     dfa:	8a ea       	ldi	r24, 0xAA	; 170
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	6b d7       	rcall	.+3798   	; 0x1cd6 <uart1_tx_string>
     e00:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <esp8266_receiving_flag>
     e04:	88 23       	and	r24, r24
     e06:	e1 f3       	breq	.-8      	; 0xe00 <RC522_data_state_check_and_actuate+0x7e>
     e08:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <esp8266_receiving_flag>
     e0c:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <esp8266_received_data>
     e10:	8f 34       	cpi	r24, 0x4F	; 79
     e12:	09 f0       	breq	.+2      	; 0xe16 <RC522_data_state_check_and_actuate+0x94>
     e14:	cd c0       	rjmp	.+410    	; 0xfb0 <RC522_data_state_check_and_actuate+0x22e>
     e16:	80 e2       	ldi	r24, 0x20	; 32
     e18:	90 e2       	ldi	r25, 0x20	; 32
     e1a:	90 93 94 05 	sts	0x0594, r25	; 0x800594 <esp8266_received_data+0x1>
     e1e:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <esp8266_received_data>
     e22:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <rfid_user_flag+0x1>
     e26:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <rfid_user_flag>
     e2a:	07 ec       	ldi	r16, 0xC7	; 199
     e2c:	14 e0       	ldi	r17, 0x04	; 4
     e2e:	e1 2c       	mov	r14, r1
     e30:	f1 2c       	mov	r15, r1
     e32:	cc 24       	eor	r12, r12
     e34:	c3 94       	inc	r12
     e36:	d1 2c       	mov	r13, r1
     e38:	66 e1       	ldi	r22, 0x16	; 22
     e3a:	73 e0       	ldi	r23, 0x03	; 3
     e3c:	c8 01       	movw	r24, r16
     e3e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcmp>
     e42:	89 2b       	or	r24, r25
     e44:	49 f4       	brne	.+18     	; 0xe58 <RC522_data_state_check_and_actuate+0xd6>
     e46:	f0 92 c6 04 	sts	0x04C6, r15	; 0x8004c6 <rfid_user_count_pointer+0x1>
     e4a:	e0 92 c5 04 	sts	0x04C5, r14	; 0x8004c5 <rfid_user_count_pointer>
     e4e:	d0 92 c4 04 	sts	0x04C4, r13	; 0x8004c4 <rfid_user_flag+0x1>
     e52:	c0 92 c3 04 	sts	0x04C3, r12	; 0x8004c3 <rfid_user_flag>
     e56:	0c c0       	rjmp	.+24     	; 0xe70 <RC522_data_state_check_and_actuate+0xee>
     e58:	6d ea       	ldi	r22, 0xAD	; 173
     e5a:	76 e0       	ldi	r23, 0x06	; 6
     e5c:	c8 01       	movw	r24, r16
     e5e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcmp>
     e62:	89 2b       	or	r24, r25
     e64:	29 f4       	brne	.+10     	; 0xe70 <RC522_data_state_check_and_actuate+0xee>
     e66:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <rfid_user_flag+0x1>
     e6a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <rfid_user_flag>
     e6e:	89 c0       	rjmp	.+274    	; 0xf82 <RC522_data_state_check_and_actuate+0x200>
     e70:	ff ef       	ldi	r31, 0xFF	; 255
     e72:	ef 1a       	sub	r14, r31
     e74:	ff 0a       	sbc	r15, r31
     e76:	0b 5f       	subi	r16, 0xFB	; 251
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	84 e1       	ldi	r24, 0x14	; 20
     e7c:	e8 16       	cp	r14, r24
     e7e:	f1 04       	cpc	r15, r1
     e80:	d9 f6       	brne	.-74     	; 0xe38 <RC522_data_state_check_and_actuate+0xb6>
     e82:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <rfid_user_flag>
     e86:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <rfid_user_flag+0x1>
     e8a:	89 2b       	or	r24, r25
     e8c:	09 f4       	brne	.+2      	; 0xe90 <RC522_data_state_check_and_actuate+0x10e>
     e8e:	79 c0       	rjmp	.+242    	; 0xf82 <RC522_data_state_check_and_actuate+0x200>
     e90:	80 91 c5 04 	lds	r24, 0x04C5	; 0x8004c5 <rfid_user_count_pointer>
     e94:	90 91 c6 04 	lds	r25, 0x04C6	; 0x8004c6 <rfid_user_count_pointer+0x1>
     e98:	9c 01       	movw	r18, r24
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	22 0f       	add	r18, r18
     ea0:	33 1f       	adc	r19, r19
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	6d ea       	ldi	r22, 0xAD	; 173
     ea8:	76 e0       	ldi	r23, 0x06	; 6
     eaa:	89 53       	subi	r24, 0x39	; 57
     eac:	9b 4f       	sbci	r25, 0xFB	; 251
     eae:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <strcpy>
     eb2:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <user_count.2492>
     eb6:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <user_count.2492+0x1>
     eba:	84 31       	cpi	r24, 0x14	; 20
     ebc:	91 05       	cpc	r25, r1
     ebe:	2c f4       	brge	.+10     	; 0xeca <RC522_data_state_check_and_actuate+0x148>
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <user_count.2492+0x1>
     ec6:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <user_count.2492>
     eca:	84 e1       	ldi	r24, 0x14	; 20
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	11 d7       	rcall	.+3618   	; 0x1cf2 <IntToString>
     ed0:	bc 01       	movw	r22, r24
     ed2:	ce 01       	movw	r24, r28
     ed4:	49 96       	adiw	r24, 0x19	; 25
     ed6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <strcpy>
     eda:	20 91 9e 04 	lds	r18, 0x049E	; 0x80049e <user_count.2492>
     ede:	30 91 9f 04 	lds	r19, 0x049F	; 0x80049f <user_count.2492+0x1>
     ee2:	84 e1       	ldi	r24, 0x14	; 20
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	82 1b       	sub	r24, r18
     ee8:	93 0b       	sbc	r25, r19
     eea:	03 d7       	rcall	.+3590   	; 0x1cf2 <IntToString>
     eec:	bc 01       	movw	r22, r24
     eee:	ce 01       	movw	r24, r28
     ef0:	45 96       	adiw	r24, 0x15	; 21
     ef2:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <strcpy>
     ef6:	8e e0       	ldi	r24, 0x0E	; 14
     ef8:	e3 e3       	ldi	r30, 0x33	; 51
     efa:	f1 e0       	ldi	r31, 0x01	; 1
     efc:	8e 01       	movw	r16, r28
     efe:	0f 5f       	subi	r16, 0xFF	; 255
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	d8 01       	movw	r26, r16
     f04:	01 90       	ld	r0, Z+
     f06:	0d 92       	st	X+, r0
     f08:	8a 95       	dec	r24
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <RC522_data_state_check_and_actuate+0x182>
     f0c:	fe 01       	movw	r30, r28
     f0e:	3f 96       	adiw	r30, 0x0f	; 15
     f10:	86 e0       	ldi	r24, 0x06	; 6
     f12:	df 01       	movw	r26, r30
     f14:	1d 92       	st	X+, r1
     f16:	8a 95       	dec	r24
     f18:	e9 f7       	brne	.-6      	; 0xf14 <RC522_data_state_check_and_actuate+0x192>
     f1a:	be 01       	movw	r22, r28
     f1c:	6b 5e       	subi	r22, 0xEB	; 235
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	c8 01       	movw	r24, r16
     f22:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <strcat>
     f26:	f8 01       	movw	r30, r16
     f28:	01 90       	ld	r0, Z+
     f2a:	00 20       	and	r0, r0
     f2c:	e9 f7       	brne	.-6      	; 0xf28 <RC522_data_state_check_and_actuate+0x1a6>
     f2e:	31 97       	sbiw	r30, 0x01	; 1
     f30:	8f e2       	ldi	r24, 0x2F	; 47
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	91 83       	std	Z+1, r25	; 0x01
     f36:	80 83       	st	Z, r24
     f38:	be 01       	movw	r22, r28
     f3a:	67 5e       	subi	r22, 0xE7	; 231
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	c8 01       	movw	r24, r16
     f40:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <strcat>
     f44:	f8 01       	movw	r30, r16
     f46:	01 90       	ld	r0, Z+
     f48:	00 20       	and	r0, r0
     f4a:	e9 f7       	brne	.-6      	; 0xf46 <RC522_data_state_check_and_actuate+0x1c4>
     f4c:	31 97       	sbiw	r30, 0x01	; 1
     f4e:	8d e5       	ldi	r24, 0x5D	; 93
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	80 83       	st	Z, r24
     f56:	fc d2       	rcall	.+1528   	; 0x1550 <i2c_lcd_clear>
     f58:	4d e4       	ldi	r20, 0x4D	; 77
     f5a:	53 e0       	ldi	r21, 0x03	; 3
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	e8 d2       	rcall	.+1488   	; 0x1532 <i2c_lcd_string>
     f62:	43 e9       	ldi	r20, 0x93	; 147
     f64:	55 e0       	ldi	r21, 0x05	; 5
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	e3 d2       	rcall	.+1478   	; 0x1532 <i2c_lcd_string>
     f6c:	a8 01       	movw	r20, r16
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	df d2       	rcall	.+1470   	; 0x1532 <i2c_lcd_string>
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	a4 da       	rcall	.-2744   	; 0x4c0 <setSoundClip>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	e2 de       	rcall	.-572    	; 0xd42 <start_timer>
     f7e:	ef dd       	rcall	.-1058   	; 0xb5e <logojector_ON>
     f80:	58 c0       	rjmp	.+176    	; 0x1032 <__DATA_REGION_LENGTH__+0x32>
     f82:	e6 d2       	rcall	.+1484   	; 0x1550 <i2c_lcd_clear>
     f84:	4d e4       	ldi	r20, 0x4D	; 77
     f86:	53 e0       	ldi	r21, 0x03	; 3
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	d2 d2       	rcall	.+1444   	; 0x1532 <i2c_lcd_string>
     f8e:	43 e9       	ldi	r20, 0x93	; 147
     f90:	55 e0       	ldi	r21, 0x05	; 5
     f92:	62 e0       	ldi	r22, 0x02	; 2
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	cd d2       	rcall	.+1434   	; 0x1532 <i2c_lcd_string>
     f98:	46 e5       	ldi	r20, 0x56	; 86
     f9a:	53 e0       	ldi	r21, 0x03	; 3
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	c8 d2       	rcall	.+1424   	; 0x1532 <i2c_lcd_string>
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	8d da       	rcall	.-2790   	; 0x4c0 <setSoundClip>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	cb de       	rcall	.-618    	; 0xd42 <start_timer>
     fac:	d8 dd       	rcall	.-1104   	; 0xb5e <logojector_ON>
     fae:	41 c0       	rjmp	.+130    	; 0x1032 <__DATA_REGION_LENGTH__+0x32>
     fb0:	cf d2       	rcall	.+1438   	; 0x1550 <i2c_lcd_clear>
     fb2:	49 e6       	ldi	r20, 0x69	; 105
     fb4:	53 e0       	ldi	r21, 0x03	; 3
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	bb d2       	rcall	.+1398   	; 0x1532 <i2c_lcd_string>
     fbc:	40 e7       	ldi	r20, 0x70	; 112
     fbe:	53 e0       	ldi	r21, 0x03	; 3
     fc0:	62 e0       	ldi	r22, 0x02	; 2
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	b6 d2       	rcall	.+1388   	; 0x1532 <i2c_lcd_string>
     fc6:	4d e7       	ldi	r20, 0x7D	; 125
     fc8:	53 e0       	ldi	r21, 0x03	; 3
     fca:	62 e0       	ldi	r22, 0x02	; 2
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	b1 d2       	rcall	.+1378   	; 0x1532 <i2c_lcd_string>
     fd0:	8f ef       	ldi	r24, 0xFF	; 255
     fd2:	9f ef       	ldi	r25, 0xFF	; 255
     fd4:	b6 de       	rcall	.-660    	; 0xd42 <start_timer>
     fd6:	83 e0       	ldi	r24, 0x03	; 3
     fd8:	73 da       	rcall	.-2842   	; 0x4c0 <setSoundClip>
     fda:	2b c0       	rjmp	.+86     	; 0x1032 <__DATA_REGION_LENGTH__+0x32>
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	49 f5       	brne	.+82     	; 0x1032 <__DATA_REGION_LENGTH__+0x32>
     fe0:	07 ec       	ldi	r16, 0xC7	; 199
     fe2:	14 e0       	ldi	r17, 0x04	; 4
     fe4:	0f 2e       	mov	r0, r31
     fe6:	fb e2       	ldi	r31, 0x2B	; 43
     fe8:	ef 2e       	mov	r14, r31
     fea:	f5 e0       	ldi	r31, 0x05	; 5
     fec:	ff 2e       	mov	r15, r31
     fee:	f0 2d       	mov	r31, r0
     ff0:	6f eb       	ldi	r22, 0xBF	; 191
     ff2:	76 e0       	ldi	r23, 0x06	; 6
     ff4:	c8 01       	movw	r24, r16
     ff6:	cc d7       	rcall	.+3992   	; 0x1f90 <strcmp>
     ff8:	89 2b       	or	r24, r25
     ffa:	b1 f4       	brne	.+44     	; 0x1028 <__DATA_REGION_LENGTH__+0x28>
     ffc:	85 e0       	ldi	r24, 0x05	; 5
     ffe:	e6 e1       	ldi	r30, 0x16	; 22
    1000:	f3 e0       	ldi	r31, 0x03	; 3
    1002:	d8 01       	movw	r26, r16
    1004:	01 90       	ld	r0, Z+
    1006:	0d 92       	st	X+, r0
    1008:	8a 95       	dec	r24
    100a:	e1 f7       	brne	.-8      	; 0x1004 <__DATA_REGION_LENGTH__+0x4>
    100c:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <user_count.2492>
    1010:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <user_count.2492+0x1>
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <user_count.2492+0x1>
    101a:	80 93 9e 04 	sts	0x049E, r24	; 0x80049e <user_count.2492>
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	8f de       	rcall	.-738    	; 0xd42 <start_timer>
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	4c da       	rcall	.-2920   	; 0x4c0 <setSoundClip>
    1028:	0b 5f       	subi	r16, 0xFB	; 251
    102a:	1f 4f       	sbci	r17, 0xFF	; 255
    102c:	e0 16       	cp	r14, r16
    102e:	f1 06       	cpc	r15, r17
    1030:	f9 f6       	brne	.-66     	; 0xff0 <RC522_data_state_check_and_actuate+0x26e>
    1032:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <received_state>
    1036:	6c 96       	adiw	r28, 0x1c	; 28
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	df 90       	pop	r13
    1050:	cf 90       	pop	r12
    1052:	08 95       	ret

00001054 <main>:
    1054:	88 dd       	rcall	.-1264   	; 0xb66 <systems_init>
    1056:	c1 ed       	ldi	r28, 0xD1	; 209
    1058:	d6 e0       	ldi	r29, 0x06	; 6
    105a:	86 ea       	ldi	r24, 0xA6	; 166
    105c:	94 e0       	ldi	r25, 0x04	; 4
    105e:	e7 d9       	rcall	.-3122   	; 0x42e <RC522_data_request_per_100ms>
    1060:	86 ea       	ldi	r24, 0xA6	; 166
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	8e de       	rcall	.-740    	; 0xd82 <RC522_data_state_check_and_actuate>
    1066:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <logojector_timer_flag>
    106a:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <logojector_timer_flag+0x1>
    106e:	89 2b       	or	r24, r25
    1070:	71 f0       	breq	.+28     	; 0x108e <main+0x3a>
    1072:	88 85       	ldd	r24, Y+8	; 0x08
    1074:	99 85       	ldd	r25, Y+9	; 0x09
    1076:	aa 85       	ldd	r26, Y+10	; 0x0a
    1078:	bb 85       	ldd	r27, Y+11	; 0x0b
    107a:	81 33       	cpi	r24, 0x31	; 49
    107c:	95 47       	sbci	r25, 0x75	; 117
    107e:	a1 05       	cpc	r26, r1
    1080:	b1 05       	cpc	r27, r1
    1082:	28 f0       	brcs	.+10     	; 0x108e <main+0x3a>
    1084:	6e dd       	rcall	.-1316   	; 0xb62 <logojector_OFF>
    1086:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <logojector_timer_flag+0x1>
    108a:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <logojector_timer_flag>
    108e:	80 91 b1 04 	lds	r24, 0x04B1	; 0x8004b1 <lcd_timer_flag>
    1092:	90 91 b2 04 	lds	r25, 0x04B2	; 0x8004b2 <lcd_timer_flag+0x1>
    1096:	89 2b       	or	r24, r25
    1098:	71 f0       	breq	.+28     	; 0x10b6 <main+0x62>
    109a:	8c 85       	ldd	r24, Y+12	; 0x0c
    109c:	9d 85       	ldd	r25, Y+13	; 0x0d
    109e:	ae 85       	ldd	r26, Y+14	; 0x0e
    10a0:	bf 85       	ldd	r27, Y+15	; 0x0f
    10a2:	80 3e       	cpi	r24, 0xE0	; 224
    10a4:	9e 42       	sbci	r25, 0x2E	; 46
    10a6:	a1 05       	cpc	r26, r1
    10a8:	b1 05       	cpc	r27, r1
    10aa:	29 f4       	brne	.+10     	; 0x10b6 <main+0x62>
    10ac:	52 d1       	rcall	.+676    	; 0x1352 <i2c_lcd_noBacklight>
    10ae:	10 92 b2 04 	sts	0x04B2, r1	; 0x8004b2 <lcd_timer_flag+0x1>
    10b2:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <lcd_timer_flag>
    10b6:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <start_after_verified_timer_flag>
    10ba:	90 91 b8 04 	lds	r25, 0x04B8	; 0x8004b8 <start_after_verified_timer_flag+0x1>
    10be:	89 2b       	or	r24, r25
    10c0:	b1 f0       	breq	.+44     	; 0x10ee <main+0x9a>
    10c2:	88 81       	ld	r24, Y
    10c4:	99 81       	ldd	r25, Y+1	; 0x01
    10c6:	aa 81       	ldd	r26, Y+2	; 0x02
    10c8:	bb 81       	ldd	r27, Y+3	; 0x03
    10ca:	80 31       	cpi	r24, 0x10	; 16
    10cc:	97 42       	sbci	r25, 0x27	; 39
    10ce:	a1 05       	cpc	r26, r1
    10d0:	b1 05       	cpc	r27, r1
    10d2:	69 f0       	breq	.+26     	; 0x10ee <main+0x9a>
    10d4:	88 81       	ld	r24, Y
    10d6:	99 81       	ldd	r25, Y+1	; 0x01
    10d8:	aa 81       	ldd	r26, Y+2	; 0x02
    10da:	bb 81       	ldd	r27, Y+3	; 0x03
    10dc:	80 3e       	cpi	r24, 0xE0	; 224
    10de:	9e 42       	sbci	r25, 0x2E	; 46
    10e0:	a1 05       	cpc	r26, r1
    10e2:	b1 05       	cpc	r27, r1
    10e4:	21 f4       	brne	.+8      	; 0x10ee <main+0x9a>
    10e6:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <start_after_verified_timer_flag+0x1>
    10ea:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <start_after_verified_timer_flag>
    10ee:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <start_after_exit_user_timer_flag>
    10f2:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <start_after_exit_user_timer_flag+0x1>
    10f6:	89 2b       	or	r24, r25
    10f8:	09 f4       	brne	.+2      	; 0x10fc <main+0xa8>
    10fa:	af cf       	rjmp	.-162    	; 0x105a <main+0x6>
    10fc:	88 81       	ld	r24, Y
    10fe:	99 81       	ldd	r25, Y+1	; 0x01
    1100:	aa 81       	ldd	r26, Y+2	; 0x02
    1102:	bb 81       	ldd	r27, Y+3	; 0x03
    1104:	80 31       	cpi	r24, 0x10	; 16
    1106:	97 42       	sbci	r25, 0x27	; 39
    1108:	a1 05       	cpc	r26, r1
    110a:	b1 05       	cpc	r27, r1
    110c:	09 f4       	brne	.+2      	; 0x1110 <__stack+0x11>
    110e:	a5 cf       	rjmp	.-182    	; 0x105a <main+0x6>
    1110:	88 81       	ld	r24, Y
    1112:	99 81       	ldd	r25, Y+1	; 0x01
    1114:	aa 81       	ldd	r26, Y+2	; 0x02
    1116:	bb 81       	ldd	r27, Y+3	; 0x03
    1118:	80 3e       	cpi	r24, 0xE0	; 224
    111a:	9e 42       	sbci	r25, 0x2E	; 46
    111c:	a1 05       	cpc	r26, r1
    111e:	b1 05       	cpc	r27, r1
    1120:	09 f0       	breq	.+2      	; 0x1124 <__stack+0x25>
    1122:	9b cf       	rjmp	.-202    	; 0x105a <main+0x6>
    1124:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <start_after_exit_user_timer_flag+0x1>
    1128:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <start_after_exit_user_timer_flag>
    112c:	96 cf       	rjmp	.-212    	; 0x105a <main+0x6>

0000112e <set_step_rot>:
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	a1 f4       	brne	.+40     	; 0x115c <set_step_rot+0x2e>
    1134:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__data_end>
    1138:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__data_end+0x1>
    113c:	a0 91 9c 04 	lds	r26, 0x049C	; 0x80049c <__data_end+0x2>
    1140:	b0 91 9d 04 	lds	r27, 0x049D	; 0x80049d <__data_end+0x3>
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	a1 1d       	adc	r26, r1
    1148:	b1 1d       	adc	r27, r1
    114a:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <__data_end>
    114e:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <__data_end+0x1>
    1152:	a0 93 9c 04 	sts	0x049C, r26	; 0x80049c <__data_end+0x2>
    1156:	b0 93 9d 04 	sts	0x049D, r27	; 0x80049d <__data_end+0x3>
    115a:	1a c0       	rjmp	.+52     	; 0x1190 <set_step_rot+0x62>
    115c:	8f 3f       	cpi	r24, 0xFF	; 255
    115e:	2f ef       	ldi	r18, 0xFF	; 255
    1160:	92 07       	cpc	r25, r18
    1162:	a1 f4       	brne	.+40     	; 0x118c <set_step_rot+0x5e>
    1164:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__data_end>
    1168:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__data_end+0x1>
    116c:	a0 91 9c 04 	lds	r26, 0x049C	; 0x80049c <__data_end+0x2>
    1170:	b0 91 9d 04 	lds	r27, 0x049D	; 0x80049d <__data_end+0x3>
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	a1 09       	sbc	r26, r1
    1178:	b1 09       	sbc	r27, r1
    117a:	80 93 9a 04 	sts	0x049A, r24	; 0x80049a <__data_end>
    117e:	90 93 9b 04 	sts	0x049B, r25	; 0x80049b <__data_end+0x1>
    1182:	a0 93 9c 04 	sts	0x049C, r26	; 0x80049c <__data_end+0x2>
    1186:	b0 93 9d 04 	sts	0x049D, r27	; 0x80049d <__data_end+0x3>
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <set_step_rot+0x62>
    118c:	89 2b       	or	r24, r25
    118e:	91 f0       	breq	.+36     	; 0x11b4 <set_step_rot+0x86>
    1190:	80 91 9a 04 	lds	r24, 0x049A	; 0x80049a <__data_end>
    1194:	90 91 9b 04 	lds	r25, 0x049B	; 0x80049b <__data_end+0x1>
    1198:	a0 91 9c 04 	lds	r26, 0x049C	; 0x80049c <__data_end+0x2>
    119c:	b0 91 9d 04 	lds	r27, 0x049D	; 0x80049d <__data_end+0x3>
    11a0:	83 70       	andi	r24, 0x03	; 3
    11a2:	99 27       	eor	r25, r25
    11a4:	aa 27       	eor	r26, r26
    11a6:	bb 27       	eor	r27, r27
    11a8:	fc 01       	movw	r30, r24
    11aa:	ed 5f       	subi	r30, 0xFD	; 253
    11ac:	fe 4f       	sbci	r31, 0xFE	; 254
    11ae:	80 81       	ld	r24, Z
    11b0:	8b bb       	out	0x1b, r24	; 27
    11b2:	08 95       	ret
    11b4:	1b ba       	out	0x1b, r1	; 27
    11b6:	08 95       	ret

000011b8 <motor_drive>:
//속도는 2ms 갱신이 가장 이상적이며 160mA를 소모함
// 1ms갱신의 경우 제대로 동작하지 않음
// 갱신속도를 느리게 할 수록 속도가 느려지며, 전류소모도 이상하게 더 커짐
//한바퀴는 200스텝?
void motor_drive(){
	if(set_motor_flag)
    11b8:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <set_motor_flag>
    11bc:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <set_motor_flag+0x1>
    11c0:	89 2b       	or	r24, r25
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <motor_drive+0xe>
    11c4:	4e c0       	rjmp	.+156    	; 0x1262 <motor_drive+0xaa>
	{
		if(TICK.tick_1ms%set_step_speed(spd)==0) //103~5 (
    11c6:	60 91 d1 06 	lds	r22, 0x06D1	; 0x8006d1 <TICK>
    11ca:	70 91 d2 06 	lds	r23, 0x06D2	; 0x8006d2 <TICK+0x1>
    11ce:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <TICK+0x2>
    11d2:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <TICK+0x3>
    11d6:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    11da:	2b e0       	ldi	r18, 0x0B	; 11
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	24 1b       	sub	r18, r20
    11e0:	31 09       	sbc	r19, r1
    11e2:	03 2e       	mov	r0, r19
    11e4:	00 0c       	add	r0, r0
    11e6:	44 0b       	sbc	r20, r20
    11e8:	55 0b       	sbc	r21, r21
    11ea:	88 d6       	rcall	.+3344   	; 0x1efc <__udivmodsi4>
    11ec:	67 2b       	or	r22, r23
    11ee:	68 2b       	or	r22, r24
    11f0:	69 2b       	or	r22, r25
    11f2:	b9 f5       	brne	.+110    	; 0x1262 <motor_drive+0xaa>
		{
			//setSoundClip(BUZZ_ESP8266_CONNECTED);
			
			if(steps<set_step){
    11f4:	20 91 ad 04 	lds	r18, 0x04AD	; 0x8004ad <steps>
    11f8:	30 91 ae 04 	lds	r19, 0x04AE	; 0x8004ae <steps+0x1>
    11fc:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <set_step>
    1200:	90 91 ac 04 	lds	r25, 0x04AC	; 0x8004ac <set_step+0x1>
    1204:	28 17       	cp	r18, r24
    1206:	39 07       	cpc	r19, r25
    1208:	0c f5       	brge	.+66     	; 0x124c <motor_drive+0x94>
				if(dir==STEP_MOTOR_CW)set_step_rot(STEP_MOTOR_CW);
    120a:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <dir>
    120e:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <dir+0x1>
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	21 f4       	brne	.+8      	; 0x121e <motor_drive+0x66>
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	89 df       	rcall	.-238    	; 0x112e <set_step_rot>
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <motor_drive+0x80>
				else if(dir==STEP_MOTOR_CCW) set_step_rot(STEP_MOTOR_CCW);
    121e:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <dir>
    1222:	90 91 b0 04 	lds	r25, 0x04B0	; 0x8004b0 <dir+0x1>
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	21 f4       	brne	.+8      	; 0x1232 <motor_drive+0x7a>
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	9f ef       	ldi	r25, 0xFF	; 255
    122e:	7f df       	rcall	.-258    	; 0x112e <set_step_rot>
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <motor_drive+0x80>
				else set_step_rot(0);
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	7b df       	rcall	.-266    	; 0x112e <set_step_rot>
    1238:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <steps>
				steps++;
    123c:	90 91 ae 04 	lds	r25, 0x04AE	; 0x8004ae <steps+0x1>
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <steps+0x1>
    1246:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <steps>
    124a:	08 95       	ret
    124c:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <set_motor_flag+0x1>
			}
			else {
				set_motor_flag=0;
    1250:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <set_motor_flag>
    1254:	10 92 ae 04 	sts	0x04AE, r1	; 0x8004ae <steps+0x1>
				steps=0;
    1258:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <steps>
				set_step_rot(0);
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	66 cf       	rjmp	.-308    	; 0x112e <set_step_rot>
    1262:	08 95       	ret

00001264 <__vector_15>:
    1264:	1f 92       	push	r1
//해당 동작에 대한 정보를 기억해뒀다가 A동작이 모두 끝난 뒤 B동작 수행하기 위해 만들어진 버퍼


int start_timeout_count_flag=1;
ISR(TIMER0_COMP_vect) // 1khz 속도로 ISR 진입 1ms <-> 20ms
{
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	0b b6       	in	r0, 0x3b	; 59
    1270:	0f 92       	push	r0
    1272:	2f 93       	push	r18
    1274:	3f 93       	push	r19
    1276:	4f 93       	push	r20
    1278:	5f 93       	push	r21
    127a:	6f 93       	push	r22
    127c:	7f 93       	push	r23
    127e:	8f 93       	push	r24
    1280:	9f 93       	push	r25
    1282:	af 93       	push	r26
    1284:	bf 93       	push	r27
    1286:	ef 93       	push	r30
    1288:	ff 93       	push	r31
	//PORTA ^=0x02;
	
// 	static u32 ticks=0;
// 	ticks++;
// 	if(ticks%10==0){//0.1khz마다 증가
	TICK.buzz_1ms++;
    128a:	e1 ed       	ldi	r30, 0xD1	; 209
    128c:	f6 e0       	ldi	r31, 0x06	; 6
    128e:	84 81       	ldd	r24, Z+4	; 0x04
    1290:	95 81       	ldd	r25, Z+5	; 0x05
    1292:	a6 81       	ldd	r26, Z+6	; 0x06
    1294:	b7 81       	ldd	r27, Z+7	; 0x07
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	a1 1d       	adc	r26, r1
    129a:	b1 1d       	adc	r27, r1
    129c:	84 83       	std	Z+4, r24	; 0x04
    129e:	95 83       	std	Z+5, r25	; 0x05
    12a0:	a6 83       	std	Z+6, r26	; 0x06
    12a2:	b7 83       	std	Z+7, r27	; 0x07
	TICK.tick_1ms++;
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	a2 81       	ldd	r26, Z+2	; 0x02
    12aa:	b3 81       	ldd	r27, Z+3	; 0x03
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	a1 1d       	adc	r26, r1
    12b0:	b1 1d       	adc	r27, r1
    12b2:	80 83       	st	Z, r24
    12b4:	91 83       	std	Z+1, r25	; 0x01
    12b6:	a2 83       	std	Z+2, r26	; 0x02
    12b8:	b3 83       	std	Z+3, r27	; 0x03
	TICK.logojector_tick_1ms++;
    12ba:	80 85       	ldd	r24, Z+8	; 0x08
    12bc:	91 85       	ldd	r25, Z+9	; 0x09
    12be:	a2 85       	ldd	r26, Z+10	; 0x0a
    12c0:	b3 85       	ldd	r27, Z+11	; 0x0b
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	a1 1d       	adc	r26, r1
    12c6:	b1 1d       	adc	r27, r1
    12c8:	80 87       	std	Z+8, r24	; 0x08
    12ca:	91 87       	std	Z+9, r25	; 0x09
    12cc:	a2 87       	std	Z+10, r26	; 0x0a
    12ce:	b3 87       	std	Z+11, r27	; 0x0b
	TICK.lcd_tick_1ms++;
    12d0:	84 85       	ldd	r24, Z+12	; 0x0c
    12d2:	95 85       	ldd	r25, Z+13	; 0x0d
    12d4:	a6 85       	ldd	r26, Z+14	; 0x0e
    12d6:	b7 85       	ldd	r27, Z+15	; 0x0f
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	a1 1d       	adc	r26, r1
    12dc:	b1 1d       	adc	r27, r1
    12de:	84 87       	std	Z+12, r24	; 0x0c
    12e0:	95 87       	std	Z+13, r25	; 0x0d
    12e2:	a6 87       	std	Z+14, r26	; 0x0e
    12e4:	b7 87       	std	Z+15, r27	; 0x0f
	TICK.exit_gate_tick_1ms++;
    12e6:	80 89       	ldd	r24, Z+16	; 0x10
    12e8:	91 89       	ldd	r25, Z+17	; 0x11
    12ea:	a2 89       	ldd	r26, Z+18	; 0x12
    12ec:	b3 89       	ldd	r27, Z+19	; 0x13
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	a1 1d       	adc	r26, r1
    12f2:	b1 1d       	adc	r27, r1
    12f4:	80 8b       	std	Z+16, r24	; 0x10
    12f6:	91 8b       	std	Z+17, r25	; 0x11
    12f8:	a2 8b       	std	Z+18, r26	; 0x12
    12fa:	b3 8b       	std	Z+19, r27	; 0x13
	TICK.entrance_gate_tick_1ms++;
    12fc:	84 89       	ldd	r24, Z+20	; 0x14
    12fe:	95 89       	ldd	r25, Z+21	; 0x15
    1300:	a6 89       	ldd	r26, Z+22	; 0x16
    1302:	b7 89       	ldd	r27, Z+23	; 0x17
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	a1 1d       	adc	r26, r1
    1308:	b1 1d       	adc	r27, r1
    130a:	84 8b       	std	Z+20, r24	; 0x14
    130c:	95 8b       	std	Z+21, r25	; 0x15
    130e:	a6 8b       	std	Z+22, r26	; 0x16
    1310:	b7 8b       	std	Z+23, r27	; 0x17
// 	TICK.verified_tick_1ms++;
// 	TICK.no_registered_tick_1ms++;
	TICK.timeout_tick_1ms++;
    1312:	80 8d       	ldd	r24, Z+24	; 0x18
    1314:	91 8d       	ldd	r25, Z+25	; 0x19
    1316:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1318:	b3 8d       	ldd	r27, Z+27	; 0x1b
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	a1 1d       	adc	r26, r1
    131e:	b1 1d       	adc	r27, r1
    1320:	80 8f       	std	Z+24, r24	; 0x18
    1322:	91 8f       	std	Z+25, r25	; 0x19
    1324:	a2 8f       	std	Z+26, r26	; 0x1a
    1326:	b3 8f       	std	Z+27, r27	; 0x1b
	
	buzz_play(); //
    1328:	18 d9       	rcall	.-3536   	; 0x55a <buzz_play>
	
	motor_drive();
    132a:	46 df       	rcall	.-372    	; 0x11b8 <motor_drive>
    132c:	ff 91       	pop	r31
}
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	0f 90       	pop	r0
    1346:	0b be       	out	0x3b, r0	; 59
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <i2c_lcd_noBacklight>:
    1352:	cf 93       	push	r28
			
			while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
	}
}
void i2c_lcd_command_8(uint8_t command)
{
    1354:	df 93       	push	r29
    1356:	00 d0       	rcall	.+0      	; 0x1358 <i2c_lcd_noBacklight+0x6>
    1358:	00 d0       	rcall	.+0      	; 0x135a <i2c_lcd_noBacklight+0x8>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	84 e0       	ldi	r24, 0x04	; 4
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	1a 82       	std	Y+2, r1	; 0x02
    1364:	84 e1       	ldi	r24, 0x14	; 20
    1366:	8b 83       	std	Y+3, r24	; 0x03
    1368:	80 e1       	ldi	r24, 0x10	; 16
    136a:	8c 83       	std	Y+4, r24	; 0x04
    136c:	44 e0       	ldi	r20, 0x04	; 4
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	be 01       	movw	r22, r28
    1372:	6f 5f       	subi	r22, 0xFF	; 255
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
    1376:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    137a:	4a d1       	rcall	.+660    	; 0x1610 <i2c_transmit>
    137c:	81 11       	cpse	r24, r1
    137e:	f6 cf       	rjmp	.-20     	; 0x136c <i2c_lcd_noBacklight+0x1a>
    1380:	8f e3       	ldi	r24, 0x3F	; 63
    1382:	9c e9       	ldi	r25, 0x9C	; 156
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <i2c_lcd_noBacklight+0x32>
    1388:	00 c0       	rjmp	.+0      	; 0x138a <i2c_lcd_noBacklight+0x38>
    138a:	00 00       	nop
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <i2c_lcd_command_8>:
	uint8_t c_buf[2];
	
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <i2c_lcd_command_8+0x6>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
	
    13a4:	80 7f       	andi	r24, 0xF0	; 240
    13a6:	98 2f       	mov	r25, r24
    13a8:	9c 60       	ori	r25, 0x0C	; 12
    13aa:	99 83       	std	Y+1, r25	; 0x01
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
    13ac:	88 60       	ori	r24, 0x08	; 8
    13ae:	8a 83       	std	Y+2, r24	; 0x02
}

    13b0:	42 e0       	ldi	r20, 0x02	; 2
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	be 01       	movw	r22, r28
    13b6:	6f 5f       	subi	r22, 0xFF	; 255
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    13be:	28 d1       	rcall	.+592    	; 0x1610 <i2c_transmit>
    13c0:	81 11       	cpse	r24, r1
    13c2:	f6 cf       	rjmp	.-20     	; 0x13b0 <i2c_lcd_command_8+0x16>
void i2c_lcd_command(uint8_t command)
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <i2c_lcd_command>:
{
	uint8_t c_buf[4];
	
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <i2c_lcd_command+0x6>
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <i2c_lcd_command+0x8>
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
	
    13da:	98 2f       	mov	r25, r24
    13dc:	90 7f       	andi	r25, 0xF0	; 240
    13de:	29 2f       	mov	r18, r25
    13e0:	2c 60       	ori	r18, 0x0C	; 12
    13e2:	29 83       	std	Y+1, r18	; 0x01
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
    13e4:	98 60       	ori	r25, 0x08	; 8
    13e6:	9a 83       	std	Y+2, r25	; 0x02
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
	
    13e8:	20 e1       	ldi	r18, 0x10	; 16
    13ea:	82 9f       	mul	r24, r18
    13ec:	c0 01       	movw	r24, r0
    13ee:	11 24       	eor	r1, r1
    13f0:	98 2f       	mov	r25, r24
    13f2:	9c 60       	ori	r25, 0x0C	; 12
    13f4:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    13f6:	88 60       	ori	r24, 0x08	; 8
    13f8:	8c 83       	std	Y+4, r24	; 0x04
}

    13fa:	44 e0       	ldi	r20, 0x04	; 4
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	be 01       	movw	r22, r28
    1400:	6f 5f       	subi	r22, 0xFF	; 255
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    1408:	03 d1       	rcall	.+518    	; 0x1610 <i2c_transmit>
    140a:	81 11       	cpse	r24, r1
    140c:	f6 cf       	rjmp	.-20     	; 0x13fa <i2c_lcd_command+0x2c>
void i2c_lcd_data(uint8_t data)
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret

0000141c <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
    141c:	be d0       	rcall	.+380    	; 0x159a <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    141e:	2f ef       	ldi	r18, 0xFF	; 255
    1420:	89 e6       	ldi	r24, 0x69	; 105
    1422:	98 e1       	ldi	r25, 0x18	; 24
    1424:	21 50       	subi	r18, 0x01	; 1
    1426:	80 40       	sbci	r24, 0x00	; 0
    1428:	90 40       	sbci	r25, 0x00	; 0
    142a:	e1 f7       	brne	.-8      	; 0x1424 <i2c_lcd_init+0x8>
    142c:	00 c0       	rjmp	.+0      	; 0x142e <i2c_lcd_init+0x12>
    142e:	00 00       	nop
	_delay_ms(500);

	uart0_tx_string("Before i2c lcd Initialize... \r\n");
    1430:	8d e8       	ldi	r24, 0x8D	; 141
    1432:	93 e0       	ldi	r25, 0x03	; 3
    1434:	3a d4       	rcall	.+2164   	; 0x1caa <uart0_tx_string>
	i2c_lcd_command_8(0x30); _delay_ms(5);
    1436:	80 e3       	ldi	r24, 0x30	; 48
    1438:	b0 df       	rcall	.-160    	; 0x139a <i2c_lcd_command_8>
    143a:	8f e1       	ldi	r24, 0x1F	; 31
    143c:	9e e4       	ldi	r25, 0x4E	; 78
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <i2c_lcd_init+0x22>
    1442:	00 c0       	rjmp	.+0      	; 0x1444 <i2c_lcd_init+0x28>
    1444:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    1446:	80 e3       	ldi	r24, 0x30	; 48
    1448:	a8 df       	rcall	.-176    	; 0x139a <i2c_lcd_command_8>
    144a:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <i2c_lcd_init+0x32>
    1452:	00 c0       	rjmp	.+0      	; 0x1454 <i2c_lcd_init+0x38>
    1454:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    1456:	80 e3       	ldi	r24, 0x30	; 48
    1458:	a0 df       	rcall	.-192    	; 0x139a <i2c_lcd_command_8>
    145a:	8f e8       	ldi	r24, 0x8F	; 143
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	01 97       	sbiw	r24, 0x01	; 1
    1460:	f1 f7       	brne	.-4      	; 0x145e <i2c_lcd_init+0x42>
    1462:	00 c0       	rjmp	.+0      	; 0x1464 <i2c_lcd_init+0x48>
    1464:	00 00       	nop
	i2c_lcd_command_8(0x20); _delay_us(100);
    1466:	80 e2       	ldi	r24, 0x20	; 32
    1468:	98 df       	rcall	.-208    	; 0x139a <i2c_lcd_command_8>
    146a:	8f e8       	ldi	r24, 0x8F	; 143
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <i2c_lcd_init+0x52>
    1472:	00 c0       	rjmp	.+0      	; 0x1474 <i2c_lcd_init+0x58>
    1474:	00 00       	nop
	
	i2c_lcd_command(0x28); _delay_us(50);// function set(4-bit, 2 line, 5x7 dot)
    1476:	88 e2       	ldi	r24, 0x28	; 40
    1478:	aa df       	rcall	.-172    	; 0x13ce <i2c_lcd_command>
    147a:	87 ec       	ldi	r24, 0xC7	; 199
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <i2c_lcd_init+0x62>
    1482:	00 c0       	rjmp	.+0      	; 0x1484 <i2c_lcd_init+0x68>
    1484:	00 00       	nop
	i2c_lcd_command(0x08); _delay_us(50);// display control(display ON, cursor OFF)
    1486:	88 e0       	ldi	r24, 0x08	; 8
    1488:	a2 df       	rcall	.-188    	; 0x13ce <i2c_lcd_command>
    148a:	87 ec       	ldi	r24, 0xC7	; 199
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <i2c_lcd_init+0x72>
    1492:	00 c0       	rjmp	.+0      	; 0x1494 <i2c_lcd_init+0x78>
    1494:	00 00       	nop
	i2c_lcd_command(0x01); _delay_ms(3);// clear display 
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	9a df       	rcall	.-204    	; 0x13ce <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    149a:	8f ed       	ldi	r24, 0xDF	; 223
    149c:	9e e2       	ldi	r25, 0x2E	; 46
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <i2c_lcd_init+0x82>
    14a2:	00 c0       	rjmp	.+0      	; 0x14a4 <i2c_lcd_init+0x88>
    14a4:	00 00       	nop
	i2c_lcd_command(0x06); _delay_us(50); // entry mode set(increment, not shift)
    14a6:	86 e0       	ldi	r24, 0x06	; 6
    14a8:	92 df       	rcall	.-220    	; 0x13ce <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14aa:	87 ec       	ldi	r24, 0xC7	; 199
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <i2c_lcd_init+0x92>
    14b2:	00 c0       	rjmp	.+0      	; 0x14b4 <i2c_lcd_init+0x98>
    14b4:	00 00       	nop
	i2c_lcd_command(0x0C); _delay_us(50); // entry mode set(increment, not shift)
    14b6:	8c e0       	ldi	r24, 0x0C	; 12
    14b8:	8a df       	rcall	.-236    	; 0x13ce <i2c_lcd_command>
    14ba:	87 ec       	ldi	r24, 0xC7	; 199
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	f1 f7       	brne	.-4      	; 0x14be <i2c_lcd_init+0xa2>
    14c2:	00 c0       	rjmp	.+0      	; 0x14c4 <i2c_lcd_init+0xa8>
    14c4:	00 00       	nop
	
	uart0_tx_string("i2c CLCD Connect Ok\r\n");
    14c6:	8d ea       	ldi	r24, 0xAD	; 173
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	ef c3       	rjmp	.+2014   	; 0x1caa <uart0_tx_string>
    14cc:	08 95       	ret

000014ce <i2c_lcd_data>:
    14ce:	cf 93       	push	r28
}

void i2c_lcd_data(uint8_t data)
{
	uint8_t d_buf[4];
	
    14d0:	df 93       	push	r29
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <i2c_lcd_data+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <i2c_lcd_data+0x8>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
	
    14da:	98 2f       	mov	r25, r24
    14dc:	90 7f       	andi	r25, 0xF0	; 240
    14de:	29 2f       	mov	r18, r25
    14e0:	2d 60       	ori	r18, 0x0D	; 13
    14e2:	29 83       	std	Y+1, r18	; 0x01
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
    14e4:	99 60       	ori	r25, 0x09	; 9
    14e6:	9a 83       	std	Y+2, r25	; 0x02
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
	
    14e8:	20 e1       	ldi	r18, 0x10	; 16
    14ea:	82 9f       	mul	r24, r18
    14ec:	c0 01       	movw	r24, r0
    14ee:	11 24       	eor	r1, r1
    14f0:	98 2f       	mov	r25, r24
    14f2:	9d 60       	ori	r25, 0x0D	; 13
    14f4:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
    14f6:	89 60       	ori	r24, 0x09	; 9
    14f8:	8c 83       	std	Y+4, r24	; 0x04
}

    14fa:	44 e0       	ldi	r20, 0x04	; 4
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	be 01       	movw	r22, r28
    1500:	6f 5f       	subi	r22, 0xFF	; 255
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    1508:	83 d0       	rcall	.+262    	; 0x1610 <i2c_transmit>
    150a:	81 11       	cpse	r24, r1
    150c:	f6 cf       	rjmp	.-20     	; 0x14fa <i2c_lcd_data+0x2c>
void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <i2c_lcd_goto_XY>:
{
	static int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	
	uint8_t address = (row_offsets[row]) + col;
	uint8_t command = 0x80 | address;
	
    151c:	e8 2f       	mov	r30, r24
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	ee 0f       	add	r30, r30
    1522:	ff 1f       	adc	r31, r31
    1524:	ed 53       	subi	r30, 0x3D	; 61
    1526:	fc 4f       	sbci	r31, 0xFC	; 252
	i2c_lcd_command(command);
}

    1528:	80 81       	ld	r24, Z
    152a:	86 0f       	add	r24, r22
    152c:	80 68       	ori	r24, 0x80	; 128
    152e:	4f cf       	rjmp	.-354    	; 0x13ce <i2c_lcd_command>
    1530:	08 95       	ret

00001532 <i2c_lcd_string>:
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	ea 01       	movw	r28, r20
		i2c_lcd_data(*string++);
    1538:	f1 df       	rcall	.-30     	; 0x151c <i2c_lcd_goto_XY>
	}
    153a:	88 81       	ld	r24, Y
    153c:	88 23       	and	r24, r24
    153e:	29 f0       	breq	.+10     	; 0x154a <i2c_lcd_string+0x18>
}
    1540:	21 96       	adiw	r28, 0x01	; 1
    1542:	c5 df       	rcall	.-118    	; 0x14ce <i2c_lcd_data>
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
		i2c_lcd_data(*string++);
	}
    1544:	89 91       	ld	r24, Y+
    1546:	81 11       	cpse	r24, r1
    1548:	fc cf       	rjmp	.-8      	; 0x1542 <i2c_lcd_string+0x10>
}
void i2c_lcd_clear()
{
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	08 95       	ret

00001550 <i2c_lcd_clear>:
		uint8_t c_buf[4];
		
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	00 d0       	rcall	.+0      	; 0x1556 <i2c_lcd_clear+0x6>
    1556:	00 d0       	rcall	.+0      	; 0x1558 <i2c_lcd_clear+0x8>
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
		c_buf[0] = (0x01 &0xF0) | RS0_EN1 | BackLight;
		c_buf[1] = (0x01&0xF0) | RS0_EN0 | BackLight;
		
    155c:	8c e0       	ldi	r24, 0x0C	; 12
    155e:	89 83       	std	Y+1, r24	; 0x01
		c_buf[2] = ((0x01<<4)&0xF0) | RS0_EN1 | BackLight;
    1560:	88 e0       	ldi	r24, 0x08	; 8
    1562:	8a 83       	std	Y+2, r24	; 0x02
		c_buf[3] = ((0x01<<4)&0xF0) | RS0_EN0 | BackLight;
		
    1564:	8c e1       	ldi	r24, 0x1C	; 28
    1566:	8b 83       	std	Y+3, r24	; 0x03
		while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    1568:	88 e1       	ldi	r24, 0x18	; 24
    156a:	8c 83       	std	Y+4, r24	; 0x04
    156c:	44 e0       	ldi	r20, 0x04	; 4
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	be 01       	movw	r22, r28
    1572:	6f 5f       	subi	r22, 0xFF	; 255
    1574:	7f 4f       	sbci	r23, 0xFF	; 255
    1576:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    157a:	4a d0       	rcall	.+148    	; 0x1610 <i2c_transmit>
    157c:	81 11       	cpse	r24, r1
    157e:	f6 cf       	rjmp	.-20     	; 0x156c <i2c_lcd_clear+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1580:	8f e3       	ldi	r24, 0x3F	; 63
    1582:	9c e9       	ldi	r25, 0x9C	; 156
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <i2c_lcd_clear+0x34>
    1588:	00 c0       	rjmp	.+0      	; 0x158a <i2c_lcd_clear+0x3a>
    158a:	00 00       	nop
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
    159a:	88 e4       	ldi	r24, 0x48	; 72
    159c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    15a0:	08 95       	ret

000015a2 <i2c_start>:
    15a2:	e4 e7       	ldi	r30, 0x74	; 116
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	10 82       	st	Z, r1
    15a8:	94 ea       	ldi	r25, 0xA4	; 164
    15aa:	90 83       	st	Z, r25
    15ac:	90 81       	ld	r25, Z
    15ae:	99 23       	and	r25, r25
    15b0:	ec f7       	brge	.-6      	; 0x15ac <i2c_start+0xa>
    15b2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    15b6:	98 7f       	andi	r25, 0xF8	; 248
    15b8:	98 30       	cpi	r25, 0x08	; 8
    15ba:	a1 f4       	brne	.+40     	; 0x15e4 <i2c_start+0x42>
    15bc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    15c0:	84 e8       	ldi	r24, 0x84	; 132
    15c2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    15c6:	e4 e7       	ldi	r30, 0x74	; 116
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	88 23       	and	r24, r24
    15ce:	ec f7       	brge	.-6      	; 0x15ca <i2c_start+0x28>
    15d0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    15d4:	98 7f       	andi	r25, 0xF8	; 248
    15d6:	98 31       	cpi	r25, 0x18	; 24
    15d8:	39 f0       	breq	.+14     	; 0x15e8 <i2c_start+0x46>
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 34       	cpi	r25, 0x40	; 64
    15de:	29 f4       	brne	.+10     	; 0x15ea <i2c_start+0x48>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	08 95       	ret
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	08 95       	ret
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	08 95       	ret

000015ec <i2c_write>:
    15ec:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    15f0:	84 e8       	ldi	r24, 0x84	; 132
    15f2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    15f6:	e4 e7       	ldi	r30, 0x74	; 116
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	88 23       	and	r24, r24
    15fe:	ec f7       	brge	.-6      	; 0x15fa <i2c_write+0xe>
    1600:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1604:	98 7f       	andi	r25, 0xF8	; 248
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	98 32       	cpi	r25, 0x28	; 40
    160a:	09 f4       	brne	.+2      	; 0x160e <i2c_write+0x22>
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	08 95       	ret

00001610 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	6b 01       	movw	r12, r22
    1620:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
    1622:	bf df       	rcall	.-130    	; 0x15a2 <i2c_start>
    1624:	f8 2e       	mov	r15, r24
    1626:	81 11       	cpse	r24, r1
    1628:	17 c0       	rjmp	.+46     	; 0x1658 <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
    162a:	01 15       	cp	r16, r1
    162c:	11 05       	cpc	r17, r1
    162e:	81 f0       	breq	.+32     	; 0x1650 <i2c_transmit+0x40>
    1630:	e6 01       	movw	r28, r12
    1632:	0c 0d       	add	r16, r12
    1634:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
    1636:	89 91       	ld	r24, Y+
    1638:	d9 df       	rcall	.-78     	; 0x15ec <i2c_write>
    163a:	81 11       	cpse	r24, r1
    163c:	10 c0       	rjmp	.+32     	; 0x165e <i2c_transmit+0x4e>
    163e:	8f e9       	ldi	r24, 0x9F	; 159
    1640:	9f e0       	ldi	r25, 0x0F	; 15
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <i2c_transmit+0x32>
    1646:	00 c0       	rjmp	.+0      	; 0x1648 <i2c_transmit+0x38>
    1648:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
    164a:	0c 17       	cp	r16, r28
    164c:	1d 07       	cpc	r17, r29
    164e:	99 f7       	brne	.-26     	; 0x1636 <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1650:	84 e9       	ldi	r24, 0x94	; 148
    1652:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1656:	05 c0       	rjmp	.+10     	; 0x1662 <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
    1658:	ff 24       	eor	r15, r15
    165a:	f3 94       	inc	r15
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
    165e:	ff 24       	eor	r15, r15
    1660:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
    1662:	8f 2d       	mov	r24, r15
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	df 90       	pop	r13
    1670:	cf 90       	pop	r12
    1672:	08 95       	ret

00001674 <mfrc522_write>:
void mfrc522_init(unsigned char ch)
{
	unsigned char byte;
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
	
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	16 2f       	mov	r17, r22
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
	SS_PORT=0; //입력핀이 전원에 영향 끼치는 행위를 막기 위함
	//이렇게 케어해두니, 이상 동작하지 않아서 좋음
    167c:	95 b3       	in	r25, 0x15	; 21
    167e:	c1 e0       	ldi	r28, 0x01	; 1
    1680:	d0 e0       	ldi	r29, 0x00	; 0
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <mfrc522_write+0x14>
    1684:	cc 0f       	add	r28, r28
    1686:	dd 1f       	adc	r29, r29
    1688:	4a 95       	dec	r20
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <mfrc522_write+0x10>
    168c:	2c 2f       	mov	r18, r28
    168e:	20 95       	com	r18
    1690:	92 23       	and	r25, r18
    1692:	95 bb       	out	0x15, r25	; 21
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
    1694:	88 0f       	add	r24, r24
    1696:	8e 77       	andi	r24, 0x7E	; 126
    1698:	a3 d2       	rcall	.+1350   	; 0x1be0 <spi_master_tx>
	mfrc522_reset(ch);
	
    169a:	81 2f       	mov	r24, r17
    169c:	a1 d2       	rcall	.+1346   	; 0x1be0 <spi_master_tx>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
    169e:	85 b3       	in	r24, 0x15	; 21
    16a0:	c8 2b       	or	r28, r24
    16a2:	c5 bb       	out	0x15, r28	; 21
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	1f 91       	pop	r17
    16aa:	08 95       	ret

000016ac <mfrc522_read>:
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
	
	
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
    16b0:	95 b3       	in	r25, 0x15	; 21
    16b2:	c1 e0       	ldi	r28, 0x01	; 1
    16b4:	d0 e0       	ldi	r29, 0x00	; 0
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <mfrc522_read+0x10>
    16b8:	cc 0f       	add	r28, r28
    16ba:	dd 1f       	adc	r29, r29
    16bc:	6a 95       	dec	r22
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <mfrc522_read+0xc>
    16c0:	2c 2f       	mov	r18, r28
    16c2:	20 95       	com	r18
    16c4:	92 23       	and	r25, r18
    16c6:	95 bb       	out	0x15, r25	; 21
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
    16c8:	88 0f       	add	r24, r24
    16ca:	8e 77       	andi	r24, 0x7E	; 126
    16cc:	80 68       	ori	r24, 0x80	; 128
    16ce:	88 d2       	rcall	.+1296   	; 0x1be0 <spi_master_tx>
	}
    16d0:	8b d2       	rcall	.+1302   	; 0x1be8 <spi_master_rx>
    16d2:	95 b3       	in	r25, 0x15	; 21
}

    16d4:	c9 2b       	or	r28, r25
    16d6:	c5 bb       	out	0x15, r28	; 21
    16d8:	df 91       	pop	r29

void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <mfrc522_to_card>:
    16de:	2f 92       	push	r2
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

    16e0:	3f 92       	push	r3
    16e2:	4f 92       	push	r4
    16e4:	5f 92       	push	r5
    16e6:	6f 92       	push	r6
    16e8:	7f 92       	push	r7
    16ea:	8f 92       	push	r8
    16ec:	9f 92       	push	r9
    16ee:	af 92       	push	r10
    16f0:	bf 92       	push	r11
    16f2:	cf 92       	push	r12
    16f4:	df 92       	push	r13
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	f8 2e       	mov	r15, r24
    1704:	a6 2e       	mov	r10, r22
    1706:	b7 2e       	mov	r11, r23
    1708:	44 2e       	mov	r4, r20
    170a:	22 2e       	mov	r2, r18
    170c:	d3 2e       	mov	r13, r19
void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
    170e:	8c e0       	ldi	r24, 0x0C	; 12
    1710:	f8 16       	cp	r15, r24
    1712:	59 f0       	breq	.+22     	; 0x172a <mfrc522_to_card+0x4c>
    1714:	ee e0       	ldi	r30, 0x0E	; 14
    1716:	fe 12       	cpse	r15, r30
    1718:	11 c0       	rjmp	.+34     	; 0x173c <mfrc522_to_card+0x5e>
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
	//RC522와 연결된 SS핀 HIGH출력
    171a:	68 94       	set
    171c:	cc 24       	eor	r12, r12
    171e:	c4 f8       	bld	r12, 4
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
    1720:	0f 2e       	mov	r0, r31
    1722:	f2 e1       	ldi	r31, 0x12	; 18
    1724:	3f 2e       	mov	r3, r31
    1726:	f0 2d       	mov	r31, r0
    1728:	0b c0       	rjmp	.+22     	; 0x1740 <mfrc522_to_card+0x62>
	SS_PORT |= (1<<channel);
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}

    172a:	0f 2e       	mov	r0, r31
    172c:	f0 e3       	ldi	r31, 0x30	; 48
    172e:	cf 2e       	mov	r12, r31
    1730:	f0 2d       	mov	r31, r0
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
    1732:	0f 2e       	mov	r0, r31
    1734:	f7 e7       	ldi	r31, 0x77	; 119
    1736:	3f 2e       	mov	r3, r31
    1738:	f0 2d       	mov	r31, r0


    173a:	02 c0       	rjmp	.+4      	; 0x1740 <mfrc522_to_card+0x62>
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}


    173c:	c1 2c       	mov	r12, r1
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}

    173e:	31 2c       	mov	r3, r1
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
	value = spi_master_rx(); //send dummy data and receive data.
    1740:	4e 2d       	mov	r20, r14
    1742:	63 2d       	mov	r22, r3
    1744:	60 68       	ori	r22, 0x80	; 128
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	95 df       	rcall	.-214    	; 0x1674 <mfrc522_write>
	//RC522와 연결된 SS핀 HIGH출력
    174a:	6e 2d       	mov	r22, r14
    174c:	84 e0       	ldi	r24, 0x04	; 4
    174e:	ae df       	rcall	.-164    	; 0x16ac <mfrc522_read>
	SS_PORT |= (1<<channel);
    1750:	68 2f       	mov	r22, r24
    1752:	6f 77       	andi	r22, 0x7F	; 127
    1754:	4e 2d       	mov	r20, r14
    1756:	84 e0       	ldi	r24, 0x04	; 4
    1758:	8d df       	rcall	.-230    	; 0x1674 <mfrc522_write>
	
    175a:	6e 2d       	mov	r22, r14
    175c:	8a e0       	ldi	r24, 0x0A	; 10
    175e:	a6 df       	rcall	.-180    	; 0x16ac <mfrc522_read>
    1760:	68 2f       	mov	r22, r24
	return value;
    1762:	60 68       	ori	r22, 0x80	; 128
    1764:	4e 2d       	mov	r20, r14
    1766:	8a e0       	ldi	r24, 0x0A	; 10
    1768:	85 df       	rcall	.-246    	; 0x1674 <mfrc522_write>
}

    176a:	4e 2d       	mov	r20, r14
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	81 df       	rcall	.-254    	; 0x1674 <mfrc522_write>
    1772:	51 2c       	mov	r5, r1
void mfrc522_version_check(unsigned char ch){
	
	unsigned char byte;
    1774:	61 2c       	mov	r6, r1
    1776:	71 2c       	mov	r7, r1
    1778:	41 14       	cp	r4, r1
    177a:	51 04       	cpc	r5, r1
    177c:	61 04       	cpc	r6, r1
    177e:	71 04       	cpc	r7, r1
    1780:	99 f0       	breq	.+38     	; 0x17a8 <mfrc522_to_card+0xca>
    1782:	ca 2d       	mov	r28, r10
    1784:	db 2d       	mov	r29, r11
    1786:	81 2c       	mov	r8, r1
    1788:	91 2c       	mov	r9, r1
    178a:	54 01       	movw	r10, r8
	
	byte = mfrc522_read(VersionReg, ch);
    178c:	69 91       	ld	r22, Y+
    178e:	4e 2d       	mov	r20, r14
    1790:	89 e0       	ldi	r24, 0x09	; 9
    1792:	70 df       	rcall	.-288    	; 0x1674 <mfrc522_write>
    1794:	ff ef       	ldi	r31, 0xFF	; 255
	return value;
}

void mfrc522_version_check(unsigned char ch){
	
	unsigned char byte;
    1796:	8f 1a       	sub	r8, r31
    1798:	9f 0a       	sbc	r9, r31
    179a:	af 0a       	sbc	r10, r31
    179c:	bf 0a       	sbc	r11, r31
    179e:	84 14       	cp	r8, r4
    17a0:	95 04       	cpc	r9, r5
    17a2:	a6 04       	cpc	r10, r6
    17a4:	b7 04       	cpc	r11, r7
    17a6:	90 f3       	brcs	.-28     	; 0x178c <mfrc522_to_card+0xae>
	
	byte = mfrc522_read(VersionReg, ch);
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
    17a8:	4e 2d       	mov	r20, r14
    17aa:	6f 2d       	mov	r22, r15
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	62 df       	rcall	.-316    	; 0x1674 <mfrc522_write>
	else uart0_tx_string("\n[channel 1");
    17b0:	8c e0       	ldi	r24, 0x0C	; 12
    17b2:	f8 12       	cpse	r15, r24
	
	if(byte == 0x92)
    17b4:	08 c0       	rjmp	.+16     	; 0x17c6 <mfrc522_to_card+0xe8>
    17b6:	6e 2d       	mov	r22, r14
    17b8:	8d e0       	ldi	r24, 0x0D	; 13
	{
    17ba:	78 df       	rcall	.-272    	; 0x16ac <mfrc522_read>
    17bc:	68 2f       	mov	r22, r24
    17be:	60 68       	ori	r22, 0x80	; 128
    17c0:	4e 2d       	mov	r20, r14
    17c2:	8d e0       	ldi	r24, 0x0D	; 13
    17c4:	57 df       	rcall	.-338    	; 0x1674 <mfrc522_write>
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    17c6:	6e 2d       	mov	r22, r14
    17c8:	84 e0       	ldi	r24, 0x04	; 4
    17ca:	70 df       	rcall	.-288    	; 0x16ac <mfrc522_read>
    17cc:	b8 2e       	mov	r11, r24
    17ce:	c0 e0       	ldi	r28, 0x00	; 0
    17d0:	d0 e0       	ldi	r29, 0x00	; 0
	}else
	{
		uart0_tx_string(" No reader found]\n");
    17d2:	ec 2d       	mov	r30, r12
    17d4:	e1 60       	ori	r30, 0x01	; 1
    17d6:	ce 2e       	mov	r12, r30
    17d8:	0a c0       	rjmp	.+20     	; 0x17ee <mfrc522_to_card+0x110>
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    17da:	6e 2d       	mov	r22, r14
    17dc:	84 e0       	ldi	r24, 0x04	; 4
    17de:	66 df       	rcall	.-308    	; 0x16ac <mfrc522_read>
    17e0:	b8 2e       	mov	r11, r24
    17e2:	21 96       	adiw	r28, 0x01	; 1
    17e4:	cf 3c       	cpi	r28, 0xCF	; 207
	}else
	{
		uart0_tx_string(" No reader found]\n");
    17e6:	f7 e0       	ldi	r31, 0x07	; 7
    17e8:	df 07       	cpc	r29, r31
    17ea:	09 f4       	brne	.+2      	; 0x17ee <mfrc522_to_card+0x110>
    17ec:	68 c0       	rjmp	.+208    	; 0x18be <mfrc522_to_card+0x1e0>
    17ee:	8c 2d       	mov	r24, r12
    17f0:	8b 21       	and	r24, r11
    17f2:	99 f3       	breq	.-26     	; 0x17da <mfrc522_to_card+0xfc>
    17f4:	6e c0       	rjmp	.+220    	; 0x18d2 <mfrc522_to_card+0x1f4>
    17f6:	83 2d       	mov	r24, r3
}

void mfrc522_IRQ_enable(unsigned char ch)
{
	unsigned char byte;
	
    17f8:	81 70       	andi	r24, 0x01	; 1
    17fa:	b8 22       	and	r11, r24
    17fc:	11 f0       	breq	.+4      	; 0x1802 <mfrc522_to_card+0x124>
	byte=mfrc522_read(ComIEnReg, ch);
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
    17fe:	c2 e0       	ldi	r28, 0x02	; 2
	
}

void mfrc522_IRQ_enable(unsigned char ch)
{
	unsigned char byte;
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <mfrc522_to_card+0x126>
	
	byte=mfrc522_read(ComIEnReg, ch);
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
	byte=mfrc522_read(DivIEnReg, ch);
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
}
    1802:	c1 e0       	ldi	r28, 0x01	; 1
    1804:	8c e0       	ldi	r24, 0x0C	; 12
    1806:	f8 12       	cpse	r15, r24


    1808:	73 c0       	rjmp	.+230    	; 0x18f0 <mfrc522_to_card+0x212>
    180a:	6e 2d       	mov	r22, r14
    180c:	8a e0       	ldi	r24, 0x0A	; 10
    180e:	4e df       	rcall	.-356    	; 0x16ac <mfrc522_read>
    1810:	88 2e       	mov	r8, r24
unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
    1812:	6e 2d       	mov	r22, r14
    1814:	8c e0       	ldi	r24, 0x0C	; 12
    1816:	4a df       	rcall	.-364    	; 0x16ac <mfrc522_read>
    1818:	28 2f       	mov	r18, r24
    181a:	27 70       	andi	r18, 0x07	; 7
    181c:	a9 f0       	breq	.+42     	; 0x1848 <mfrc522_to_card+0x16a>
{
    181e:	88 2d       	mov	r24, r8
	uint8_t  status;
	uint32_t backBits;//The received data bits
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	82 0f       	add	r24, r18
    1832:	91 1d       	adc	r25, r1
    1834:	09 2e       	mov	r0, r25
    1836:	00 0c       	add	r0, r0
    1838:	aa 0b       	sbc	r26, r26
    183a:	bb 0b       	sbc	r27, r27
    183c:	f8 01       	movw	r30, r16
    183e:	80 83       	st	Z, r24
    1840:	91 83       	std	Z+1, r25	; 0x01
    1842:	a2 83       	std	Z+2, r26	; 0x02
    1844:	b3 83       	std	Z+3, r27	; 0x03
    1846:	11 c0       	rjmp	.+34     	; 0x186a <mfrc522_to_card+0x18c>
    1848:	88 2d       	mov	r24, r8

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
	
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	09 2e       	mov	r0, r25
    185a:	00 0c       	add	r0, r0
    185c:	aa 0b       	sbc	r26, r26
    185e:	bb 0b       	sbc	r27, r27
    1860:	f8 01       	movw	r30, r16
    1862:	80 83       	st	Z, r24
    1864:	91 83       	std	Z+1, r25	; 0x01
    1866:	a2 83       	std	Z+2, r26	; 0x02
    1868:	b3 83       	std	Z+3, r27	; 0x03
    186a:	88 20       	and	r8, r8
	tag_type[0] = req_mode;
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);

    186c:	71 f0       	breq	.+28     	; 0x188a <mfrc522_to_card+0x1ac>
    186e:	88 2d       	mov	r24, r8
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    1870:	81 31       	cpi	r24, 0x11	; 17
    1872:	08 f0       	brcs	.+2      	; 0x1876 <mfrc522_to_card+0x198>
    1874:	80 e1       	ldi	r24, 0x10	; 16
    1876:	88 2e       	mov	r8, r24
    1878:	91 2c       	mov	r9, r1
    187a:	a1 2c       	mov	r10, r1
    187c:	b1 2c       	mov	r11, r1
    187e:	81 14       	cp	r8, r1
    1880:	91 04       	cpc	r9, r1
    1882:	a1 04       	cpc	r10, r1
    1884:	b1 04       	cpc	r11, r1
    1886:	29 f4       	brne	.+10     	; 0x1892 <mfrc522_to_card+0x1b4>
    1888:	33 c0       	rjmp	.+102    	; 0x18f0 <mfrc522_to_card+0x212>
    188a:	81 2c       	mov	r8, r1
    188c:	91 2c       	mov	r9, r1
    188e:	54 01       	movw	r10, r8
    1890:	83 94       	inc	r8
    1892:	02 2d       	mov	r16, r2
    1894:	1d 2d       	mov	r17, r13
    1896:	41 2c       	mov	r4, r1
    1898:	51 2c       	mov	r5, r1
    189a:	32 01       	movw	r6, r4
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
    189c:	6e 2d       	mov	r22, r14
    189e:	89 e0       	ldi	r24, 0x09	; 9
    18a0:	05 df       	rcall	.-502    	; 0x16ac <mfrc522_read>
    18a2:	f8 01       	movw	r30, r16
    18a4:	81 93       	st	Z+, r24
    18a6:	8f 01       	movw	r16, r30
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    18a8:	ff ef       	ldi	r31, 0xFF	; 255
    18aa:	4f 1a       	sub	r4, r31
    18ac:	5f 0a       	sbc	r5, r31
    18ae:	6f 0a       	sbc	r6, r31
    18b0:	7f 0a       	sbc	r7, r31
    18b2:	48 14       	cp	r4, r8
    18b4:	59 04       	cpc	r5, r9
    18b6:	6a 04       	cpc	r6, r10
    18b8:	7b 04       	cpc	r7, r11
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
    18ba:	80 f3       	brcs	.-32     	; 0x189c <mfrc522_to_card+0x1be>
    18bc:	19 c0       	rjmp	.+50     	; 0x18f0 <mfrc522_to_card+0x212>
    18be:	6e 2d       	mov	r22, r14
	}
    18c0:	8d e0       	ldi	r24, 0x0D	; 13
    18c2:	f4 de       	rcall	.-536    	; 0x16ac <mfrc522_read>
    18c4:	68 2f       	mov	r22, r24
    18c6:	6f 77       	andi	r22, 0x7F	; 127
    18c8:	4e 2d       	mov	r20, r14
void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}
    18ca:	8d e0       	ldi	r24, 0x0D	; 13
    18cc:	d3 de       	rcall	.-602    	; 0x1674 <mfrc522_write>
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
    18ce:	c3 e0       	ldi	r28, 0x03	; 3
    18d0:	0f c0       	rjmp	.+30     	; 0x18f0 <mfrc522_to_card+0x212>
    18d2:	6e 2d       	mov	r22, r14
    18d4:	8d e0       	ldi	r24, 0x0D	; 13
	}
    18d6:	ea de       	rcall	.-556    	; 0x16ac <mfrc522_read>
    18d8:	68 2f       	mov	r22, r24
    18da:	6f 77       	andi	r22, 0x7F	; 127
    18dc:	4e 2d       	mov	r20, r14
    18de:	8d e0       	ldi	r24, 0x0D	; 13
    18e0:	c9 de       	rcall	.-622    	; 0x1674 <mfrc522_write>
	
}

void mfrc522_IRQ_enable(unsigned char ch)
    18e2:	6e 2d       	mov	r22, r14
    18e4:	86 e0       	ldi	r24, 0x06	; 6
    18e6:	e2 de       	rcall	.-572    	; 0x16ac <mfrc522_read>
    18e8:	8b 71       	andi	r24, 0x1B	; 27
    18ea:	09 f4       	brne	.+2      	; 0x18ee <mfrc522_to_card+0x210>
    18ec:	84 cf       	rjmp	.-248    	; 0x17f6 <mfrc522_to_card+0x118>
    18ee:	c3 e0       	ldi	r28, 0x03	; 3
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

    18f0:	8c 2f       	mov	r24, r28
		{
			irqEn = 0x12;
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	bf 90       	pop	r11
    1904:	af 90       	pop	r10
    1906:	9f 90       	pop	r9
    1908:	8f 90       	pop	r8
    190a:	7f 90       	pop	r7
    190c:	6f 90       	pop	r6
    190e:	5f 90       	pop	r5
    1910:	4f 90       	pop	r4
    1912:	3f 90       	pop	r3
    1914:	2f 90       	pop	r2
    1916:	08 95       	ret

00001918 <mfrc522_init>:
    1918:	cf 93       	push	r28
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    191a:	c8 2f       	mov	r28, r24
			break;
		}
		default:
    191c:	1f 92       	push	r1
    191e:	1f 92       	push	r1
    1920:	1f 92       	push	r1
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	8f 93       	push	r24
    1926:	83 e0       	ldi	r24, 0x03	; 3
    1928:	8f 93       	push	r24
    192a:	17 d1       	rcall	.+558    	; 0x1b5a <spi_init>
		break;
	}
	
    192c:	84 b3       	in	r24, 0x14	; 20
    192e:	83 60       	ori	r24, 0x03	; 3
    1930:	84 bb       	out	0x14, r24	; 20
	///////////////////////////////////////////============여기-==========//////////
    1932:	15 ba       	out	0x15, r1	; 21
    1934:	2f ef       	ldi	r18, 0xFF	; 255
    1936:	89 ef       	ldi	r24, 0xF9	; 249
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	21 50       	subi	r18, 0x01	; 1
    193c:	80 40       	sbci	r24, 0x00	; 0
    193e:	90 40       	sbci	r25, 0x00	; 0
    1940:	e1 f7       	brne	.-8      	; 0x193a <mfrc522_init+0x22>
    1942:	00 c0       	rjmp	.+0      	; 0x1944 <mfrc522_init+0x2c>
    1944:	00 00       	nop
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
	n=mfrc522_read(ComIrqReg,ch);
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
    1946:	85 b3       	in	r24, 0x15	; 21
    1948:	83 60       	ori	r24, 0x03	; 3
    194a:	85 bb       	out	0x15, r24	; 21
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
	
	
    194c:	4c 2f       	mov	r20, r28
    194e:	6f e0       	ldi	r22, 0x0F	; 15
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 de       	rcall	.-736    	; 0x1674 <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
	{
    1954:	4c 2f       	mov	r20, r28
    1956:	6d e8       	ldi	r22, 0x8D	; 141
    1958:	8a e2       	ldi	r24, 0x2A	; 42
    195a:	8c de       	rcall	.-744    	; 0x1674 <mfrc522_write>
		mfrc522_write(FIFODataReg, send_data[i],ch);
    195c:	4c 2f       	mov	r20, r28
    195e:	6e e3       	ldi	r22, 0x3E	; 62
    1960:	8b e2       	ldi	r24, 0x2B	; 43
    1962:	88 de       	rcall	.-752    	; 0x1674 <mfrc522_write>
	}
    1964:	4c 2f       	mov	r20, r28
    1966:	6e e1       	ldi	r22, 0x1E	; 30
    1968:	8c e2       	ldi	r24, 0x2C	; 44
    196a:	84 de       	rcall	.-760    	; 0x1674 <mfrc522_write>

    196c:	4c 2f       	mov	r20, r28
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	8d e2       	ldi	r24, 0x2D	; 45
    1972:	80 de       	rcall	.-768    	; 0x1674 <mfrc522_write>
	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
	if (cmd == MFRC522_CMD_Transceive)
    1974:	4c 2f       	mov	r20, r28
    1976:	60 e4       	ldi	r22, 0x40	; 64
    1978:	85 e1       	ldi	r24, 0x15	; 21
    197a:	7c de       	rcall	.-776    	; 0x1674 <mfrc522_write>
	{
    197c:	4c 2f       	mov	r20, r28
    197e:	6d e3       	ldi	r22, 0x3D	; 61
    1980:	81 e1       	ldi	r24, 0x11	; 17
    1982:	78 de       	rcall	.-784    	; 0x1674 <mfrc522_write>
    1984:	6c 2f       	mov	r22, r28
		n=mfrc522_read(BitFramingReg,ch);
		mfrc522_write(BitFramingReg,n|0x80,ch);
	}
	
    1986:	84 e1       	ldi	r24, 0x14	; 20
    1988:	91 de       	rcall	.-734    	; 0x16ac <mfrc522_read>
    198a:	98 2f       	mov	r25, r24
    198c:	93 70       	andi	r25, 0x03	; 3
	//Waiting to receive data to complete
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	29 f4       	brne	.+10     	; 0x19a4 <mfrc522_init+0x8c>
    199a:	68 2f       	mov	r22, r24
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
    199c:	63 60       	ori	r22, 0x03	; 3
    199e:	4c 2f       	mov	r20, r28
    19a0:	84 e1       	ldi	r24, 0x14	; 20
    19a2:	68 de       	rcall	.-816    	; 0x1674 <mfrc522_write>
    19a4:	cf 91       	pop	r28
    19a6:	08 95       	ret

000019a8 <mfrc522_version_check>:
	{
		//CommIrqReg[7..0]
    19a8:	cf 93       	push	r28
    19aa:	df 93       	push	r29
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    19ac:	d8 2f       	mov	r29, r24

	tmp=mfrc522_read(BitFramingReg,ch);
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
	
    19ae:	68 2f       	mov	r22, r24
    19b0:	87 e3       	ldi	r24, 0x37	; 55
    19b2:	7c de       	rcall	.-776    	; 0x16ac <mfrc522_read>
    19b4:	c8 2f       	mov	r28, r24
    19b6:	2f ef       	ldi	r18, 0xFF	; 255
    19b8:	89 ef       	ldi	r24, 0xF9	; 249
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	21 50       	subi	r18, 0x01	; 1
    19be:	80 40       	sbci	r24, 0x00	; 0
    19c0:	90 40       	sbci	r25, 0x00	; 0
    19c2:	e1 f7       	brne	.-8      	; 0x19bc <mfrc522_version_check+0x14>
    19c4:	00 c0       	rjmp	.+0      	; 0x19c6 <mfrc522_version_check+0x1e>
    19c6:	00 00       	nop
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
    19c8:	d1 11       	cpse	r29, r1
    19ca:	06 c0       	rjmp	.+12     	; 0x19d8 <mfrc522_version_check+0x30>
    19cc:	8b ec       	ldi	r24, 0xCB	; 203
    19ce:	93 e0       	ldi	r25, 0x03	; 3
    19d0:	6c d1       	rcall	.+728    	; 0x1caa <uart0_tx_string>
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
    19d2:	c2 39       	cpi	r28, 0x92	; 146
    19d4:	59 f5       	brne	.+86     	; 0x1a2c <mfrc522_version_check+0x84>
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <mfrc522_version_check+0x4e>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
    19d8:	87 ed       	ldi	r24, 0xD7	; 215
    19da:	93 e0       	ldi	r25, 0x03	; 3
    19dc:	66 d1       	rcall	.+716    	; 0x1caa <uart0_tx_string>
			if (n & irqEn & 0x01)
			{
    19de:	c2 39       	cpi	r28, 0x92	; 146
    19e0:	91 f5       	brne	.+100    	; 0x1a46 <mfrc522_version_check+0x9e>
				if (lastBits)
				{
					*back_data_len = (n-1)*8 + lastBits;
				}
				else
				{
    19e2:	12 c0       	rjmp	.+36     	; 0x1a08 <mfrc522_version_check+0x60>
    19e4:	83 ee       	ldi	r24, 0xE3	; 227
    19e6:	93 e0       	ldi	r25, 0x03	; 3
    19e8:	60 d1       	rcall	.+704    	; 0x1caa <uart0_tx_string>
					*back_data_len = n*8;
    19ea:	46 ef       	ldi	r20, 0xF6	; 246
    19ec:	53 e0       	ldi	r21, 0x03	; 3
    19ee:	60 e0       	ldi	r22, 0x00	; 0
    19f0:	82 e0       	ldi	r24, 0x02	; 2
    19f2:	9f dd       	rcall	.-1218   	; 0x1532 <i2c_lcd_string>
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}
    19f4:	ff cf       	rjmp	.-2      	; 0x19f4 <mfrc522_version_check+0x4c>
    19f6:	8a e0       	ldi	r24, 0x0A	; 10
    19f8:	94 e0       	ldi	r25, 0x04	; 4

    19fa:	57 d1       	rcall	.+686    	; 0x1caa <uart0_tx_string>
    19fc:	4e e2       	ldi	r20, 0x2E	; 46
    19fe:	54 e0       	ldi	r21, 0x04	; 4
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	96 dd       	rcall	.-1236   	; 0x1532 <i2c_lcd_string>
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}
    1a06:	23 c0       	rjmp	.+70     	; 0x1a4e <mfrc522_version_check+0xa6>
    1a08:	8a e0       	ldi	r24, 0x0A	; 10
    1a0a:	94 e0       	ldi	r25, 0x04	; 4

			if (cmd == MFRC522_CMD_Transceive)
    1a0c:	4e d1       	rcall	.+668    	; 0x1caa <uart0_tx_string>
    1a0e:	43 e4       	ldi	r20, 0x43	; 67
    1a10:	54 e0       	ldi	r21, 0x04	; 4
    1a12:	60 e0       	ldi	r22, 0x00	; 0
    1a14:	82 e0       	ldi	r24, 0x02	; 2
			{
				n = mfrc522_read(FIFOLevelReg,ch);
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
				if (lastBits)
    1a16:	8d dd       	rcall	.-1254   	; 0x1532 <i2c_lcd_string>
    1a18:	1a c0       	rjmp	.+52     	; 0x1a4e <mfrc522_version_check+0xa6>
    1a1a:	88 e5       	ldi	r24, 0x58	; 88
    1a1c:	94 e0       	ldi	r25, 0x04	; 4
				{
    1a1e:	45 d1       	rcall	.+650    	; 0x1caa <uart0_tx_string>
    1a20:	4e e2       	ldi	r20, 0x2E	; 46
    1a22:	54 e0       	ldi	r21, 0x04	; 4
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	82 e0       	ldi	r24, 0x02	; 2
    1a28:	84 dd       	rcall	.-1272   	; 0x1532 <i2c_lcd_string>
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1a2a:	11 c0       	rjmp	.+34     	; 0x1a4e <mfrc522_version_check+0xa6>
    1a2c:	c0 59       	subi	r28, 0x90	; 144
    1a2e:	c2 30       	cpi	r28, 0x02	; 2
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
				if (lastBits)
    1a30:	c8 f6       	brcc	.-78     	; 0x19e4 <mfrc522_version_check+0x3c>
    1a32:	f3 cf       	rjmp	.-26     	; 0x1a1a <mfrc522_version_check+0x72>
    1a34:	88 e5       	ldi	r24, 0x58	; 88
    1a36:	94 e0       	ldi	r25, 0x04	; 4
				{
					*back_data_len = (n-1)*8 + lastBits;
    1a38:	38 d1       	rcall	.+624    	; 0x1caa <uart0_tx_string>
    1a3a:	43 e4       	ldi	r20, 0x43	; 67
    1a3c:	54 e0       	ldi	r21, 0x04	; 4
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	77 dd       	rcall	.-1298   	; 0x1532 <i2c_lcd_string>
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <mfrc522_version_check+0xa6>
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1a46:	c0 59       	subi	r28, 0x90	; 144
    1a48:	c2 30       	cpi	r28, 0x02	; 2
    1a4a:	60 f6       	brcc	.-104    	; 0x19e4 <mfrc522_version_check+0x3c>
    1a4c:	f3 cf       	rjmp	.-26     	; 0x1a34 <mfrc522_version_check+0x8c>
				{
					*back_data_len = n*8;
				}

				if (n == 0)
				{
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	08 95       	ret

00001a54 <mfrc522_IRQ_enable>:
					n = 1;
				}
				if (n > MAX_LEN)
    1a54:	cf 93       	push	r28
    1a56:	c8 2f       	mov	r28, r24
				{
					n = MAX_LEN;
				}
    1a58:	68 2f       	mov	r22, r24
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
    1a5c:	27 de       	rcall	.-946    	; 0x16ac <mfrc522_read>
				
    1a5e:	68 2f       	mov	r22, r24
    1a60:	60 62       	ori	r22, 0x20	; 32
    1a62:	4c 2f       	mov	r20, r28
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	06 de       	rcall	.-1012   	; 0x1674 <mfrc522_write>
				//Reading the received data in FIFO
    1a68:	6c 2f       	mov	r22, r28
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	1f de       	rcall	.-962    	; 0x16ac <mfrc522_read>
				for (i=0; i<n; i++)
    1a6e:	68 2f       	mov	r22, r24
    1a70:	60 68       	ori	r22, 0x80	; 128
    1a72:	4c 2f       	mov	r20, r28
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	fe dd       	rcall	.-1028   	; 0x1674 <mfrc522_write>
				{
    1a78:	cf 91       	pop	r28
    1a7a:	08 95       	ret

00001a7c <mfrc522_request>:
					back_data[i] = mfrc522_read(FIFODataReg,ch);
				}
			}
		}
    1a7c:	cf 92       	push	r12
    1a7e:	df 92       	push	r13
    1a80:	ef 92       	push	r14
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <mfrc522_request+0x10>
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <mfrc522_request+0x12>
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	18 2f       	mov	r17, r24
    1a94:	6b 01       	movw	r12, r22
    1a96:	e4 2e       	mov	r14, r20
		else
		{
			status = ERROR;
		}
		
    1a98:	67 e0       	ldi	r22, 0x07	; 7
    1a9a:	8d e0       	ldi	r24, 0x0D	; 13
    1a9c:	eb dd       	rcall	.-1066   	; 0x1674 <mfrc522_write>
	}
	
    1a9e:	f6 01       	movw	r30, r12
    1aa0:	10 83       	st	Z, r17
// 	SetBitMask(ControlReg,0x80);           //timer stops
    1aa2:	8e 01       	movw	r16, r28
    1aa4:	0f 5f       	subi	r16, 0xFF	; 255
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	96 01       	movw	r18, r12
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	b6 01       	movw	r22, r12
    1aae:	8c e0       	ldi	r24, 0x0C	; 12
    1ab0:	16 de       	rcall	.-980    	; 0x16de <mfrc522_to_card>
 //mfrc522_write(CommandReg, MFRC522_CMD_Idle);

    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	59 f4       	brne	.+22     	; 0x1acc <mfrc522_request+0x50>
    1ab6:	49 81       	ldd	r20, Y+1	; 0x01
    1ab8:	5a 81       	ldd	r21, Y+2	; 0x02
    1aba:	6b 81       	ldd	r22, Y+3	; 0x03
    1abc:	7c 81       	ldd	r23, Y+4	; 0x04
    1abe:	40 31       	cpi	r20, 0x10	; 16
    1ac0:	51 05       	cpc	r21, r1
    1ac2:	61 05       	cpc	r22, r1
    1ac4:	71 05       	cpc	r23, r1
    1ac6:	19 f0       	breq	.+6      	; 0x1ace <mfrc522_request+0x52>
	return status;
}
    1ac8:	83 e0       	ldi	r24, 0x03	; 3
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <mfrc522_request+0x52>
    1acc:	83 e0       	ldi	r24, 0x03	; 3


unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	cf 90       	pop	r12
    1ae4:	08 95       	ret

00001ae6 <mfrc522_get_card_serial>:
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
    1ae6:	cf 92       	push	r12
    1ae8:	df 92       	push	r13
    1aea:	ef 92       	push	r14
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <mfrc522_get_card_serial+0x10>
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <mfrc522_get_card_serial+0x12>
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	6c 01       	movw	r12, r24
    1afe:	e6 2e       	mov	r14, r22
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
	
	serial_out[0] = PICC_ANTICOLL;
	serial_out[1] = 0x20;
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

    1b00:	46 2f       	mov	r20, r22
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	8d e0       	ldi	r24, 0x0D	; 13
    1b06:	b6 dd       	rcall	.-1172   	; 0x1674 <mfrc522_write>
	if (status == CARD_FOUND)
	{
    1b08:	83 e9       	ldi	r24, 0x93	; 147
    1b0a:	f6 01       	movw	r30, r12
    1b0c:	80 83       	st	Z, r24
		//Check card serial number
    1b0e:	80 e2       	ldi	r24, 0x20	; 32
    1b10:	81 83       	std	Z+1, r24	; 0x01
		for (i=0; i<4; i++)
    1b12:	8e 01       	movw	r16, r28
    1b14:	0f 5f       	subi	r16, 0xFF	; 255
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	96 01       	movw	r18, r12
    1b1a:	42 e0       	ldi	r20, 0x02	; 2
    1b1c:	b6 01       	movw	r22, r12
    1b1e:	8c e0       	ldi	r24, 0x0C	; 12
    1b20:	de dd       	rcall	.-1092   	; 0x16de <mfrc522_to_card>
		{
			serNumCheck ^= serial_out[i];
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	71 f4       	brne	.+28     	; 0x1b42 <mfrc522_get_card_serial+0x5c>
    1b26:	f6 01       	movw	r30, r12
    1b28:	a6 01       	movw	r20, r12
    1b2a:	4c 5f       	subi	r20, 0xFC	; 252
    1b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (serNumCheck != serial_out[i])
		{
			status = ERROR;
		}
    1b30:	21 91       	ld	r18, Z+
    1b32:	92 27       	eor	r25, r18
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
		{
    1b34:	4e 17       	cp	r20, r30
    1b36:	5f 07       	cpc	r21, r31
    1b38:	d9 f7       	brne	.-10     	; 0x1b30 <mfrc522_get_card_serial+0x4a>
			status = ERROR;
		}
	}
	return status;
    1b3a:	f6 01       	movw	r30, r12
    1b3c:	24 81       	ldd	r18, Z+4	; 0x04
    1b3e:	92 13       	cpse	r25, r18
}

    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	ef 90       	pop	r14
    1b54:	df 90       	pop	r13
    1b56:	cf 90       	pop	r12
    1b58:	08 95       	ret

00001b5a <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(uint8_t spi_mode, ...){
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	00 d0       	rcall	.+0      	; 0x1b60 <spi_init+0x6>
    1b60:	1f 92       	push	r1
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
    1b68:	83 30       	cpi	r24, 0x03	; 3
    1b6a:	21 f1       	breq	.+72     	; 0x1bb4 <spi_init+0x5a>
    1b6c:	81 11       	cpse	r24, r1
    1b6e:	32 c0       	rjmp	.+100    	; 0x1bd4 <spi_init+0x7a>
    1b70:	29 c0       	rjmp	.+82     	; 0x1bc4 <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
    1b72:	9c 91       	ld	r25, X
    1b74:	12 96       	adiw	r26, 0x02	; 2
    1b76:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
    1b78:	e2 17       	cp	r30, r18
    1b7a:	f3 07       	cpc	r31, r19
    1b7c:	d1 f7       	brne	.-12     	; 0x1b72 <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b80:	92 30       	cpi	r25, 0x02	; 2
    1b82:	20 f1       	brcs	.+72     	; 0x1bcc <spi_init+0x72>
    1b84:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
    1b86:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
    1b88:	83 30       	cpi	r24, 0x03	; 3
    1b8a:	71 f4       	brne	.+28     	; 0x1ba8 <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
    1b8c:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
    1b8e:	87 b3       	in	r24, 0x17	; 23
    1b90:	87 60       	ori	r24, 0x07	; 7
    1b92:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
    1b94:	99 81       	ldd	r25, Y+1	; 0x01
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	89 2b       	or	r24, r25
    1b9a:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
    1b9c:	2e b1       	in	r18, 0x0e	; 14
    1b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba0:	92 2b       	or	r25, r18
    1ba2:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
    1ba4:	8d b9       	out	0x0d, r24	; 13
    1ba6:	16 c0       	rjmp	.+44     	; 0x1bd4 <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
    1ba8:	81 11       	cpse	r24, r1
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
    1bac:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
    1bae:	80 e4       	ldi	r24, 0x40	; 64
    1bb0:	8d b9       	out	0x0d, r24	; 13
    1bb2:	10 c0       	rjmp	.+32     	; 0x1bd4 <spi_init+0x7a>
    1bb4:	de 01       	movw	r26, r28
    1bb6:	19 96       	adiw	r26, 0x09	; 9
    1bb8:	fe 01       	movw	r30, r28
    1bba:	31 96       	adiw	r30, 0x01	; 1
    1bbc:	9e 01       	movw	r18, r28
    1bbe:	2c 5f       	subi	r18, 0xFC	; 252
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	d7 cf       	rjmp	.-82     	; 0x1b72 <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc6:	92 30       	cpi	r25, 0x02	; 2
    1bc8:	e8 f6       	brcc	.-70     	; 0x1b84 <spi_init+0x2a>
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
    1bcc:	1d b8       	out	0x0d, r1	; 13
    1bce:	de cf       	rjmp	.-68     	; 0x1b8c <spi_init+0x32>
    1bd0:	1d b8       	out	0x0d, r1	; 13
    1bd2:	ec cf       	rjmp	.-40     	; 0x1bac <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	08 95       	ret

00001be0 <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
    1be0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
    1be2:	77 9b       	sbis	0x0e, 7	; 14
    1be4:	fe cf       	rjmp	.-4      	; 0x1be2 <spi_master_tx+0x2>
}
    1be6:	08 95       	ret

00001be8 <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
    1be8:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
    1bea:	77 9b       	sbis	0x0e, 7	; 14
    1bec:	fe cf       	rjmp	.-4      	; 0x1bea <spi_master_rx+0x2>
	
	return SPDR;
    1bee:	8f b1       	in	r24, 0x0f	; 15
}
    1bf0:	08 95       	ret

00001bf2 <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
    1bf2:	bc 9a       	sbi	0x17, 4	; 23
    1bf4:	8c e0       	ldi	r24, 0x0C	; 12
    1bf6:	83 bf       	out	0x33, r24	; 51
    1bf8:	8a ef       	ldi	r24, 0xFA	; 250
    1bfa:	81 bf       	out	0x31, r24	; 49
    1bfc:	87 b7       	in	r24, 0x37	; 55
    1bfe:	82 60       	ori	r24, 0x02	; 2
    1c00:	87 bf       	out	0x37, r24	; 55
    1c02:	08 95       	ret

00001c04 <timer1_init>:
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	8f bd       	out	0x2f, r24	; 47
    1c08:	8a e1       	ldi	r24, 0x1A	; 26
    1c0a:	8e bd       	out	0x2e, r24	; 46
    1c0c:	1d bc       	out	0x2d, r1	; 45
    1c0e:	1c bc       	out	0x2c, r1	; 44
    1c10:	17 bc       	out	0x27, r1	; 39
    1c12:	87 ec       	ldi	r24, 0xC7	; 199
    1c14:	86 bd       	out	0x26, r24	; 38
    1c16:	87 b7       	in	r24, 0x37	; 55
    1c18:	84 60       	ori	r24, 0x04	; 4
    1c1a:	87 bf       	out	0x37, r24	; 55
    1c1c:	08 95       	ret

00001c1e <timer3_init>:
    1c1e:	13 9a       	sbi	0x02, 3	; 2
    1c20:	80 e4       	ldi	r24, 0x40	; 64
    1c22:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1c26:	8a e1       	ldi	r24, 0x1A	; 26
    1c28:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1c2c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1c30:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1c34:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1c38:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1c3c:	08 95       	ret

00001c3e <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
    1c3e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
    1c42:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1c46:	08 95       	ret

00001c48 <uart_init>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	ec 01       	movw	r28, r24
    1c4e:	9b 01       	movw	r18, r22
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	60 e4       	ldi	r22, 0x40	; 64
    1c56:	72 e4       	ldi	r23, 0x42	; 66
    1c58:	8f e0       	ldi	r24, 0x0F	; 15
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	4f d1       	rcall	.+670    	; 0x1efc <__udivmodsi4>
    1c5e:	21 50       	subi	r18, 0x01	; 1
    1c60:	31 09       	sbc	r19, r1
    1c62:	20 97       	sbiw	r28, 0x00	; 0
    1c64:	59 f4       	brne	.+22     	; 0x1c7c <uart_init+0x34>
    1c66:	10 98       	cbi	0x02, 0	; 2
    1c68:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1c6c:	29 b9       	out	0x09, r18	; 9
    1c6e:	88 e1       	ldi	r24, 0x18	; 24
    1c70:	8a b9       	out	0x0a, r24	; 10
    1c72:	57 9a       	sbi	0x0a, 7	; 10
    1c74:	86 e0       	ldi	r24, 0x06	; 6
    1c76:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1c7a:	10 c0       	rjmp	.+32     	; 0x1c9c <uart_init+0x54>
    1c7c:	21 97       	sbiw	r28, 0x01	; 1
    1c7e:	71 f4       	brne	.+28     	; 0x1c9c <uart_init+0x54>
    1c80:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1c84:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1c88:	ea e9       	ldi	r30, 0x9A	; 154
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	88 e1       	ldi	r24, 0x18	; 24
    1c8e:	80 83       	st	Z, r24
    1c90:	80 81       	ld	r24, Z
    1c92:	80 68       	ori	r24, 0x80	; 128
    1c94:	80 83       	st	Z, r24
    1c96:	86 e0       	ldi	r24, 0x06	; 6
    1c98:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	08 95       	ret

00001ca2 <uart0_tx_char>:
    1ca2:	5d 9b       	sbis	0x0b, 5	; 11
    1ca4:	fe cf       	rjmp	.-4      	; 0x1ca2 <uart0_tx_char>
    1ca6:	8c b9       	out	0x0c, r24	; 12
    1ca8:	08 95       	ret

00001caa <uart0_tx_string>:
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	ec 01       	movw	r28, r24
    1cb0:	88 81       	ld	r24, Y
    1cb2:	88 23       	and	r24, r24
    1cb4:	29 f0       	breq	.+10     	; 0x1cc0 <uart0_tx_string+0x16>
    1cb6:	21 96       	adiw	r28, 0x01	; 1
    1cb8:	f4 df       	rcall	.-24     	; 0x1ca2 <uart0_tx_char>
    1cba:	89 91       	ld	r24, Y+
    1cbc:	81 11       	cpse	r24, r1
    1cbe:	fc cf       	rjmp	.-8      	; 0x1cb8 <uart0_tx_string+0xe>
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	08 95       	ret

00001cc6 <uart1_tx_char>:
    1cc6:	eb e9       	ldi	r30, 0x9B	; 155
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	90 81       	ld	r25, Z
    1ccc:	95 ff       	sbrs	r25, 5
    1cce:	fd cf       	rjmp	.-6      	; 0x1cca <uart1_tx_char+0x4>
    1cd0:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1cd4:	08 95       	ret

00001cd6 <uart1_tx_string>:
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	ec 01       	movw	r28, r24
    1cdc:	88 81       	ld	r24, Y
    1cde:	88 23       	and	r24, r24
    1ce0:	29 f0       	breq	.+10     	; 0x1cec <uart1_tx_string+0x16>
    1ce2:	21 96       	adiw	r28, 0x01	; 1
    1ce4:	f0 df       	rcall	.-32     	; 0x1cc6 <uart1_tx_char>
    1ce6:	89 91       	ld	r24, Y+
    1ce8:	81 11       	cpse	r24, r1
    1cea:	fc cf       	rjmp	.-8      	; 0x1ce4 <uart1_tx_string+0xe>
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	08 95       	ret

00001cf2 <IntToString>:

char * IntToString(int num)
{
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	64 97       	sbiw	r28, 0x14	; 20
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%02d",num); //고유 자릿값
    1d0a:	9f 93       	push	r25
    1d0c:	8f 93       	push	r24
    1d0e:	8c e7       	ldi	r24, 0x7C	; 124
    1d10:	94 e0       	ldi	r25, 0x04	; 4
    1d12:	9f 93       	push	r25
    1d14:	8f 93       	push	r24
    1d16:	8e 01       	movw	r16, r28
    1d18:	0f 5f       	subi	r16, 0xFF	; 255
    1d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1c:	1f 93       	push	r17
    1d1e:	0f 93       	push	r16
    1d20:	4f d1       	rcall	.+670    	; 0x1fc0 <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
    1d22:	b8 01       	movw	r22, r16
    1d24:	8d e2       	ldi	r24, 0x2D	; 45
    1d26:	96 e0       	ldi	r25, 0x06	; 6
    1d28:	3c d1       	rcall	.+632    	; 0x1fa2 <strcpy>
	
	return (buff.itos_buff);
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
}
    1d36:	8d e2       	ldi	r24, 0x2D	; 45
    1d38:	96 e0       	ldi	r25, 0x06	; 6
    1d3a:	64 96       	adiw	r28, 0x14	; 20
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	08 95       	ret

00001d50 <HexToString>:
 
 char * HexToString(char num)
 {
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	cd b7       	in	r28, 0x3d	; 61
    1d5a:	de b7       	in	r29, 0x3e	; 62
    1d5c:	64 97       	sbiw	r28, 0x14	; 20
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
    1d68:	1f 92       	push	r1
    1d6a:	8f 93       	push	r24
    1d6c:	81 e8       	ldi	r24, 0x81	; 129
    1d6e:	94 e0       	ldi	r25, 0x04	; 4
    1d70:	9f 93       	push	r25
    1d72:	8f 93       	push	r24
    1d74:	8e 01       	movw	r16, r28
    1d76:	0f 5f       	subi	r16, 0xFF	; 255
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	1f 93       	push	r17
    1d7c:	0f 93       	push	r16
    1d7e:	20 d1       	rcall	.+576    	; 0x1fc0 <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
    1d80:	b8 01       	movw	r22, r16
    1d82:	8d e2       	ldi	r24, 0x2D	; 45
    1d84:	96 e0       	ldi	r25, 0x06	; 6
    1d86:	0d d1       	rcall	.+538    	; 0x1fa2 <strcpy>
	 
	 return (buff.itos_buff);
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
 }
    1d94:	8d e2       	ldi	r24, 0x2D	; 45
    1d96:	96 e0       	ldi	r25, 0x06	; 6
    1d98:	64 96       	adiw	r28, 0x14	; 20
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	08 95       	ret

00001dae <connect_to_AP>:
 
 
 
char* connect_to_AP(char * cmd,char *ssid,char*password){
    1dae:	cf 92       	push	r12
    1db0:	df 92       	push	r13
    1db2:	ef 92       	push	r14
    1db4:	ff 92       	push	r15
    1db6:	0f 93       	push	r16
    1db8:	1f 93       	push	r17
    1dba:	cf 93       	push	r28
    1dbc:	df 93       	push	r29
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	c0 54       	subi	r28, 0x40	; 64
    1dc4:	d1 09       	sbc	r29, r1
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	6b 01       	movw	r12, r22
    1dd2:	7a 01       	movw	r14, r20
	//문자열 변수 ?
	//"AT+CWJAP=\""
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1dd4:	20 e4       	ldi	r18, 0x40	; 64
    1dd6:	ed e6       	ldi	r30, 0x6D	; 109
    1dd8:	f6 e0       	ldi	r31, 0x06	; 6
    1dda:	df 01       	movw	r26, r30
    1ddc:	1d 92       	st	X+, r1
    1dde:	2a 95       	dec	r18
    1de0:	e9 f7       	brne	.-6      	; 0x1ddc <connect_to_AP+0x2e>
	
	strcpy(buf,cmd);//"AT+CWJAP=\""
    1de2:	bc 01       	movw	r22, r24
    1de4:	8e 01       	movw	r16, r28
    1de6:	0f 5f       	subi	r16, 0xFF	; 255
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	c8 01       	movw	r24, r16
    1dec:	da d0       	rcall	.+436    	; 0x1fa2 <strcpy>
	strcat(buf,ssid);
    1dee:	b6 01       	movw	r22, r12
    1df0:	c8 01       	movw	r24, r16
    1df2:	c3 d0       	rcall	.+390    	; 0x1f7a <strcat>
	strcat(buf,"\",\"");
    1df4:	f8 01       	movw	r30, r16
    1df6:	01 90       	ld	r0, Z+
    1df8:	00 20       	and	r0, r0
    1dfa:	e9 f7       	brne	.-6      	; 0x1df6 <connect_to_AP+0x48>
    1dfc:	31 97       	sbiw	r30, 0x01	; 1
    1dfe:	82 e2       	ldi	r24, 0x22	; 34
    1e00:	9c e2       	ldi	r25, 0x2C	; 44
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
    1e06:	82 e2       	ldi	r24, 0x22	; 34
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	93 83       	std	Z+3, r25	; 0x03
    1e0c:	82 83       	std	Z+2, r24	; 0x02
	strcat(buf,password);
    1e0e:	b7 01       	movw	r22, r14
    1e10:	c8 01       	movw	r24, r16
    1e12:	b3 d0       	rcall	.+358    	; 0x1f7a <strcat>
	strcat(buf,"\"\r\n");
    1e14:	f8 01       	movw	r30, r16
    1e16:	01 90       	ld	r0, Z+
    1e18:	00 20       	and	r0, r0
    1e1a:	e9 f7       	brne	.-6      	; 0x1e16 <connect_to_AP+0x68>
    1e1c:	31 97       	sbiw	r30, 0x01	; 1
    1e1e:	82 e2       	ldi	r24, 0x22	; 34
    1e20:	9d e0       	ldi	r25, 0x0D	; 13
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	80 83       	st	Z, r24
    1e26:	8a e0       	ldi	r24, 0x0A	; 10
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	93 83       	std	Z+3, r25	; 0x03
    1e2c:	82 83       	std	Z+2, r24	; 0x02
	strcpy(buff.esp_buff,buf);
    1e2e:	b8 01       	movw	r22, r16
    1e30:	8d e6       	ldi	r24, 0x6D	; 109
    1e32:	96 e0       	ldi	r25, 0x06	; 6
    1e34:	b6 d0       	rcall	.+364    	; 0x1fa2 <strcpy>
	return buff.esp_buff;
	
}
    1e36:	8d e6       	ldi	r24, 0x6D	; 109
    1e38:	96 e0       	ldi	r25, 0x06	; 6
    1e3a:	c0 5c       	subi	r28, 0xC0	; 192
    1e3c:	df 4f       	sbci	r29, 0xFF	; 255
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	1f 91       	pop	r17
    1e4e:	0f 91       	pop	r16
    1e50:	ff 90       	pop	r15
    1e52:	ef 90       	pop	r14
    1e54:	df 90       	pop	r13
    1e56:	cf 90       	pop	r12
    1e58:	08 95       	ret

00001e5a <TCP_connect>:

char* TCP_connect(char * ip, char* port)
{//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	c0 54       	subi	r28, 0x40	; 64
    1e6c:	d1 09       	sbc	r29, r1
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	9c 01       	movw	r18, r24
    1e7a:	7b 01       	movw	r14, r22
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    1e7c:	80 e4       	ldi	r24, 0x40	; 64
    1e7e:	ed e6       	ldi	r30, 0x6D	; 109
    1e80:	f6 e0       	ldi	r31, 0x06	; 6
    1e82:	df 01       	movw	r26, r30
    1e84:	1d 92       	st	X+, r1
    1e86:	8a 95       	dec	r24
    1e88:	e9 f7       	brne	.-6      	; 0x1e84 <TCP_connect+0x2a>
		
	strcpy(buf,"AT+CIPSTART=\"TCP\",\"");
    1e8a:	94 e1       	ldi	r25, 0x14	; 20
    1e8c:	e6 e8       	ldi	r30, 0x86	; 134
    1e8e:	f4 e0       	ldi	r31, 0x04	; 4
    1e90:	8e 01       	movw	r16, r28
    1e92:	0f 5f       	subi	r16, 0xFF	; 255
    1e94:	1f 4f       	sbci	r17, 0xFF	; 255
    1e96:	d8 01       	movw	r26, r16
    1e98:	01 90       	ld	r0, Z+
    1e9a:	0d 92       	st	X+, r0
    1e9c:	9a 95       	dec	r25
    1e9e:	e1 f7       	brne	.-8      	; 0x1e98 <TCP_connect+0x3e>
	strcat(buf,ip);
    1ea0:	b9 01       	movw	r22, r18
    1ea2:	c8 01       	movw	r24, r16
    1ea4:	6a d0       	rcall	.+212    	; 0x1f7a <strcat>
	strcat(buf,"\",");
    1ea6:	f8 01       	movw	r30, r16
    1ea8:	01 90       	ld	r0, Z+
    1eaa:	00 20       	and	r0, r0
    1eac:	e9 f7       	brne	.-6      	; 0x1ea8 <TCP_connect+0x4e>
    1eae:	31 97       	sbiw	r30, 0x01	; 1
    1eb0:	82 e2       	ldi	r24, 0x22	; 34
    1eb2:	9c e2       	ldi	r25, 0x2C	; 44
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	80 83       	st	Z, r24
    1eb8:	12 82       	std	Z+2, r1	; 0x02
	strcat(buf,port);
    1eba:	b7 01       	movw	r22, r14
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	5d d0       	rcall	.+186    	; 0x1f7a <strcat>
	strcat(buf,"\r\n");
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	01 90       	ld	r0, Z+
    1ec4:	00 20       	and	r0, r0
    1ec6:	e9 f7       	brne	.-6      	; 0x1ec2 <TCP_connect+0x68>
    1ec8:	31 97       	sbiw	r30, 0x01	; 1
    1eca:	8d e0       	ldi	r24, 0x0D	; 13
    1ecc:	9a e0       	ldi	r25, 0x0A	; 10
    1ece:	91 83       	std	Z+1, r25	; 0x01
    1ed0:	80 83       	st	Z, r24
    1ed2:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
    1ed4:	b8 01       	movw	r22, r16
    1ed6:	8d e6       	ldi	r24, 0x6D	; 109
    1ed8:	96 e0       	ldi	r25, 0x06	; 6
    1eda:	63 d0       	rcall	.+198    	; 0x1fa2 <strcpy>
	
	return buff.esp_buff;
	
}
    1edc:	8d e6       	ldi	r24, 0x6D	; 109
    1ede:	96 e0       	ldi	r25, 0x06	; 6
    1ee0:	c0 5c       	subi	r28, 0xC0	; 192
    1ee2:	df 4f       	sbci	r29, 0xFF	; 255
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	1f 91       	pop	r17
    1ef4:	0f 91       	pop	r16
    1ef6:	ff 90       	pop	r15
    1ef8:	ef 90       	pop	r14
    1efa:	08 95       	ret

00001efc <__udivmodsi4>:
    1efc:	a1 e2       	ldi	r26, 0x21	; 33
    1efe:	1a 2e       	mov	r1, r26
    1f00:	aa 1b       	sub	r26, r26
    1f02:	bb 1b       	sub	r27, r27
    1f04:	fd 01       	movw	r30, r26
    1f06:	0d c0       	rjmp	.+26     	; 0x1f22 <__udivmodsi4_ep>

00001f08 <__udivmodsi4_loop>:
    1f08:	aa 1f       	adc	r26, r26
    1f0a:	bb 1f       	adc	r27, r27
    1f0c:	ee 1f       	adc	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	a2 17       	cp	r26, r18
    1f12:	b3 07       	cpc	r27, r19
    1f14:	e4 07       	cpc	r30, r20
    1f16:	f5 07       	cpc	r31, r21
    1f18:	20 f0       	brcs	.+8      	; 0x1f22 <__udivmodsi4_ep>
    1f1a:	a2 1b       	sub	r26, r18
    1f1c:	b3 0b       	sbc	r27, r19
    1f1e:	e4 0b       	sbc	r30, r20
    1f20:	f5 0b       	sbc	r31, r21

00001f22 <__udivmodsi4_ep>:
    1f22:	66 1f       	adc	r22, r22
    1f24:	77 1f       	adc	r23, r23
    1f26:	88 1f       	adc	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	1a 94       	dec	r1
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <__udivmodsi4_loop>
    1f2e:	60 95       	com	r22
    1f30:	70 95       	com	r23
    1f32:	80 95       	com	r24
    1f34:	90 95       	com	r25
    1f36:	9b 01       	movw	r18, r22
    1f38:	ac 01       	movw	r20, r24
    1f3a:	bd 01       	movw	r22, r26
    1f3c:	cf 01       	movw	r24, r30
    1f3e:	08 95       	ret

00001f40 <atoi>:
    1f40:	fc 01       	movw	r30, r24
    1f42:	88 27       	eor	r24, r24
    1f44:	99 27       	eor	r25, r25
    1f46:	e8 94       	clt
    1f48:	21 91       	ld	r18, Z+
    1f4a:	20 32       	cpi	r18, 0x20	; 32
    1f4c:	e9 f3       	breq	.-6      	; 0x1f48 <atoi+0x8>
    1f4e:	29 30       	cpi	r18, 0x09	; 9
    1f50:	10 f0       	brcs	.+4      	; 0x1f56 <atoi+0x16>
    1f52:	2e 30       	cpi	r18, 0x0E	; 14
    1f54:	c8 f3       	brcs	.-14     	; 0x1f48 <atoi+0x8>
    1f56:	2b 32       	cpi	r18, 0x2B	; 43
    1f58:	39 f0       	breq	.+14     	; 0x1f68 <atoi+0x28>
    1f5a:	2d 32       	cpi	r18, 0x2D	; 45
    1f5c:	31 f4       	brne	.+12     	; 0x1f6a <atoi+0x2a>
    1f5e:	68 94       	set
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <atoi+0x28>
    1f62:	26 d0       	rcall	.+76     	; 0x1fb0 <__mulhi_const_10>
    1f64:	82 0f       	add	r24, r18
    1f66:	91 1d       	adc	r25, r1
    1f68:	21 91       	ld	r18, Z+
    1f6a:	20 53       	subi	r18, 0x30	; 48
    1f6c:	2a 30       	cpi	r18, 0x0A	; 10
    1f6e:	c8 f3       	brcs	.-14     	; 0x1f62 <atoi+0x22>
    1f70:	1e f4       	brtc	.+6      	; 0x1f78 <atoi+0x38>
    1f72:	90 95       	com	r25
    1f74:	81 95       	neg	r24
    1f76:	9f 4f       	sbci	r25, 0xFF	; 255
    1f78:	08 95       	ret

00001f7a <strcat>:
    1f7a:	fb 01       	movw	r30, r22
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	0d 90       	ld	r0, X+
    1f80:	00 20       	and	r0, r0
    1f82:	e9 f7       	brne	.-6      	; 0x1f7e <strcat+0x4>
    1f84:	11 97       	sbiw	r26, 0x01	; 1
    1f86:	01 90       	ld	r0, Z+
    1f88:	0d 92       	st	X+, r0
    1f8a:	00 20       	and	r0, r0
    1f8c:	e1 f7       	brne	.-8      	; 0x1f86 <strcat+0xc>
    1f8e:	08 95       	ret

00001f90 <strcmp>:
    1f90:	fb 01       	movw	r30, r22
    1f92:	dc 01       	movw	r26, r24
    1f94:	8d 91       	ld	r24, X+
    1f96:	01 90       	ld	r0, Z+
    1f98:	80 19       	sub	r24, r0
    1f9a:	01 10       	cpse	r0, r1
    1f9c:	d9 f3       	breq	.-10     	; 0x1f94 <strcmp+0x4>
    1f9e:	99 0b       	sbc	r25, r25
    1fa0:	08 95       	ret

00001fa2 <strcpy>:
    1fa2:	fb 01       	movw	r30, r22
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	01 90       	ld	r0, Z+
    1fa8:	0d 92       	st	X+, r0
    1faa:	00 20       	and	r0, r0
    1fac:	e1 f7       	brne	.-8      	; 0x1fa6 <strcpy+0x4>
    1fae:	08 95       	ret

00001fb0 <__mulhi_const_10>:
    1fb0:	7a e0       	ldi	r23, 0x0A	; 10
    1fb2:	97 9f       	mul	r25, r23
    1fb4:	90 2d       	mov	r25, r0
    1fb6:	87 9f       	mul	r24, r23
    1fb8:	80 2d       	mov	r24, r0
    1fba:	91 0d       	add	r25, r1
    1fbc:	11 24       	eor	r1, r1
    1fbe:	08 95       	ret

00001fc0 <sprintf>:
    1fc0:	0f 93       	push	r16
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	2e 97       	sbiw	r28, 0x0e	; 14
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	0d 89       	ldd	r16, Y+21	; 0x15
    1fda:	1e 89       	ldd	r17, Y+22	; 0x16
    1fdc:	86 e0       	ldi	r24, 0x06	; 6
    1fde:	8c 83       	std	Y+4, r24	; 0x04
    1fe0:	1a 83       	std	Y+2, r17	; 0x02
    1fe2:	09 83       	std	Y+1, r16	; 0x01
    1fe4:	8f ef       	ldi	r24, 0xFF	; 255
    1fe6:	9f e7       	ldi	r25, 0x7F	; 127
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
    1fec:	ae 01       	movw	r20, r28
    1fee:	47 5e       	subi	r20, 0xE7	; 231
    1ff0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff2:	6f 89       	ldd	r22, Y+23	; 0x17
    1ff4:	78 8d       	ldd	r23, Y+24	; 0x18
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	10 d0       	rcall	.+32     	; 0x201c <vfprintf>
    1ffc:	ef 81       	ldd	r30, Y+7	; 0x07
    1ffe:	f8 85       	ldd	r31, Y+8	; 0x08
    2000:	e0 0f       	add	r30, r16
    2002:	f1 1f       	adc	r31, r17
    2004:	10 82       	st	Z, r1
    2006:	2e 96       	adiw	r28, 0x0e	; 14
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	f8 94       	cli
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	0f be       	out	0x3f, r0	; 63
    2010:	cd bf       	out	0x3d, r28	; 61
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	08 95       	ret

0000201c <vfprintf>:
    201c:	2f 92       	push	r2
    201e:	3f 92       	push	r3
    2020:	4f 92       	push	r4
    2022:	5f 92       	push	r5
    2024:	6f 92       	push	r6
    2026:	7f 92       	push	r7
    2028:	8f 92       	push	r8
    202a:	9f 92       	push	r9
    202c:	af 92       	push	r10
    202e:	bf 92       	push	r11
    2030:	cf 92       	push	r12
    2032:	df 92       	push	r13
    2034:	ef 92       	push	r14
    2036:	ff 92       	push	r15
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	2b 97       	sbiw	r28, 0x0b	; 11
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	6c 01       	movw	r12, r24
    2052:	7b 01       	movw	r14, r22
    2054:	8a 01       	movw	r16, r20
    2056:	fc 01       	movw	r30, r24
    2058:	17 82       	std	Z+7, r1	; 0x07
    205a:	16 82       	std	Z+6, r1	; 0x06
    205c:	83 81       	ldd	r24, Z+3	; 0x03
    205e:	81 ff       	sbrs	r24, 1
    2060:	bf c1       	rjmp	.+894    	; 0x23e0 <vfprintf+0x3c4>
    2062:	ce 01       	movw	r24, r28
    2064:	01 96       	adiw	r24, 0x01	; 1
    2066:	3c 01       	movw	r6, r24
    2068:	f6 01       	movw	r30, r12
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	f7 01       	movw	r30, r14
    206e:	93 fd       	sbrc	r25, 3
    2070:	85 91       	lpm	r24, Z+
    2072:	93 ff       	sbrs	r25, 3
    2074:	81 91       	ld	r24, Z+
    2076:	7f 01       	movw	r14, r30
    2078:	88 23       	and	r24, r24
    207a:	09 f4       	brne	.+2      	; 0x207e <vfprintf+0x62>
    207c:	ad c1       	rjmp	.+858    	; 0x23d8 <vfprintf+0x3bc>
    207e:	85 32       	cpi	r24, 0x25	; 37
    2080:	39 f4       	brne	.+14     	; 0x2090 <vfprintf+0x74>
    2082:	93 fd       	sbrc	r25, 3
    2084:	85 91       	lpm	r24, Z+
    2086:	93 ff       	sbrs	r25, 3
    2088:	81 91       	ld	r24, Z+
    208a:	7f 01       	movw	r14, r30
    208c:	85 32       	cpi	r24, 0x25	; 37
    208e:	21 f4       	brne	.+8      	; 0x2098 <vfprintf+0x7c>
    2090:	b6 01       	movw	r22, r12
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	d6 d1       	rcall	.+940    	; 0x2442 <fputc>
    2096:	e8 cf       	rjmp	.-48     	; 0x2068 <vfprintf+0x4c>
    2098:	91 2c       	mov	r9, r1
    209a:	21 2c       	mov	r2, r1
    209c:	31 2c       	mov	r3, r1
    209e:	ff e1       	ldi	r31, 0x1F	; 31
    20a0:	f3 15       	cp	r31, r3
    20a2:	d8 f0       	brcs	.+54     	; 0x20da <vfprintf+0xbe>
    20a4:	8b 32       	cpi	r24, 0x2B	; 43
    20a6:	79 f0       	breq	.+30     	; 0x20c6 <vfprintf+0xaa>
    20a8:	38 f4       	brcc	.+14     	; 0x20b8 <vfprintf+0x9c>
    20aa:	80 32       	cpi	r24, 0x20	; 32
    20ac:	79 f0       	breq	.+30     	; 0x20cc <vfprintf+0xb0>
    20ae:	83 32       	cpi	r24, 0x23	; 35
    20b0:	a1 f4       	brne	.+40     	; 0x20da <vfprintf+0xbe>
    20b2:	23 2d       	mov	r18, r3
    20b4:	20 61       	ori	r18, 0x10	; 16
    20b6:	1d c0       	rjmp	.+58     	; 0x20f2 <vfprintf+0xd6>
    20b8:	8d 32       	cpi	r24, 0x2D	; 45
    20ba:	61 f0       	breq	.+24     	; 0x20d4 <vfprintf+0xb8>
    20bc:	80 33       	cpi	r24, 0x30	; 48
    20be:	69 f4       	brne	.+26     	; 0x20da <vfprintf+0xbe>
    20c0:	23 2d       	mov	r18, r3
    20c2:	21 60       	ori	r18, 0x01	; 1
    20c4:	16 c0       	rjmp	.+44     	; 0x20f2 <vfprintf+0xd6>
    20c6:	83 2d       	mov	r24, r3
    20c8:	82 60       	ori	r24, 0x02	; 2
    20ca:	38 2e       	mov	r3, r24
    20cc:	e3 2d       	mov	r30, r3
    20ce:	e4 60       	ori	r30, 0x04	; 4
    20d0:	3e 2e       	mov	r3, r30
    20d2:	2a c0       	rjmp	.+84     	; 0x2128 <vfprintf+0x10c>
    20d4:	f3 2d       	mov	r31, r3
    20d6:	f8 60       	ori	r31, 0x08	; 8
    20d8:	1d c0       	rjmp	.+58     	; 0x2114 <vfprintf+0xf8>
    20da:	37 fc       	sbrc	r3, 7
    20dc:	2d c0       	rjmp	.+90     	; 0x2138 <vfprintf+0x11c>
    20de:	20 ed       	ldi	r18, 0xD0	; 208
    20e0:	28 0f       	add	r18, r24
    20e2:	2a 30       	cpi	r18, 0x0A	; 10
    20e4:	40 f0       	brcs	.+16     	; 0x20f6 <vfprintf+0xda>
    20e6:	8e 32       	cpi	r24, 0x2E	; 46
    20e8:	b9 f4       	brne	.+46     	; 0x2118 <vfprintf+0xfc>
    20ea:	36 fc       	sbrc	r3, 6
    20ec:	75 c1       	rjmp	.+746    	; 0x23d8 <vfprintf+0x3bc>
    20ee:	23 2d       	mov	r18, r3
    20f0:	20 64       	ori	r18, 0x40	; 64
    20f2:	32 2e       	mov	r3, r18
    20f4:	19 c0       	rjmp	.+50     	; 0x2128 <vfprintf+0x10c>
    20f6:	36 fe       	sbrs	r3, 6
    20f8:	06 c0       	rjmp	.+12     	; 0x2106 <vfprintf+0xea>
    20fa:	8a e0       	ldi	r24, 0x0A	; 10
    20fc:	98 9e       	mul	r9, r24
    20fe:	20 0d       	add	r18, r0
    2100:	11 24       	eor	r1, r1
    2102:	92 2e       	mov	r9, r18
    2104:	11 c0       	rjmp	.+34     	; 0x2128 <vfprintf+0x10c>
    2106:	ea e0       	ldi	r30, 0x0A	; 10
    2108:	2e 9e       	mul	r2, r30
    210a:	20 0d       	add	r18, r0
    210c:	11 24       	eor	r1, r1
    210e:	22 2e       	mov	r2, r18
    2110:	f3 2d       	mov	r31, r3
    2112:	f0 62       	ori	r31, 0x20	; 32
    2114:	3f 2e       	mov	r3, r31
    2116:	08 c0       	rjmp	.+16     	; 0x2128 <vfprintf+0x10c>
    2118:	8c 36       	cpi	r24, 0x6C	; 108
    211a:	21 f4       	brne	.+8      	; 0x2124 <vfprintf+0x108>
    211c:	83 2d       	mov	r24, r3
    211e:	80 68       	ori	r24, 0x80	; 128
    2120:	38 2e       	mov	r3, r24
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <vfprintf+0x10c>
    2124:	88 36       	cpi	r24, 0x68	; 104
    2126:	41 f4       	brne	.+16     	; 0x2138 <vfprintf+0x11c>
    2128:	f7 01       	movw	r30, r14
    212a:	93 fd       	sbrc	r25, 3
    212c:	85 91       	lpm	r24, Z+
    212e:	93 ff       	sbrs	r25, 3
    2130:	81 91       	ld	r24, Z+
    2132:	7f 01       	movw	r14, r30
    2134:	81 11       	cpse	r24, r1
    2136:	b3 cf       	rjmp	.-154    	; 0x209e <vfprintf+0x82>
    2138:	98 2f       	mov	r25, r24
    213a:	9f 7d       	andi	r25, 0xDF	; 223
    213c:	95 54       	subi	r25, 0x45	; 69
    213e:	93 30       	cpi	r25, 0x03	; 3
    2140:	28 f4       	brcc	.+10     	; 0x214c <vfprintf+0x130>
    2142:	0c 5f       	subi	r16, 0xFC	; 252
    2144:	1f 4f       	sbci	r17, 0xFF	; 255
    2146:	9f e3       	ldi	r25, 0x3F	; 63
    2148:	99 83       	std	Y+1, r25	; 0x01
    214a:	0d c0       	rjmp	.+26     	; 0x2166 <vfprintf+0x14a>
    214c:	83 36       	cpi	r24, 0x63	; 99
    214e:	31 f0       	breq	.+12     	; 0x215c <vfprintf+0x140>
    2150:	83 37       	cpi	r24, 0x73	; 115
    2152:	71 f0       	breq	.+28     	; 0x2170 <vfprintf+0x154>
    2154:	83 35       	cpi	r24, 0x53	; 83
    2156:	09 f0       	breq	.+2      	; 0x215a <vfprintf+0x13e>
    2158:	55 c0       	rjmp	.+170    	; 0x2204 <vfprintf+0x1e8>
    215a:	20 c0       	rjmp	.+64     	; 0x219c <vfprintf+0x180>
    215c:	f8 01       	movw	r30, r16
    215e:	80 81       	ld	r24, Z
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	0e 5f       	subi	r16, 0xFE	; 254
    2164:	1f 4f       	sbci	r17, 0xFF	; 255
    2166:	88 24       	eor	r8, r8
    2168:	83 94       	inc	r8
    216a:	91 2c       	mov	r9, r1
    216c:	53 01       	movw	r10, r6
    216e:	12 c0       	rjmp	.+36     	; 0x2194 <vfprintf+0x178>
    2170:	28 01       	movw	r4, r16
    2172:	f2 e0       	ldi	r31, 0x02	; 2
    2174:	4f 0e       	add	r4, r31
    2176:	51 1c       	adc	r5, r1
    2178:	f8 01       	movw	r30, r16
    217a:	a0 80       	ld	r10, Z
    217c:	b1 80       	ldd	r11, Z+1	; 0x01
    217e:	36 fe       	sbrs	r3, 6
    2180:	03 c0       	rjmp	.+6      	; 0x2188 <vfprintf+0x16c>
    2182:	69 2d       	mov	r22, r9
    2184:	70 e0       	ldi	r23, 0x00	; 0
    2186:	02 c0       	rjmp	.+4      	; 0x218c <vfprintf+0x170>
    2188:	6f ef       	ldi	r22, 0xFF	; 255
    218a:	7f ef       	ldi	r23, 0xFF	; 255
    218c:	c5 01       	movw	r24, r10
    218e:	4e d1       	rcall	.+668    	; 0x242c <strnlen>
    2190:	4c 01       	movw	r8, r24
    2192:	82 01       	movw	r16, r4
    2194:	f3 2d       	mov	r31, r3
    2196:	ff 77       	andi	r31, 0x7F	; 127
    2198:	3f 2e       	mov	r3, r31
    219a:	15 c0       	rjmp	.+42     	; 0x21c6 <vfprintf+0x1aa>
    219c:	28 01       	movw	r4, r16
    219e:	22 e0       	ldi	r18, 0x02	; 2
    21a0:	42 0e       	add	r4, r18
    21a2:	51 1c       	adc	r5, r1
    21a4:	f8 01       	movw	r30, r16
    21a6:	a0 80       	ld	r10, Z
    21a8:	b1 80       	ldd	r11, Z+1	; 0x01
    21aa:	36 fe       	sbrs	r3, 6
    21ac:	03 c0       	rjmp	.+6      	; 0x21b4 <vfprintf+0x198>
    21ae:	69 2d       	mov	r22, r9
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <vfprintf+0x19c>
    21b4:	6f ef       	ldi	r22, 0xFF	; 255
    21b6:	7f ef       	ldi	r23, 0xFF	; 255
    21b8:	c5 01       	movw	r24, r10
    21ba:	2d d1       	rcall	.+602    	; 0x2416 <strnlen_P>
    21bc:	4c 01       	movw	r8, r24
    21be:	f3 2d       	mov	r31, r3
    21c0:	f0 68       	ori	r31, 0x80	; 128
    21c2:	3f 2e       	mov	r3, r31
    21c4:	82 01       	movw	r16, r4
    21c6:	33 fc       	sbrc	r3, 3
    21c8:	19 c0       	rjmp	.+50     	; 0x21fc <vfprintf+0x1e0>
    21ca:	82 2d       	mov	r24, r2
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	88 16       	cp	r8, r24
    21d0:	99 06       	cpc	r9, r25
    21d2:	a0 f4       	brcc	.+40     	; 0x21fc <vfprintf+0x1e0>
    21d4:	b6 01       	movw	r22, r12
    21d6:	80 e2       	ldi	r24, 0x20	; 32
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	33 d1       	rcall	.+614    	; 0x2442 <fputc>
    21dc:	2a 94       	dec	r2
    21de:	f5 cf       	rjmp	.-22     	; 0x21ca <vfprintf+0x1ae>
    21e0:	f5 01       	movw	r30, r10
    21e2:	37 fc       	sbrc	r3, 7
    21e4:	85 91       	lpm	r24, Z+
    21e6:	37 fe       	sbrs	r3, 7
    21e8:	81 91       	ld	r24, Z+
    21ea:	5f 01       	movw	r10, r30
    21ec:	b6 01       	movw	r22, r12
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	28 d1       	rcall	.+592    	; 0x2442 <fputc>
    21f2:	21 10       	cpse	r2, r1
    21f4:	2a 94       	dec	r2
    21f6:	21 e0       	ldi	r18, 0x01	; 1
    21f8:	82 1a       	sub	r8, r18
    21fa:	91 08       	sbc	r9, r1
    21fc:	81 14       	cp	r8, r1
    21fe:	91 04       	cpc	r9, r1
    2200:	79 f7       	brne	.-34     	; 0x21e0 <vfprintf+0x1c4>
    2202:	e1 c0       	rjmp	.+450    	; 0x23c6 <vfprintf+0x3aa>
    2204:	84 36       	cpi	r24, 0x64	; 100
    2206:	11 f0       	breq	.+4      	; 0x220c <vfprintf+0x1f0>
    2208:	89 36       	cpi	r24, 0x69	; 105
    220a:	39 f5       	brne	.+78     	; 0x225a <vfprintf+0x23e>
    220c:	f8 01       	movw	r30, r16
    220e:	37 fe       	sbrs	r3, 7
    2210:	07 c0       	rjmp	.+14     	; 0x2220 <vfprintf+0x204>
    2212:	60 81       	ld	r22, Z
    2214:	71 81       	ldd	r23, Z+1	; 0x01
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	0c 5f       	subi	r16, 0xFC	; 252
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	08 c0       	rjmp	.+16     	; 0x2230 <vfprintf+0x214>
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	07 2e       	mov	r0, r23
    2226:	00 0c       	add	r0, r0
    2228:	88 0b       	sbc	r24, r24
    222a:	99 0b       	sbc	r25, r25
    222c:	0e 5f       	subi	r16, 0xFE	; 254
    222e:	1f 4f       	sbci	r17, 0xFF	; 255
    2230:	f3 2d       	mov	r31, r3
    2232:	ff 76       	andi	r31, 0x6F	; 111
    2234:	3f 2e       	mov	r3, r31
    2236:	97 ff       	sbrs	r25, 7
    2238:	09 c0       	rjmp	.+18     	; 0x224c <vfprintf+0x230>
    223a:	90 95       	com	r25
    223c:	80 95       	com	r24
    223e:	70 95       	com	r23
    2240:	61 95       	neg	r22
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	8f 4f       	sbci	r24, 0xFF	; 255
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	f0 68       	ori	r31, 0x80	; 128
    224a:	3f 2e       	mov	r3, r31
    224c:	2a e0       	ldi	r18, 0x0A	; 10
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	a3 01       	movw	r20, r6
    2252:	33 d1       	rcall	.+614    	; 0x24ba <__ultoa_invert>
    2254:	88 2e       	mov	r8, r24
    2256:	86 18       	sub	r8, r6
    2258:	44 c0       	rjmp	.+136    	; 0x22e2 <vfprintf+0x2c6>
    225a:	85 37       	cpi	r24, 0x75	; 117
    225c:	31 f4       	brne	.+12     	; 0x226a <vfprintf+0x24e>
    225e:	23 2d       	mov	r18, r3
    2260:	2f 7e       	andi	r18, 0xEF	; 239
    2262:	b2 2e       	mov	r11, r18
    2264:	2a e0       	ldi	r18, 0x0A	; 10
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	25 c0       	rjmp	.+74     	; 0x22b4 <vfprintf+0x298>
    226a:	93 2d       	mov	r25, r3
    226c:	99 7f       	andi	r25, 0xF9	; 249
    226e:	b9 2e       	mov	r11, r25
    2270:	8f 36       	cpi	r24, 0x6F	; 111
    2272:	c1 f0       	breq	.+48     	; 0x22a4 <vfprintf+0x288>
    2274:	18 f4       	brcc	.+6      	; 0x227c <vfprintf+0x260>
    2276:	88 35       	cpi	r24, 0x58	; 88
    2278:	79 f0       	breq	.+30     	; 0x2298 <vfprintf+0x27c>
    227a:	ae c0       	rjmp	.+348    	; 0x23d8 <vfprintf+0x3bc>
    227c:	80 37       	cpi	r24, 0x70	; 112
    227e:	19 f0       	breq	.+6      	; 0x2286 <vfprintf+0x26a>
    2280:	88 37       	cpi	r24, 0x78	; 120
    2282:	21 f0       	breq	.+8      	; 0x228c <vfprintf+0x270>
    2284:	a9 c0       	rjmp	.+338    	; 0x23d8 <vfprintf+0x3bc>
    2286:	e9 2f       	mov	r30, r25
    2288:	e0 61       	ori	r30, 0x10	; 16
    228a:	be 2e       	mov	r11, r30
    228c:	b4 fe       	sbrs	r11, 4
    228e:	0d c0       	rjmp	.+26     	; 0x22aa <vfprintf+0x28e>
    2290:	fb 2d       	mov	r31, r11
    2292:	f4 60       	ori	r31, 0x04	; 4
    2294:	bf 2e       	mov	r11, r31
    2296:	09 c0       	rjmp	.+18     	; 0x22aa <vfprintf+0x28e>
    2298:	34 fe       	sbrs	r3, 4
    229a:	0a c0       	rjmp	.+20     	; 0x22b0 <vfprintf+0x294>
    229c:	29 2f       	mov	r18, r25
    229e:	26 60       	ori	r18, 0x06	; 6
    22a0:	b2 2e       	mov	r11, r18
    22a2:	06 c0       	rjmp	.+12     	; 0x22b0 <vfprintf+0x294>
    22a4:	28 e0       	ldi	r18, 0x08	; 8
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	05 c0       	rjmp	.+10     	; 0x22b4 <vfprintf+0x298>
    22aa:	20 e1       	ldi	r18, 0x10	; 16
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <vfprintf+0x298>
    22b0:	20 e1       	ldi	r18, 0x10	; 16
    22b2:	32 e0       	ldi	r19, 0x02	; 2
    22b4:	f8 01       	movw	r30, r16
    22b6:	b7 fe       	sbrs	r11, 7
    22b8:	07 c0       	rjmp	.+14     	; 0x22c8 <vfprintf+0x2ac>
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	0c 5f       	subi	r16, 0xFC	; 252
    22c4:	1f 4f       	sbci	r17, 0xFF	; 255
    22c6:	06 c0       	rjmp	.+12     	; 0x22d4 <vfprintf+0x2b8>
    22c8:	60 81       	ld	r22, Z
    22ca:	71 81       	ldd	r23, Z+1	; 0x01
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0e 5f       	subi	r16, 0xFE	; 254
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	a3 01       	movw	r20, r6
    22d6:	f1 d0       	rcall	.+482    	; 0x24ba <__ultoa_invert>
    22d8:	88 2e       	mov	r8, r24
    22da:	86 18       	sub	r8, r6
    22dc:	fb 2d       	mov	r31, r11
    22de:	ff 77       	andi	r31, 0x7F	; 127
    22e0:	3f 2e       	mov	r3, r31
    22e2:	36 fe       	sbrs	r3, 6
    22e4:	0d c0       	rjmp	.+26     	; 0x2300 <vfprintf+0x2e4>
    22e6:	23 2d       	mov	r18, r3
    22e8:	2e 7f       	andi	r18, 0xFE	; 254
    22ea:	a2 2e       	mov	r10, r18
    22ec:	89 14       	cp	r8, r9
    22ee:	58 f4       	brcc	.+22     	; 0x2306 <vfprintf+0x2ea>
    22f0:	34 fe       	sbrs	r3, 4
    22f2:	0b c0       	rjmp	.+22     	; 0x230a <vfprintf+0x2ee>
    22f4:	32 fc       	sbrc	r3, 2
    22f6:	09 c0       	rjmp	.+18     	; 0x230a <vfprintf+0x2ee>
    22f8:	83 2d       	mov	r24, r3
    22fa:	8e 7e       	andi	r24, 0xEE	; 238
    22fc:	a8 2e       	mov	r10, r24
    22fe:	05 c0       	rjmp	.+10     	; 0x230a <vfprintf+0x2ee>
    2300:	b8 2c       	mov	r11, r8
    2302:	a3 2c       	mov	r10, r3
    2304:	03 c0       	rjmp	.+6      	; 0x230c <vfprintf+0x2f0>
    2306:	b8 2c       	mov	r11, r8
    2308:	01 c0       	rjmp	.+2      	; 0x230c <vfprintf+0x2f0>
    230a:	b9 2c       	mov	r11, r9
    230c:	a4 fe       	sbrs	r10, 4
    230e:	0f c0       	rjmp	.+30     	; 0x232e <vfprintf+0x312>
    2310:	fe 01       	movw	r30, r28
    2312:	e8 0d       	add	r30, r8
    2314:	f1 1d       	adc	r31, r1
    2316:	80 81       	ld	r24, Z
    2318:	80 33       	cpi	r24, 0x30	; 48
    231a:	21 f4       	brne	.+8      	; 0x2324 <vfprintf+0x308>
    231c:	9a 2d       	mov	r25, r10
    231e:	99 7e       	andi	r25, 0xE9	; 233
    2320:	a9 2e       	mov	r10, r25
    2322:	09 c0       	rjmp	.+18     	; 0x2336 <vfprintf+0x31a>
    2324:	a2 fe       	sbrs	r10, 2
    2326:	06 c0       	rjmp	.+12     	; 0x2334 <vfprintf+0x318>
    2328:	b3 94       	inc	r11
    232a:	b3 94       	inc	r11
    232c:	04 c0       	rjmp	.+8      	; 0x2336 <vfprintf+0x31a>
    232e:	8a 2d       	mov	r24, r10
    2330:	86 78       	andi	r24, 0x86	; 134
    2332:	09 f0       	breq	.+2      	; 0x2336 <vfprintf+0x31a>
    2334:	b3 94       	inc	r11
    2336:	a3 fc       	sbrc	r10, 3
    2338:	10 c0       	rjmp	.+32     	; 0x235a <vfprintf+0x33e>
    233a:	a0 fe       	sbrs	r10, 0
    233c:	06 c0       	rjmp	.+12     	; 0x234a <vfprintf+0x32e>
    233e:	b2 14       	cp	r11, r2
    2340:	80 f4       	brcc	.+32     	; 0x2362 <vfprintf+0x346>
    2342:	28 0c       	add	r2, r8
    2344:	92 2c       	mov	r9, r2
    2346:	9b 18       	sub	r9, r11
    2348:	0d c0       	rjmp	.+26     	; 0x2364 <vfprintf+0x348>
    234a:	b2 14       	cp	r11, r2
    234c:	58 f4       	brcc	.+22     	; 0x2364 <vfprintf+0x348>
    234e:	b6 01       	movw	r22, r12
    2350:	80 e2       	ldi	r24, 0x20	; 32
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	76 d0       	rcall	.+236    	; 0x2442 <fputc>
    2356:	b3 94       	inc	r11
    2358:	f8 cf       	rjmp	.-16     	; 0x234a <vfprintf+0x32e>
    235a:	b2 14       	cp	r11, r2
    235c:	18 f4       	brcc	.+6      	; 0x2364 <vfprintf+0x348>
    235e:	2b 18       	sub	r2, r11
    2360:	02 c0       	rjmp	.+4      	; 0x2366 <vfprintf+0x34a>
    2362:	98 2c       	mov	r9, r8
    2364:	21 2c       	mov	r2, r1
    2366:	a4 fe       	sbrs	r10, 4
    2368:	0f c0       	rjmp	.+30     	; 0x2388 <vfprintf+0x36c>
    236a:	b6 01       	movw	r22, r12
    236c:	80 e3       	ldi	r24, 0x30	; 48
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	68 d0       	rcall	.+208    	; 0x2442 <fputc>
    2372:	a2 fe       	sbrs	r10, 2
    2374:	16 c0       	rjmp	.+44     	; 0x23a2 <vfprintf+0x386>
    2376:	a1 fc       	sbrc	r10, 1
    2378:	03 c0       	rjmp	.+6      	; 0x2380 <vfprintf+0x364>
    237a:	88 e7       	ldi	r24, 0x78	; 120
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <vfprintf+0x368>
    2380:	88 e5       	ldi	r24, 0x58	; 88
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	b6 01       	movw	r22, r12
    2386:	0c c0       	rjmp	.+24     	; 0x23a0 <vfprintf+0x384>
    2388:	8a 2d       	mov	r24, r10
    238a:	86 78       	andi	r24, 0x86	; 134
    238c:	51 f0       	breq	.+20     	; 0x23a2 <vfprintf+0x386>
    238e:	a1 fe       	sbrs	r10, 1
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <vfprintf+0x37a>
    2392:	8b e2       	ldi	r24, 0x2B	; 43
    2394:	01 c0       	rjmp	.+2      	; 0x2398 <vfprintf+0x37c>
    2396:	80 e2       	ldi	r24, 0x20	; 32
    2398:	a7 fc       	sbrc	r10, 7
    239a:	8d e2       	ldi	r24, 0x2D	; 45
    239c:	b6 01       	movw	r22, r12
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	50 d0       	rcall	.+160    	; 0x2442 <fputc>
    23a2:	89 14       	cp	r8, r9
    23a4:	30 f4       	brcc	.+12     	; 0x23b2 <vfprintf+0x396>
    23a6:	b6 01       	movw	r22, r12
    23a8:	80 e3       	ldi	r24, 0x30	; 48
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	4a d0       	rcall	.+148    	; 0x2442 <fputc>
    23ae:	9a 94       	dec	r9
    23b0:	f8 cf       	rjmp	.-16     	; 0x23a2 <vfprintf+0x386>
    23b2:	8a 94       	dec	r8
    23b4:	f3 01       	movw	r30, r6
    23b6:	e8 0d       	add	r30, r8
    23b8:	f1 1d       	adc	r31, r1
    23ba:	80 81       	ld	r24, Z
    23bc:	b6 01       	movw	r22, r12
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	40 d0       	rcall	.+128    	; 0x2442 <fputc>
    23c2:	81 10       	cpse	r8, r1
    23c4:	f6 cf       	rjmp	.-20     	; 0x23b2 <vfprintf+0x396>
    23c6:	22 20       	and	r2, r2
    23c8:	09 f4       	brne	.+2      	; 0x23cc <vfprintf+0x3b0>
    23ca:	4e ce       	rjmp	.-868    	; 0x2068 <vfprintf+0x4c>
    23cc:	b6 01       	movw	r22, r12
    23ce:	80 e2       	ldi	r24, 0x20	; 32
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	37 d0       	rcall	.+110    	; 0x2442 <fputc>
    23d4:	2a 94       	dec	r2
    23d6:	f7 cf       	rjmp	.-18     	; 0x23c6 <vfprintf+0x3aa>
    23d8:	f6 01       	movw	r30, r12
    23da:	86 81       	ldd	r24, Z+6	; 0x06
    23dc:	97 81       	ldd	r25, Z+7	; 0x07
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <vfprintf+0x3c8>
    23e0:	8f ef       	ldi	r24, 0xFF	; 255
    23e2:	9f ef       	ldi	r25, 0xFF	; 255
    23e4:	2b 96       	adiw	r28, 0x0b	; 11
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	ff 90       	pop	r15
    23fa:	ef 90       	pop	r14
    23fc:	df 90       	pop	r13
    23fe:	cf 90       	pop	r12
    2400:	bf 90       	pop	r11
    2402:	af 90       	pop	r10
    2404:	9f 90       	pop	r9
    2406:	8f 90       	pop	r8
    2408:	7f 90       	pop	r7
    240a:	6f 90       	pop	r6
    240c:	5f 90       	pop	r5
    240e:	4f 90       	pop	r4
    2410:	3f 90       	pop	r3
    2412:	2f 90       	pop	r2
    2414:	08 95       	ret

00002416 <strnlen_P>:
    2416:	fc 01       	movw	r30, r24
    2418:	05 90       	lpm	r0, Z+
    241a:	61 50       	subi	r22, 0x01	; 1
    241c:	70 40       	sbci	r23, 0x00	; 0
    241e:	01 10       	cpse	r0, r1
    2420:	d8 f7       	brcc	.-10     	; 0x2418 <strnlen_P+0x2>
    2422:	80 95       	com	r24
    2424:	90 95       	com	r25
    2426:	8e 0f       	add	r24, r30
    2428:	9f 1f       	adc	r25, r31
    242a:	08 95       	ret

0000242c <strnlen>:
    242c:	fc 01       	movw	r30, r24
    242e:	61 50       	subi	r22, 0x01	; 1
    2430:	70 40       	sbci	r23, 0x00	; 0
    2432:	01 90       	ld	r0, Z+
    2434:	01 10       	cpse	r0, r1
    2436:	d8 f7       	brcc	.-10     	; 0x242e <strnlen+0x2>
    2438:	80 95       	com	r24
    243a:	90 95       	com	r25
    243c:	8e 0f       	add	r24, r30
    243e:	9f 1f       	adc	r25, r31
    2440:	08 95       	ret

00002442 <fputc>:
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	fb 01       	movw	r30, r22
    244c:	23 81       	ldd	r18, Z+3	; 0x03
    244e:	21 fd       	sbrc	r18, 1
    2450:	03 c0       	rjmp	.+6      	; 0x2458 <fputc+0x16>
    2452:	8f ef       	ldi	r24, 0xFF	; 255
    2454:	9f ef       	ldi	r25, 0xFF	; 255
    2456:	2c c0       	rjmp	.+88     	; 0x24b0 <fputc+0x6e>
    2458:	22 ff       	sbrs	r18, 2
    245a:	16 c0       	rjmp	.+44     	; 0x2488 <fputc+0x46>
    245c:	46 81       	ldd	r20, Z+6	; 0x06
    245e:	57 81       	ldd	r21, Z+7	; 0x07
    2460:	24 81       	ldd	r18, Z+4	; 0x04
    2462:	35 81       	ldd	r19, Z+5	; 0x05
    2464:	42 17       	cp	r20, r18
    2466:	53 07       	cpc	r21, r19
    2468:	44 f4       	brge	.+16     	; 0x247a <fputc+0x38>
    246a:	a0 81       	ld	r26, Z
    246c:	b1 81       	ldd	r27, Z+1	; 0x01
    246e:	9d 01       	movw	r18, r26
    2470:	2f 5f       	subi	r18, 0xFF	; 255
    2472:	3f 4f       	sbci	r19, 0xFF	; 255
    2474:	31 83       	std	Z+1, r19	; 0x01
    2476:	20 83       	st	Z, r18
    2478:	8c 93       	st	X, r24
    247a:	26 81       	ldd	r18, Z+6	; 0x06
    247c:	37 81       	ldd	r19, Z+7	; 0x07
    247e:	2f 5f       	subi	r18, 0xFF	; 255
    2480:	3f 4f       	sbci	r19, 0xFF	; 255
    2482:	37 83       	std	Z+7, r19	; 0x07
    2484:	26 83       	std	Z+6, r18	; 0x06
    2486:	14 c0       	rjmp	.+40     	; 0x24b0 <fputc+0x6e>
    2488:	8b 01       	movw	r16, r22
    248a:	ec 01       	movw	r28, r24
    248c:	fb 01       	movw	r30, r22
    248e:	00 84       	ldd	r0, Z+8	; 0x08
    2490:	f1 85       	ldd	r31, Z+9	; 0x09
    2492:	e0 2d       	mov	r30, r0
    2494:	09 95       	icall
    2496:	89 2b       	or	r24, r25
    2498:	e1 f6       	brne	.-72     	; 0x2452 <fputc+0x10>
    249a:	d8 01       	movw	r26, r16
    249c:	16 96       	adiw	r26, 0x06	; 6
    249e:	8d 91       	ld	r24, X+
    24a0:	9c 91       	ld	r25, X
    24a2:	17 97       	sbiw	r26, 0x07	; 7
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	17 96       	adiw	r26, 0x07	; 7
    24a8:	9c 93       	st	X, r25
    24aa:	8e 93       	st	-X, r24
    24ac:	16 97       	sbiw	r26, 0x06	; 6
    24ae:	ce 01       	movw	r24, r28
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	0f 91       	pop	r16
    24b8:	08 95       	ret

000024ba <__ultoa_invert>:
    24ba:	fa 01       	movw	r30, r20
    24bc:	aa 27       	eor	r26, r26
    24be:	28 30       	cpi	r18, 0x08	; 8
    24c0:	51 f1       	breq	.+84     	; 0x2516 <__ultoa_invert+0x5c>
    24c2:	20 31       	cpi	r18, 0x10	; 16
    24c4:	81 f1       	breq	.+96     	; 0x2526 <__ultoa_invert+0x6c>
    24c6:	e8 94       	clt
    24c8:	6f 93       	push	r22
    24ca:	6e 7f       	andi	r22, 0xFE	; 254
    24cc:	6e 5f       	subi	r22, 0xFE	; 254
    24ce:	7f 4f       	sbci	r23, 0xFF	; 255
    24d0:	8f 4f       	sbci	r24, 0xFF	; 255
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	af 4f       	sbci	r26, 0xFF	; 255
    24d6:	b1 e0       	ldi	r27, 0x01	; 1
    24d8:	3e d0       	rcall	.+124    	; 0x2556 <__ultoa_invert+0x9c>
    24da:	b4 e0       	ldi	r27, 0x04	; 4
    24dc:	3c d0       	rcall	.+120    	; 0x2556 <__ultoa_invert+0x9c>
    24de:	67 0f       	add	r22, r23
    24e0:	78 1f       	adc	r23, r24
    24e2:	89 1f       	adc	r24, r25
    24e4:	9a 1f       	adc	r25, r26
    24e6:	a1 1d       	adc	r26, r1
    24e8:	68 0f       	add	r22, r24
    24ea:	79 1f       	adc	r23, r25
    24ec:	8a 1f       	adc	r24, r26
    24ee:	91 1d       	adc	r25, r1
    24f0:	a1 1d       	adc	r26, r1
    24f2:	6a 0f       	add	r22, r26
    24f4:	71 1d       	adc	r23, r1
    24f6:	81 1d       	adc	r24, r1
    24f8:	91 1d       	adc	r25, r1
    24fa:	a1 1d       	adc	r26, r1
    24fc:	20 d0       	rcall	.+64     	; 0x253e <__ultoa_invert+0x84>
    24fe:	09 f4       	brne	.+2      	; 0x2502 <__ultoa_invert+0x48>
    2500:	68 94       	set
    2502:	3f 91       	pop	r19
    2504:	2a e0       	ldi	r18, 0x0A	; 10
    2506:	26 9f       	mul	r18, r22
    2508:	11 24       	eor	r1, r1
    250a:	30 19       	sub	r19, r0
    250c:	30 5d       	subi	r19, 0xD0	; 208
    250e:	31 93       	st	Z+, r19
    2510:	de f6       	brtc	.-74     	; 0x24c8 <__ultoa_invert+0xe>
    2512:	cf 01       	movw	r24, r30
    2514:	08 95       	ret
    2516:	46 2f       	mov	r20, r22
    2518:	47 70       	andi	r20, 0x07	; 7
    251a:	40 5d       	subi	r20, 0xD0	; 208
    251c:	41 93       	st	Z+, r20
    251e:	b3 e0       	ldi	r27, 0x03	; 3
    2520:	0f d0       	rcall	.+30     	; 0x2540 <__ultoa_invert+0x86>
    2522:	c9 f7       	brne	.-14     	; 0x2516 <__ultoa_invert+0x5c>
    2524:	f6 cf       	rjmp	.-20     	; 0x2512 <__ultoa_invert+0x58>
    2526:	46 2f       	mov	r20, r22
    2528:	4f 70       	andi	r20, 0x0F	; 15
    252a:	40 5d       	subi	r20, 0xD0	; 208
    252c:	4a 33       	cpi	r20, 0x3A	; 58
    252e:	18 f0       	brcs	.+6      	; 0x2536 <__ultoa_invert+0x7c>
    2530:	49 5d       	subi	r20, 0xD9	; 217
    2532:	31 fd       	sbrc	r19, 1
    2534:	40 52       	subi	r20, 0x20	; 32
    2536:	41 93       	st	Z+, r20
    2538:	02 d0       	rcall	.+4      	; 0x253e <__ultoa_invert+0x84>
    253a:	a9 f7       	brne	.-22     	; 0x2526 <__ultoa_invert+0x6c>
    253c:	ea cf       	rjmp	.-44     	; 0x2512 <__ultoa_invert+0x58>
    253e:	b4 e0       	ldi	r27, 0x04	; 4
    2540:	a6 95       	lsr	r26
    2542:	97 95       	ror	r25
    2544:	87 95       	ror	r24
    2546:	77 95       	ror	r23
    2548:	67 95       	ror	r22
    254a:	ba 95       	dec	r27
    254c:	c9 f7       	brne	.-14     	; 0x2540 <__ultoa_invert+0x86>
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	61 05       	cpc	r22, r1
    2552:	71 05       	cpc	r23, r1
    2554:	08 95       	ret
    2556:	9b 01       	movw	r18, r22
    2558:	ac 01       	movw	r20, r24
    255a:	0a 2e       	mov	r0, r26
    255c:	06 94       	lsr	r0
    255e:	57 95       	ror	r21
    2560:	47 95       	ror	r20
    2562:	37 95       	ror	r19
    2564:	27 95       	ror	r18
    2566:	ba 95       	dec	r27
    2568:	c9 f7       	brne	.-14     	; 0x255c <__ultoa_invert+0xa2>
    256a:	62 0f       	add	r22, r18
    256c:	73 1f       	adc	r23, r19
    256e:	84 1f       	adc	r24, r20
    2570:	95 1f       	adc	r25, r21
    2572:	a0 1d       	adc	r26, r0
    2574:	08 95       	ret

00002576 <_exit>:
    2576:	f8 94       	cli

00002578 <__stop_program>:
    2578:	ff cf       	rjmp	.-2      	; 0x2578 <__stop_program>
