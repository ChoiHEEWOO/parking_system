
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003d0  00800100  00002866  000028fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001fa  008004d0  008004d0  00002cca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002cca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00002d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004bfd  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013b2  00000000  00000000  00007c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024b6  00000000  00000000  0000901f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a8  00000000  00000000  0000b4d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e15  00000000  00000000  0000be80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e82  00000000  00000000  0000cc95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000fb17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b9 c7       	rjmp	.+3954   	; 0xfb0 <__vector_15>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c0       	rjmp	.+130    	; 0xcc <__vector_18>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__vector_30>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e6       	ldi	r30, 0x66	; 102
      a0:	f8 e2       	ldi	r31, 0x28	; 40
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3d       	cpi	r26, 0xD0	; 208
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	26 e0       	ldi	r18, 0x06	; 6
      b4:	a0 ed       	ldi	r26, 0xD0	; 208
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 3c       	cpi	r26, 0xCA	; 202
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 a2 0a 	call	0x1544	; 0x1544 <main>
      c6:	0c 94 31 14 	jmp	0x2862	; 0x2862 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_18>:
void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
	set_motor_flag=1;
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	8f 93       	push	r24
      d8:	8c b1       	in	r24, 0x0c	; 12
      da:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <uart0+0x66>
      de:	8f 91       	pop	r24
      e0:	0f 90       	pop	r0
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	0f 90       	pop	r0
      e6:	1f 90       	pop	r1
      e8:	18 95       	reti

000000ea <__vector_30>:
      ea:	1f 92       	push	r1
      ec:	0f 92       	push	r0
      ee:	0f b6       	in	r0, 0x3f	; 63
      f0:	0f 92       	push	r0
      f2:	11 24       	eor	r1, r1
      f4:	0b b6       	in	r0, 0x3b	; 59
      f6:	0f 92       	push	r0
      f8:	1f 93       	push	r17
      fa:	2f 93       	push	r18
      fc:	3f 93       	push	r19
      fe:	4f 93       	push	r20
     100:	5f 93       	push	r21
     102:	6f 93       	push	r22
     104:	7f 93       	push	r23
     106:	8f 93       	push	r24
     108:	9f 93       	push	r25
     10a:	af 93       	push	r26
     10c:	bf 93       	push	r27
     10e:	ef 93       	push	r30
     110:	ff 93       	push	r31
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	00 d0       	rcall	.+0      	; 0x118 <__vector_30+0x2e>
     118:	1f 92       	push	r1
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
     11e:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     122:	1e 33       	cpi	r17, 0x3E	; 62
     124:	21 f4       	brne	.+8      	; 0x12e <__vector_30+0x44>
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <esp8266_send_ready_flag>
     12c:	42 c0       	rjmp	.+132    	; 0x1b2 <__vector_30+0xc8>
     12e:	1f 34       	cpi	r17, 0x4F	; 79
     130:	21 f4       	brne	.+8      	; 0x13a <__vector_30+0x50>
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <cnt.2443>
     138:	3c c0       	rjmp	.+120    	; 0x1b2 <__vector_30+0xc8>
     13a:	1b 34       	cpi	r17, 0x4B	; 75
     13c:	51 f4       	brne	.+20     	; 0x152 <__vector_30+0x68>
     13e:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <cnt.2443>
     142:	81 30       	cpi	r24, 0x01	; 1
     144:	09 f0       	breq	.+2      	; 0x148 <__vector_30+0x5e>
     146:	87 c0       	rjmp	.+270    	; 0x256 <__vector_30+0x16c>
     148:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <esp8266_return_result_flag>
     14c:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <cnt.2443>
     150:	30 c0       	rjmp	.+96     	; 0x1b2 <__vector_30+0xc8>
     152:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <cnt.2443>
     156:	1b 32       	cpi	r17, 0x2B	; 43
     158:	21 f4       	brne	.+8      	; 0x162 <__vector_30+0x78>
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <parse_cnt.2444>
     160:	76 c0       	rjmp	.+236    	; 0x24e <__vector_30+0x164>
     162:	19 34       	cpi	r17, 0x49	; 73
     164:	41 f4       	brne	.+16     	; 0x176 <__vector_30+0x8c>
     166:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <parse_cnt.2444>
     16a:	81 30       	cpi	r24, 0x01	; 1
     16c:	11 f5       	brne	.+68     	; 0x1b2 <__vector_30+0xc8>
     16e:	82 e0       	ldi	r24, 0x02	; 2
     170:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <parse_cnt.2444>
     174:	6c c0       	rjmp	.+216    	; 0x24e <__vector_30+0x164>
     176:	10 35       	cpi	r17, 0x50	; 80
     178:	41 f4       	brne	.+16     	; 0x18a <__vector_30+0xa0>
     17a:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <parse_cnt.2444>
     17e:	82 30       	cpi	r24, 0x02	; 2
     180:	c1 f4       	brne	.+48     	; 0x1b2 <__vector_30+0xc8>
     182:	83 e0       	ldi	r24, 0x03	; 3
     184:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <parse_cnt.2444>
     188:	62 c0       	rjmp	.+196    	; 0x24e <__vector_30+0x164>
     18a:	14 34       	cpi	r17, 0x44	; 68
     18c:	41 f4       	brne	.+16     	; 0x19e <__vector_30+0xb4>
     18e:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <parse_cnt.2444>
     192:	83 30       	cpi	r24, 0x03	; 3
     194:	71 f4       	brne	.+28     	; 0x1b2 <__vector_30+0xc8>
     196:	84 e0       	ldi	r24, 0x04	; 4
     198:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <parse_cnt.2444>
     19c:	58 c0       	rjmp	.+176    	; 0x24e <__vector_30+0x164>
     19e:	1c 32       	cpi	r17, 0x2C	; 44
     1a0:	41 f4       	brne	.+16     	; 0x1b2 <__vector_30+0xc8>
     1a2:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <parse_cnt.2444>
     1a6:	84 30       	cpi	r24, 0x04	; 4
     1a8:	21 f4       	brne	.+8      	; 0x1b2 <__vector_30+0xc8>
     1aa:	85 e0       	ldi	r24, 0x05	; 5
     1ac:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <parse_cnt.2444>
     1b0:	4e c0       	rjmp	.+156    	; 0x24e <__vector_30+0x164>
     1b2:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <parse_cnt.2444>
     1b6:	85 30       	cpi	r24, 0x05	; 5
     1b8:	91 f4       	brne	.+36     	; 0x1de <__vector_30+0xf4>
     1ba:	10 93 f3 04 	sts	0x04F3, r17	; 0x8004f3 <receive_length>
     1be:	86 e0       	ldi	r24, 0x06	; 6
     1c0:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <parse_cnt.2444>
     1c4:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <receive_length>
     1c8:	89 83       	std	Y+1, r24	; 0x01
     1ca:	1a 82       	std	Y+2, r1	; 0x02
     1cc:	ce 01       	movw	r24, r28
     1ce:	01 96       	adiw	r24, 0x01	; 1
     1d0:	0e 94 16 11 	call	0x222c	; 0x222c <atoi>
     1d4:	90 93 b9 06 	sts	0x06B9, r25	; 0x8006b9 <receive_length_int+0x1>
     1d8:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <receive_length_int>
     1dc:	38 c0       	rjmp	.+112    	; 0x24e <__vector_30+0x164>
     1de:	86 30       	cpi	r24, 0x06	; 6
     1e0:	c1 f4       	brne	.+48     	; 0x212 <__vector_30+0x128>
     1e2:	1a 33       	cpi	r17, 0x3A	; 58
     1e4:	71 f0       	breq	.+28     	; 0x202 <__vector_30+0x118>
     1e6:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <receive_length>
     1ea:	89 83       	std	Y+1, r24	; 0x01
     1ec:	1a 83       	std	Y+2, r17	; 0x02
     1ee:	1b 82       	std	Y+3, r1	; 0x03
     1f0:	ce 01       	movw	r24, r28
     1f2:	01 96       	adiw	r24, 0x01	; 1
     1f4:	0e 94 16 11 	call	0x222c	; 0x222c <atoi>
     1f8:	90 93 b9 06 	sts	0x06B9, r25	; 0x8006b9 <receive_length_int+0x1>
     1fc:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <receive_length_int>
     200:	26 c0       	rjmp	.+76     	; 0x24e <__vector_30+0x164>
     202:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <parse_cnt.2444>
     206:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <data_cnt.2445>
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <parse_data_flag.2446>
     210:	1e c0       	rjmp	.+60     	; 0x24e <__vector_30+0x164>
     212:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <parse_data_flag.2446>
     216:	88 23       	and	r24, r24
     218:	c1 f0       	breq	.+48     	; 0x24a <__vector_30+0x160>
     21a:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <data_cnt.2445>
     21e:	e8 2f       	mov	r30, r24
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	e4 58       	subi	r30, 0x84	; 132
     224:	fa 4f       	sbci	r31, 0xFA	; 250
     226:	10 83       	st	Z, r17
     228:	8f 5f       	subi	r24, 0xFF	; 255
     22a:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <data_cnt.2445>
     22e:	20 91 b8 06 	lds	r18, 0x06B8	; 0x8006b8 <receive_length_int>
     232:	30 91 b9 06 	lds	r19, 0x06B9	; 0x8006b9 <receive_length_int+0x1>
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	82 17       	cp	r24, r18
     23a:	93 07       	cpc	r25, r19
     23c:	41 f4       	brne	.+16     	; 0x24e <__vector_30+0x164>
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <esp8266_receiving_flag>
     244:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <parse_data_flag.2446>
     248:	02 c0       	rjmp	.+4      	; 0x24e <__vector_30+0x164>
     24a:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <parse_cnt.2444>
     24e:	81 2f       	mov	r24, r17
     250:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     254:	03 c0       	rjmp	.+6      	; 0x25c <__vector_30+0x172>
     256:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <cnt.2443>
     25a:	ab cf       	rjmp	.-170    	; 0x1b2 <__vector_30+0xc8>
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	df 91       	pop	r29
     264:	cf 91       	pop	r28
     266:	ff 91       	pop	r31
     268:	ef 91       	pop	r30
     26a:	bf 91       	pop	r27
     26c:	af 91       	pop	r26
     26e:	9f 91       	pop	r25
     270:	8f 91       	pop	r24
     272:	7f 91       	pop	r23
     274:	6f 91       	pop	r22
     276:	5f 91       	pop	r21
     278:	4f 91       	pop	r20
     27a:	3f 91       	pop	r19
     27c:	2f 91       	pop	r18
     27e:	1f 91       	pop	r17
     280:	0f 90       	pop	r0
     282:	0b be       	out	0x3b, r0	; 59
     284:	0f 90       	pop	r0
     286:	0f be       	out	0x3f, r0	; 63
     288:	0f 90       	pop	r0
     28a:	1f 90       	pop	r1
     28c:	18 95       	reti

0000028e <rfid_user_uid_buffer_init>:
     28e:	8b ef       	ldi	r24, 0xFB	; 251
     290:	94 e0       	ldi	r25, 0x04	; 4
     292:	44 e1       	ldi	r20, 0x14	; 20
     294:	55 e0       	ldi	r21, 0x05	; 5
     296:	25 e0       	ldi	r18, 0x05	; 5
     298:	ec e3       	ldi	r30, 0x3C	; 60
     29a:	f3 e0       	ldi	r31, 0x03	; 3
     29c:	dc 01       	movw	r26, r24
     29e:	01 90       	ld	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	2a 95       	dec	r18
     2a4:	e1 f7       	brne	.-8      	; 0x29e <rfid_user_uid_buffer_init+0x10>
     2a6:	05 96       	adiw	r24, 0x05	; 5
     2a8:	84 17       	cp	r24, r20
     2aa:	95 07       	cpc	r25, r21
     2ac:	a1 f7       	brne	.-24     	; 0x296 <rfid_user_uid_buffer_init+0x8>
     2ae:	47 e4       	ldi	r20, 0x47	; 71
     2b0:	51 e0       	ldi	r21, 0x01	; 1
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <i2c_lcd_string>
     2ba:	2f ef       	ldi	r18, 0xFF	; 255
     2bc:	89 e6       	ldi	r24, 0x69	; 105
     2be:	98 e1       	ldi	r25, 0x18	; 24
     2c0:	21 50       	subi	r18, 0x01	; 1
     2c2:	80 40       	sbci	r24, 0x00	; 0
     2c4:	90 40       	sbci	r25, 0x00	; 0
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <rfid_user_uid_buffer_init+0x32>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <rfid_user_uid_buffer_init+0x3c>
     2ca:	00 00       	nop
     2cc:	08 95       	ret

000002ce <mfrc_print_serial>:
     2ce:	cf 92       	push	r12
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	c6 2f       	mov	r28, r22
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	91 05       	cpc	r25, r1
     2e2:	69 f1       	breq	.+90     	; 0x33e <mfrc_print_serial+0x70>
     2e4:	82 30       	cpi	r24, 0x02	; 2
     2e6:	91 05       	cpc	r25, r1
     2e8:	09 f4       	brne	.+2      	; 0x2ec <mfrc_print_serial+0x1e>
     2ea:	55 c0       	rjmp	.+170    	; 0x396 <mfrc_print_serial+0xc8>
     2ec:	89 2b       	or	r24, r25
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <mfrc_print_serial+0x24>
     2f0:	7e c0       	rjmp	.+252    	; 0x3ee <mfrc_print_serial+0x120>
     2f2:	8c e5       	ldi	r24, 0x5C	; 92
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     2fa:	06 e9       	ldi	r16, 0x96	; 150
     2fc:	16 e0       	ldi	r17, 0x06	; 6
     2fe:	0f 2e       	mov	r0, r31
     300:	f8 ea       	ldi	r31, 0xA8	; 168
     302:	ef 2e       	mov	r14, r31
     304:	f6 e0       	ldi	r31, 0x06	; 6
     306:	ff 2e       	mov	r15, r31
     308:	f0 2d       	mov	r31, r0
     30a:	0f 2e       	mov	r0, r31
     30c:	fa e9       	ldi	r31, 0x9A	; 154
     30e:	cf 2e       	mov	r12, r31
     310:	f6 e0       	ldi	r31, 0x06	; 6
     312:	df 2e       	mov	r13, r31
     314:	f0 2d       	mov	r31, r0
     316:	c1 11       	cpse	r28, r1
     318:	05 c0       	rjmp	.+10     	; 0x324 <mfrc_print_serial+0x56>
     31a:	f8 01       	movw	r30, r16
     31c:	80 81       	ld	r24, Z
     31e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     322:	04 c0       	rjmp	.+8      	; 0x32c <mfrc_print_serial+0x5e>
     324:	f7 01       	movw	r30, r14
     326:	80 81       	ld	r24, Z
     328:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     32c:	0f 5f       	subi	r16, 0xFF	; 255
     32e:	1f 4f       	sbci	r17, 0xFF	; 255
     330:	ff ef       	ldi	r31, 0xFF	; 255
     332:	ef 1a       	sub	r14, r31
     334:	ff 0a       	sbc	r15, r31
     336:	0c 15       	cp	r16, r12
     338:	1d 05       	cpc	r17, r13
     33a:	69 f7       	brne	.-38     	; 0x316 <mfrc_print_serial+0x48>
     33c:	58 c0       	rjmp	.+176    	; 0x3ee <mfrc_print_serial+0x120>
     33e:	86 e6       	ldi	r24, 0x66	; 102
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     346:	06 e9       	ldi	r16, 0x96	; 150
     348:	16 e0       	ldi	r17, 0x06	; 6
     34a:	0f 2e       	mov	r0, r31
     34c:	f8 ea       	ldi	r31, 0xA8	; 168
     34e:	ef 2e       	mov	r14, r31
     350:	f6 e0       	ldi	r31, 0x06	; 6
     352:	ff 2e       	mov	r15, r31
     354:	f0 2d       	mov	r31, r0
     356:	0f 2e       	mov	r0, r31
     358:	fa e9       	ldi	r31, 0x9A	; 154
     35a:	cf 2e       	mov	r12, r31
     35c:	f6 e0       	ldi	r31, 0x06	; 6
     35e:	df 2e       	mov	r13, r31
     360:	f0 2d       	mov	r31, r0
     362:	c1 11       	cpse	r28, r1
     364:	08 c0       	rjmp	.+16     	; 0x376 <mfrc_print_serial+0xa8>
     366:	f8 01       	movw	r30, r16
     368:	80 81       	ld	r24, Z
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <IntToString>
     370:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     374:	07 c0       	rjmp	.+14     	; 0x384 <mfrc_print_serial+0xb6>
     376:	f7 01       	movw	r30, r14
     378:	80 81       	ld	r24, Z
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <IntToString>
     380:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     384:	0f 5f       	subi	r16, 0xFF	; 255
     386:	1f 4f       	sbci	r17, 0xFF	; 255
     388:	ff ef       	ldi	r31, 0xFF	; 255
     38a:	ef 1a       	sub	r14, r31
     38c:	ff 0a       	sbc	r15, r31
     38e:	0c 15       	cp	r16, r12
     390:	1d 05       	cpc	r17, r13
     392:	39 f7       	brne	.-50     	; 0x362 <mfrc_print_serial+0x94>
     394:	2c c0       	rjmp	.+88     	; 0x3ee <mfrc_print_serial+0x120>
     396:	8e e6       	ldi	r24, 0x6E	; 110
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     39e:	06 e9       	ldi	r16, 0x96	; 150
     3a0:	16 e0       	ldi	r17, 0x06	; 6
     3a2:	0f 2e       	mov	r0, r31
     3a4:	f8 ea       	ldi	r31, 0xA8	; 168
     3a6:	ef 2e       	mov	r14, r31
     3a8:	f6 e0       	ldi	r31, 0x06	; 6
     3aa:	ff 2e       	mov	r15, r31
     3ac:	f0 2d       	mov	r31, r0
     3ae:	0f 2e       	mov	r0, r31
     3b0:	fa e9       	ldi	r31, 0x9A	; 154
     3b2:	cf 2e       	mov	r12, r31
     3b4:	f6 e0       	ldi	r31, 0x06	; 6
     3b6:	df 2e       	mov	r13, r31
     3b8:	f0 2d       	mov	r31, r0
     3ba:	c1 11       	cpse	r28, r1
     3bc:	07 c0       	rjmp	.+14     	; 0x3cc <mfrc_print_serial+0xfe>
     3be:	f8 01       	movw	r30, r16
     3c0:	80 81       	ld	r24, Z
     3c2:	0e 94 1e 10 	call	0x203c	; 0x203c <HexToString>
     3c6:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     3ca:	06 c0       	rjmp	.+12     	; 0x3d8 <mfrc_print_serial+0x10a>
     3cc:	f7 01       	movw	r30, r14
     3ce:	80 81       	ld	r24, Z
     3d0:	0e 94 1e 10 	call	0x203c	; 0x203c <HexToString>
     3d4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     3d8:	80 e2       	ldi	r24, 0x20	; 32
     3da:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     3de:	0f 5f       	subi	r16, 0xFF	; 255
     3e0:	1f 4f       	sbci	r17, 0xFF	; 255
     3e2:	ff ef       	ldi	r31, 0xFF	; 255
     3e4:	ef 1a       	sub	r14, r31
     3e6:	ff 0a       	sbc	r15, r31
     3e8:	0c 15       	cp	r16, r12
     3ea:	1d 05       	cpc	r17, r13
     3ec:	31 f7       	brne	.-52     	; 0x3ba <mfrc_print_serial+0xec>
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	08 95       	ret

000003fe <mfrc_check_and_data_receive_ch0>:
     3fe:	cf 93       	push	r28
     400:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <noise_flag.2462>
     404:	81 11       	cpse	r24, r1
     406:	09 c0       	rjmp	.+18     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	66 e9       	ldi	r22, 0x96	; 150
     40c:	76 e0       	ldi	r23, 0x06	; 6
     40e:	82 e5       	ldi	r24, 0x52	; 82
     410:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <mfrc522_request>
     414:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <_byte.2464>
     418:	1d c0       	rjmp	.+58     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     41a:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <toggle_flag.2463>
     41e:	88 23       	and	r24, r24
     420:	39 f0       	breq	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	66 e9       	ldi	r22, 0x96	; 150
     426:	76 e0       	ldi	r23, 0x06	; 6
     428:	82 e5       	ldi	r24, 0x52	; 82
     42a:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <mfrc522_request>
     42e:	0c c0       	rjmp	.+24     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	66 e9       	ldi	r22, 0x96	; 150
     434:	76 e0       	ldi	r23, 0x06	; 6
     436:	82 e5       	ldi	r24, 0x52	; 82
     438:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <mfrc522_request>
     43c:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <_byte.2464>
     440:	83 30       	cpi	r24, 0x03	; 3
     442:	11 f4       	brne	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     444:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <noise_flag.2462>
     448:	90 91 db 04 	lds	r25, 0x04DB	; 0x8004db <toggle_flag.2463>
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	89 27       	eor	r24, r25
     450:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <toggle_flag.2463>
     454:	c0 91 dc 04 	lds	r28, 0x04DC	; 0x8004dc <_byte.2464>
     458:	c1 30       	cpi	r28, 0x01	; 1
     45a:	29 f0       	breq	.+10     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     45c:	88 e5       	ldi	r24, 0x58	; 88
     45e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <detected_flag_ch0>
     462:	c0 e0       	ldi	r28, 0x00	; 0
     464:	2c c0       	rjmp	.+88     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     466:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <detected_flag_ch0>
     46a:	88 35       	cpi	r24, 0x58	; 88
     46c:	29 f5       	brne	.+74     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     46e:	8f e4       	ldi	r24, 0x4F	; 79
     470:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <detected_flag_ch0>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <noise_flag.2462>
     47a:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <toggle_flag.2463>
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	86 e9       	ldi	r24, 0x96	; 150
     482:	96 e0       	ldi	r25, 0x06	; 6
     484:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <mfrc522_get_card_serial>
     488:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <_byte.2464>
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	b1 f4       	brne	.+44     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     490:	86 e7       	ldi	r24, 0x76	; 118
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	17 df       	rcall	.-466    	; 0x2ce <mfrc_print_serial>
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	13 df       	rcall	.-474    	; 0x2ce <mfrc_print_serial>
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0f df       	rcall	.-482    	; 0x2ce <mfrc_print_serial>
     4b0:	8a e0       	ldi	r24, 0x0A	; 10
     4b2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     4b6:	03 c0       	rjmp	.+6      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4b8:	c0 e0       	ldi	r28, 0x00	; 0
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4bc:	cf ef       	ldi	r28, 0xFF	; 255
     4be:	8c 2f       	mov	r24, r28
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <mfrc_check_and_data_receive_ch1>:
     4c4:	cf 93       	push	r28
     4c6:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <noise_flag.2468>
     4ca:	81 11       	cpse	r24, r1
     4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <mfrc_check_and_data_receive_ch1+0x1c>
     4ce:	41 e0       	ldi	r20, 0x01	; 1
     4d0:	68 ea       	ldi	r22, 0xA8	; 168
     4d2:	76 e0       	ldi	r23, 0x06	; 6
     4d4:	82 e5       	ldi	r24, 0x52	; 82
     4d6:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <mfrc522_request>
     4da:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <_byte.2470>
     4de:	1d c0       	rjmp	.+58     	; 0x51a <mfrc_check_and_data_receive_ch1+0x56>
     4e0:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <toggle_flag.2469>
     4e4:	88 23       	and	r24, r24
     4e6:	39 f0       	breq	.+14     	; 0x4f6 <mfrc_check_and_data_receive_ch1+0x32>
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	68 ea       	ldi	r22, 0xA8	; 168
     4ec:	76 e0       	ldi	r23, 0x06	; 6
     4ee:	82 e5       	ldi	r24, 0x52	; 82
     4f0:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <mfrc522_request>
     4f4:	0c c0       	rjmp	.+24     	; 0x50e <mfrc_check_and_data_receive_ch1+0x4a>
     4f6:	41 e0       	ldi	r20, 0x01	; 1
     4f8:	68 ea       	ldi	r22, 0xA8	; 168
     4fa:	76 e0       	ldi	r23, 0x06	; 6
     4fc:	82 e5       	ldi	r24, 0x52	; 82
     4fe:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <mfrc522_request>
     502:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <_byte.2470>
     506:	83 30       	cpi	r24, 0x03	; 3
     508:	11 f4       	brne	.+4      	; 0x50e <mfrc_check_and_data_receive_ch1+0x4a>
     50a:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <noise_flag.2468>
     50e:	90 91 d8 04 	lds	r25, 0x04D8	; 0x8004d8 <toggle_flag.2469>
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	89 27       	eor	r24, r25
     516:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <toggle_flag.2469>
     51a:	c0 91 d9 04 	lds	r28, 0x04D9	; 0x8004d9 <_byte.2470>
     51e:	c1 30       	cpi	r28, 0x01	; 1
     520:	29 f0       	breq	.+10     	; 0x52c <mfrc_check_and_data_receive_ch1+0x68>
     522:	88 e5       	ldi	r24, 0x58	; 88
     524:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <detected_flag_ch1>
     528:	c0 e0       	ldi	r28, 0x00	; 0
     52a:	2c c0       	rjmp	.+88     	; 0x584 <mfrc_check_and_data_receive_ch1+0xc0>
     52c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <detected_flag_ch1>
     530:	88 35       	cpi	r24, 0x58	; 88
     532:	29 f5       	brne	.+74     	; 0x57e <mfrc_check_and_data_receive_ch1+0xba>
     534:	8f e4       	ldi	r24, 0x4F	; 79
     536:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <detected_flag_ch1>
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <noise_flag.2468>
     540:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <toggle_flag.2469>
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	88 ea       	ldi	r24, 0xA8	; 168
     548:	96 e0       	ldi	r25, 0x06	; 6
     54a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <mfrc522_get_card_serial>
     54e:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <_byte.2470>
     552:	81 30       	cpi	r24, 0x01	; 1
     554:	b1 f4       	brne	.+44     	; 0x582 <mfrc_check_and_data_receive_ch1+0xbe>
     556:	89 e8       	ldi	r24, 0x89	; 137
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	b4 de       	rcall	.-664    	; 0x2ce <mfrc_print_serial>
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	b0 de       	rcall	.-672    	; 0x2ce <mfrc_print_serial>
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	ac de       	rcall	.-680    	; 0x2ce <mfrc_print_serial>
     576:	8a e0       	ldi	r24, 0x0A	; 10
     578:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     57c:	03 c0       	rjmp	.+6      	; 0x584 <mfrc_check_and_data_receive_ch1+0xc0>
     57e:	c0 e0       	ldi	r28, 0x00	; 0
     580:	01 c0       	rjmp	.+2      	; 0x584 <mfrc_check_and_data_receive_ch1+0xc0>
     582:	cf ef       	ldi	r28, 0xFF	; 255
     584:	8c 2f       	mov	r24, r28
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <RC522_data_request_per_100ms>:
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
     590:	60 91 ba 06 	lds	r22, 0x06BA	; 0x8006ba <TICK>
     594:	70 91 bb 06 	lds	r23, 0x06BB	; 0x8006bb <TICK+0x1>
     598:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <TICK+0x2>
     59c:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <TICK+0x3>
     5a0:	24 e6       	ldi	r18, 0x64	; 100
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodsi4>
     5ac:	67 2b       	or	r22, r23
     5ae:	68 2b       	or	r22, r24
     5b0:	69 2b       	or	r22, r25
     5b2:	89 f4       	brne	.+34     	; 0x5d6 <RC522_data_request_per_100ms+0x4c>
     5b4:	98 81       	ld	r25, Y
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	89 27       	eor	r24, r25
     5ba:	88 83       	st	Y, r24
     5bc:	81 11       	cpse	r24, r1
     5be:	06 c0       	rjmp	.+12     	; 0x5cc <RC522_data_request_per_100ms+0x42>
     5c0:	1e df       	rcall	.-452    	; 0x3fe <mfrc_check_and_data_receive_ch0>
     5c2:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <received_state>
     5c6:	10 92 9a 06 	sts	0x069A, r1	; 0x80069a <rfid_uid_ch0+0x4>
     5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <RC522_data_request_per_100ms+0x4c>
     5cc:	7b df       	rcall	.-266    	; 0x4c4 <mfrc_check_and_data_receive_ch1>
     5ce:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <received_state>
     5d2:	10 92 ac 06 	sts	0x06AC, r1	; 0x8006ac <rfid_uid_ch1+0x4>
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <setSoundClip>:
     5dc:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <TICK+0x4>
     5e0:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <TICK+0x5>
     5e4:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <TICK+0x6>
     5e8:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <TICK+0x7>
     5ec:	82 30       	cpi	r24, 0x02	; 2
     5ee:	99 f0       	breq	.+38     	; 0x616 <setSoundClip+0x3a>
     5f0:	28 f4       	brcc	.+10     	; 0x5fc <setSoundClip+0x20>
     5f2:	88 23       	and	r24, r24
     5f4:	49 f0       	breq	.+18     	; 0x608 <setSoundClip+0x2c>
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	51 f0       	breq	.+20     	; 0x60e <setSoundClip+0x32>
     5fa:	1c c0       	rjmp	.+56     	; 0x634 <setSoundClip+0x58>
     5fc:	84 30       	cpi	r24, 0x04	; 4
     5fe:	99 f0       	breq	.+38     	; 0x626 <setSoundClip+0x4a>
     600:	70 f0       	brcs	.+28     	; 0x61e <setSoundClip+0x42>
     602:	85 30       	cpi	r24, 0x05	; 5
     604:	a1 f0       	breq	.+40     	; 0x62e <setSoundClip+0x52>
     606:	16 c0       	rjmp	.+44     	; 0x634 <setSoundClip+0x58>
     608:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <music_flag>
     60c:	13 c0       	rjmp	.+38     	; 0x634 <setSoundClip+0x58>
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <music_flag>
     614:	0f c0       	rjmp	.+30     	; 0x634 <setSoundClip+0x58>
     616:	82 e0       	ldi	r24, 0x02	; 2
     618:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <music_flag>
     61c:	0b c0       	rjmp	.+22     	; 0x634 <setSoundClip+0x58>
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <music_flag>
     624:	07 c0       	rjmp	.+14     	; 0x634 <setSoundClip+0x58>
     626:	84 e0       	ldi	r24, 0x04	; 4
     628:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <music_flag>
     62c:	03 c0       	rjmp	.+6      	; 0x634 <setSoundClip+0x58>
     62e:	85 e0       	ldi	r24, 0x05	; 5
     630:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <music_flag>
     634:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <TICK+0x4>
     638:	10 92 bf 06 	sts	0x06BF, r1	; 0x8006bf <TICK+0x5>
     63c:	10 92 c0 06 	sts	0x06C0, r1	; 0x8006c0 <TICK+0x6>
     640:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <TICK+0x7>
     644:	08 95       	ret

00000646 <buzz_MUTE>:
     646:	eb e8       	ldi	r30, 0x8B	; 139
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	8f 7b       	andi	r24, 0xBF	; 191
     64e:	80 83       	st	Z, r24
     650:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <music_flag>
     654:	08 95       	ret

00000656 <setSoundNote>:
     656:	00 97       	sbiw	r24, 0x00	; 0
     658:	41 f0       	breq	.+16     	; 0x66a <setSoundNote+0x14>
     65a:	eb e8       	ldi	r30, 0x8B	; 139
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	20 81       	ld	r18, Z
     660:	20 64       	ori	r18, 0x40	; 64
     662:	20 83       	st	Z, r18
     664:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <setICR3>
     668:	08 95       	ret
     66a:	eb e8       	ldi	r30, 0x8B	; 139
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	8f 7b       	andi	r24, 0xBF	; 191
     672:	80 83       	st	Z, r24
     674:	08 95       	ret

00000676 <buzz_play>:
     676:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <music_flag>
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	09 f4       	brne	.+2      	; 0x680 <buzz_play+0xa>
     67e:	76 c0       	rjmp	.+236    	; 0x76c <buzz_play+0xf6>
     680:	28 f4       	brcc	.+10     	; 0x68c <buzz_play+0x16>
     682:	88 23       	and	r24, r24
     684:	61 f0       	breq	.+24     	; 0x69e <buzz_play+0x28>
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	61 f0       	breq	.+24     	; 0x6a2 <buzz_play+0x2c>
     68a:	08 95       	ret
     68c:	84 30       	cpi	r24, 0x04	; 4
     68e:	09 f4       	brne	.+2      	; 0x692 <buzz_play+0x1c>
     690:	37 c1       	rjmp	.+622    	; 0x900 <buzz_play+0x28a>
     692:	08 f4       	brcc	.+2      	; 0x696 <buzz_play+0x20>
     694:	d0 c0       	rjmp	.+416    	; 0x836 <buzz_play+0x1c0>
     696:	85 30       	cpi	r24, 0x05	; 5
     698:	09 f4       	brne	.+2      	; 0x69c <buzz_play+0x26>
     69a:	75 c1       	rjmp	.+746    	; 0x986 <buzz_play+0x310>
     69c:	08 95       	ret
     69e:	d3 cf       	rjmp	.-90     	; 0x646 <buzz_MUTE>
     6a0:	08 95       	ret
     6a2:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     6a6:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     6aa:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     6ae:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     6b2:	88 3c       	cpi	r24, 0xC8	; 200
     6b4:	91 05       	cpc	r25, r1
     6b6:	a1 05       	cpc	r26, r1
     6b8:	b1 05       	cpc	r27, r1
     6ba:	20 f4       	brcc	.+8      	; 0x6c4 <buzz_play+0x4e>
     6bc:	8b e9       	ldi	r24, 0x9B	; 155
     6be:	96 e0       	ldi	r25, 0x06	; 6
     6c0:	ca cf       	rjmp	.-108    	; 0x656 <setSoundNote>
     6c2:	08 95       	ret
     6c4:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     6c8:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     6cc:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     6d0:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     6d4:	88 3c       	cpi	r24, 0xC8	; 200
     6d6:	91 05       	cpc	r25, r1
     6d8:	a1 05       	cpc	r26, r1
     6da:	b1 05       	cpc	r27, r1
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <buzz_play+0x70>
     6de:	87 ee       	ldi	r24, 0xE7	; 231
     6e0:	95 e0       	ldi	r25, 0x05	; 5
     6e2:	b9 cf       	rjmp	.-142    	; 0x656 <setSoundNote>
     6e4:	08 95       	ret
     6e6:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     6ea:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     6ee:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     6f2:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     6f6:	80 39       	cpi	r24, 0x90	; 144
     6f8:	91 40       	sbci	r25, 0x01	; 1
     6fa:	a1 05       	cpc	r26, r1
     6fc:	b1 05       	cpc	r27, r1
     6fe:	21 f4       	brne	.+8      	; 0x708 <buzz_play+0x92>
     700:	85 e6       	ldi	r24, 0x65	; 101
     702:	94 e0       	ldi	r25, 0x04	; 4
     704:	a8 cf       	rjmp	.-176    	; 0x656 <setSoundNote>
     706:	08 95       	ret
     708:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     70c:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     710:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     714:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     718:	88 35       	cpi	r24, 0x58	; 88
     71a:	92 40       	sbci	r25, 0x02	; 2
     71c:	a1 05       	cpc	r26, r1
     71e:	b1 05       	cpc	r27, r1
     720:	21 f4       	brne	.+8      	; 0x72a <buzz_play+0xb4>
     722:	8d ef       	ldi	r24, 0xFD	; 253
     724:	93 e0       	ldi	r25, 0x03	; 3
     726:	97 cf       	rjmp	.-210    	; 0x656 <setSoundNote>
     728:	08 95       	ret
     72a:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     72e:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     732:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     736:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     73a:	80 32       	cpi	r24, 0x20	; 32
     73c:	93 40       	sbci	r25, 0x03	; 3
     73e:	a1 05       	cpc	r26, r1
     740:	b1 05       	cpc	r27, r1
     742:	21 f4       	brne	.+8      	; 0x74c <buzz_play+0xd6>
     744:	88 ef       	ldi	r24, 0xF8	; 248
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	86 cf       	rjmp	.-244    	; 0x656 <setSoundNote>
     74a:	08 95       	ret
     74c:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     750:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     754:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     758:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     75c:	80 3b       	cpi	r24, 0xB0	; 176
     75e:	94 40       	sbci	r25, 0x04	; 4
     760:	a1 05       	cpc	r26, r1
     762:	b1 05       	cpc	r27, r1
     764:	09 f0       	breq	.+2      	; 0x768 <buzz_play+0xf2>
     766:	50 c1       	rjmp	.+672    	; 0xa08 <buzz_play+0x392>
     768:	6e cf       	rjmp	.-292    	; 0x646 <buzz_MUTE>
     76a:	08 95       	ret
     76c:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     770:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     774:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     778:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     77c:	88 3c       	cpi	r24, 0xC8	; 200
     77e:	91 05       	cpc	r25, r1
     780:	a1 05       	cpc	r26, r1
     782:	b1 05       	cpc	r27, r1
     784:	20 f4       	brcc	.+8      	; 0x78e <buzz_play+0x118>
     786:	8b e9       	ldi	r24, 0x9B	; 155
     788:	96 e0       	ldi	r25, 0x06	; 6
     78a:	65 cf       	rjmp	.-310    	; 0x656 <setSoundNote>
     78c:	08 95       	ret
     78e:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     792:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     796:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     79a:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     79e:	82 3d       	cpi	r24, 0xD2	; 210
     7a0:	91 05       	cpc	r25, r1
     7a2:	a1 05       	cpc	r26, r1
     7a4:	b1 05       	cpc	r27, r1
     7a6:	21 f4       	brne	.+8      	; 0x7b0 <buzz_play+0x13a>
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	54 cf       	rjmp	.-344    	; 0x656 <setSoundNote>
     7ae:	08 95       	ret
     7b0:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     7b4:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     7b8:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     7bc:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     7c0:	8c 3d       	cpi	r24, 0xDC	; 220
     7c2:	91 05       	cpc	r25, r1
     7c4:	a1 05       	cpc	r26, r1
     7c6:	b1 05       	cpc	r27, r1
     7c8:	21 f4       	brne	.+8      	; 0x7d2 <buzz_play+0x15c>
     7ca:	87 ee       	ldi	r24, 0xE7	; 231
     7cc:	95 e0       	ldi	r25, 0x05	; 5
     7ce:	43 cf       	rjmp	.-378    	; 0x656 <setSoundNote>
     7d0:	08 95       	ret
     7d2:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     7d6:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     7da:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     7de:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     7e2:	80 39       	cpi	r24, 0x90	; 144
     7e4:	91 40       	sbci	r25, 0x01	; 1
     7e6:	a1 05       	cpc	r26, r1
     7e8:	b1 05       	cpc	r27, r1
     7ea:	21 f4       	brne	.+8      	; 0x7f4 <buzz_play+0x17e>
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	32 cf       	rjmp	.-412    	; 0x656 <setSoundNote>
     7f2:	08 95       	ret
     7f4:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     7f8:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     7fc:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     800:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     804:	8e 3a       	cpi	r24, 0xAE	; 174
     806:	91 40       	sbci	r25, 0x01	; 1
     808:	a1 05       	cpc	r26, r1
     80a:	b1 05       	cpc	r27, r1
     80c:	21 f4       	brne	.+8      	; 0x816 <buzz_play+0x1a0>
     80e:	85 e6       	ldi	r24, 0x65	; 101
     810:	94 e0       	ldi	r25, 0x04	; 4
     812:	21 cf       	rjmp	.-446    	; 0x656 <setSoundNote>
     814:	08 95       	ret
     816:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     81a:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     81e:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     822:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     826:	88 35       	cpi	r24, 0x58	; 88
     828:	92 40       	sbci	r25, 0x02	; 2
     82a:	a1 05       	cpc	r26, r1
     82c:	b1 05       	cpc	r27, r1
     82e:	09 f0       	breq	.+2      	; 0x832 <buzz_play+0x1bc>
     830:	eb c0       	rjmp	.+470    	; 0xa08 <buzz_play+0x392>
     832:	09 cf       	rjmp	.-494    	; 0x646 <buzz_MUTE>
     834:	08 95       	ret
     836:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     83a:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     83e:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     842:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     846:	8b 34       	cpi	r24, 0x4B	; 75
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	20 f4       	brcc	.+8      	; 0x858 <buzz_play+0x1e2>
     850:	82 e1       	ldi	r24, 0x12	; 18
     852:	94 e0       	ldi	r25, 0x04	; 4
     854:	00 cf       	rjmp	.-512    	; 0x656 <setSoundNote>
     856:	08 95       	ret
     858:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     85c:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     860:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     864:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     868:	86 39       	cpi	r24, 0x96	; 150
     86a:	91 05       	cpc	r25, r1
     86c:	a1 05       	cpc	r26, r1
     86e:	b1 05       	cpc	r27, r1
     870:	20 f4       	brcc	.+8      	; 0x87a <buzz_play+0x204>
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	ef ce       	rjmp	.-546    	; 0x656 <setSoundNote>
     878:	08 95       	ret
     87a:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     87e:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     882:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     886:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     88a:	81 3e       	cpi	r24, 0xE1	; 225
     88c:	91 05       	cpc	r25, r1
     88e:	a1 05       	cpc	r26, r1
     890:	b1 05       	cpc	r27, r1
     892:	20 f4       	brcc	.+8      	; 0x89c <buzz_play+0x226>
     894:	82 e1       	ldi	r24, 0x12	; 18
     896:	94 e0       	ldi	r25, 0x04	; 4
     898:	de ce       	rjmp	.-580    	; 0x656 <setSoundNote>
     89a:	08 95       	ret
     89c:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     8a0:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     8a4:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     8a8:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     8ac:	8c 32       	cpi	r24, 0x2C	; 44
     8ae:	91 40       	sbci	r25, 0x01	; 1
     8b0:	a1 05       	cpc	r26, r1
     8b2:	b1 05       	cpc	r27, r1
     8b4:	20 f4       	brcc	.+8      	; 0x8be <buzz_play+0x248>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	cd ce       	rjmp	.-614    	; 0x656 <setSoundNote>
     8bc:	08 95       	ret
     8be:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     8c2:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     8c6:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     8ca:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     8ce:	87 37       	cpi	r24, 0x77	; 119
     8d0:	91 40       	sbci	r25, 0x01	; 1
     8d2:	a1 05       	cpc	r26, r1
     8d4:	b1 05       	cpc	r27, r1
     8d6:	20 f4       	brcc	.+8      	; 0x8e0 <buzz_play+0x26a>
     8d8:	82 e1       	ldi	r24, 0x12	; 18
     8da:	94 e0       	ldi	r25, 0x04	; 4
     8dc:	bc ce       	rjmp	.-648    	; 0x656 <setSoundNote>
     8de:	08 95       	ret
     8e0:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     8e4:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     8e8:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     8ec:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     8f0:	82 3c       	cpi	r24, 0xC2	; 194
     8f2:	91 40       	sbci	r25, 0x01	; 1
     8f4:	a1 05       	cpc	r26, r1
     8f6:	b1 05       	cpc	r27, r1
     8f8:	09 f0       	breq	.+2      	; 0x8fc <buzz_play+0x286>
     8fa:	86 c0       	rjmp	.+268    	; 0xa08 <buzz_play+0x392>
     8fc:	a4 ce       	rjmp	.-696    	; 0x646 <buzz_MUTE>
     8fe:	08 95       	ret
     900:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     904:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     908:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     90c:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     910:	84 36       	cpi	r24, 0x64	; 100
     912:	91 05       	cpc	r25, r1
     914:	a1 05       	cpc	r26, r1
     916:	b1 05       	cpc	r27, r1
     918:	20 f4       	brcc	.+8      	; 0x922 <buzz_play+0x2ac>
     91a:	82 e1       	ldi	r24, 0x12	; 18
     91c:	94 e0       	ldi	r25, 0x04	; 4
     91e:	9b ce       	rjmp	.-714    	; 0x656 <setSoundNote>
     920:	08 95       	ret
     922:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     926:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     92a:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     92e:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     932:	88 3c       	cpi	r24, 0xC8	; 200
     934:	91 05       	cpc	r25, r1
     936:	a1 05       	cpc	r26, r1
     938:	b1 05       	cpc	r27, r1
     93a:	20 f4       	brcc	.+8      	; 0x944 <buzz_play+0x2ce>
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	8a ce       	rjmp	.-748    	; 0x656 <setSoundNote>
     942:	08 95       	ret
     944:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     948:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     94c:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     950:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     954:	8c 32       	cpi	r24, 0x2C	; 44
     956:	91 40       	sbci	r25, 0x01	; 1
     958:	a1 05       	cpc	r26, r1
     95a:	b1 05       	cpc	r27, r1
     95c:	20 f4       	brcc	.+8      	; 0x966 <buzz_play+0x2f0>
     95e:	82 e1       	ldi	r24, 0x12	; 18
     960:	94 e0       	ldi	r25, 0x04	; 4
     962:	79 ce       	rjmp	.-782    	; 0x656 <setSoundNote>
     964:	08 95       	ret
     966:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     96a:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     96e:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     972:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     976:	82 3c       	cpi	r24, 0xC2	; 194
     978:	91 40       	sbci	r25, 0x01	; 1
     97a:	a1 05       	cpc	r26, r1
     97c:	b1 05       	cpc	r27, r1
     97e:	09 f0       	breq	.+2      	; 0x982 <buzz_play+0x30c>
     980:	43 c0       	rjmp	.+134    	; 0xa08 <buzz_play+0x392>
     982:	61 ce       	rjmp	.-830    	; 0x646 <buzz_MUTE>
     984:	08 95       	ret
     986:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     98a:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     98e:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     992:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     996:	84 36       	cpi	r24, 0x64	; 100
     998:	91 05       	cpc	r25, r1
     99a:	a1 05       	cpc	r26, r1
     99c:	b1 05       	cpc	r27, r1
     99e:	20 f4       	brcc	.+8      	; 0x9a8 <buzz_play+0x332>
     9a0:	87 e4       	ldi	r24, 0x47	; 71
     9a2:	90 e1       	ldi	r25, 0x10	; 16
     9a4:	58 ce       	rjmp	.-848    	; 0x656 <setSoundNote>
     9a6:	08 95       	ret
     9a8:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     9ac:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     9b0:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     9b4:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     9b8:	88 3c       	cpi	r24, 0xC8	; 200
     9ba:	91 05       	cpc	r25, r1
     9bc:	a1 05       	cpc	r26, r1
     9be:	b1 05       	cpc	r27, r1
     9c0:	20 f4       	brcc	.+8      	; 0x9ca <buzz_play+0x354>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	47 ce       	rjmp	.-882    	; 0x656 <setSoundNote>
     9c8:	08 95       	ret
     9ca:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     9ce:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     9d2:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     9d6:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     9da:	8c 32       	cpi	r24, 0x2C	; 44
     9dc:	91 40       	sbci	r25, 0x01	; 1
     9de:	a1 05       	cpc	r26, r1
     9e0:	b1 05       	cpc	r27, r1
     9e2:	20 f4       	brcc	.+8      	; 0x9ec <buzz_play+0x376>
     9e4:	84 e2       	ldi	r24, 0x24	; 36
     9e6:	98 e0       	ldi	r25, 0x08	; 8
     9e8:	36 ce       	rjmp	.-916    	; 0x656 <setSoundNote>
     9ea:	08 95       	ret
     9ec:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <TICK+0x4>
     9f0:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <TICK+0x5>
     9f4:	a0 91 c0 06 	lds	r26, 0x06C0	; 0x8006c0 <TICK+0x6>
     9f8:	b0 91 c1 06 	lds	r27, 0x06C1	; 0x8006c1 <TICK+0x7>
     9fc:	82 3c       	cpi	r24, 0xC2	; 194
     9fe:	91 40       	sbci	r25, 0x01	; 1
     a00:	a1 05       	cpc	r26, r1
     a02:	b1 05       	cpc	r27, r1
     a04:	09 f4       	brne	.+2      	; 0xa08 <buzz_play+0x392>
     a06:	1f ce       	rjmp	.-962    	; 0x646 <buzz_MUTE>
     a08:	08 95       	ret

00000a0a <start_timeout_count>:
     a0a:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <TICK+0xc>
     a0e:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <TICK+0xd>
     a12:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <TICK+0xe>
     a16:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <TICK+0xf>
     a1a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <start_timeout_count_flag+0x1>
     a1e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <start_timeout_count_flag>
     a22:	08 95       	ret

00000a24 <request_reset_to_admin>:
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	65 97       	sbiw	r28, 0x15	; 21
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	bc 01       	movw	r22, r24
     a3a:	9a e0       	ldi	r25, 0x0A	; 10
     a3c:	ea e0       	ldi	r30, 0x0A	; 10
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	de 01       	movw	r26, r28
     a42:	11 96       	adiw	r26, 0x01	; 1
     a44:	01 90       	ld	r0, Z+
     a46:	0d 92       	st	X+, r0
     a48:	9a 95       	dec	r25
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <request_reset_to_admin+0x20>
     a4c:	fe 01       	movw	r30, r28
     a4e:	3b 96       	adiw	r30, 0x0b	; 11
     a50:	8b e0       	ldi	r24, 0x0B	; 11
     a52:	df 01       	movw	r26, r30
     a54:	1d 92       	st	X+, r1
     a56:	8a 95       	dec	r24
     a58:	e9 f7       	brne	.-6      	; 0xa54 <request_reset_to_admin+0x30>
     a5a:	ce 01       	movw	r24, r28
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	0e 94 33 11 	call	0x2266	; 0x2266 <strcat>
     a62:	f9 d6       	rcall	.+3570   	; 0x1856 <i2c_lcd_clear>
     a64:	4c e9       	ldi	r20, 0x9C	; 156
     a66:	51 e0       	ldi	r21, 0x01	; 1
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	e5 d6       	rcall	.+3530   	; 0x1838 <i2c_lcd_string>
     a6e:	49 ea       	ldi	r20, 0xA9	; 169
     a70:	51 e0       	ldi	r21, 0x01	; 1
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	e0 d6       	rcall	.+3520   	; 0x1838 <i2c_lcd_string>
     a78:	ae 01       	movw	r20, r28
     a7a:	4f 5f       	subi	r20, 0xFF	; 255
     a7c:	5f 4f       	sbci	r21, 0xFF	; 255
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	da d6       	rcall	.+3508   	; 0x1838 <i2c_lcd_string>
     a84:	65 96       	adiw	r28, 0x15	; 21
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <timeout_check>:
     a96:	40 91 c6 06 	lds	r20, 0x06C6	; 0x8006c6 <TICK+0xc>
     a9a:	50 91 c7 06 	lds	r21, 0x06C7	; 0x8006c7 <TICK+0xd>
     a9e:	60 91 c8 06 	lds	r22, 0x06C8	; 0x8006c8 <TICK+0xe>
     aa2:	70 91 c9 06 	lds	r23, 0x06C9	; 0x8006c9 <TICK+0xf>
     aa6:	41 31       	cpi	r20, 0x11	; 17
     aa8:	57 42       	sbci	r21, 0x27	; 39
     aaa:	61 05       	cpc	r22, r1
     aac:	71 05       	cpc	r23, r1
     aae:	38 f0       	brcs	.+14     	; 0xabe <timeout_check+0x28>
     ab0:	21 e0       	ldi	r18, 0x01	; 1
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <start_timeout_count_flag+0x1>
     ab8:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <start_timeout_count_flag>
     abc:	b3 df       	rcall	.-154    	; 0xa24 <request_reset_to_admin>
     abe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <start_timeout_count_flag>
     ac2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <start_timeout_count_flag+0x1>
     ac6:	00 97       	sbiw	r24, 0x00	; 0
     ac8:	f1 f7       	brne	.-4      	; 0xac6 <timeout_check+0x30>
     aca:	08 95       	ret

00000acc <esp8266_init>:
     acc:	cf 92       	push	r12
     ace:	df 92       	push	r13
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	7c 01       	movw	r14, r24
     ade:	6b 01       	movw	r12, r22
     ae0:	ea 01       	movw	r28, r20
     ae2:	89 01       	movw	r16, r18
     ae4:	92 df       	rcall	.-220    	; 0xa0a <start_timeout_count>
     ae6:	8c eb       	ldi	r24, 0xBC	; 188
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     aee:	2f ef       	ldi	r18, 0xFF	; 255
     af0:	81 e1       	ldi	r24, 0x11	; 17
     af2:	9a e7       	ldi	r25, 0x7A	; 122
     af4:	21 50       	subi	r18, 0x01	; 1
     af6:	80 40       	sbci	r24, 0x00	; 0
     af8:	90 40       	sbci	r25, 0x00	; 0
     afa:	e1 f7       	brne	.-8      	; 0xaf4 <esp8266_init+0x28>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <esp8266_init+0x32>
     afe:	00 00       	nop
     b00:	85 ec       	ldi	r24, 0xC5	; 197
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	c8 df       	rcall	.-112    	; 0xa96 <timeout_check>
     b06:	4c ec       	ldi	r20, 0xCC	; 204
     b08:	51 e0       	ldi	r21, 0x01	; 1
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	94 d6       	rcall	.+3368   	; 0x1838 <i2c_lcd_string>
     b10:	7c df       	rcall	.-264    	; 0xa0a <start_timeout_count>
     b12:	81 ee       	ldi	r24, 0xE1	; 225
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     b1a:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     b1e:	81 11       	cpse	r24, r1
     b20:	07 c0       	rjmp	.+14     	; 0xb30 <esp8266_init+0x64>
     b22:	8a ee       	ldi	r24, 0xEA	; 234
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	b7 df       	rcall	.-146    	; 0xa96 <timeout_check>
     b28:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     b2c:	88 23       	and	r24, r24
     b2e:	c9 f3       	breq	.-14     	; 0xb22 <esp8266_init+0x56>
     b30:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <esp8266_return_result_flag>
     b34:	6a df       	rcall	.-300    	; 0xa0a <start_timeout_count>
     b36:	81 ef       	ldi	r24, 0xF1	; 241
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     b3e:	2f ef       	ldi	r18, 0xFF	; 255
     b40:	87 ea       	ldi	r24, 0xA7	; 167
     b42:	91 e6       	ldi	r25, 0x61	; 97
     b44:	21 50       	subi	r18, 0x01	; 1
     b46:	80 40       	sbci	r24, 0x00	; 0
     b48:	90 40       	sbci	r25, 0x00	; 0
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <esp8266_init+0x78>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <esp8266_init+0x82>
     b4e:	00 00       	nop
     b50:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <esp8266_return_result_flag>
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	9e df       	rcall	.-196    	; 0xa96 <timeout_check>
     b5a:	49 e0       	ldi	r20, 0x09	; 9
     b5c:	52 e0       	ldi	r21, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	6a d6       	rcall	.+3284   	; 0x1838 <i2c_lcd_string>
     b64:	52 df       	rcall	.-348    	; 0xa0a <start_timeout_count>
     b66:	8e e1       	ldi	r24, 0x1E	; 30
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     b6e:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     b72:	81 11       	cpse	r24, r1
     b74:	07 c0       	rjmp	.+14     	; 0xb84 <esp8266_init+0xb8>
     b76:	8b e2       	ldi	r24, 0x2B	; 43
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	8d df       	rcall	.-230    	; 0xa96 <timeout_check>
     b7c:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     b80:	88 23       	and	r24, r24
     b82:	c9 f3       	breq	.-14     	; 0xb76 <esp8266_init+0xaa>
     b84:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <esp8266_return_result_flag>
     b88:	40 df       	rcall	.-384    	; 0xa0a <start_timeout_count>
     b8a:	86 e3       	ldi	r24, 0x36	; 54
     b8c:	92 e0       	ldi	r25, 0x02	; 2
     b8e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     b92:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     b96:	81 11       	cpse	r24, r1
     b98:	07 c0       	rjmp	.+14     	; 0xba8 <esp8266_init+0xdc>
     b9a:	81 e4       	ldi	r24, 0x41	; 65
     b9c:	92 e0       	ldi	r25, 0x02	; 2
     b9e:	7b df       	rcall	.-266    	; 0xa96 <timeout_check>
     ba0:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     ba4:	88 23       	and	r24, r24
     ba6:	c9 f3       	breq	.-14     	; 0xb9a <esp8266_init+0xce>
     ba8:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <esp8266_return_result_flag>
     bac:	4a e4       	ldi	r20, 0x4A	; 74
     bae:	52 e0       	ldi	r21, 0x02	; 2
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	41 d6       	rcall	.+3202   	; 0x1838 <i2c_lcd_string>
     bb6:	29 df       	rcall	.-430    	; 0xa0a <start_timeout_count>
     bb8:	a6 01       	movw	r20, r12
     bba:	b7 01       	movw	r22, r14
     bbc:	8f e5       	ldi	r24, 0x5F	; 95
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 4d 10 	call	0x209a	; 0x209a <connect_to_AP>
     bc4:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     bc8:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     bcc:	81 11       	cpse	r24, r1
     bce:	07 c0       	rjmp	.+14     	; 0xbde <esp8266_init+0x112>
     bd0:	8a e6       	ldi	r24, 0x6A	; 106
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	60 df       	rcall	.-320    	; 0xa96 <timeout_check>
     bd6:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     bda:	88 23       	and	r24, r24
     bdc:	c9 f3       	breq	.-14     	; 0xbd0 <esp8266_init+0x104>
     bde:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <esp8266_return_result_flag>
     be2:	43 e7       	ldi	r20, 0x73	; 115
     be4:	52 e0       	ldi	r21, 0x02	; 2
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	26 d6       	rcall	.+3148   	; 0x1838 <i2c_lcd_string>
     bec:	0e df       	rcall	.-484    	; 0xa0a <start_timeout_count>
     bee:	88 e8       	ldi	r24, 0x88	; 136
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     bf6:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     bfa:	81 11       	cpse	r24, r1
     bfc:	07 c0       	rjmp	.+14     	; 0xc0c <esp8266_init+0x140>
     bfe:	83 e9       	ldi	r24, 0x93	; 147
     c00:	92 e0       	ldi	r25, 0x02	; 2
     c02:	49 df       	rcall	.-366    	; 0xa96 <timeout_check>
     c04:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     c08:	88 23       	and	r24, r24
     c0a:	c9 f3       	breq	.-14     	; 0xbfe <esp8266_init+0x132>
     c0c:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <esp8266_return_result_flag>
     c10:	4c e9       	ldi	r20, 0x9C	; 156
     c12:	52 e0       	ldi	r21, 0x02	; 2
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	0f d6       	rcall	.+3102   	; 0x1838 <i2c_lcd_string>
     c1a:	f7 de       	rcall	.-530    	; 0xa0a <start_timeout_count>
     c1c:	b8 01       	movw	r22, r16
     c1e:	ce 01       	movw	r24, r28
     c20:	0e 94 a3 10 	call	0x2146	; 0x2146 <TCP_connect>
     c24:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     c28:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     c2c:	81 11       	cpse	r24, r1
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <esp8266_init+0x172>
     c30:	81 eb       	ldi	r24, 0xB1	; 177
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	30 df       	rcall	.-416    	; 0xa96 <timeout_check>
     c36:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <esp8266_return_result_flag>
     c3a:	88 23       	and	r24, r24
     c3c:	c9 f3       	breq	.-14     	; 0xc30 <esp8266_init+0x164>
     c3e:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <esp8266_return_result_flag>
     c42:	4d eb       	ldi	r20, 0xBD	; 189
     c44:	52 e0       	ldi	r21, 0x02	; 2
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	f6 d5       	rcall	.+3052   	; 0x1838 <i2c_lcd_string>
     c4c:	2f ef       	ldi	r18, 0xFF	; 255
     c4e:	81 ee       	ldi	r24, 0xE1	; 225
     c50:	94 e0       	ldi	r25, 0x04	; 4
     c52:	21 50       	subi	r18, 0x01	; 1
     c54:	80 40       	sbci	r24, 0x00	; 0
     c56:	90 40       	sbci	r25, 0x00	; 0
     c58:	e1 f7       	brne	.-8      	; 0xc52 <esp8266_init+0x186>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <esp8266_init+0x190>
     c5c:	00 00       	nop
     c5e:	42 ed       	ldi	r20, 0xD2	; 210
     c60:	52 e0       	ldi	r21, 0x02	; 2
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	e8 d5       	rcall	.+3024   	; 0x1838 <i2c_lcd_string>
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	08 95       	ret

00000c7a <logojector_ON>:
     c7a:	ac 9a       	sbi	0x15, 4	; 21
     c7c:	08 95       	ret

00000c7e <logojector_OFF>:
     c7e:	ac 98       	cbi	0x15, 4	; 21
     c80:	08 95       	ret

00000c82 <systems_init>:
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	64 97       	sbiw	r28, 0x14	; 20
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	78 94       	sei
     c9c:	8f e0       	ldi	r24, 0x0F	; 15
     c9e:	8a bb       	out	0x1a, r24	; 26
     ca0:	a4 9a       	sbi	0x14, 4	; 20
     ca2:	f8 94       	cli
     ca4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <timer0_init>
     ca8:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <timer3_init>
     cac:	78 94       	sei
     cae:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <TICK>
     cb2:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <TICK+0x1>
     cb6:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <TICK+0x2>
     cba:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <TICK+0x3>
     cbe:	df df       	rcall	.-66     	; 0xc7e <logojector_OFF>
     cc0:	60 e8       	ldi	r22, 0x80	; 128
     cc2:	75 e2       	ldi	r23, 0x25	; 37
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <uart_init>
     ccc:	60 e8       	ldi	r22, 0x80	; 128
     cce:	75 e2       	ldi	r23, 0x25	; 37
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <uart_init>
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	a1 d7       	rcall	.+3906   	; 0x1c1e <mfrc522_init>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	9f d7       	rcall	.+3902   	; 0x1c1e <mfrc522_init>
     ce0:	20 d5       	rcall	.+2624   	; 0x1722 <i2c_lcd_init>
     ce2:	47 ee       	ldi	r20, 0xE7	; 231
     ce4:	52 e0       	ldi	r21, 0x02	; 2
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	a6 d5       	rcall	.+2892   	; 0x1838 <i2c_lcd_string>
     cec:	4c ef       	ldi	r20, 0xFC	; 252
     cee:	52 e0       	ldi	r21, 0x02	; 2
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	a1 d5       	rcall	.+2882   	; 0x1838 <i2c_lcd_string>
     cf6:	40 e1       	ldi	r20, 0x10	; 16
     cf8:	53 e0       	ldi	r21, 0x03	; 3
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	9c d5       	rcall	.+2872   	; 0x1838 <i2c_lcd_string>
     d00:	47 ee       	ldi	r20, 0xE7	; 231
     d02:	52 e0       	ldi	r21, 0x02	; 2
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	97 d5       	rcall	.+2862   	; 0x1838 <i2c_lcd_string>
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	67 dc       	rcall	.-1842   	; 0x5dc <setSoundClip>
     d0e:	2f ef       	ldi	r18, 0xFF	; 255
     d10:	81 e1       	ldi	r24, 0x11	; 17
     d12:	9a e7       	ldi	r25, 0x7A	; 122
     d14:	21 50       	subi	r18, 0x01	; 1
     d16:	80 40       	sbci	r24, 0x00	; 0
     d18:	90 40       	sbci	r25, 0x00	; 0
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <systems_init+0x92>
     d1c:	00 c0       	rjmp	.+0      	; 0xd1e <systems_init+0x9c>
     d1e:	00 00       	nop
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	c5 d7       	rcall	.+3978   	; 0x1cae <mfrc522_version_check>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <mfrc522_IRQ_enable>
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	c0 d7       	rcall	.+3968   	; 0x1cae <mfrc522_version_check>
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <mfrc522_IRQ_enable>
     d34:	25 e2       	ldi	r18, 0x25	; 37
     d36:	33 e0       	ldi	r19, 0x03	; 3
     d38:	48 e2       	ldi	r20, 0x28	; 40
     d3a:	53 e0       	ldi	r21, 0x03	; 3
     d3c:	64 e3       	ldi	r22, 0x34	; 52
     d3e:	73 e0       	ldi	r23, 0x03	; 3
     d40:	81 e4       	ldi	r24, 0x41	; 65
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	c3 de       	rcall	.-634    	; 0xacc <esp8266_init>
     d46:	a3 da       	rcall	.-2746   	; 0x28e <rfid_user_uid_buffer_init>
     d48:	8f e0       	ldi	r24, 0x0F	; 15
     d4a:	ef e1       	ldi	r30, 0x1F	; 31
     d4c:	f1 e0       	ldi	r31, 0x01	; 1
     d4e:	8e 01       	movw	r16, r28
     d50:	0f 5f       	subi	r16, 0xFF	; 255
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	d8 01       	movw	r26, r16
     d56:	01 90       	ld	r0, Z+
     d58:	0d 92       	st	X+, r0
     d5a:	8a 95       	dec	r24
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <systems_init+0xd4>
     d5e:	fe 01       	movw	r30, r28
     d60:	70 96       	adiw	r30, 0x10	; 16
     d62:	85 e0       	ldi	r24, 0x05	; 5
     d64:	df 01       	movw	r26, r30
     d66:	1d 92       	st	X+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <systems_init+0xe4>
     d6c:	d8 01       	movw	r26, r16
     d6e:	0d 90       	ld	r0, X+
     d70:	00 20       	and	r0, r0
     d72:	e9 f7       	brne	.-6      	; 0xd6e <systems_init+0xec>
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	86 e0       	ldi	r24, 0x06	; 6
     d78:	e8 e4       	ldi	r30, 0x48	; 72
     d7a:	f3 e0       	ldi	r31, 0x03	; 3
     d7c:	01 90       	ld	r0, Z+
     d7e:	0d 92       	st	X+, r0
     d80:	8a 95       	dec	r24
     d82:	e1 f7       	brne	.-8      	; 0xd7c <systems_init+0xfa>
     d84:	47 ee       	ldi	r20, 0xE7	; 231
     d86:	52 e0       	ldi	r21, 0x02	; 2
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	55 d5       	rcall	.+2730   	; 0x1838 <i2c_lcd_string>
     d8e:	4e e4       	ldi	r20, 0x4E	; 78
     d90:	53 e0       	ldi	r21, 0x03	; 3
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	50 d5       	rcall	.+2720   	; 0x1838 <i2c_lcd_string>
     d98:	a8 01       	movw	r20, r16
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	4c d5       	rcall	.+2712   	; 0x1838 <i2c_lcd_string>
     da0:	47 ee       	ldi	r20, 0xE7	; 231
     da2:	52 e0       	ldi	r21, 0x02	; 2
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	47 d5       	rcall	.+2702   	; 0x1838 <i2c_lcd_string>
     daa:	85 e0       	ldi	r24, 0x05	; 5
     dac:	17 dc       	rcall	.-2002   	; 0x5dc <setSoundClip>
     dae:	bf ef       	ldi	r27, 0xFF	; 255
     db0:	27 ea       	ldi	r18, 0xA7	; 167
     db2:	81 e6       	ldi	r24, 0x61	; 97
     db4:	b1 50       	subi	r27, 0x01	; 1
     db6:	20 40       	sbci	r18, 0x00	; 0
     db8:	80 40       	sbci	r24, 0x00	; 0
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <systems_init+0x132>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <systems_init+0x13c>
     dbe:	00 00       	nop
     dc0:	4a d5       	rcall	.+2708   	; 0x1856 <i2c_lcd_clear>
     dc2:	4a d4       	rcall	.+2196   	; 0x1658 <i2c_lcd_noBacklight>
     dc4:	64 96       	adiw	r28, 0x14	; 20
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	08 95       	ret

00000dda <flag_switch>:
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	91 05       	cpc	r25, r1
     dde:	31 f0       	breq	.+12     	; 0xdec <flag_switch+0x12>
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	91 05       	cpc	r25, r1
     de4:	29 f1       	breq	.+74     	; 0xe30 <flag_switch+0x56>
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	89 f5       	brne	.+98     	; 0xe4c <flag_switch+0x72>
     dea:	13 c0       	rjmp	.+38     	; 0xe12 <flag_switch+0x38>
     dec:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <start_after_exit_user_timer_flag+0x1>
     df0:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <start_after_exit_user_timer_flag>
     df4:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <start_after_no_registered_timer_flag+0x1>
     df8:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <start_after_no_registered_timer_flag>
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	90 93 ee 04 	sts	0x04EE, r25	; 0x8004ee <start_after_verified_timer_flag+0x1>
     e04:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <start_after_verified_timer_flag>
     e08:	90 93 f0 04 	sts	0x04F0, r25	; 0x8004f0 <logojector_timer_flag+0x1>
     e0c:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <logojector_timer_flag>
     e10:	08 95       	ret
     e12:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <start_after_exit_user_timer_flag+0x1>
     e16:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <start_after_exit_user_timer_flag>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	90 93 ec 04 	sts	0x04EC, r25	; 0x8004ec <start_after_no_registered_timer_flag+0x1>
     e22:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <start_after_no_registered_timer_flag>
     e26:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <start_after_verified_timer_flag+0x1>
     e2a:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <start_after_verified_timer_flag>
     e2e:	08 95       	ret
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	90 93 ea 04 	sts	0x04EA, r25	; 0x8004ea <start_after_exit_user_timer_flag+0x1>
     e38:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <start_after_exit_user_timer_flag>
     e3c:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <start_after_no_registered_timer_flag+0x1>
     e40:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <start_after_no_registered_timer_flag>
     e44:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <start_after_verified_timer_flag+0x1>
     e48:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <start_after_verified_timer_flag>
     e4c:	08 95       	ret

00000e4e <start_timer>:
     e4e:	10 92 ba 06 	sts	0x06BA, r1	; 0x8006ba <TICK>
     e52:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <TICK+0x1>
     e56:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <TICK+0x2>
     e5a:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <TICK+0x3>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	41 f4       	brne	.+16     	; 0xe74 <start_timer+0x26>
     e64:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <TICK+0x8>
     e68:	10 92 c3 06 	sts	0x06C3, r1	; 0x8006c3 <TICK+0x9>
     e6c:	10 92 c4 06 	sts	0x06C4, r1	; 0x8006c4 <TICK+0xa>
     e70:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <TICK+0xb>
     e74:	b2 cf       	rjmp	.-156    	; 0xdda <flag_switch>
     e76:	08 95       	ret

00000e78 <set_step_rot>:
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	91 05       	cpc	r25, r1
     e7c:	a1 f4       	brne	.+40     	; 0xea6 <set_step_rot+0x2e>
     e7e:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <i.2622>
     e82:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <i.2622+0x1>
     e86:	a0 91 d4 04 	lds	r26, 0x04D4	; 0x8004d4 <i.2622+0x2>
     e8a:	b0 91 d5 04 	lds	r27, 0x04D5	; 0x8004d5 <i.2622+0x3>
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	a1 1d       	adc	r26, r1
     e92:	b1 1d       	adc	r27, r1
     e94:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <i.2622>
     e98:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <i.2622+0x1>
     e9c:	a0 93 d4 04 	sts	0x04D4, r26	; 0x8004d4 <i.2622+0x2>
     ea0:	b0 93 d5 04 	sts	0x04D5, r27	; 0x8004d5 <i.2622+0x3>
     ea4:	1a c0       	rjmp	.+52     	; 0xeda <set_step_rot+0x62>
     ea6:	8f 3f       	cpi	r24, 0xFF	; 255
     ea8:	2f ef       	ldi	r18, 0xFF	; 255
     eaa:	92 07       	cpc	r25, r18
     eac:	a1 f4       	brne	.+40     	; 0xed6 <set_step_rot+0x5e>
     eae:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <i.2622>
     eb2:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <i.2622+0x1>
     eb6:	a0 91 d4 04 	lds	r26, 0x04D4	; 0x8004d4 <i.2622+0x2>
     eba:	b0 91 d5 04 	lds	r27, 0x04D5	; 0x8004d5 <i.2622+0x3>
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	a1 09       	sbc	r26, r1
     ec2:	b1 09       	sbc	r27, r1
     ec4:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <i.2622>
     ec8:	90 93 d3 04 	sts	0x04D3, r25	; 0x8004d3 <i.2622+0x1>
     ecc:	a0 93 d4 04 	sts	0x04D4, r26	; 0x8004d4 <i.2622+0x2>
     ed0:	b0 93 d5 04 	sts	0x04D5, r27	; 0x8004d5 <i.2622+0x3>
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <set_step_rot+0x62>
     ed6:	89 2b       	or	r24, r25
     ed8:	91 f0       	breq	.+36     	; 0xefe <set_step_rot+0x86>
     eda:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <i.2622>
     ede:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <i.2622+0x1>
     ee2:	a0 91 d4 04 	lds	r26, 0x04D4	; 0x8004d4 <i.2622+0x2>
     ee6:	b0 91 d5 04 	lds	r27, 0x04D5	; 0x8004d5 <i.2622+0x3>
     eea:	83 70       	andi	r24, 0x03	; 3
     eec:	99 27       	eor	r25, r25
     eee:	aa 27       	eor	r26, r26
     ef0:	bb 27       	eor	r27, r27
     ef2:	fc 01       	movw	r30, r24
     ef4:	ed 5f       	subi	r30, 0xFD	; 253
     ef6:	fe 4f       	sbci	r31, 0xFE	; 254
     ef8:	80 81       	ld	r24, Z
     efa:	8b bb       	out	0x1b, r24	; 27
     efc:	08 95       	ret
     efe:	1b ba       	out	0x1b, r1	; 27
     f00:	08 95       	ret

00000f02 <motor_drive>:
     f02:	80 91 f1 04 	lds	r24, 0x04F1	; 0x8004f1 <set_motor_flag>
     f06:	90 91 f2 04 	lds	r25, 0x04F2	; 0x8004f2 <set_motor_flag+0x1>
     f0a:	89 2b       	or	r24, r25
     f0c:	09 f4       	brne	.+2      	; 0xf10 <motor_drive+0xe>
     f0e:	4f c0       	rjmp	.+158    	; 0xfae <motor_drive+0xac>
     f10:	60 91 ba 06 	lds	r22, 0x06BA	; 0x8006ba <TICK>
     f14:	70 91 bb 06 	lds	r23, 0x06BB	; 0x8006bb <TICK+0x1>
     f18:	80 91 bc 06 	lds	r24, 0x06BC	; 0x8006bc <TICK+0x2>
     f1c:	90 91 bd 06 	lds	r25, 0x06BD	; 0x8006bd <TICK+0x3>
     f20:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f24:	2b e0       	ldi	r18, 0x0B	; 11
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	24 1b       	sub	r18, r20
     f2a:	31 09       	sbc	r19, r1
     f2c:	03 2e       	mov	r0, r19
     f2e:	00 0c       	add	r0, r0
     f30:	44 0b       	sbc	r20, r20
     f32:	55 0b       	sbc	r21, r21
     f34:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodsi4>
     f38:	67 2b       	or	r22, r23
     f3a:	68 2b       	or	r22, r24
     f3c:	69 2b       	or	r22, r25
     f3e:	b9 f5       	brne	.+110    	; 0xfae <motor_drive+0xac>
     f40:	20 91 e5 04 	lds	r18, 0x04E5	; 0x8004e5 <steps>
     f44:	30 91 e6 04 	lds	r19, 0x04E6	; 0x8004e6 <steps+0x1>
     f48:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <set_step>
     f4c:	90 91 e4 04 	lds	r25, 0x04E4	; 0x8004e4 <set_step+0x1>
     f50:	28 17       	cp	r18, r24
     f52:	39 07       	cpc	r19, r25
     f54:	0c f5       	brge	.+66     	; 0xf98 <motor_drive+0x96>
     f56:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <dir>
     f5a:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <dir+0x1>
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	21 f4       	brne	.+8      	; 0xf6a <motor_drive+0x68>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	88 df       	rcall	.-240    	; 0xe78 <set_step_rot>
     f68:	0d c0       	rjmp	.+26     	; 0xf84 <motor_drive+0x82>
     f6a:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <dir>
     f6e:	90 91 e8 04 	lds	r25, 0x04E8	; 0x8004e8 <dir+0x1>
     f72:	01 96       	adiw	r24, 0x01	; 1
     f74:	21 f4       	brne	.+8      	; 0xf7e <motor_drive+0x7c>
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	9f ef       	ldi	r25, 0xFF	; 255
     f7a:	7e df       	rcall	.-260    	; 0xe78 <set_step_rot>
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <motor_drive+0x82>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	7a df       	rcall	.-268    	; 0xe78 <set_step_rot>
     f84:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <steps>
     f88:	90 91 e6 04 	lds	r25, 0x04E6	; 0x8004e6 <steps+0x1>
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	90 93 e6 04 	sts	0x04E6, r25	; 0x8004e6 <steps+0x1>
     f92:	80 93 e5 04 	sts	0x04E5, r24	; 0x8004e5 <steps>
     f96:	08 95       	ret
     f98:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <set_motor_flag+0x1>
     f9c:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <set_motor_flag>
     fa0:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <steps+0x1>
     fa4:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <steps>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	65 cf       	rjmp	.-310    	; 0xe78 <set_step_rot>
     fae:	08 95       	ret

00000fb0 <__vector_15>:
     fb0:	1f 92       	push	r1
     fb2:	0f 92       	push	r0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	0f 92       	push	r0
     fb8:	11 24       	eor	r1, r1
     fba:	0b b6       	in	r0, 0x3b	; 59
     fbc:	0f 92       	push	r0
     fbe:	2f 93       	push	r18
     fc0:	3f 93       	push	r19
     fc2:	4f 93       	push	r20
     fc4:	5f 93       	push	r21
     fc6:	6f 93       	push	r22
     fc8:	7f 93       	push	r23
     fca:	8f 93       	push	r24
     fcc:	9f 93       	push	r25
     fce:	af 93       	push	r26
     fd0:	bf 93       	push	r27
     fd2:	ef 93       	push	r30
     fd4:	ff 93       	push	r31
     fd6:	ea eb       	ldi	r30, 0xBA	; 186
     fd8:	f6 e0       	ldi	r31, 0x06	; 6
     fda:	84 81       	ldd	r24, Z+4	; 0x04
     fdc:	95 81       	ldd	r25, Z+5	; 0x05
     fde:	a6 81       	ldd	r26, Z+6	; 0x06
     fe0:	b7 81       	ldd	r27, Z+7	; 0x07
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	a1 1d       	adc	r26, r1
     fe6:	b1 1d       	adc	r27, r1
     fe8:	84 83       	std	Z+4, r24	; 0x04
     fea:	95 83       	std	Z+5, r25	; 0x05
     fec:	a6 83       	std	Z+6, r26	; 0x06
     fee:	b7 83       	std	Z+7, r27	; 0x07
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	a2 81       	ldd	r26, Z+2	; 0x02
     ff6:	b3 81       	ldd	r27, Z+3	; 0x03
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	a1 1d       	adc	r26, r1
     ffc:	b1 1d       	adc	r27, r1
     ffe:	80 83       	st	Z, r24
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	a2 83       	std	Z+2, r26	; 0x02
    1004:	b3 83       	std	Z+3, r27	; 0x03
    1006:	80 85       	ldd	r24, Z+8	; 0x08
    1008:	91 85       	ldd	r25, Z+9	; 0x09
    100a:	a2 85       	ldd	r26, Z+10	; 0x0a
    100c:	b3 85       	ldd	r27, Z+11	; 0x0b
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	a1 1d       	adc	r26, r1
    1012:	b1 1d       	adc	r27, r1
    1014:	80 87       	std	Z+8, r24	; 0x08
    1016:	91 87       	std	Z+9, r25	; 0x09
    1018:	a2 87       	std	Z+10, r26	; 0x0a
    101a:	b3 87       	std	Z+11, r27	; 0x0b
    101c:	84 85       	ldd	r24, Z+12	; 0x0c
    101e:	95 85       	ldd	r25, Z+13	; 0x0d
    1020:	a6 85       	ldd	r26, Z+14	; 0x0e
    1022:	b7 85       	ldd	r27, Z+15	; 0x0f
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	a1 1d       	adc	r26, r1
    1028:	b1 1d       	adc	r27, r1
    102a:	84 87       	std	Z+12, r24	; 0x0c
    102c:	95 87       	std	Z+13, r25	; 0x0d
    102e:	a6 87       	std	Z+14, r26	; 0x0e
    1030:	b7 87       	std	Z+15, r27	; 0x0f
    1032:	21 db       	rcall	.-2494   	; 0x676 <buzz_play>
    1034:	66 df       	rcall	.-308    	; 0xf02 <motor_drive>
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0b be       	out	0x3b, r0	; 59
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <set_gate_motor_state>:
void set_gate_motor_state(int state){
	//동일 명령이 계속 들어오면 그떄는 무시하도록 
	//다른 명령이 들어올 때만 인정
	static int current_state_flag=GATE_CLOSE; //직전 상태 
	
	if(state==GATE_ENT_OPEN)
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	91 05       	cpc	r25, r1
    1060:	b1 f5       	brne	.+108    	; 0x10ce <set_gate_motor_state+0x72>
	{
		if(current_state_flag==GATE_ENT_OPEN) return; //중복으로 입력했다면 무시
    1062:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <__data_end>
    1066:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <__data_end+0x1>
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	91 05       	cpc	r25, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <set_gate_motor_state+0x16>
    1070:	9e c0       	rjmp	.+316    	; 0x11ae <__stack+0xaf>
		else//이전과 다른 명령이 들어왔다면
		{
			switch(current_state_flag){
    1072:	8f 3f       	cpi	r24, 0xFF	; 255
    1074:	2f ef       	ldi	r18, 0xFF	; 255
    1076:	92 07       	cpc	r25, r18
    1078:	99 f0       	breq	.+38     	; 0x10a0 <set_gate_motor_state+0x44>
    107a:	89 2b       	or	r24, r25
    107c:	09 f5       	brne	.+66     	; 0x10c0 <set_gate_motor_state+0x64>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <dir+0x1>
    1086:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
    108a:	28 ec       	ldi	r18, 0xC8	; 200
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	30 93 e4 04 	sts	0x04E4, r19	; 0x8004e4 <set_step+0x1>
    1092:	20 93 e3 04 	sts	0x04E3, r18	; 0x8004e3 <set_step>
	set_motor_flag=1;
    1096:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <set_motor_flag+0x1>
    109a:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <set_motor_flag>
    109e:	10 c0       	rjmp	.+32     	; 0x10c0 <set_gate_motor_state+0x64>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <dir+0x1>
    10a8:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
    10ac:	20 e9       	ldi	r18, 0x90	; 144
    10ae:	31 e0       	ldi	r19, 0x01	; 1
    10b0:	30 93 e4 04 	sts	0x04E4, r19	; 0x8004e4 <set_step+0x1>
    10b4:	20 93 e3 04 	sts	0x04E3, r18	; 0x8004e3 <set_step>
	set_motor_flag=1;
    10b8:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <set_motor_flag+0x1>
    10bc:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <set_motor_flag>
					set_step_dir_and_angle(STEP_MOTOR_CW,720);
				break;
			}	
		
		}
		current_state_flag=GATE_ENT_OPEN;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <__data_end+0x1>
    10c8:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <__data_end>
    10cc:	08 95       	ret
	}
	
	else if(state==GATE_CLOSE)
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	a9 f5       	brne	.+106    	; 0x113c <__stack+0x3d>
	{
		if(current_state_flag==GATE_CLOSE) return;
    10d2:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <__data_end>
    10d6:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <__data_end+0x1>
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <set_gate_motor_state+0x84>
    10de:	67 c0       	rjmp	.+206    	; 0x11ae <__stack+0xaf>
		else
		{
			switch(current_state_flag){
    10e0:	8f 3f       	cpi	r24, 0xFF	; 255
    10e2:	2f ef       	ldi	r18, 0xFF	; 255
    10e4:	92 07       	cpc	r25, r18
    10e6:	a9 f0       	breq	.+42     	; 0x1112 <__stack+0x13>
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	19 f5       	brne	.+70     	; 0x1132 <__stack+0x33>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	9f ef       	ldi	r25, 0xFF	; 255
    10f0:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <dir+0x1>
    10f4:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
    10f8:	88 ec       	ldi	r24, 0xC8	; 200
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <set_step+0x1>
    1100:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <set_step>
	set_motor_flag=1;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <set_motor_flag+0x1>
    110c:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <set_motor_flag>
    1110:	10 c0       	rjmp	.+32     	; 0x1132 <__stack+0x33>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <dir+0x1>
    111a:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
    111e:	28 ec       	ldi	r18, 0xC8	; 200
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	30 93 e4 04 	sts	0x04E4, r19	; 0x8004e4 <set_step+0x1>
    1126:	20 93 e3 04 	sts	0x04E3, r18	; 0x8004e3 <set_step>
	set_motor_flag=1;
    112a:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <set_motor_flag+0x1>
    112e:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <set_motor_flag>
				case GATE_EXT_OPEN://출구오픈상태에서 닫힘명령
					set_step_dir_and_angle(STEP_MOTOR_CW,360);
				break;
			}
		}
		current_state_flag=GATE_CLOSE;
    1132:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <__data_end+0x1>
    1136:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <__data_end>
    113a:	08 95       	ret
	}
	else if(state==GATE_EXT_OPEN)
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	b9 f5       	brne	.+110    	; 0x11ae <__stack+0xaf>
	{
		if(current_state_flag==GATE_EXT_OPEN) return;
    1140:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <__data_end>
    1144:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <__data_end+0x1>
    1148:	8f 3f       	cpi	r24, 0xFF	; 255
    114a:	2f ef       	ldi	r18, 0xFF	; 255
    114c:	92 07       	cpc	r25, r18
    114e:	79 f1       	breq	.+94     	; 0x11ae <__stack+0xaf>
		else
		{
			switch(current_state_flag){
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	a9 f0       	breq	.+42     	; 0x117e <__stack+0x7f>
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	29 f5       	brne	.+74     	; 0x11a2 <__stack+0xa3>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	9f ef       	ldi	r25, 0xFF	; 255
    115c:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <dir+0x1>
    1160:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
    1164:	80 e9       	ldi	r24, 0x90	; 144
    1166:	91 e0       	ldi	r25, 0x01	; 1
    1168:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <set_step+0x1>
    116c:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <set_step>
	set_motor_flag=1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <set_motor_flag+0x1>
    1178:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <set_motor_flag>
    117c:	12 c0       	rjmp	.+36     	; 0x11a2 <__stack+0xa3>
	}
}

void set_step_dir_and_angle(int direction,int angle){
	//
	dir=direction;
    117e:	8f ef       	ldi	r24, 0xFF	; 255
    1180:	9f ef       	ldi	r25, 0xFF	; 255
    1182:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <dir+0x1>
    1186:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <dir>
	//angle   1.8도 == 1 <==> 360도 == 200
	set_step=(int)(angle*0.556);
    118a:	88 ec       	ldi	r24, 0xC8	; 200
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	90 93 e4 04 	sts	0x04E4, r25	; 0x8004e4 <set_step+0x1>
    1192:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <set_step>
	set_motor_flag=1;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <set_motor_flag+0x1>
    119e:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <set_motor_flag>
				case GATE_CLOSE: //닫힌 상태에서  출구오픈명령
				set_step_dir_and_angle(STEP_MOTOR_CCW,360);
				break;
			}
		}
		current_state_flag=GATE_EXT_OPEN;
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	9f ef       	ldi	r25, 0xFF	; 255
    11a6:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <__data_end+0x1>
    11aa:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <__data_end>
    11ae:	08 95       	ret

000011b0 <RC522_data_state_check_and_actuate>:
		}
	}
}

void RC522_data_state_check_and_actuate(char *tggl)
{
    11b0:	af 92       	push	r10
    11b2:	bf 92       	push	r11
    11b4:	cf 92       	push	r12
    11b6:	df 92       	push	r13
    11b8:	ef 92       	push	r14
    11ba:	ff 92       	push	r15
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	6c 97       	sbiw	r28, 0x1c	; 28
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	9c 01       	movw	r18, r24
	if(received_state==RECEIVE_NONE); //do nothing
	else if(received_state==RECEIVE_SUCCESS)
    11d6:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <received_state>
    11da:	91 30       	cpi	r25, 0x01	; 1
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <RC522_data_state_check_and_actuate+0x30>
    11de:	9f c1       	rjmp	.+830    	; 0x151e <RC522_data_state_check_and_actuate+0x36e>
    11e0:	f9 01       	movw	r30, r18
	{//Received data service routine.
		//send to esp8266 and receive result data.
		
		static int user_count=0;//입구,출구 둘다 사용해야 하는 변수이므로 일단 여기다가 선언함.
		if((*tggl)==ENTRANCE_GATE){
    11e2:	80 81       	ld	r24, Z
    11e4:	81 11       	cpse	r24, r1
    11e6:	48 c1       	rjmp	.+656    	; 0x1478 <RC522_data_state_check_and_actuate+0x2c8>
			//esp8266에 uid와 입구게이트 정보 전송 함수
			//while(전송 완료될 때 까지 대기)???
			
			
			/*이부분은 esp8266 구현한 뒤에 넣어야 된다 */
			uart1_tx_string("AT+CIPSEND=11\r\n"); //4byte길이 데이터 전송 예정
    11e8:	83 e6       	ldi	r24, 0x63	; 99
    11ea:	93 e0       	ldi	r25, 0x03	; 3
    11ec:	ea d6       	rcall	.+3540   	; 0x1fc2 <uart1_tx_string>
			// '>' 문자가 확인될 때까지 대기
			while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
    11ee:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <esp8266_send_ready_flag>
    11f2:	88 23       	and	r24, r24
    11f4:	e1 f3       	breq	.-8      	; 0x11ee <RC522_data_state_check_and_actuate+0x3e>
			esp8266_send_ready_flag=0;
    11f6:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <esp8266_send_ready_flag>
			
			//esp8266으로 uid데이터 전송
			
			//미리 받을 사전 준비 시작.
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
    11fa:	82 e3       	ldi	r24, 0x32	; 50
    11fc:	ec e7       	ldi	r30, 0x7C	; 124
    11fe:	f5 e0       	ldi	r31, 0x05	; 5
    1200:	df 01       	movw	r26, r30
    1202:	1d 92       	st	X+, r1
    1204:	8a 95       	dec	r24
    1206:	e9 f7       	brne	.-6      	; 0x1202 <RC522_data_state_check_and_actuate+0x52>
    1208:	06 e9       	ldi	r16, 0x96	; 150
    120a:	16 e0       	ldi	r17, 0x06	; 6
    120c:	0f 2e       	mov	r0, r31
    120e:	fa e9       	ldi	r31, 0x9A	; 154
    1210:	ef 2e       	mov	r14, r31
    1212:	f6 e0       	ldi	r31, 0x06	; 6
    1214:	ff 2e       	mov	r15, r31
    1216:	f0 2d       	mov	r31, r0
			
			//uid 데이터 전송
			for(int i=0; i<4; i++)
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
    1218:	f8 01       	movw	r30, r16
    121a:	81 91       	ld	r24, Z+
    121c:	8f 01       	movw	r16, r30
    121e:	0e d7       	rcall	.+3612   	; 0x203c <HexToString>
    1220:	d0 d6       	rcall	.+3488   	; 0x1fc2 <uart1_tx_string>
				uart1_tx_char(' ');
    1222:	80 e2       	ldi	r24, 0x20	; 32
    1224:	c6 d6       	rcall	.+3468   	; 0x1fb2 <uart1_tx_char>
    1226:	0e 15       	cp	r16, r14
			
			//미리 받을 사전 준비 시작.
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
			
			//uid 데이터 전송
			for(int i=0; i<4; i++)
    1228:	1f 05       	cpc	r17, r15
    122a:	b1 f7       	brne	.-20     	; 0x1218 <RC522_data_state_check_and_actuate+0x68>
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
				uart1_tx_char(' ');
			}
			uart1_tx_string("\r\n");
    122c:	8f ed       	ldi	r24, 0xDF	; 223
    122e:	93 e0       	ldi	r25, 0x03	; 3
    1230:	c8 d6       	rcall	.+3472   	; 0x1fc2 <uart1_tx_string>
    1232:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <esp8266_receiving_flag>

			/*이 부분은 esp8266 구현한 뒤에 넣어야 된다.*/
			//전송 후, 서버에서 결과물을 다시 전송해주기까지 대기
			while(!esp8266_receiving_flag); //ISR내에서 버퍼에 모두 담을때 까지 대기 esp8266_received_data[] 에 저장
    1236:	88 23       	and	r24, r24
    1238:	e1 f3       	breq	.-8      	; 0x1232 <RC522_data_state_check_and_actuate+0x82>
    123a:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <esp8266_receiving_flag>
			esp8266_receiving_flag=0;
    123e:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <esp8266_received_data>
			//esp8266_receive_complete_flag=0;
			if(esp8266_received_data[0]=='O'){
    1242:	8f 34       	cpi	r24, 0x4F	; 79
    1244:	09 f0       	breq	.+2      	; 0x1248 <RC522_data_state_check_and_actuate+0x98>
    1246:	cd c0       	rjmp	.+410    	; 0x13e2 <RC522_data_state_check_and_actuate+0x232>
    1248:	80 e2       	ldi	r24, 0x20	; 32
				//DB 테이블에 존재하는 uid일 경우 해당 구문을 들어옴
				
				//uint8_t esp8266_received_data_buffer[50];
				//strcpy((char*)esp8266_received_data_buffer,(char*)esp8266_received_data);
				//strncpy((char*)esp8266_received_data_buffer,"HI",2);
				strncpy((char*)esp8266_received_data,"  ",2);
    124a:	90 e2       	ldi	r25, 0x20	; 32
    124c:	90 93 7d 05 	sts	0x057D, r25	; 0x80057d <esp8266_received_data+0x1>
    1250:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <esp8266_received_data>
    1254:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <rfid_user_flag+0x1>
				 
				
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
    1258:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <rfid_user_flag>
    125c:	0b ef       	ldi	r16, 0xFB	; 251
    125e:	14 e0       	ldi	r17, 0x04	; 4
    1260:	e1 2c       	mov	r14, r1
				for(int i=0; i<MAX_USER_COUNT;i++)
    1262:	f1 2c       	mov	r15, r1
    1264:	cc 24       	eor	r12, r12
					// 다시 카드 인식시키지 않도록 구현
					
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
						rfid_user_flag=1;
    1266:	c3 94       	inc	r12
    1268:	d1 2c       	mov	r13, r1
    126a:	6c e3       	ldi	r22, 0x3C	; 60
				{
					
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
    126c:	73 e0       	ldi	r23, 0x03	; 3
    126e:	c8 01       	movw	r24, r16
    1270:	0e 94 3e 11 	call	0x227c	; 0x227c <strcmp>
    1274:	89 2b       	or	r24, r25
    1276:	49 f4       	brne	.+18     	; 0x128a <RC522_data_state_check_and_actuate+0xda>
    1278:	f0 92 fa 04 	sts	0x04FA, r15	; 0x8004fa <rfid_user_count_pointer+0x1>
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
    127c:	e0 92 f9 04 	sts	0x04F9, r14	; 0x8004f9 <rfid_user_count_pointer>
    1280:	d0 92 f8 04 	sts	0x04F8, r13	; 0x8004f8 <rfid_user_flag+0x1>
						rfid_user_flag=1;
    1284:	c0 92 f7 04 	sts	0x04F7, r12	; 0x8004f7 <rfid_user_flag>
    1288:	0b c0       	rjmp	.+22     	; 0x12a0 <RC522_data_state_check_and_actuate+0xf0>
						//i=MAX_USER_COUNT;//루프를 나오기 위함
					}
					else if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch0)==0)
    128a:	66 e9       	ldi	r22, 0x96	; 150
    128c:	76 e0       	ldi	r23, 0x06	; 6
    128e:	c8 01       	movw	r24, r16
    1290:	f5 d7       	rcall	.+4074   	; 0x227c <strcmp>
    1292:	89 2b       	or	r24, r25
    1294:	29 f4       	brne	.+10     	; 0x12a0 <RC522_data_state_check_and_actuate+0xf0>
    1296:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <rfid_user_flag+0x1>
					{
						//만일 버퍼 안에 기존 유저가 들어있는 것이 확인됐을 때 
						i=MAX_USER_COUNT; //그 이후는 의미 없기 때문에 그냥 빠져나옴
						rfid_user_flag=0;
    129a:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <rfid_user_flag>
    129e:	87 c0       	rjmp	.+270    	; 0x13ae <RC522_data_state_check_and_actuate+0x1fe>
    12a0:	ff ef       	ldi	r31, 0xFF	; 255
				strncpy((char*)esp8266_received_data,"  ",2);
				 
				
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
				for(int i=0; i<MAX_USER_COUNT;i++)
    12a2:	ef 1a       	sub	r14, r31
    12a4:	ff 0a       	sbc	r15, r31
    12a6:	0b 5f       	subi	r16, 0xFB	; 251
    12a8:	1f 4f       	sbci	r17, 0xFF	; 255
    12aa:	85 e0       	ldi	r24, 0x05	; 5
    12ac:	e8 16       	cp	r14, r24
    12ae:	f1 04       	cpc	r15, r1
    12b0:	e1 f6       	brne	.-72     	; 0x126a <RC522_data_state_check_and_actuate+0xba>
    12b2:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <rfid_user_flag>
					//else rfid_user_flag=0;//모두 꽉 차 있음.
					
				}
				
				
				if(rfid_user_flag){//DB에 uid가 존재할뿐더러, 최초 입장시에만 해당 구문을 들어감. 이후에는 인식안됨.
    12b6:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <rfid_user_flag+0x1>
    12ba:	89 2b       	or	r24, r25
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <RC522_data_state_check_and_actuate+0x110>
    12be:	77 c0       	rjmp	.+238    	; 0x13ae <RC522_data_state_check_and_actuate+0x1fe>
    12c0:	80 91 f9 04 	lds	r24, 0x04F9	; 0x8004f9 <rfid_user_count_pointer>
					strcpy((char*)rfid_user_uid_buffer[rfid_user_count_pointer],(char*)rfid_uid_ch0);
    12c4:	90 91 fa 04 	lds	r25, 0x04FA	; 0x8004fa <rfid_user_count_pointer+0x1>
    12c8:	9c 01       	movw	r18, r24
    12ca:	22 0f       	add	r18, r18
    12cc:	33 1f       	adc	r19, r19
    12ce:	22 0f       	add	r18, r18
    12d0:	33 1f       	adc	r19, r19
    12d2:	82 0f       	add	r24, r18
    12d4:	93 1f       	adc	r25, r19
    12d6:	66 e9       	ldi	r22, 0x96	; 150
    12d8:	76 e0       	ldi	r23, 0x06	; 6
    12da:	85 50       	subi	r24, 0x05	; 5
    12dc:	9b 4f       	sbci	r25, 0xFB	; 251
    12de:	d7 d7       	rcall	.+4014   	; 0x228e <strcpy>
    12e0:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <user_count.2477>
					
					//사용자 인식이 정상적으로 되면 1회에 한해서 증가시킴.
					if(user_count<MAX_USER_COUNT)user_count++; //단, 주차장 최대 수용 수 보다는 작아야 함.
    12e4:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <user_count.2477+0x1>
    12e8:	85 30       	cpi	r24, 0x05	; 5
    12ea:	91 05       	cpc	r25, r1
    12ec:	2c f4       	brge	.+10     	; 0x12f8 <RC522_data_state_check_and_actuate+0x148>
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <user_count.2477+0x1>
    12f4:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <user_count.2477>
							
					char MAX_USER_COUNT_STR[4];
					strcpy(MAX_USER_COUNT_STR,IntToString((int)MAX_USER_COUNT));
    12f8:	85 e0       	ldi	r24, 0x05	; 5
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	70 d6       	rcall	.+3296   	; 0x1fde <IntToString>
    12fe:	bc 01       	movw	r22, r24
    1300:	ce 01       	movw	r24, r28
    1302:	49 96       	adiw	r24, 0x19	; 25
    1304:	c4 d7       	rcall	.+3976   	; 0x228e <strcpy>
    1306:	20 91 d6 04 	lds	r18, 0x04D6	; 0x8004d6 <user_count.2477>
					
					char USER_COUNT_STR[4];
					//char dummy_value=1;
					strcpy(USER_COUNT_STR,IntToString((int)MAX_USER_COUNT-user_count));
    130a:	30 91 d7 04 	lds	r19, 0x04D7	; 0x8004d7 <user_count.2477+0x1>
    130e:	85 e0       	ldi	r24, 0x05	; 5
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	82 1b       	sub	r24, r18
    1314:	93 0b       	sbc	r25, r19
    1316:	63 d6       	rcall	.+3270   	; 0x1fde <IntToString>
    1318:	bc 01       	movw	r22, r24
    131a:	ce 01       	movw	r24, r28
    131c:	45 96       	adiw	r24, 0x15	; 21
    131e:	b7 d7       	rcall	.+3950   	; 0x228e <strcpy>
    1320:	8e e0       	ldi	r24, 0x0E	; 14
    1322:	e3 e3       	ldi	r30, 0x33	; 51
					
					char empty_space_str[20]="Empty Space=[";
    1324:	f1 e0       	ldi	r31, 0x01	; 1
    1326:	8e 01       	movw	r16, r28
    1328:	0f 5f       	subi	r16, 0xFF	; 255
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	d8 01       	movw	r26, r16
    132e:	01 90       	ld	r0, Z+
    1330:	0d 92       	st	X+, r0
    1332:	8a 95       	dec	r24
    1334:	e1 f7       	brne	.-8      	; 0x132e <RC522_data_state_check_and_actuate+0x17e>
    1336:	fe 01       	movw	r30, r28
    1338:	3f 96       	adiw	r30, 0x0f	; 15
    133a:	86 e0       	ldi	r24, 0x06	; 6
    133c:	df 01       	movw	r26, r30
    133e:	1d 92       	st	X+, r1
    1340:	8a 95       	dec	r24
    1342:	e9 f7       	brne	.-6      	; 0x133e <RC522_data_state_check_and_actuate+0x18e>
    1344:	be 01       	movw	r22, r28
					strcat((char*)empty_space_str,USER_COUNT_STR);
    1346:	6b 5e       	subi	r22, 0xEB	; 235
    1348:	7f 4f       	sbci	r23, 0xFF	; 255
    134a:	c8 01       	movw	r24, r16
    134c:	8c d7       	rcall	.+3864   	; 0x2266 <strcat>
    134e:	f8 01       	movw	r30, r16
    1350:	01 90       	ld	r0, Z+
					strcat((char*)empty_space_str,"/");
    1352:	00 20       	and	r0, r0
    1354:	e9 f7       	brne	.-6      	; 0x1350 <RC522_data_state_check_and_actuate+0x1a0>
    1356:	31 97       	sbiw	r30, 0x01	; 1
    1358:	8f e2       	ldi	r24, 0x2F	; 47
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	91 83       	std	Z+1, r25	; 0x01
    135e:	80 83       	st	Z, r24
    1360:	be 01       	movw	r22, r28
					strcat((char*)empty_space_str,MAX_USER_COUNT_STR);
    1362:	67 5e       	subi	r22, 0xE7	; 231
    1364:	7f 4f       	sbci	r23, 0xFF	; 255
    1366:	c8 01       	movw	r24, r16
    1368:	7e d7       	rcall	.+3836   	; 0x2266 <strcat>
    136a:	f8 01       	movw	r30, r16
    136c:	01 90       	ld	r0, Z+
					strcat((char*)empty_space_str,"]");
    136e:	00 20       	and	r0, r0
    1370:	e9 f7       	brne	.-6      	; 0x136c <RC522_data_state_check_and_actuate+0x1bc>
    1372:	31 97       	sbiw	r30, 0x01	; 1
    1374:	8d e5       	ldi	r24, 0x5D	; 93
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	80 83       	st	Z, r24
					
					
					//start_timer(); //ticktim을 0으로 클리어시킴.
					//LCD ON
					i2c_lcd_clear();
    137c:	6c d2       	rcall	.+1240   	; 0x1856 <i2c_lcd_clear>
    137e:	43 e7       	ldi	r20, 0x73	; 115
					i2c_lcd_string(0,0,"Welcome,");
    1380:	53 e0       	ldi	r21, 0x03	; 3
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	58 d2       	rcall	.+1200   	; 0x1838 <i2c_lcd_string>
    1388:	4c e7       	ldi	r20, 0x7C	; 124
					i2c_lcd_string(1,0,(char*)esp8266_received_data);
    138a:	55 e0       	ldi	r21, 0x05	; 5
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	53 d2       	rcall	.+1190   	; 0x1838 <i2c_lcd_string>
					i2c_lcd_string(2,0,(char*)empty_space_str);
    1392:	a8 01       	movw	r20, r16
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	82 e0       	ldi	r24, 0x02	; 2
					setSoundClip(BUZZ_SUCCESS);
    1398:	4f d2       	rcall	.+1182   	; 0x1838 <i2c_lcd_string>
    139a:	82 e0       	ldi	r24, 0x02	; 2
    139c:	1f d9       	rcall	.-3522   	; 0x5dc <setSoundClip>
					start_timer(AFTER_VERIFIED_EVENT); //ticktim을 0으로 클리어시킴.
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	55 dd       	rcall	.-1366   	; 0xe4e <start_timer>
					//set_step_dir_and_angle(STEP_MOTOR_CW,720);
					set_gate_motor_state(GATE_ENT_OPEN);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	59 de       	rcall	.-846    	; 0x105c <set_gate_motor_state>
					logojector_ON();
    13aa:	67 dc       	rcall	.-1842   	; 0xc7a <logojector_ON>
    13ac:	2f c0       	rjmp	.+94     	; 0x140c <RC522_data_state_check_and_actuate+0x25c>
    13ae:	53 d2       	rcall	.+1190   	; 0x1856 <i2c_lcd_clear>
				}
				else {//한 번 초과로 인식시켰을 때 지나는 구문
					i2c_lcd_clear();  
    13b0:	43 e7       	ldi	r20, 0x73	; 115
					i2c_lcd_string(0,0,"Welcome,");
    13b2:	53 e0       	ldi	r21, 0x03	; 3
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	3f d2       	rcall	.+1150   	; 0x1838 <i2c_lcd_string>
					i2c_lcd_string(1,2,(char*)esp8266_received_data);
    13ba:	4c e7       	ldi	r20, 0x7C	; 124
    13bc:	55 e0       	ldi	r21, 0x05	; 5
    13be:	62 e0       	ldi	r22, 0x02	; 2
					i2c_lcd_string(2,0,"Already Recognized");
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	3a d2       	rcall	.+1140   	; 0x1838 <i2c_lcd_string>
    13c4:	4c e7       	ldi	r20, 0x7C	; 124
    13c6:	53 e0       	ldi	r21, 0x03	; 3
    13c8:	60 e0       	ldi	r22, 0x00	; 0
					setSoundClip(BUZZ_SUCCESS);
    13ca:	82 e0       	ldi	r24, 0x02	; 2
    13cc:	35 d2       	rcall	.+1130   	; 0x1838 <i2c_lcd_string>
					start_timer(AFTER_VERIFIED_EVENT); //ticktim을 0으로 클리어시킴.
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	05 d9       	rcall	.-3574   	; 0x5dc <setSoundClip>
    13d2:	81 e0       	ldi	r24, 0x01	; 1
					//set_step_dir_and_angle(STEP_MOTOR_CW,720);
					set_gate_motor_state(GATE_ENT_OPEN);
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	3b dd       	rcall	.-1418   	; 0xe4e <start_timer>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
					logojector_ON();
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	3f de       	rcall	.-898    	; 0x105c <set_gate_motor_state>
					
				}
			}//if(esp8266_received_data[0]=='O') end
			else if(esp8266_received_data[0]!='O') 
			{
				i2c_lcd_clear();
    13de:	4d dc       	rcall	.-1894   	; 0xc7a <logojector_ON>
    13e0:	15 c0       	rjmp	.+42     	; 0x140c <RC522_data_state_check_and_actuate+0x25c>
				i2c_lcd_string(0,0,"Sorry,");
    13e2:	39 d2       	rcall	.+1138   	; 0x1856 <i2c_lcd_clear>
    13e4:	4f e8       	ldi	r20, 0x8F	; 143
    13e6:	53 e0       	ldi	r21, 0x03	; 3
    13e8:	60 e0       	ldi	r22, 0x00	; 0
				i2c_lcd_string(1,2,"This card is");
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	25 d2       	rcall	.+1098   	; 0x1838 <i2c_lcd_string>
    13ee:	46 e9       	ldi	r20, 0x96	; 150
    13f0:	53 e0       	ldi	r21, 0x03	; 3
    13f2:	62 e0       	ldi	r22, 0x02	; 2
    13f4:	81 e0       	ldi	r24, 0x01	; 1
				i2c_lcd_string(2,2,"not registered.");
    13f6:	20 d2       	rcall	.+1088   	; 0x1838 <i2c_lcd_string>
    13f8:	43 ea       	ldi	r20, 0xA3	; 163
    13fa:	53 e0       	ldi	r21, 0x03	; 3
    13fc:	62 e0       	ldi	r22, 0x02	; 2
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	1b d2       	rcall	.+1078   	; 0x1838 <i2c_lcd_string>
				start_timer(AFTER_NON_REGISTERED_EVENT);
    1402:	8f ef       	ldi	r24, 0xFF	; 255
    1404:	9f ef       	ldi	r25, 0xFF	; 255
    1406:	23 dd       	rcall	.-1466   	; 0xe4e <start_timer>
				setSoundClip(BUZZ_NOT_REGISTERED);
    1408:	83 e0       	ldi	r24, 0x03	; 3
    140a:	e8 d8       	rcall	.-3632   	; 0x5dc <setSoundClip>
			}
			//_delay_ms(20);
			//dummy test code (서버로부터 결과 값 수신 결과 확인)
			
			#if DUMMY_TEST_SERIAL
				uart0_tx_char('\n');
    140c:	8a e0       	ldi	r24, 0x0A	; 10
    140e:	bf d5       	rcall	.+2942   	; 0x1f8e <uart0_tx_char>
    1410:	83 eb       	ldi	r24, 0xB3	; 179
				uart0_tx_string("From server : ");
    1412:	93 e0       	ldi	r25, 0x03	; 3
    1414:	c0 d5       	rcall	.+2944   	; 0x1f96 <uart0_tx_string>
    1416:	8c e7       	ldi	r24, 0x7C	; 124
				uart0_tx_string((char*)esp8266_received_data);
    1418:	95 e0       	ldi	r25, 0x05	; 5
    141a:	bd d5       	rcall	.+2938   	; 0x1f96 <uart0_tx_string>
    141c:	8a e0       	ldi	r24, 0x0A	; 10
				uart0_tx_char('\n');
    141e:	b7 d5       	rcall	.+2926   	; 0x1f8e <uart0_tx_char>
    1420:	0f 2e       	mov	r0, r31
    1422:	fb ef       	ldi	r31, 0xFB	; 251
    1424:	cf 2e       	mov	r12, r31
    1426:	f4 e0       	ldi	r31, 0x04	; 4
    1428:	df 2e       	mov	r13, r31
    142a:	f0 2d       	mov	r31, r0
    142c:	0f 2e       	mov	r0, r31
    142e:	f4 e1       	ldi	r31, 0x14	; 20
    1430:	af 2e       	mov	r10, r31
    1432:	f5 e0       	ldi	r31, 0x05	; 5
    1434:	bf 2e       	mov	r11, r31
    1436:	f0 2d       	mov	r31, r0
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
    1438:	8b e5       	ldi	r24, 0x5B	; 91
    143a:	a9 d5       	rcall	.+2898   	; 0x1f8e <uart0_tx_char>
    143c:	f6 01       	movw	r30, r12
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    143e:	81 91       	ld	r24, Z+
    1440:	7f 01       	movw	r14, r30
    1442:	fc d5       	rcall	.+3064   	; 0x203c <HexToString>
    1444:	a8 d5       	rcall	.+2896   	; 0x1f96 <uart0_tx_string>
    1446:	00 e0       	ldi	r16, 0x00	; 0
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	80 e2       	ldi	r24, 0x20	; 32
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    144c:	a0 d5       	rcall	.+2880   	; 0x1f8e <uart0_tx_char>
    144e:	0f 5f       	subi	r16, 0xFF	; 255
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
						if(j!=3)uart0_tx_char(' ');
    1450:	1f 4f       	sbci	r17, 0xFF	; 255
    1452:	d7 01       	movw	r26, r14
    1454:	8d 91       	ld	r24, X+
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    1456:	7d 01       	movw	r14, r26
    1458:	f1 d5       	rcall	.+3042   	; 0x203c <HexToString>
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    145a:	9d d5       	rcall	.+2874   	; 0x1f96 <uart0_tx_string>
    145c:	03 30       	cpi	r16, 0x03	; 3
    145e:	11 05       	cpc	r17, r1
    1460:	a1 f7       	brne	.-24     	; 0x144a <RC522_data_state_check_and_actuate+0x29a>
    1462:	8d e5       	ldi	r24, 0x5D	; 93
    1464:	94 d5       	rcall	.+2856   	; 0x1f8e <uart0_tx_char>
						if(j!=3)uart0_tx_char(' ');
    1466:	8a e0       	ldi	r24, 0x0A	; 10
    1468:	92 d5       	rcall	.+2852   	; 0x1f8e <uart0_tx_char>
    146a:	b5 e0       	ldi	r27, 0x05	; 5
						//_delay_ms(10);
					}
				
				
					uart0_tx_char(']');
    146c:	cb 0e       	add	r12, r27
    146e:	d1 1c       	adc	r13, r1
    1470:	ac 14       	cp	r10, r12
					uart0_tx_char('\n');
    1472:	bd 04       	cpc	r11, r13
    1474:	09 f7       	brne	.-62     	; 0x1438 <RC522_data_state_check_and_actuate+0x288>
    1476:	53 c0       	rjmp	.+166    	; 0x151e <RC522_data_state_check_and_actuate+0x36e>
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	09 f0       	breq	.+2      	; 0x147e <RC522_data_state_check_and_actuate+0x2ce>
    147c:	50 c0       	rjmp	.+160    	; 0x151e <RC522_data_state_check_and_actuate+0x36e>
				uart0_tx_string("From server : ");
				uart0_tx_string((char*)esp8266_received_data);
				uart0_tx_char('\n');
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
    147e:	0f 2e       	mov	r0, r31
    1480:	fb ef       	ldi	r31, 0xFB	; 251
    1482:	cf 2e       	mov	r12, r31
    1484:	f4 e0       	ldi	r31, 0x04	; 4
			
			//LCD 뷰어 및 5초 카운트 후 다시 리셋
			
		}//if(toggle==ENTRANCE_GATE) end
		
		else if((*tggl)==EXIT_GATE)
    1486:	df 2e       	mov	r13, r31
    1488:	f0 2d       	mov	r31, r0
    148a:	0f 2e       	mov	r0, r31
    148c:	f4 e1       	ldi	r31, 0x14	; 20
    148e:	af 2e       	mov	r10, r31
    1490:	f5 e0       	ldi	r31, 0x05	; 5
    1492:	bf 2e       	mov	r11, r31
    1494:	f0 2d       	mov	r31, r0
    1496:	86 01       	movw	r16, r12
    1498:	68 ea       	ldi	r22, 0xA8	; 168
    149a:	76 e0       	ldi	r23, 0x06	; 6
    149c:	c8 01       	movw	r24, r16
			//구현안하기로 함
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			for(int i=0; i<MAX_USER_COUNT;i++)
			{
				if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch1)==0){//출구에서 찍은 카드가 이용객 버퍼에 존재한다면
    149e:	ee d6       	rcall	.+3548   	; 0x227c <strcmp>
    14a0:	89 2b       	or	r24, r25
    14a2:	c9 f4       	brne	.+50     	; 0x14d6 <RC522_data_state_check_and_actuate+0x326>
    14a4:	85 e0       	ldi	r24, 0x05	; 5
    14a6:	ec e3       	ldi	r30, 0x3C	; 60
					strcpy((char*)rfid_user_uid_buffer[i],"0000");
    14a8:	f3 e0       	ldi	r31, 0x03	; 3
    14aa:	d8 01       	movw	r26, r16
    14ac:	01 90       	ld	r0, Z+
    14ae:	0d 92       	st	X+, r0
    14b0:	8a 95       	dec	r24
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <RC522_data_state_check_and_actuate+0x2fc>
					//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
					user_count--; //이용자 카운트를 감소시킴.
    14b4:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <user_count.2477>
    14b8:	90 91 d7 04 	lds	r25, 0x04D7	; 0x8004d7 <user_count.2477+0x1>
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	90 93 d7 04 	sts	0x04D7, r25	; 0x8004d7 <user_count.2477+0x1>
					start_timer(AFTER_EXIT_USER_EVENT); //ticktim을 0으로 클리어시킴.
    14c2:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <user_count.2477>
    14c6:	82 e0       	ldi	r24, 0x02	; 2
    14c8:	90 e0       	ldi	r25, 0x00	; 0
					set_gate_motor_state(GATE_EXT_OPEN);
    14ca:	c1 dc       	rcall	.-1662   	; 0xe4e <start_timer>
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	9f ef       	ldi	r25, 0xFF	; 255
    14d0:	c5 dd       	rcall	.-1142   	; 0x105c <set_gate_motor_state>
					setSoundClip(BUZZ_SUCCESS);
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	83 d8       	rcall	.-3834   	; 0x5dc <setSoundClip>
    14d6:	0b 5f       	subi	r16, 0xFB	; 251
    14d8:	1f 4f       	sbci	r17, 0xFF	; 255
    14da:	0a 15       	cp	r16, r10
		{
			//esp8266에 uid와 출구게이트 정보 전송 함수
			//구현안하기로 함
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			for(int i=0; i<MAX_USER_COUNT;i++)
    14dc:	1b 05       	cpc	r17, r11
    14de:	e1 f6       	brne	.-72     	; 0x1498 <RC522_data_state_check_and_actuate+0x2e8>
    14e0:	8b e5       	ldi	r24, 0x5B	; 91
			}
			//dummy test code
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
				
					uart0_tx_char('[');
    14e2:	55 d5       	rcall	.+2730   	; 0x1f8e <uart0_tx_char>
    14e4:	f6 01       	movw	r30, r12
    14e6:	81 91       	ld	r24, Z+
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    14e8:	7f 01       	movw	r14, r30
    14ea:	a8 d5       	rcall	.+2896   	; 0x203c <HexToString>
    14ec:	54 d5       	rcall	.+2728   	; 0x1f96 <uart0_tx_string>
    14ee:	00 e0       	ldi	r16, 0x00	; 0
    14f0:	10 e0       	ldi	r17, 0x00	; 0
    14f2:	80 e2       	ldi	r24, 0x20	; 32
    14f4:	4c d5       	rcall	.+2712   	; 0x1f8e <uart0_tx_char>
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
				
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    14f6:	0f 5f       	subi	r16, 0xFF	; 255
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
						if(j!=3)uart0_tx_char(' ');
    14fa:	d7 01       	movw	r26, r14
    14fc:	8d 91       	ld	r24, X+
    14fe:	7d 01       	movw	r14, r26
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
				
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    1500:	9d d5       	rcall	.+2874   	; 0x203c <HexToString>
    1502:	49 d5       	rcall	.+2706   	; 0x1f96 <uart0_tx_string>
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    1504:	03 30       	cpi	r16, 0x03	; 3
    1506:	11 05       	cpc	r17, r1
    1508:	a1 f7       	brne	.-24     	; 0x14f2 <RC522_data_state_check_and_actuate+0x342>
    150a:	8d e5       	ldi	r24, 0x5D	; 93
    150c:	40 d5       	rcall	.+2688   	; 0x1f8e <uart0_tx_char>
    150e:	8a e0       	ldi	r24, 0x0A	; 10
    1510:	3e d5       	rcall	.+2684   	; 0x1f8e <uart0_tx_char>
						if(j!=3)uart0_tx_char(' ');
    1512:	b5 e0       	ldi	r27, 0x05	; 5
    1514:	cb 0e       	add	r12, r27
    1516:	d1 1c       	adc	r13, r1
						//_delay_ms(10);
					}
					uart0_tx_char(']');
    1518:	ca 14       	cp	r12, r10
    151a:	db 04       	cpc	r13, r11
    151c:	09 f7       	brne	.-62     	; 0x14e0 <RC522_data_state_check_and_actuate+0x330>
					uart0_tx_char('\n');
    151e:	10 92 a6 06 	sts	0x06A6, r1	; 0x8006a6 <received_state>
    1522:	6c 96       	adiw	r28, 0x1c	; 28
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
				}//그곳 버퍼를 비움
				
			}
			//dummy test code
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	df 91       	pop	r29
		//i2c_lcd_string(1,2,esp8266_received_data);
		i2c_lcd_string(2,0,"Plz, Re-tagging. ");
		
	}
	
	received_state=RECEIVE_NONE;
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
}
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	df 90       	pop	r13
    153c:	cf 90       	pop	r12
    153e:	bf 90       	pop	r11
    1540:	af 90       	pop	r10
    1542:	08 95       	ret

00001544 <main>:
    1544:	9e db       	rcall	.-2244   	; 0xc82 <systems_init>
    1546:	e1 e6       	ldi	r30, 0x61	; 97
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	81 60       	ori	r24, 0x01	; 1
    154e:	80 83       	st	Z, r24
    1550:	ca eb       	ldi	r28, 0xBA	; 186
    1552:	d6 e0       	ldi	r29, 0x06	; 6
    1554:	02 e6       	ldi	r16, 0x62	; 98
			
		}
		else if (start_after_exit_user_timer_flag)
		{
			//add some codes
			PORTF^=0x01;
    1556:	10 e0       	ldi	r17, 0x00	; 0
    1558:	ff 24       	eor	r15, r15
    155a:	f3 94       	inc	r15
		//PORTA^=0x01;
		//setSoundClip(BUZZ_ON);
		//to use RFID channels
		static char toggle=0; 
		//every 100ms, return RFID Reader state
		RC522_data_request_per_100ms(&toggle);
    155c:	8e ed       	ldi	r24, 0xDE	; 222
    155e:	94 e0       	ldi	r25, 0x04	; 4
    1560:	14 d8       	rcall	.-4056   	; 0x58a <RC522_data_request_per_100ms>
		RC522_data_state_check_and_actuate(&toggle);
    1562:	8e ed       	ldi	r24, 0xDE	; 222
    1564:	94 e0       	ldi	r25, 0x04	; 4
    1566:	24 de       	rcall	.-952    	; 0x11b0 <RC522_data_state_check_and_actuate>
		
		//입장 시, 확인이 성공된 유저의 경우
		if(logojector_timer_flag)
    1568:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <logojector_timer_flag>
    156c:	90 91 f0 04 	lds	r25, 0x04F0	; 0x8004f0 <logojector_timer_flag+0x1>
    1570:	89 2b       	or	r24, r25
    1572:	71 f0       	breq	.+28     	; 0x1590 <main+0x4c>
		{
				if(TICK.logojector_tick_1ms>30000)
    1574:	88 85       	ldd	r24, Y+8	; 0x08
    1576:	99 85       	ldd	r25, Y+9	; 0x09
    1578:	aa 85       	ldd	r26, Y+10	; 0x0a
    157a:	bb 85       	ldd	r27, Y+11	; 0x0b
    157c:	81 33       	cpi	r24, 0x31	; 49
    157e:	95 47       	sbci	r25, 0x75	; 117
    1580:	a1 05       	cpc	r26, r1
    1582:	b1 05       	cpc	r27, r1
				{
					//로고젝터 오프
					logojector_OFF();
    1584:	28 f0       	brcs	.+10     	; 0x1590 <main+0x4c>
    1586:	7b db       	rcall	.-2314   	; 0xc7e <logojector_OFF>
					logojector_timer_flag=STOP_TIMER;
    1588:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <logojector_timer_flag+0x1>
    158c:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <logojector_timer_flag>
				}
		}
		
		if(start_after_verified_timer_flag)
    1590:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <start_after_verified_timer_flag>
    1594:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <start_after_verified_timer_flag+0x1>
    1598:	89 2b       	or	r24, r25
    159a:	f1 f0       	breq	.+60     	; 0x15d8 <main+0x94>
		{//이미 인식되었던 사람들도 마찬가지 과정을 거침
			
			//현재 여기 문을 안들어감 뭐가 문젠지는 확인이 안됨
			if(TICK.tick_1ms==7000)//5초
    159c:	88 81       	ld	r24, Y
    159e:	99 81       	ldd	r25, Y+1	; 0x01
    15a0:	aa 81       	ldd	r26, Y+2	; 0x02
    15a2:	bb 81       	ldd	r27, Y+3	; 0x03
    15a4:	88 35       	cpi	r24, 0x58	; 88
    15a6:	9b 41       	sbci	r25, 0x1B	; 27
    15a8:	a1 05       	cpc	r26, r1
    15aa:	b1 05       	cpc	r27, r1
			{
				//문을 닫아주는 동시에 백라이트 꺼줌
				
				
				setSoundClip(BUZZ_ON);
    15ac:	31 f4       	brne	.+12     	; 0x15ba <main+0x76>
    15ae:	8f 2d       	mov	r24, r15
				set_gate_motor_state(GATE_CLOSE);
    15b0:	15 d8       	rcall	.-4054   	; 0x5dc <setSoundClip>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	52 dd       	rcall	.-1372   	; 0x105c <set_gate_motor_state>
    15b8:	d1 cf       	rjmp	.-94     	; 0x155c <main+0x18>
				//set_step_dir_and_angle(STEP_MOTOR_CCW,720);
				//TICK.tick_1ms++;
				
			}
			else if(TICK.tick_1ms==10000){//10초
    15ba:	88 81       	ld	r24, Y
    15bc:	99 81       	ldd	r25, Y+1	; 0x01
    15be:	aa 81       	ldd	r26, Y+2	; 0x02
    15c0:	bb 81       	ldd	r27, Y+3	; 0x03
    15c2:	80 31       	cpi	r24, 0x10	; 16
    15c4:	97 42       	sbci	r25, 0x27	; 39
    15c6:	a1 05       	cpc	r26, r1
    15c8:	b1 05       	cpc	r27, r1
				//10초가 지나면 화면 클리어시키고, 백라이트 꺼줌
				i2c_lcd_noBacklight();
    15ca:	41 f6       	brne	.-112    	; 0x155c <main+0x18>
    15cc:	45 d0       	rcall	.+138    	; 0x1658 <i2c_lcd_noBacklight>
				start_after_verified_timer_flag=STOP_TIMER;
    15ce:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <start_after_verified_timer_flag+0x1>
    15d2:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <start_after_verified_timer_flag>
    15d6:	c2 cf       	rjmp	.-124    	; 0x155c <main+0x18>
			}
			
		}
		//입장 시, 미 등록된 유저의 경우
		else if(start_after_no_registered_timer_flag)
    15d8:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <start_after_no_registered_timer_flag>
    15dc:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <start_after_no_registered_timer_flag+0x1>
    15e0:	89 2b       	or	r24, r25
    15e2:	81 f0       	breq	.+32     	; 0x1604 <main+0xc0>
		{
			// add some codes
			if(TICK.tick_1ms==8000){//10초
    15e4:	88 81       	ld	r24, Y
    15e6:	99 81       	ldd	r25, Y+1	; 0x01
    15e8:	aa 81       	ldd	r26, Y+2	; 0x02
    15ea:	bb 81       	ldd	r27, Y+3	; 0x03
    15ec:	80 34       	cpi	r24, 0x40	; 64
    15ee:	9f 41       	sbci	r25, 0x1F	; 31
    15f0:	a1 05       	cpc	r26, r1
    15f2:	b1 05       	cpc	r27, r1
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <main+0xb4>
				//10초가 지나면 화면 클리어시키고, 백라이트 꺼줌
				i2c_lcd_noBacklight();
    15f6:	b2 cf       	rjmp	.-156    	; 0x155c <main+0x18>
    15f8:	2f d0       	rcall	.+94     	; 0x1658 <i2c_lcd_noBacklight>
				start_after_no_registered_timer_flag=STOP_TIMER;
    15fa:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <start_after_no_registered_timer_flag+0x1>
    15fe:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <start_after_no_registered_timer_flag>
    1602:	ac cf       	rjmp	.-168    	; 0x155c <main+0x18>
			}
			
		}
		else if (start_after_exit_user_timer_flag)
    1604:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <start_after_exit_user_timer_flag>
    1608:	90 91 ea 04 	lds	r25, 0x04EA	; 0x8004ea <start_after_exit_user_timer_flag+0x1>
    160c:	89 2b       	or	r24, r25
    160e:	09 f4       	brne	.+2      	; 0x1612 <main+0xce>
    1610:	a5 cf       	rjmp	.-182    	; 0x155c <main+0x18>
		{
			//add some codes
			PORTF^=0x01;
    1612:	f8 01       	movw	r30, r16
    1614:	80 81       	ld	r24, Z
    1616:	8f 25       	eor	r24, r15
    1618:	80 83       	st	Z, r24
			if(TICK.tick_1ms==7000)//5초
    161a:	88 81       	ld	r24, Y
    161c:	99 81       	ldd	r25, Y+1	; 0x01
    161e:	aa 81       	ldd	r26, Y+2	; 0x02
    1620:	bb 81       	ldd	r27, Y+3	; 0x03
    1622:	88 35       	cpi	r24, 0x58	; 88
    1624:	9b 41       	sbci	r25, 0x1B	; 27
    1626:	a1 05       	cpc	r26, r1
    1628:	b1 05       	cpc	r27, r1
			{
				setSoundClip(BUZZ_ON); //전까진 소리 났음
    162a:	39 f4       	brne	.+14     	; 0x163a <main+0xf6>
    162c:	8f 2d       	mov	r24, r15
    162e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <setSoundClip>
				
				//테스트 라인임 없애도 됌 근데 정상적으로 동작하는지 확인하기 위함
				//set_step_dir_and_angle(STEP_MOTOR_CCW,720); //된다
				set_gate_motor_state(GATE_CLOSE);
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	12 dd       	rcall	.-1500   	; 0x105c <set_gate_motor_state>
    1638:	91 cf       	rjmp	.-222    	; 0x155c <main+0x18>
			}
			else if(TICK.tick_1ms==8000){//10초
    163a:	88 81       	ld	r24, Y
    163c:	99 81       	ldd	r25, Y+1	; 0x01
    163e:	aa 81       	ldd	r26, Y+2	; 0x02
    1640:	bb 81       	ldd	r27, Y+3	; 0x03
    1642:	80 34       	cpi	r24, 0x40	; 64
    1644:	9f 41       	sbci	r25, 0x1F	; 31
    1646:	a1 05       	cpc	r26, r1
    1648:	b1 05       	cpc	r27, r1
    164a:	09 f0       	breq	.+2      	; 0x164e <main+0x10a>
    164c:	87 cf       	rjmp	.-242    	; 0x155c <main+0x18>
				//10초가 지나면 화면 클리어시키고, 백라이트 꺼줌
				
				start_after_exit_user_timer_flag=STOP_TIMER;
    164e:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <start_after_exit_user_timer_flag+0x1>
    1652:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <start_after_exit_user_timer_flag>
    1656:	82 cf       	rjmp	.-252    	; 0x155c <main+0x18>

00001658 <i2c_lcd_noBacklight>:
			
			while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
	}
}
void i2c_lcd_command_8(uint8_t command)
{
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	00 d0       	rcall	.+0      	; 0x165e <i2c_lcd_noBacklight+0x6>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <i2c_lcd_noBacklight+0x8>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	84 e0       	ldi	r24, 0x04	; 4
    1666:	89 83       	std	Y+1, r24	; 0x01
    1668:	1a 82       	std	Y+2, r1	; 0x02
    166a:	84 e1       	ldi	r24, 0x14	; 20
    166c:	8b 83       	std	Y+3, r24	; 0x03
    166e:	80 e1       	ldi	r24, 0x10	; 16
    1670:	8c 83       	std	Y+4, r24	; 0x04
    1672:	44 e0       	ldi	r20, 0x04	; 4
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	be 01       	movw	r22, r28
    1678:	6f 5f       	subi	r22, 0xFF	; 255
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    1680:	4a d1       	rcall	.+660    	; 0x1916 <i2c_transmit>
    1682:	81 11       	cpse	r24, r1
    1684:	f6 cf       	rjmp	.-20     	; 0x1672 <i2c_lcd_noBacklight+0x1a>
    1686:	8f e3       	ldi	r24, 0x3F	; 63
    1688:	9c e9       	ldi	r25, 0x9C	; 156
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <i2c_lcd_noBacklight+0x32>
    168e:	00 c0       	rjmp	.+0      	; 0x1690 <i2c_lcd_noBacklight+0x38>
    1690:	00 00       	nop
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <i2c_lcd_command_8>:
	uint8_t c_buf[2];
	
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <i2c_lcd_command_8+0x6>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
	
    16aa:	80 7f       	andi	r24, 0xF0	; 240
    16ac:	98 2f       	mov	r25, r24
    16ae:	9c 60       	ori	r25, 0x0C	; 12
    16b0:	99 83       	std	Y+1, r25	; 0x01
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
    16b2:	88 60       	ori	r24, 0x08	; 8
    16b4:	8a 83       	std	Y+2, r24	; 0x02
}

    16b6:	42 e0       	ldi	r20, 0x02	; 2
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	be 01       	movw	r22, r28
    16bc:	6f 5f       	subi	r22, 0xFF	; 255
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    16c4:	28 d1       	rcall	.+592    	; 0x1916 <i2c_transmit>
    16c6:	81 11       	cpse	r24, r1
    16c8:	f6 cf       	rjmp	.-20     	; 0x16b6 <i2c_lcd_command_8+0x16>
void i2c_lcd_command(uint8_t command)
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	08 95       	ret

000016d4 <i2c_lcd_command>:
{
	uint8_t c_buf[4];
	
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	00 d0       	rcall	.+0      	; 0x16da <i2c_lcd_command+0x6>
    16da:	00 d0       	rcall	.+0      	; 0x16dc <i2c_lcd_command+0x8>
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
	
    16e0:	98 2f       	mov	r25, r24
    16e2:	90 7f       	andi	r25, 0xF0	; 240
    16e4:	29 2f       	mov	r18, r25
    16e6:	2c 60       	ori	r18, 0x0C	; 12
    16e8:	29 83       	std	Y+1, r18	; 0x01
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
    16ea:	98 60       	ori	r25, 0x08	; 8
    16ec:	9a 83       	std	Y+2, r25	; 0x02
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
	
    16ee:	20 e1       	ldi	r18, 0x10	; 16
    16f0:	82 9f       	mul	r24, r18
    16f2:	c0 01       	movw	r24, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	98 2f       	mov	r25, r24
    16f8:	9c 60       	ori	r25, 0x0C	; 12
    16fa:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    16fc:	88 60       	ori	r24, 0x08	; 8
    16fe:	8c 83       	std	Y+4, r24	; 0x04
}

    1700:	44 e0       	ldi	r20, 0x04	; 4
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	be 01       	movw	r22, r28
    1706:	6f 5f       	subi	r22, 0xFF	; 255
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    170e:	03 d1       	rcall	.+518    	; 0x1916 <i2c_transmit>
    1710:	81 11       	cpse	r24, r1
    1712:	f6 cf       	rjmp	.-20     	; 0x1700 <i2c_lcd_command+0x2c>
void i2c_lcd_data(uint8_t data)
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
    1722:	be d0       	rcall	.+380    	; 0x18a0 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1724:	2f ef       	ldi	r18, 0xFF	; 255
    1726:	89 e6       	ldi	r24, 0x69	; 105
    1728:	98 e1       	ldi	r25, 0x18	; 24
    172a:	21 50       	subi	r18, 0x01	; 1
    172c:	80 40       	sbci	r24, 0x00	; 0
    172e:	90 40       	sbci	r25, 0x00	; 0
    1730:	e1 f7       	brne	.-8      	; 0x172a <i2c_lcd_init+0x8>
    1732:	00 c0       	rjmp	.+0      	; 0x1734 <i2c_lcd_init+0x12>
    1734:	00 00       	nop
	_delay_ms(500);

	uart0_tx_string("Before i2c lcd Initialize... \r\n");
    1736:	82 ec       	ldi	r24, 0xC2	; 194
    1738:	93 e0       	ldi	r25, 0x03	; 3
    173a:	2d d4       	rcall	.+2138   	; 0x1f96 <uart0_tx_string>
	i2c_lcd_command_8(0x30); _delay_ms(5);
    173c:	80 e3       	ldi	r24, 0x30	; 48
    173e:	b0 df       	rcall	.-160    	; 0x16a0 <i2c_lcd_command_8>
    1740:	8f e1       	ldi	r24, 0x1F	; 31
    1742:	9e e4       	ldi	r25, 0x4E	; 78
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <i2c_lcd_init+0x22>
    1748:	00 c0       	rjmp	.+0      	; 0x174a <i2c_lcd_init+0x28>
    174a:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    174c:	80 e3       	ldi	r24, 0x30	; 48
    174e:	a8 df       	rcall	.-176    	; 0x16a0 <i2c_lcd_command_8>
    1750:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <i2c_lcd_init+0x32>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <i2c_lcd_init+0x38>
    175a:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    175c:	80 e3       	ldi	r24, 0x30	; 48
    175e:	a0 df       	rcall	.-192    	; 0x16a0 <i2c_lcd_command_8>
    1760:	8f e8       	ldi	r24, 0x8F	; 143
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <i2c_lcd_init+0x42>
    1768:	00 c0       	rjmp	.+0      	; 0x176a <i2c_lcd_init+0x48>
    176a:	00 00       	nop
	i2c_lcd_command_8(0x20); _delay_us(100);
    176c:	80 e2       	ldi	r24, 0x20	; 32
    176e:	98 df       	rcall	.-208    	; 0x16a0 <i2c_lcd_command_8>
    1770:	8f e8       	ldi	r24, 0x8F	; 143
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <i2c_lcd_init+0x52>
    1778:	00 c0       	rjmp	.+0      	; 0x177a <i2c_lcd_init+0x58>
    177a:	00 00       	nop
	
	i2c_lcd_command(0x28); _delay_us(50);// function set(4-bit, 2 line, 5x7 dot)
    177c:	88 e2       	ldi	r24, 0x28	; 40
    177e:	aa df       	rcall	.-172    	; 0x16d4 <i2c_lcd_command>
    1780:	87 ec       	ldi	r24, 0xC7	; 199
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <i2c_lcd_init+0x62>
    1788:	00 c0       	rjmp	.+0      	; 0x178a <i2c_lcd_init+0x68>
    178a:	00 00       	nop
	i2c_lcd_command(0x08); _delay_us(50);// display control(display ON, cursor OFF)
    178c:	88 e0       	ldi	r24, 0x08	; 8
    178e:	a2 df       	rcall	.-188    	; 0x16d4 <i2c_lcd_command>
    1790:	87 ec       	ldi	r24, 0xC7	; 199
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	f1 f7       	brne	.-4      	; 0x1794 <i2c_lcd_init+0x72>
    1798:	00 c0       	rjmp	.+0      	; 0x179a <i2c_lcd_init+0x78>
    179a:	00 00       	nop
	i2c_lcd_command(0x01); _delay_ms(3);// clear display 
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	9a df       	rcall	.-204    	; 0x16d4 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17a0:	8f ed       	ldi	r24, 0xDF	; 223
    17a2:	9e e2       	ldi	r25, 0x2E	; 46
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <i2c_lcd_init+0x82>
    17a8:	00 c0       	rjmp	.+0      	; 0x17aa <i2c_lcd_init+0x88>
    17aa:	00 00       	nop
	i2c_lcd_command(0x06); _delay_us(50); // entry mode set(increment, not shift)
    17ac:	86 e0       	ldi	r24, 0x06	; 6
    17ae:	92 df       	rcall	.-220    	; 0x16d4 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17b0:	87 ec       	ldi	r24, 0xC7	; 199
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <i2c_lcd_init+0x92>
    17b8:	00 c0       	rjmp	.+0      	; 0x17ba <i2c_lcd_init+0x98>
    17ba:	00 00       	nop
	i2c_lcd_command(0x0C); _delay_us(50); // entry mode set(increment, not shift)
    17bc:	8c e0       	ldi	r24, 0x0C	; 12
    17be:	8a df       	rcall	.-236    	; 0x16d4 <i2c_lcd_command>
    17c0:	87 ec       	ldi	r24, 0xC7	; 199
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <i2c_lcd_init+0xa2>
    17c8:	00 c0       	rjmp	.+0      	; 0x17ca <i2c_lcd_init+0xa8>
    17ca:	00 00       	nop
	
	uart0_tx_string("i2c CLCD Connect Ok\r\n");
    17cc:	82 ee       	ldi	r24, 0xE2	; 226
    17ce:	93 e0       	ldi	r25, 0x03	; 3
    17d0:	e2 c3       	rjmp	.+1988   	; 0x1f96 <uart0_tx_string>
    17d2:	08 95       	ret

000017d4 <i2c_lcd_data>:
    17d4:	cf 93       	push	r28
}

void i2c_lcd_data(uint8_t data)
{
	uint8_t d_buf[4];
	
    17d6:	df 93       	push	r29
    17d8:	00 d0       	rcall	.+0      	; 0x17da <i2c_lcd_data+0x6>
    17da:	00 d0       	rcall	.+0      	; 0x17dc <i2c_lcd_data+0x8>
    17dc:	cd b7       	in	r28, 0x3d	; 61
    17de:	de b7       	in	r29, 0x3e	; 62
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
	
    17e0:	98 2f       	mov	r25, r24
    17e2:	90 7f       	andi	r25, 0xF0	; 240
    17e4:	29 2f       	mov	r18, r25
    17e6:	2d 60       	ori	r18, 0x0D	; 13
    17e8:	29 83       	std	Y+1, r18	; 0x01
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
    17ea:	99 60       	ori	r25, 0x09	; 9
    17ec:	9a 83       	std	Y+2, r25	; 0x02
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
	
    17ee:	20 e1       	ldi	r18, 0x10	; 16
    17f0:	82 9f       	mul	r24, r18
    17f2:	c0 01       	movw	r24, r0
    17f4:	11 24       	eor	r1, r1
    17f6:	98 2f       	mov	r25, r24
    17f8:	9d 60       	ori	r25, 0x0D	; 13
    17fa:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
    17fc:	89 60       	ori	r24, 0x09	; 9
    17fe:	8c 83       	std	Y+4, r24	; 0x04
}

    1800:	44 e0       	ldi	r20, 0x04	; 4
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	be 01       	movw	r22, r28
    1806:	6f 5f       	subi	r22, 0xFF	; 255
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    180e:	83 d0       	rcall	.+262    	; 0x1916 <i2c_transmit>
    1810:	81 11       	cpse	r24, r1
    1812:	f6 cf       	rjmp	.-20     	; 0x1800 <i2c_lcd_data+0x2c>
void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <i2c_lcd_goto_XY>:
{
	static int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	
	uint8_t address = (row_offsets[row]) + col;
	uint8_t command = 0x80 | address;
	
    1822:	e8 2f       	mov	r30, r24
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	ee 0f       	add	r30, r30
    1828:	ff 1f       	adc	r31, r31
    182a:	e8 50       	subi	r30, 0x08	; 8
    182c:	fc 4f       	sbci	r31, 0xFC	; 252
	i2c_lcd_command(command);
}

    182e:	80 81       	ld	r24, Z
    1830:	86 0f       	add	r24, r22
    1832:	80 68       	ori	r24, 0x80	; 128
    1834:	4f cf       	rjmp	.-354    	; 0x16d4 <i2c_lcd_command>
    1836:	08 95       	ret

00001838 <i2c_lcd_string>:
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	ea 01       	movw	r28, r20
		i2c_lcd_data(*string++);
    183e:	f1 df       	rcall	.-30     	; 0x1822 <i2c_lcd_goto_XY>
	}
    1840:	88 81       	ld	r24, Y
    1842:	88 23       	and	r24, r24
    1844:	29 f0       	breq	.+10     	; 0x1850 <i2c_lcd_string+0x18>
}
    1846:	21 96       	adiw	r28, 0x01	; 1
    1848:	c5 df       	rcall	.-118    	; 0x17d4 <i2c_lcd_data>
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
		i2c_lcd_data(*string++);
	}
    184a:	89 91       	ld	r24, Y+
    184c:	81 11       	cpse	r24, r1
    184e:	fc cf       	rjmp	.-8      	; 0x1848 <i2c_lcd_string+0x10>
}
void i2c_lcd_clear()
{
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <i2c_lcd_clear>:
		uint8_t c_buf[4];
		
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	00 d0       	rcall	.+0      	; 0x185c <i2c_lcd_clear+0x6>
    185c:	00 d0       	rcall	.+0      	; 0x185e <i2c_lcd_clear+0x8>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
		c_buf[0] = (0x01 &0xF0) | RS0_EN1 | BackLight;
		c_buf[1] = (0x01&0xF0) | RS0_EN0 | BackLight;
		
    1862:	8c e0       	ldi	r24, 0x0C	; 12
    1864:	89 83       	std	Y+1, r24	; 0x01
		c_buf[2] = ((0x01<<4)&0xF0) | RS0_EN1 | BackLight;
    1866:	88 e0       	ldi	r24, 0x08	; 8
    1868:	8a 83       	std	Y+2, r24	; 0x02
		c_buf[3] = ((0x01<<4)&0xF0) | RS0_EN0 | BackLight;
		
    186a:	8c e1       	ldi	r24, 0x1C	; 28
    186c:	8b 83       	std	Y+3, r24	; 0x03
		while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    186e:	88 e1       	ldi	r24, 0x18	; 24
    1870:	8c 83       	std	Y+4, r24	; 0x04
    1872:	44 e0       	ldi	r20, 0x04	; 4
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	be 01       	movw	r22, r28
    1878:	6f 5f       	subi	r22, 0xFF	; 255
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <I2C_addr_PCF8574>
    1880:	4a d0       	rcall	.+148    	; 0x1916 <i2c_transmit>
    1882:	81 11       	cpse	r24, r1
    1884:	f6 cf       	rjmp	.-20     	; 0x1872 <i2c_lcd_clear+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1886:	8f e3       	ldi	r24, 0x3F	; 63
    1888:	9c e9       	ldi	r25, 0x9C	; 156
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <i2c_lcd_clear+0x34>
    188e:	00 c0       	rjmp	.+0      	; 0x1890 <i2c_lcd_clear+0x3a>
    1890:	00 00       	nop
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
    18a0:	88 e4       	ldi	r24, 0x48	; 72
    18a2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    18a6:	08 95       	ret

000018a8 <i2c_start>:
    18a8:	e4 e7       	ldi	r30, 0x74	; 116
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	10 82       	st	Z, r1
    18ae:	94 ea       	ldi	r25, 0xA4	; 164
    18b0:	90 83       	st	Z, r25
    18b2:	90 81       	ld	r25, Z
    18b4:	99 23       	and	r25, r25
    18b6:	ec f7       	brge	.-6      	; 0x18b2 <i2c_start+0xa>
    18b8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    18bc:	98 7f       	andi	r25, 0xF8	; 248
    18be:	98 30       	cpi	r25, 0x08	; 8
    18c0:	a1 f4       	brne	.+40     	; 0x18ea <i2c_start+0x42>
    18c2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    18c6:	84 e8       	ldi	r24, 0x84	; 132
    18c8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    18cc:	e4 e7       	ldi	r30, 0x74	; 116
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	88 23       	and	r24, r24
    18d4:	ec f7       	brge	.-6      	; 0x18d0 <i2c_start+0x28>
    18d6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    18da:	98 7f       	andi	r25, 0xF8	; 248
    18dc:	98 31       	cpi	r25, 0x18	; 24
    18de:	39 f0       	breq	.+14     	; 0x18ee <i2c_start+0x46>
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 34       	cpi	r25, 0x40	; 64
    18e4:	29 f4       	brne	.+10     	; 0x18f0 <i2c_start+0x48>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	08 95       	ret
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	08 95       	ret
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	08 95       	ret

000018f2 <i2c_write>:
    18f2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    18f6:	84 e8       	ldi	r24, 0x84	; 132
    18f8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    18fc:	e4 e7       	ldi	r30, 0x74	; 116
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	88 23       	and	r24, r24
    1904:	ec f7       	brge	.-6      	; 0x1900 <i2c_write+0xe>
    1906:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    190a:	98 7f       	andi	r25, 0xF8	; 248
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	98 32       	cpi	r25, 0x28	; 40
    1910:	09 f4       	brne	.+2      	; 0x1914 <i2c_write+0x22>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	08 95       	ret

00001916 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    1916:	cf 92       	push	r12
    1918:	df 92       	push	r13
    191a:	ff 92       	push	r15
    191c:	0f 93       	push	r16
    191e:	1f 93       	push	r17
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	6b 01       	movw	r12, r22
    1926:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
    1928:	bf df       	rcall	.-130    	; 0x18a8 <i2c_start>
    192a:	f8 2e       	mov	r15, r24
    192c:	81 11       	cpse	r24, r1
    192e:	17 c0       	rjmp	.+46     	; 0x195e <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
    1930:	01 15       	cp	r16, r1
    1932:	11 05       	cpc	r17, r1
    1934:	81 f0       	breq	.+32     	; 0x1956 <i2c_transmit+0x40>
    1936:	e6 01       	movw	r28, r12
    1938:	0c 0d       	add	r16, r12
    193a:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
    193c:	89 91       	ld	r24, Y+
    193e:	d9 df       	rcall	.-78     	; 0x18f2 <i2c_write>
    1940:	81 11       	cpse	r24, r1
    1942:	10 c0       	rjmp	.+32     	; 0x1964 <i2c_transmit+0x4e>
    1944:	8f e9       	ldi	r24, 0x9F	; 159
    1946:	9f e0       	ldi	r25, 0x0F	; 15
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <i2c_transmit+0x32>
    194c:	00 c0       	rjmp	.+0      	; 0x194e <i2c_transmit+0x38>
    194e:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
    1950:	0c 17       	cp	r16, r28
    1952:	1d 07       	cpc	r17, r29
    1954:	99 f7       	brne	.-26     	; 0x193c <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1956:	84 e9       	ldi	r24, 0x94	; 148
    1958:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    195c:	05 c0       	rjmp	.+10     	; 0x1968 <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
    195e:	ff 24       	eor	r15, r15
    1960:	f3 94       	inc	r15
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
    1964:	ff 24       	eor	r15, r15
    1966:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
    1968:	8f 2d       	mov	r24, r15
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	df 90       	pop	r13
    1976:	cf 90       	pop	r12
    1978:	08 95       	ret

0000197a <mfrc522_write>:
void mfrc522_init(unsigned char ch)
{
	unsigned char byte;
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
	
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	16 2f       	mov	r17, r22
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
	SS_PORT=0; //입력핀이 전원에 영향 끼치는 행위를 막기 위함
	//이렇게 케어해두니, 이상 동작하지 않아서 좋음
    1982:	95 b3       	in	r25, 0x15	; 21
    1984:	c1 e0       	ldi	r28, 0x01	; 1
    1986:	d0 e0       	ldi	r29, 0x00	; 0
    1988:	02 c0       	rjmp	.+4      	; 0x198e <mfrc522_write+0x14>
    198a:	cc 0f       	add	r28, r28
    198c:	dd 1f       	adc	r29, r29
    198e:	4a 95       	dec	r20
    1990:	e2 f7       	brpl	.-8      	; 0x198a <mfrc522_write+0x10>
    1992:	2c 2f       	mov	r18, r28
    1994:	20 95       	com	r18
    1996:	92 23       	and	r25, r18
    1998:	95 bb       	out	0x15, r25	; 21
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
    199a:	88 0f       	add	r24, r24
    199c:	8e 77       	andi	r24, 0x7E	; 126
    199e:	a3 d2       	rcall	.+1350   	; 0x1ee6 <spi_master_tx>
	mfrc522_reset(ch);
	
    19a0:	81 2f       	mov	r24, r17
    19a2:	a1 d2       	rcall	.+1346   	; 0x1ee6 <spi_master_tx>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
    19a4:	85 b3       	in	r24, 0x15	; 21
    19a6:	c8 2b       	or	r28, r24
    19a8:	c5 bb       	out	0x15, r28	; 21
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	08 95       	ret

000019b2 <mfrc522_read>:
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
	
	
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
    19b6:	95 b3       	in	r25, 0x15	; 21
    19b8:	c1 e0       	ldi	r28, 0x01	; 1
    19ba:	d0 e0       	ldi	r29, 0x00	; 0
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <mfrc522_read+0x10>
    19be:	cc 0f       	add	r28, r28
    19c0:	dd 1f       	adc	r29, r29
    19c2:	6a 95       	dec	r22
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <mfrc522_read+0xc>
    19c6:	2c 2f       	mov	r18, r28
    19c8:	20 95       	com	r18
    19ca:	92 23       	and	r25, r18
    19cc:	95 bb       	out	0x15, r25	; 21
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
    19ce:	88 0f       	add	r24, r24
    19d0:	8e 77       	andi	r24, 0x7E	; 126
    19d2:	80 68       	ori	r24, 0x80	; 128
    19d4:	88 d2       	rcall	.+1296   	; 0x1ee6 <spi_master_tx>
	}
    19d6:	8b d2       	rcall	.+1302   	; 0x1eee <spi_master_rx>
    19d8:	95 b3       	in	r25, 0x15	; 21
}

    19da:	c9 2b       	or	r28, r25
    19dc:	c5 bb       	out	0x15, r28	; 21
    19de:	df 91       	pop	r29

void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <mfrc522_to_card>:
    19e4:	2f 92       	push	r2
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

    19e6:	3f 92       	push	r3
    19e8:	4f 92       	push	r4
    19ea:	5f 92       	push	r5
    19ec:	6f 92       	push	r6
    19ee:	7f 92       	push	r7
    19f0:	8f 92       	push	r8
    19f2:	9f 92       	push	r9
    19f4:	af 92       	push	r10
    19f6:	bf 92       	push	r11
    19f8:	cf 92       	push	r12
    19fa:	df 92       	push	r13
    19fc:	ef 92       	push	r14
    19fe:	ff 92       	push	r15
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	f8 2e       	mov	r15, r24
    1a0a:	a6 2e       	mov	r10, r22
    1a0c:	b7 2e       	mov	r11, r23
    1a0e:	44 2e       	mov	r4, r20
    1a10:	22 2e       	mov	r2, r18
    1a12:	d3 2e       	mov	r13, r19
void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
		
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
    1a14:	8c e0       	ldi	r24, 0x0C	; 12
    1a16:	f8 16       	cp	r15, r24
    1a18:	59 f0       	breq	.+22     	; 0x1a30 <mfrc522_to_card+0x4c>
    1a1a:	ee e0       	ldi	r30, 0x0E	; 14
    1a1c:	fe 12       	cpse	r15, r30
    1a1e:	11 c0       	rjmp	.+34     	; 0x1a42 <mfrc522_to_card+0x5e>
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
	//RC522와 연결된 SS핀 HIGH출력
    1a20:	68 94       	set
    1a22:	cc 24       	eor	r12, r12
    1a24:	c4 f8       	bld	r12, 4
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
    1a26:	0f 2e       	mov	r0, r31
    1a28:	f2 e1       	ldi	r31, 0x12	; 18
    1a2a:	3f 2e       	mov	r3, r31
    1a2c:	f0 2d       	mov	r31, r0
    1a2e:	0b c0       	rjmp	.+22     	; 0x1a46 <mfrc522_to_card+0x62>
	SS_PORT |= (1<<channel);
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}

    1a30:	0f 2e       	mov	r0, r31
    1a32:	f0 e3       	ldi	r31, 0x30	; 48
    1a34:	cf 2e       	mov	r12, r31
    1a36:	f0 2d       	mov	r31, r0
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
	//spi 통신 종료	 (굳이 없어도 될듯)
			
		
}
    1a38:	0f 2e       	mov	r0, r31
    1a3a:	f7 e7       	ldi	r31, 0x77	; 119
    1a3c:	3f 2e       	mov	r3, r31
    1a3e:	f0 2d       	mov	r31, r0


    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <mfrc522_to_card+0x62>
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}


    1a42:	c1 2c       	mov	r12, r1
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}

    1a44:	31 2c       	mov	r3, r1
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
	value = spi_master_rx(); //send dummy data and receive data.
    1a46:	4e 2d       	mov	r20, r14
    1a48:	63 2d       	mov	r22, r3
    1a4a:	60 68       	ori	r22, 0x80	; 128
    1a4c:	82 e0       	ldi	r24, 0x02	; 2
    1a4e:	95 df       	rcall	.-214    	; 0x197a <mfrc522_write>
	//RC522와 연결된 SS핀 HIGH출력
    1a50:	6e 2d       	mov	r22, r14
    1a52:	84 e0       	ldi	r24, 0x04	; 4
    1a54:	ae df       	rcall	.-164    	; 0x19b2 <mfrc522_read>
	SS_PORT |= (1<<channel);
    1a56:	68 2f       	mov	r22, r24
    1a58:	6f 77       	andi	r22, 0x7F	; 127
    1a5a:	4e 2d       	mov	r20, r14
    1a5c:	84 e0       	ldi	r24, 0x04	; 4
    1a5e:	8d df       	rcall	.-230    	; 0x197a <mfrc522_write>
	
    1a60:	6e 2d       	mov	r22, r14
    1a62:	8a e0       	ldi	r24, 0x0A	; 10
    1a64:	a6 df       	rcall	.-180    	; 0x19b2 <mfrc522_read>
    1a66:	68 2f       	mov	r22, r24
	return value;
    1a68:	60 68       	ori	r22, 0x80	; 128
    1a6a:	4e 2d       	mov	r20, r14
    1a6c:	8a e0       	ldi	r24, 0x0A	; 10
    1a6e:	85 df       	rcall	.-246    	; 0x197a <mfrc522_write>
}

    1a70:	4e 2d       	mov	r20, r14
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	81 df       	rcall	.-254    	; 0x197a <mfrc522_write>
    1a78:	51 2c       	mov	r5, r1
void mfrc522_version_check(unsigned char ch){
	
	unsigned char byte;
    1a7a:	61 2c       	mov	r6, r1
    1a7c:	71 2c       	mov	r7, r1
    1a7e:	41 14       	cp	r4, r1
    1a80:	51 04       	cpc	r5, r1
    1a82:	61 04       	cpc	r6, r1
    1a84:	71 04       	cpc	r7, r1
    1a86:	99 f0       	breq	.+38     	; 0x1aae <mfrc522_to_card+0xca>
    1a88:	ca 2d       	mov	r28, r10
    1a8a:	db 2d       	mov	r29, r11
    1a8c:	81 2c       	mov	r8, r1
    1a8e:	91 2c       	mov	r9, r1
    1a90:	54 01       	movw	r10, r8
	
	byte = mfrc522_read(VersionReg, ch);
    1a92:	69 91       	ld	r22, Y+
    1a94:	4e 2d       	mov	r20, r14
    1a96:	89 e0       	ldi	r24, 0x09	; 9
    1a98:	70 df       	rcall	.-288    	; 0x197a <mfrc522_write>
    1a9a:	ff ef       	ldi	r31, 0xFF	; 255
	return value;
}

void mfrc522_version_check(unsigned char ch){
	
	unsigned char byte;
    1a9c:	8f 1a       	sub	r8, r31
    1a9e:	9f 0a       	sbc	r9, r31
    1aa0:	af 0a       	sbc	r10, r31
    1aa2:	bf 0a       	sbc	r11, r31
    1aa4:	84 14       	cp	r8, r4
    1aa6:	95 04       	cpc	r9, r5
    1aa8:	a6 04       	cpc	r10, r6
    1aaa:	b7 04       	cpc	r11, r7
    1aac:	90 f3       	brcs	.-28     	; 0x1a92 <mfrc522_to_card+0xae>
	
	byte = mfrc522_read(VersionReg, ch);
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
    1aae:	4e 2d       	mov	r20, r14
    1ab0:	6f 2d       	mov	r22, r15
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	62 df       	rcall	.-316    	; 0x197a <mfrc522_write>
	else uart0_tx_string("\n[channel 1");
    1ab6:	8c e0       	ldi	r24, 0x0C	; 12
    1ab8:	f8 12       	cpse	r15, r24
	
	if(byte == 0x92)
    1aba:	08 c0       	rjmp	.+16     	; 0x1acc <mfrc522_to_card+0xe8>
    1abc:	6e 2d       	mov	r22, r14
    1abe:	8d e0       	ldi	r24, 0x0D	; 13
	{
    1ac0:	78 df       	rcall	.-272    	; 0x19b2 <mfrc522_read>
    1ac2:	68 2f       	mov	r22, r24
    1ac4:	60 68       	ori	r22, 0x80	; 128
    1ac6:	4e 2d       	mov	r20, r14
    1ac8:	8d e0       	ldi	r24, 0x0D	; 13
    1aca:	57 df       	rcall	.-338    	; 0x197a <mfrc522_write>
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1acc:	6e 2d       	mov	r22, r14
    1ace:	84 e0       	ldi	r24, 0x04	; 4
    1ad0:	70 df       	rcall	.-288    	; 0x19b2 <mfrc522_read>
    1ad2:	b8 2e       	mov	r11, r24
    1ad4:	c0 e0       	ldi	r28, 0x00	; 0
    1ad6:	d0 e0       	ldi	r29, 0x00	; 0
	}else
	{
		uart0_tx_string(" No reader found]\n");
    1ad8:	ec 2d       	mov	r30, r12
    1ada:	e1 60       	ori	r30, 0x01	; 1
    1adc:	ce 2e       	mov	r12, r30
    1ade:	0a c0       	rjmp	.+20     	; 0x1af4 <mfrc522_to_card+0x110>
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1ae0:	6e 2d       	mov	r22, r14
    1ae2:	84 e0       	ldi	r24, 0x04	; 4
    1ae4:	66 df       	rcall	.-308    	; 0x19b2 <mfrc522_read>
    1ae6:	b8 2e       	mov	r11, r24
    1ae8:	21 96       	adiw	r28, 0x01	; 1
    1aea:	cf 3c       	cpi	r28, 0xCF	; 207
	}else
	{
		uart0_tx_string(" No reader found]\n");
    1aec:	f7 e0       	ldi	r31, 0x07	; 7
    1aee:	df 07       	cpc	r29, r31
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <mfrc522_to_card+0x110>
    1af2:	68 c0       	rjmp	.+208    	; 0x1bc4 <mfrc522_to_card+0x1e0>
    1af4:	8c 2d       	mov	r24, r12
    1af6:	8b 21       	and	r24, r11
    1af8:	99 f3       	breq	.-26     	; 0x1ae0 <mfrc522_to_card+0xfc>
    1afa:	6e c0       	rjmp	.+220    	; 0x1bd8 <mfrc522_to_card+0x1f4>
    1afc:	83 2d       	mov	r24, r3
}

void mfrc522_IRQ_enable(unsigned char ch)
{
	unsigned char byte;
	
    1afe:	81 70       	andi	r24, 0x01	; 1
    1b00:	b8 22       	and	r11, r24
    1b02:	11 f0       	breq	.+4      	; 0x1b08 <mfrc522_to_card+0x124>
	byte=mfrc522_read(ComIEnReg, ch);
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
    1b04:	c2 e0       	ldi	r28, 0x02	; 2
	
}

void mfrc522_IRQ_enable(unsigned char ch)
{
	unsigned char byte;
    1b06:	01 c0       	rjmp	.+2      	; 0x1b0a <mfrc522_to_card+0x126>
	
	byte=mfrc522_read(ComIEnReg, ch);
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
	byte=mfrc522_read(DivIEnReg, ch);
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
}
    1b08:	c1 e0       	ldi	r28, 0x01	; 1
    1b0a:	8c e0       	ldi	r24, 0x0C	; 12
    1b0c:	f8 12       	cpse	r15, r24


    1b0e:	73 c0       	rjmp	.+230    	; 0x1bf6 <mfrc522_to_card+0x212>
    1b10:	6e 2d       	mov	r22, r14
    1b12:	8a e0       	ldi	r24, 0x0A	; 10
    1b14:	4e df       	rcall	.-356    	; 0x19b2 <mfrc522_read>
    1b16:	88 2e       	mov	r8, r24
unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
    1b18:	6e 2d       	mov	r22, r14
    1b1a:	8c e0       	ldi	r24, 0x0C	; 12
    1b1c:	4a df       	rcall	.-364    	; 0x19b2 <mfrc522_read>
    1b1e:	28 2f       	mov	r18, r24
    1b20:	27 70       	andi	r18, 0x07	; 7
    1b22:	a9 f0       	breq	.+42     	; 0x1b4e <mfrc522_to_card+0x16a>
{
    1b24:	88 2d       	mov	r24, r8
	uint8_t  status;
	uint32_t backBits;//The received data bits
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	82 0f       	add	r24, r18
    1b38:	91 1d       	adc	r25, r1
    1b3a:	09 2e       	mov	r0, r25
    1b3c:	00 0c       	add	r0, r0
    1b3e:	aa 0b       	sbc	r26, r26
    1b40:	bb 0b       	sbc	r27, r27
    1b42:	f8 01       	movw	r30, r16
    1b44:	80 83       	st	Z, r24
    1b46:	91 83       	std	Z+1, r25	; 0x01
    1b48:	a2 83       	std	Z+2, r26	; 0x02
    1b4a:	b3 83       	std	Z+3, r27	; 0x03
    1b4c:	11 c0       	rjmp	.+34     	; 0x1b70 <mfrc522_to_card+0x18c>
    1b4e:	88 2d       	mov	r24, r8

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
	
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	09 2e       	mov	r0, r25
    1b60:	00 0c       	add	r0, r0
    1b62:	aa 0b       	sbc	r26, r26
    1b64:	bb 0b       	sbc	r27, r27
    1b66:	f8 01       	movw	r30, r16
    1b68:	80 83       	st	Z, r24
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	a2 83       	std	Z+2, r26	; 0x02
    1b6e:	b3 83       	std	Z+3, r27	; 0x03
    1b70:	88 20       	and	r8, r8
	tag_type[0] = req_mode;
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);

    1b72:	71 f0       	breq	.+28     	; 0x1b90 <mfrc522_to_card+0x1ac>
    1b74:	88 2d       	mov	r24, r8
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    1b76:	81 31       	cpi	r24, 0x11	; 17
    1b78:	08 f0       	brcs	.+2      	; 0x1b7c <mfrc522_to_card+0x198>
    1b7a:	80 e1       	ldi	r24, 0x10	; 16
    1b7c:	88 2e       	mov	r8, r24
    1b7e:	91 2c       	mov	r9, r1
    1b80:	a1 2c       	mov	r10, r1
    1b82:	b1 2c       	mov	r11, r1
    1b84:	81 14       	cp	r8, r1
    1b86:	91 04       	cpc	r9, r1
    1b88:	a1 04       	cpc	r10, r1
    1b8a:	b1 04       	cpc	r11, r1
    1b8c:	29 f4       	brne	.+10     	; 0x1b98 <mfrc522_to_card+0x1b4>
    1b8e:	33 c0       	rjmp	.+102    	; 0x1bf6 <mfrc522_to_card+0x212>
    1b90:	81 2c       	mov	r8, r1
    1b92:	91 2c       	mov	r9, r1
    1b94:	54 01       	movw	r10, r8
    1b96:	83 94       	inc	r8
    1b98:	02 2d       	mov	r16, r2
    1b9a:	1d 2d       	mov	r17, r13
    1b9c:	41 2c       	mov	r4, r1
    1b9e:	51 2c       	mov	r5, r1
    1ba0:	32 01       	movw	r6, r4
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
    1ba2:	6e 2d       	mov	r22, r14
    1ba4:	89 e0       	ldi	r24, 0x09	; 9
    1ba6:	05 df       	rcall	.-502    	; 0x19b2 <mfrc522_read>
    1ba8:	f8 01       	movw	r30, r16
    1baa:	81 93       	st	Z+, r24
    1bac:	8f 01       	movw	r16, r30
	
	return status;
}

unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    1bae:	ff ef       	ldi	r31, 0xFF	; 255
    1bb0:	4f 1a       	sub	r4, r31
    1bb2:	5f 0a       	sbc	r5, r31
    1bb4:	6f 0a       	sbc	r6, r31
    1bb6:	7f 0a       	sbc	r7, r31
    1bb8:	48 14       	cp	r4, r8
    1bba:	59 04       	cpc	r5, r9
    1bbc:	6a 04       	cpc	r6, r10
    1bbe:	7b 04       	cpc	r7, r11
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
    1bc0:	80 f3       	brcs	.-32     	; 0x1ba2 <mfrc522_to_card+0x1be>
    1bc2:	19 c0       	rjmp	.+50     	; 0x1bf6 <mfrc522_to_card+0x212>
    1bc4:	6e 2d       	mov	r22, r14
	}
    1bc6:	8d e0       	ldi	r24, 0x0D	; 13
    1bc8:	f4 de       	rcall	.-536    	; 0x19b2 <mfrc522_read>
    1bca:	68 2f       	mov	r22, r24
    1bcc:	6f 77       	andi	r22, 0x7F	; 127
    1bce:	4e 2d       	mov	r20, r14
void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴. 
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F	

}
    1bd0:	8d e0       	ldi	r24, 0x0D	; 13
    1bd2:	d3 de       	rcall	.-602    	; 0x197a <mfrc522_write>
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
    1bd4:	c3 e0       	ldi	r28, 0x03	; 3
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <mfrc522_to_card+0x212>
    1bd8:	6e 2d       	mov	r22, r14
    1bda:	8d e0       	ldi	r24, 0x0D	; 13
	}
    1bdc:	ea de       	rcall	.-556    	; 0x19b2 <mfrc522_read>
    1bde:	68 2f       	mov	r22, r24
    1be0:	6f 77       	andi	r22, 0x7F	; 127
    1be2:	4e 2d       	mov	r20, r14
    1be4:	8d e0       	ldi	r24, 0x0D	; 13
    1be6:	c9 de       	rcall	.-622    	; 0x197a <mfrc522_write>
	
}

void mfrc522_IRQ_enable(unsigned char ch)
    1be8:	6e 2d       	mov	r22, r14
    1bea:	86 e0       	ldi	r24, 0x06	; 6
    1bec:	e2 de       	rcall	.-572    	; 0x19b2 <mfrc522_read>
    1bee:	8b 71       	andi	r24, 0x1B	; 27
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <mfrc522_to_card+0x210>
    1bf2:	84 cf       	rjmp	.-248    	; 0x1afc <mfrc522_to_card+0x118>
    1bf4:	c3 e0       	ldi	r28, 0x03	; 3
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

    1bf6:	8c 2f       	mov	r24, r28
		{
			irqEn = 0x12;
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	bf 90       	pop	r11
    1c0a:	af 90       	pop	r10
    1c0c:	9f 90       	pop	r9
    1c0e:	8f 90       	pop	r8
    1c10:	7f 90       	pop	r7
    1c12:	6f 90       	pop	r6
    1c14:	5f 90       	pop	r5
    1c16:	4f 90       	pop	r4
    1c18:	3f 90       	pop	r3
    1c1a:	2f 90       	pop	r2
    1c1c:	08 95       	ret

00001c1e <mfrc522_init>:
    1c1e:	cf 93       	push	r28
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    1c20:	c8 2f       	mov	r28, r24
			break;
		}
		default:
    1c22:	1f 92       	push	r1
    1c24:	1f 92       	push	r1
    1c26:	1f 92       	push	r1
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	8f 93       	push	r24
    1c2c:	83 e0       	ldi	r24, 0x03	; 3
    1c2e:	8f 93       	push	r24
    1c30:	17 d1       	rcall	.+558    	; 0x1e60 <spi_init>
		break;
	}
	
    1c32:	84 b3       	in	r24, 0x14	; 20
    1c34:	83 60       	ori	r24, 0x03	; 3
    1c36:	84 bb       	out	0x14, r24	; 20
	///////////////////////////////////////////============여기-==========//////////
    1c38:	15 ba       	out	0x15, r1	; 21
    1c3a:	2f ef       	ldi	r18, 0xFF	; 255
    1c3c:	89 ef       	ldi	r24, 0xF9	; 249
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	21 50       	subi	r18, 0x01	; 1
    1c42:	80 40       	sbci	r24, 0x00	; 0
    1c44:	90 40       	sbci	r25, 0x00	; 0
    1c46:	e1 f7       	brne	.-8      	; 0x1c40 <mfrc522_init+0x22>
    1c48:	00 c0       	rjmp	.+0      	; 0x1c4a <mfrc522_init+0x2c>
    1c4a:	00 00       	nop
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
	n=mfrc522_read(ComIrqReg,ch);
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
    1c4c:	85 b3       	in	r24, 0x15	; 21
    1c4e:	83 60       	ori	r24, 0x03	; 3
    1c50:	85 bb       	out	0x15, r24	; 21
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
	
	
    1c52:	4c 2f       	mov	r20, r28
    1c54:	6f e0       	ldi	r22, 0x0F	; 15
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 de       	rcall	.-736    	; 0x197a <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
	{
    1c5a:	4c 2f       	mov	r20, r28
    1c5c:	6d e8       	ldi	r22, 0x8D	; 141
    1c5e:	8a e2       	ldi	r24, 0x2A	; 42
    1c60:	8c de       	rcall	.-744    	; 0x197a <mfrc522_write>
		mfrc522_write(FIFODataReg, send_data[i],ch);
    1c62:	4c 2f       	mov	r20, r28
    1c64:	6e e3       	ldi	r22, 0x3E	; 62
    1c66:	8b e2       	ldi	r24, 0x2B	; 43
    1c68:	88 de       	rcall	.-752    	; 0x197a <mfrc522_write>
	}
    1c6a:	4c 2f       	mov	r20, r28
    1c6c:	6e e1       	ldi	r22, 0x1E	; 30
    1c6e:	8c e2       	ldi	r24, 0x2C	; 44
    1c70:	84 de       	rcall	.-760    	; 0x197a <mfrc522_write>

    1c72:	4c 2f       	mov	r20, r28
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	8d e2       	ldi	r24, 0x2D	; 45
    1c78:	80 de       	rcall	.-768    	; 0x197a <mfrc522_write>
	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
	if (cmd == MFRC522_CMD_Transceive)
    1c7a:	4c 2f       	mov	r20, r28
    1c7c:	60 e4       	ldi	r22, 0x40	; 64
    1c7e:	85 e1       	ldi	r24, 0x15	; 21
    1c80:	7c de       	rcall	.-776    	; 0x197a <mfrc522_write>
	{
    1c82:	4c 2f       	mov	r20, r28
    1c84:	6d e3       	ldi	r22, 0x3D	; 61
    1c86:	81 e1       	ldi	r24, 0x11	; 17
    1c88:	78 de       	rcall	.-784    	; 0x197a <mfrc522_write>
    1c8a:	6c 2f       	mov	r22, r28
		n=mfrc522_read(BitFramingReg,ch);
		mfrc522_write(BitFramingReg,n|0x80,ch);
	}
	
    1c8c:	84 e1       	ldi	r24, 0x14	; 20
    1c8e:	91 de       	rcall	.-734    	; 0x19b2 <mfrc522_read>
    1c90:	98 2f       	mov	r25, r24
    1c92:	93 70       	andi	r25, 0x03	; 3
	//Waiting to receive data to complete
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	29 f4       	brne	.+10     	; 0x1caa <mfrc522_init+0x8c>
    1ca0:	68 2f       	mov	r22, r24
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
    1ca2:	63 60       	ori	r22, 0x03	; 3
    1ca4:	4c 2f       	mov	r20, r28
    1ca6:	84 e1       	ldi	r24, 0x14	; 20
    1ca8:	68 de       	rcall	.-816    	; 0x197a <mfrc522_write>
    1caa:	cf 91       	pop	r28
    1cac:	08 95       	ret

00001cae <mfrc522_version_check>:
	{
		//CommIrqReg[7..0]
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    1cb2:	d8 2f       	mov	r29, r24

	tmp=mfrc522_read(BitFramingReg,ch);
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
	
    1cb4:	68 2f       	mov	r22, r24
    1cb6:	87 e3       	ldi	r24, 0x37	; 55
    1cb8:	7c de       	rcall	.-776    	; 0x19b2 <mfrc522_read>
    1cba:	c8 2f       	mov	r28, r24
    1cbc:	2f ef       	ldi	r18, 0xFF	; 255
    1cbe:	89 ef       	ldi	r24, 0xF9	; 249
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	21 50       	subi	r18, 0x01	; 1
    1cc4:	80 40       	sbci	r24, 0x00	; 0
    1cc6:	90 40       	sbci	r25, 0x00	; 0
    1cc8:	e1 f7       	brne	.-8      	; 0x1cc2 <mfrc522_version_check+0x14>
    1cca:	00 c0       	rjmp	.+0      	; 0x1ccc <mfrc522_version_check+0x1e>
    1ccc:	00 00       	nop
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
    1cce:	d1 11       	cpse	r29, r1
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <mfrc522_version_check+0x30>
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	94 e0       	ldi	r25, 0x04	; 4
    1cd6:	5f d1       	rcall	.+702    	; 0x1f96 <uart0_tx_string>
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
    1cd8:	c2 39       	cpi	r28, 0x92	; 146
    1cda:	59 f5       	brne	.+86     	; 0x1d32 <mfrc522_version_check+0x84>
    1cdc:	0f c0       	rjmp	.+30     	; 0x1cfc <mfrc522_version_check+0x4e>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
    1cde:	8c e0       	ldi	r24, 0x0C	; 12
    1ce0:	94 e0       	ldi	r25, 0x04	; 4
    1ce2:	59 d1       	rcall	.+690    	; 0x1f96 <uart0_tx_string>
			if (n & irqEn & 0x01)
			{
    1ce4:	c2 39       	cpi	r28, 0x92	; 146
    1ce6:	91 f5       	brne	.+100    	; 0x1d4c <mfrc522_version_check+0x9e>
				if (lastBits)
				{
					*back_data_len = (n-1)*8 + lastBits;
				}
				else
				{
    1ce8:	12 c0       	rjmp	.+36     	; 0x1d0e <mfrc522_version_check+0x60>
    1cea:	88 e1       	ldi	r24, 0x18	; 24
    1cec:	94 e0       	ldi	r25, 0x04	; 4
    1cee:	53 d1       	rcall	.+678    	; 0x1f96 <uart0_tx_string>
					*back_data_len = n*8;
    1cf0:	4b e2       	ldi	r20, 0x2B	; 43
    1cf2:	54 e0       	ldi	r21, 0x04	; 4
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	9f dd       	rcall	.-1218   	; 0x1838 <i2c_lcd_string>
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}
    1cfa:	ff cf       	rjmp	.-2      	; 0x1cfa <mfrc522_version_check+0x4c>
    1cfc:	8f e3       	ldi	r24, 0x3F	; 63
    1cfe:	94 e0       	ldi	r25, 0x04	; 4

    1d00:	4a d1       	rcall	.+660    	; 0x1f96 <uart0_tx_string>
    1d02:	43 e6       	ldi	r20, 0x63	; 99
    1d04:	54 e0       	ldi	r21, 0x04	; 4
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	96 dd       	rcall	.-1236   	; 0x1838 <i2c_lcd_string>
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}
    1d0c:	23 c0       	rjmp	.+70     	; 0x1d54 <mfrc522_version_check+0xa6>
    1d0e:	8f e3       	ldi	r24, 0x3F	; 63
    1d10:	94 e0       	ldi	r25, 0x04	; 4

			if (cmd == MFRC522_CMD_Transceive)
    1d12:	41 d1       	rcall	.+642    	; 0x1f96 <uart0_tx_string>
    1d14:	48 e7       	ldi	r20, 0x78	; 120
    1d16:	54 e0       	ldi	r21, 0x04	; 4
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
			{
				n = mfrc522_read(FIFOLevelReg,ch);
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
				if (lastBits)
    1d1c:	8d dd       	rcall	.-1254   	; 0x1838 <i2c_lcd_string>
    1d1e:	1a c0       	rjmp	.+52     	; 0x1d54 <mfrc522_version_check+0xa6>
    1d20:	8d e8       	ldi	r24, 0x8D	; 141
    1d22:	94 e0       	ldi	r25, 0x04	; 4
				{
    1d24:	38 d1       	rcall	.+624    	; 0x1f96 <uart0_tx_string>
    1d26:	43 e6       	ldi	r20, 0x63	; 99
    1d28:	54 e0       	ldi	r21, 0x04	; 4
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	84 dd       	rcall	.-1272   	; 0x1838 <i2c_lcd_string>
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1d30:	11 c0       	rjmp	.+34     	; 0x1d54 <mfrc522_version_check+0xa6>
    1d32:	c0 59       	subi	r28, 0x90	; 144
    1d34:	c2 30       	cpi	r28, 0x02	; 2
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
				if (lastBits)
    1d36:	c8 f6       	brcc	.-78     	; 0x1cea <mfrc522_version_check+0x3c>
    1d38:	f3 cf       	rjmp	.-26     	; 0x1d20 <mfrc522_version_check+0x72>
    1d3a:	8d e8       	ldi	r24, 0x8D	; 141
    1d3c:	94 e0       	ldi	r25, 0x04	; 4
				{
					*back_data_len = (n-1)*8 + lastBits;
    1d3e:	2b d1       	rcall	.+598    	; 0x1f96 <uart0_tx_string>
    1d40:	48 e7       	ldi	r20, 0x78	; 120
    1d42:	54 e0       	ldi	r21, 0x04	; 4
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	82 e0       	ldi	r24, 0x02	; 2
    1d48:	77 dd       	rcall	.-1298   	; 0x1838 <i2c_lcd_string>
    1d4a:	04 c0       	rjmp	.+8      	; 0x1d54 <mfrc522_version_check+0xa6>
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1d4c:	c0 59       	subi	r28, 0x90	; 144
    1d4e:	c2 30       	cpi	r28, 0x02	; 2
    1d50:	60 f6       	brcc	.-104    	; 0x1cea <mfrc522_version_check+0x3c>
    1d52:	f3 cf       	rjmp	.-26     	; 0x1d3a <mfrc522_version_check+0x8c>
				{
					*back_data_len = n*8;
				}

				if (n == 0)
				{
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	08 95       	ret

00001d5a <mfrc522_IRQ_enable>:
					n = 1;
				}
				if (n > MAX_LEN)
    1d5a:	cf 93       	push	r28
    1d5c:	c8 2f       	mov	r28, r24
				{
					n = MAX_LEN;
				}
    1d5e:	68 2f       	mov	r22, r24
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	27 de       	rcall	.-946    	; 0x19b2 <mfrc522_read>
				
    1d64:	68 2f       	mov	r22, r24
    1d66:	60 62       	ori	r22, 0x20	; 32
    1d68:	4c 2f       	mov	r20, r28
    1d6a:	82 e0       	ldi	r24, 0x02	; 2
    1d6c:	06 de       	rcall	.-1012   	; 0x197a <mfrc522_write>
				//Reading the received data in FIFO
    1d6e:	6c 2f       	mov	r22, r28
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	1f de       	rcall	.-962    	; 0x19b2 <mfrc522_read>
				for (i=0; i<n; i++)
    1d74:	68 2f       	mov	r22, r24
    1d76:	60 68       	ori	r22, 0x80	; 128
    1d78:	4c 2f       	mov	r20, r28
    1d7a:	83 e0       	ldi	r24, 0x03	; 3
    1d7c:	fe dd       	rcall	.-1028   	; 0x197a <mfrc522_write>
				{
    1d7e:	cf 91       	pop	r28
    1d80:	08 95       	ret

00001d82 <mfrc522_request>:
					back_data[i] = mfrc522_read(FIFODataReg,ch);
				}
			}
		}
    1d82:	cf 92       	push	r12
    1d84:	df 92       	push	r13
    1d86:	ef 92       	push	r14
    1d88:	0f 93       	push	r16
    1d8a:	1f 93       	push	r17
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	00 d0       	rcall	.+0      	; 0x1d92 <mfrc522_request+0x10>
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <mfrc522_request+0x12>
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	18 2f       	mov	r17, r24
    1d9a:	6b 01       	movw	r12, r22
    1d9c:	e4 2e       	mov	r14, r20
		else
		{
			status = ERROR;
		}
		
    1d9e:	67 e0       	ldi	r22, 0x07	; 7
    1da0:	8d e0       	ldi	r24, 0x0D	; 13
    1da2:	eb dd       	rcall	.-1066   	; 0x197a <mfrc522_write>
	}
	
    1da4:	f6 01       	movw	r30, r12
    1da6:	10 83       	st	Z, r17
// 	SetBitMask(ControlReg,0x80);           //timer stops
    1da8:	8e 01       	movw	r16, r28
    1daa:	0f 5f       	subi	r16, 0xFF	; 255
    1dac:	1f 4f       	sbci	r17, 0xFF	; 255
    1dae:	96 01       	movw	r18, r12
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	b6 01       	movw	r22, r12
    1db4:	8c e0       	ldi	r24, 0x0C	; 12
    1db6:	16 de       	rcall	.-980    	; 0x19e4 <mfrc522_to_card>
 //mfrc522_write(CommandReg, MFRC522_CMD_Idle);

    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	59 f4       	brne	.+22     	; 0x1dd2 <mfrc522_request+0x50>
    1dbc:	49 81       	ldd	r20, Y+1	; 0x01
    1dbe:	5a 81       	ldd	r21, Y+2	; 0x02
    1dc0:	6b 81       	ldd	r22, Y+3	; 0x03
    1dc2:	7c 81       	ldd	r23, Y+4	; 0x04
    1dc4:	40 31       	cpi	r20, 0x10	; 16
    1dc6:	51 05       	cpc	r21, r1
    1dc8:	61 05       	cpc	r22, r1
    1dca:	71 05       	cpc	r23, r1
    1dcc:	19 f0       	breq	.+6      	; 0x1dd4 <mfrc522_request+0x52>
	return status;
}
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	01 c0       	rjmp	.+2      	; 0x1dd4 <mfrc522_request+0x52>
    1dd2:	83 e0       	ldi	r24, 0x03	; 3


unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	ef 90       	pop	r14
    1de6:	df 90       	pop	r13
    1de8:	cf 90       	pop	r12
    1dea:	08 95       	ret

00001dec <mfrc522_get_card_serial>:
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	0f 93       	push	r16
    1df4:	1f 93       	push	r17
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <mfrc522_get_card_serial+0x10>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <mfrc522_get_card_serial+0x12>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	6c 01       	movw	r12, r24
    1e04:	e6 2e       	mov	r14, r22
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
	
	serial_out[0] = PICC_ANTICOLL;
	serial_out[1] = 0x20;
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

    1e06:	46 2f       	mov	r20, r22
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	8d e0       	ldi	r24, 0x0D	; 13
    1e0c:	b6 dd       	rcall	.-1172   	; 0x197a <mfrc522_write>
	if (status == CARD_FOUND)
	{
    1e0e:	83 e9       	ldi	r24, 0x93	; 147
    1e10:	f6 01       	movw	r30, r12
    1e12:	80 83       	st	Z, r24
		//Check card serial number
    1e14:	80 e2       	ldi	r24, 0x20	; 32
    1e16:	81 83       	std	Z+1, r24	; 0x01
		for (i=0; i<4; i++)
    1e18:	8e 01       	movw	r16, r28
    1e1a:	0f 5f       	subi	r16, 0xFF	; 255
    1e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1e:	96 01       	movw	r18, r12
    1e20:	42 e0       	ldi	r20, 0x02	; 2
    1e22:	b6 01       	movw	r22, r12
    1e24:	8c e0       	ldi	r24, 0x0C	; 12
    1e26:	de dd       	rcall	.-1092   	; 0x19e4 <mfrc522_to_card>
		{
			serNumCheck ^= serial_out[i];
    1e28:	81 30       	cpi	r24, 0x01	; 1
    1e2a:	71 f4       	brne	.+28     	; 0x1e48 <mfrc522_get_card_serial+0x5c>
    1e2c:	f6 01       	movw	r30, r12
    1e2e:	a6 01       	movw	r20, r12
    1e30:	4c 5f       	subi	r20, 0xFC	; 252
    1e32:	5f 4f       	sbci	r21, 0xFF	; 255
    1e34:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (serNumCheck != serial_out[i])
		{
			status = ERROR;
		}
    1e36:	21 91       	ld	r18, Z+
    1e38:	92 27       	eor	r25, r18
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
		{
    1e3a:	4e 17       	cp	r20, r30
    1e3c:	5f 07       	cpc	r21, r31
    1e3e:	d9 f7       	brne	.-10     	; 0x1e36 <mfrc522_get_card_serial+0x4a>
			status = ERROR;
		}
	}
	return status;
    1e40:	f6 01       	movw	r30, r12
    1e42:	24 81       	ldd	r18, Z+4	; 0x04
    1e44:	92 13       	cpse	r25, r18
}

    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	1f 91       	pop	r17
    1e56:	0f 91       	pop	r16
    1e58:	ef 90       	pop	r14
    1e5a:	df 90       	pop	r13
    1e5c:	cf 90       	pop	r12
    1e5e:	08 95       	ret

00001e60 <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(uint8_t spi_mode, ...){
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	00 d0       	rcall	.+0      	; 0x1e66 <spi_init+0x6>
    1e66:	1f 92       	push	r1
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
    1e6e:	83 30       	cpi	r24, 0x03	; 3
    1e70:	21 f1       	breq	.+72     	; 0x1eba <spi_init+0x5a>
    1e72:	81 11       	cpse	r24, r1
    1e74:	32 c0       	rjmp	.+100    	; 0x1eda <spi_init+0x7a>
    1e76:	29 c0       	rjmp	.+82     	; 0x1eca <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
    1e78:	9c 91       	ld	r25, X
    1e7a:	12 96       	adiw	r26, 0x02	; 2
    1e7c:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
    1e7e:	e2 17       	cp	r30, r18
    1e80:	f3 07       	cpc	r31, r19
    1e82:	d1 f7       	brne	.-12     	; 0x1e78 <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1e84:	9b 81       	ldd	r25, Y+3	; 0x03
    1e86:	92 30       	cpi	r25, 0x02	; 2
    1e88:	20 f1       	brcs	.+72     	; 0x1ed2 <spi_init+0x72>
    1e8a:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
    1e8c:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	71 f4       	brne	.+28     	; 0x1eae <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
    1e92:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
    1e94:	87 b3       	in	r24, 0x17	; 23
    1e96:	87 60       	ori	r24, 0x07	; 7
    1e98:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
    1e9a:	99 81       	ldd	r25, Y+1	; 0x01
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	89 2b       	or	r24, r25
    1ea0:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
    1ea2:	2e b1       	in	r18, 0x0e	; 14
    1ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea6:	92 2b       	or	r25, r18
    1ea8:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
    1eaa:	8d b9       	out	0x0d, r24	; 13
    1eac:	16 c0       	rjmp	.+44     	; 0x1eda <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
    1eae:	81 11       	cpse	r24, r1
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
    1eb2:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
    1eb4:	80 e4       	ldi	r24, 0x40	; 64
    1eb6:	8d b9       	out	0x0d, r24	; 13
    1eb8:	10 c0       	rjmp	.+32     	; 0x1eda <spi_init+0x7a>
    1eba:	de 01       	movw	r26, r28
    1ebc:	19 96       	adiw	r26, 0x09	; 9
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	31 96       	adiw	r30, 0x01	; 1
    1ec2:	9e 01       	movw	r18, r28
    1ec4:	2c 5f       	subi	r18, 0xFC	; 252
    1ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec8:	d7 cf       	rjmp	.-82     	; 0x1e78 <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1eca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ecc:	92 30       	cpi	r25, 0x02	; 2
    1ece:	e8 f6       	brcc	.-70     	; 0x1e8a <spi_init+0x2a>
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
    1ed2:	1d b8       	out	0x0d, r1	; 13
    1ed4:	de cf       	rjmp	.-68     	; 0x1e92 <spi_init+0x32>
    1ed6:	1d b8       	out	0x0d, r1	; 13
    1ed8:	ec cf       	rjmp	.-40     	; 0x1eb2 <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	08 95       	ret

00001ee6 <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
    1ee6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
    1ee8:	77 9b       	sbis	0x0e, 7	; 14
    1eea:	fe cf       	rjmp	.-4      	; 0x1ee8 <spi_master_tx+0x2>
}
    1eec:	08 95       	ret

00001eee <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
    1eee:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
    1ef0:	77 9b       	sbis	0x0e, 7	; 14
    1ef2:	fe cf       	rjmp	.-4      	; 0x1ef0 <spi_master_rx+0x2>
	
	return SPDR;
    1ef4:	8f b1       	in	r24, 0x0f	; 15
}
    1ef6:	08 95       	ret

00001ef8 <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
    1ef8:	bc 9a       	sbi	0x17, 4	; 23
    1efa:	8c e0       	ldi	r24, 0x0C	; 12
    1efc:	83 bf       	out	0x33, r24	; 51
    1efe:	8a ef       	ldi	r24, 0xFA	; 250
    1f00:	81 bf       	out	0x31, r24	; 49
    1f02:	87 b7       	in	r24, 0x37	; 55
    1f04:	82 60       	ori	r24, 0x02	; 2
    1f06:	87 bf       	out	0x37, r24	; 55
    1f08:	08 95       	ret

00001f0a <timer3_init>:
    1f0a:	13 9a       	sbi	0x02, 3	; 2
    1f0c:	80 e4       	ldi	r24, 0x40	; 64
    1f0e:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1f12:	8a e1       	ldi	r24, 0x1A	; 26
    1f14:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1f18:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1f1c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1f20:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f24:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1f28:	08 95       	ret

00001f2a <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
    1f2a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
    1f2e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1f32:	08 95       	ret

00001f34 <uart_init>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	ec 01       	movw	r28, r24
    1f3a:	9b 01       	movw	r18, r22
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	60 e4       	ldi	r22, 0x40	; 64
    1f42:	72 e4       	ldi	r23, 0x42	; 66
    1f44:	8f e0       	ldi	r24, 0x0F	; 15
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	4f d1       	rcall	.+670    	; 0x21e8 <__udivmodsi4>
    1f4a:	21 50       	subi	r18, 0x01	; 1
    1f4c:	31 09       	sbc	r19, r1
    1f4e:	20 97       	sbiw	r28, 0x00	; 0
    1f50:	59 f4       	brne	.+22     	; 0x1f68 <uart_init+0x34>
    1f52:	10 98       	cbi	0x02, 0	; 2
    1f54:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1f58:	29 b9       	out	0x09, r18	; 9
    1f5a:	88 e1       	ldi	r24, 0x18	; 24
    1f5c:	8a b9       	out	0x0a, r24	; 10
    1f5e:	57 9a       	sbi	0x0a, 7	; 10
    1f60:	86 e0       	ldi	r24, 0x06	; 6
    1f62:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1f66:	10 c0       	rjmp	.+32     	; 0x1f88 <uart_init+0x54>
    1f68:	21 97       	sbiw	r28, 0x01	; 1
    1f6a:	71 f4       	brne	.+28     	; 0x1f88 <uart_init+0x54>
    1f6c:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1f70:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1f74:	ea e9       	ldi	r30, 0x9A	; 154
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	88 e1       	ldi	r24, 0x18	; 24
    1f7a:	80 83       	st	Z, r24
    1f7c:	80 81       	ld	r24, Z
    1f7e:	80 68       	ori	r24, 0x80	; 128
    1f80:	80 83       	st	Z, r24
    1f82:	86 e0       	ldi	r24, 0x06	; 6
    1f84:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <uart0_tx_char>:
    1f8e:	5d 9b       	sbis	0x0b, 5	; 11
    1f90:	fe cf       	rjmp	.-4      	; 0x1f8e <uart0_tx_char>
    1f92:	8c b9       	out	0x0c, r24	; 12
    1f94:	08 95       	ret

00001f96 <uart0_tx_string>:
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	ec 01       	movw	r28, r24
    1f9c:	88 81       	ld	r24, Y
    1f9e:	88 23       	and	r24, r24
    1fa0:	29 f0       	breq	.+10     	; 0x1fac <uart0_tx_string+0x16>
    1fa2:	21 96       	adiw	r28, 0x01	; 1
    1fa4:	f4 df       	rcall	.-24     	; 0x1f8e <uart0_tx_char>
    1fa6:	89 91       	ld	r24, Y+
    1fa8:	81 11       	cpse	r24, r1
    1faa:	fc cf       	rjmp	.-8      	; 0x1fa4 <uart0_tx_string+0xe>
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	08 95       	ret

00001fb2 <uart1_tx_char>:
    1fb2:	eb e9       	ldi	r30, 0x9B	; 155
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	90 81       	ld	r25, Z
    1fb8:	95 ff       	sbrs	r25, 5
    1fba:	fd cf       	rjmp	.-6      	; 0x1fb6 <uart1_tx_char+0x4>
    1fbc:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1fc0:	08 95       	ret

00001fc2 <uart1_tx_string>:
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	ec 01       	movw	r28, r24
    1fc8:	88 81       	ld	r24, Y
    1fca:	88 23       	and	r24, r24
    1fcc:	29 f0       	breq	.+10     	; 0x1fd8 <uart1_tx_string+0x16>
    1fce:	21 96       	adiw	r28, 0x01	; 1
    1fd0:	f0 df       	rcall	.-32     	; 0x1fb2 <uart1_tx_char>
    1fd2:	89 91       	ld	r24, Y+
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	fc cf       	rjmp	.-8      	; 0x1fd0 <uart1_tx_string+0xe>
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	08 95       	ret

00001fde <IntToString>:

char * IntToString(int num)
{
    1fde:	0f 93       	push	r16
    1fe0:	1f 93       	push	r17
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	64 97       	sbiw	r28, 0x14	; 20
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%02d",num); //고유 자릿값
    1ff6:	9f 93       	push	r25
    1ff8:	8f 93       	push	r24
    1ffa:	81 eb       	ldi	r24, 0xB1	; 177
    1ffc:	94 e0       	ldi	r25, 0x04	; 4
    1ffe:	9f 93       	push	r25
    2000:	8f 93       	push	r24
    2002:	8e 01       	movw	r16, r28
    2004:	0f 5f       	subi	r16, 0xFF	; 255
    2006:	1f 4f       	sbci	r17, 0xFF	; 255
    2008:	1f 93       	push	r17
    200a:	0f 93       	push	r16
    200c:	4f d1       	rcall	.+670    	; 0x22ac <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
    200e:	b8 01       	movw	r22, r16
    2010:	86 e1       	ldi	r24, 0x16	; 22
    2012:	96 e0       	ldi	r25, 0x06	; 6
    2014:	3c d1       	rcall	.+632    	; 0x228e <strcpy>
	
	return (buff.itos_buff);
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
}
    2022:	86 e1       	ldi	r24, 0x16	; 22
    2024:	96 e0       	ldi	r25, 0x06	; 6
    2026:	64 96       	adiw	r28, 0x14	; 20
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	1f 91       	pop	r17
    2038:	0f 91       	pop	r16
    203a:	08 95       	ret

0000203c <HexToString>:
 
 char * HexToString(char num)
 {
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	64 97       	sbiw	r28, 0x14	; 20
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
    2054:	1f 92       	push	r1
    2056:	8f 93       	push	r24
    2058:	86 eb       	ldi	r24, 0xB6	; 182
    205a:	94 e0       	ldi	r25, 0x04	; 4
    205c:	9f 93       	push	r25
    205e:	8f 93       	push	r24
    2060:	8e 01       	movw	r16, r28
    2062:	0f 5f       	subi	r16, 0xFF	; 255
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	1f 93       	push	r17
    2068:	0f 93       	push	r16
    206a:	20 d1       	rcall	.+576    	; 0x22ac <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
    206c:	b8 01       	movw	r22, r16
    206e:	86 e1       	ldi	r24, 0x16	; 22
    2070:	96 e0       	ldi	r25, 0x06	; 6
    2072:	0d d1       	rcall	.+538    	; 0x228e <strcpy>
	 
	 return (buff.itos_buff);
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
 }
    2080:	86 e1       	ldi	r24, 0x16	; 22
    2082:	96 e0       	ldi	r25, 0x06	; 6
    2084:	64 96       	adiw	r28, 0x14	; 20
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	08 95       	ret

0000209a <connect_to_AP>:
 
 
 
char* connect_to_AP(char * cmd,char *ssid,char*password){
    209a:	cf 92       	push	r12
    209c:	df 92       	push	r13
    209e:	ef 92       	push	r14
    20a0:	ff 92       	push	r15
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	c0 54       	subi	r28, 0x40	; 64
    20b0:	d1 09       	sbc	r29, r1
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	6b 01       	movw	r12, r22
    20be:	7a 01       	movw	r14, r20
	//문자열 변수 ?
	//"AT+CWJAP=\""
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    20c0:	20 e4       	ldi	r18, 0x40	; 64
    20c2:	e6 e5       	ldi	r30, 0x56	; 86
    20c4:	f6 e0       	ldi	r31, 0x06	; 6
    20c6:	df 01       	movw	r26, r30
    20c8:	1d 92       	st	X+, r1
    20ca:	2a 95       	dec	r18
    20cc:	e9 f7       	brne	.-6      	; 0x20c8 <connect_to_AP+0x2e>
	
	strcpy(buf,cmd);//"AT+CWJAP=\""
    20ce:	bc 01       	movw	r22, r24
    20d0:	8e 01       	movw	r16, r28
    20d2:	0f 5f       	subi	r16, 0xFF	; 255
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	c8 01       	movw	r24, r16
    20d8:	da d0       	rcall	.+436    	; 0x228e <strcpy>
	strcat(buf,ssid);
    20da:	b6 01       	movw	r22, r12
    20dc:	c8 01       	movw	r24, r16
    20de:	c3 d0       	rcall	.+390    	; 0x2266 <strcat>
	strcat(buf,"\",\"");
    20e0:	f8 01       	movw	r30, r16
    20e2:	01 90       	ld	r0, Z+
    20e4:	00 20       	and	r0, r0
    20e6:	e9 f7       	brne	.-6      	; 0x20e2 <connect_to_AP+0x48>
    20e8:	31 97       	sbiw	r30, 0x01	; 1
    20ea:	82 e2       	ldi	r24, 0x22	; 34
    20ec:	9c e2       	ldi	r25, 0x2C	; 44
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	80 83       	st	Z, r24
    20f2:	82 e2       	ldi	r24, 0x22	; 34
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	93 83       	std	Z+3, r25	; 0x03
    20f8:	82 83       	std	Z+2, r24	; 0x02
	strcat(buf,password);
    20fa:	b7 01       	movw	r22, r14
    20fc:	c8 01       	movw	r24, r16
    20fe:	b3 d0       	rcall	.+358    	; 0x2266 <strcat>
	strcat(buf,"\"\r\n");
    2100:	f8 01       	movw	r30, r16
    2102:	01 90       	ld	r0, Z+
    2104:	00 20       	and	r0, r0
    2106:	e9 f7       	brne	.-6      	; 0x2102 <connect_to_AP+0x68>
    2108:	31 97       	sbiw	r30, 0x01	; 1
    210a:	82 e2       	ldi	r24, 0x22	; 34
    210c:	9d e0       	ldi	r25, 0x0D	; 13
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	8a e0       	ldi	r24, 0x0A	; 10
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	93 83       	std	Z+3, r25	; 0x03
    2118:	82 83       	std	Z+2, r24	; 0x02
	strcpy(buff.esp_buff,buf);
    211a:	b8 01       	movw	r22, r16
    211c:	86 e5       	ldi	r24, 0x56	; 86
    211e:	96 e0       	ldi	r25, 0x06	; 6
    2120:	b6 d0       	rcall	.+364    	; 0x228e <strcpy>
	return buff.esp_buff;
	
}
    2122:	86 e5       	ldi	r24, 0x56	; 86
    2124:	96 e0       	ldi	r25, 0x06	; 6
    2126:	c0 5c       	subi	r28, 0xC0	; 192
    2128:	df 4f       	sbci	r29, 0xFF	; 255
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	1f 91       	pop	r17
    213a:	0f 91       	pop	r16
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
    2144:	08 95       	ret

00002146 <TCP_connect>:

char* TCP_connect(char * ip, char* port)
{//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
    2146:	ef 92       	push	r14
    2148:	ff 92       	push	r15
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	c0 54       	subi	r28, 0x40	; 64
    2158:	d1 09       	sbc	r29, r1
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	9c 01       	movw	r18, r24
    2166:	7b 01       	movw	r14, r22
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    2168:	80 e4       	ldi	r24, 0x40	; 64
    216a:	e6 e5       	ldi	r30, 0x56	; 86
    216c:	f6 e0       	ldi	r31, 0x06	; 6
    216e:	df 01       	movw	r26, r30
    2170:	1d 92       	st	X+, r1
    2172:	8a 95       	dec	r24
    2174:	e9 f7       	brne	.-6      	; 0x2170 <TCP_connect+0x2a>
		
	strcpy(buf,"AT+CIPSTART=\"TCP\",\"");
    2176:	94 e1       	ldi	r25, 0x14	; 20
    2178:	eb eb       	ldi	r30, 0xBB	; 187
    217a:	f4 e0       	ldi	r31, 0x04	; 4
    217c:	8e 01       	movw	r16, r28
    217e:	0f 5f       	subi	r16, 0xFF	; 255
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	d8 01       	movw	r26, r16
    2184:	01 90       	ld	r0, Z+
    2186:	0d 92       	st	X+, r0
    2188:	9a 95       	dec	r25
    218a:	e1 f7       	brne	.-8      	; 0x2184 <TCP_connect+0x3e>
	strcat(buf,ip);
    218c:	b9 01       	movw	r22, r18
    218e:	c8 01       	movw	r24, r16
    2190:	6a d0       	rcall	.+212    	; 0x2266 <strcat>
	strcat(buf,"\",");
    2192:	f8 01       	movw	r30, r16
    2194:	01 90       	ld	r0, Z+
    2196:	00 20       	and	r0, r0
    2198:	e9 f7       	brne	.-6      	; 0x2194 <TCP_connect+0x4e>
    219a:	31 97       	sbiw	r30, 0x01	; 1
    219c:	82 e2       	ldi	r24, 0x22	; 34
    219e:	9c e2       	ldi	r25, 0x2C	; 44
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
    21a4:	12 82       	std	Z+2, r1	; 0x02
	strcat(buf,port);
    21a6:	b7 01       	movw	r22, r14
    21a8:	c8 01       	movw	r24, r16
    21aa:	5d d0       	rcall	.+186    	; 0x2266 <strcat>
	strcat(buf,"\r\n");
    21ac:	f8 01       	movw	r30, r16
    21ae:	01 90       	ld	r0, Z+
    21b0:	00 20       	and	r0, r0
    21b2:	e9 f7       	brne	.-6      	; 0x21ae <TCP_connect+0x68>
    21b4:	31 97       	sbiw	r30, 0x01	; 1
    21b6:	8d e0       	ldi	r24, 0x0D	; 13
    21b8:	9a e0       	ldi	r25, 0x0A	; 10
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
    21be:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
    21c0:	b8 01       	movw	r22, r16
    21c2:	86 e5       	ldi	r24, 0x56	; 86
    21c4:	96 e0       	ldi	r25, 0x06	; 6
    21c6:	63 d0       	rcall	.+198    	; 0x228e <strcpy>
	
	return buff.esp_buff;
	
}
    21c8:	86 e5       	ldi	r24, 0x56	; 86
    21ca:	96 e0       	ldi	r25, 0x06	; 6
    21cc:	c0 5c       	subi	r28, 0xC0	; 192
    21ce:	df 4f       	sbci	r29, 0xFF	; 255
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	1f 91       	pop	r17
    21e0:	0f 91       	pop	r16
    21e2:	ff 90       	pop	r15
    21e4:	ef 90       	pop	r14
    21e6:	08 95       	ret

000021e8 <__udivmodsi4>:
    21e8:	a1 e2       	ldi	r26, 0x21	; 33
    21ea:	1a 2e       	mov	r1, r26
    21ec:	aa 1b       	sub	r26, r26
    21ee:	bb 1b       	sub	r27, r27
    21f0:	fd 01       	movw	r30, r26
    21f2:	0d c0       	rjmp	.+26     	; 0x220e <__udivmodsi4_ep>

000021f4 <__udivmodsi4_loop>:
    21f4:	aa 1f       	adc	r26, r26
    21f6:	bb 1f       	adc	r27, r27
    21f8:	ee 1f       	adc	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	a2 17       	cp	r26, r18
    21fe:	b3 07       	cpc	r27, r19
    2200:	e4 07       	cpc	r30, r20
    2202:	f5 07       	cpc	r31, r21
    2204:	20 f0       	brcs	.+8      	; 0x220e <__udivmodsi4_ep>
    2206:	a2 1b       	sub	r26, r18
    2208:	b3 0b       	sbc	r27, r19
    220a:	e4 0b       	sbc	r30, r20
    220c:	f5 0b       	sbc	r31, r21

0000220e <__udivmodsi4_ep>:
    220e:	66 1f       	adc	r22, r22
    2210:	77 1f       	adc	r23, r23
    2212:	88 1f       	adc	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	1a 94       	dec	r1
    2218:	69 f7       	brne	.-38     	; 0x21f4 <__udivmodsi4_loop>
    221a:	60 95       	com	r22
    221c:	70 95       	com	r23
    221e:	80 95       	com	r24
    2220:	90 95       	com	r25
    2222:	9b 01       	movw	r18, r22
    2224:	ac 01       	movw	r20, r24
    2226:	bd 01       	movw	r22, r26
    2228:	cf 01       	movw	r24, r30
    222a:	08 95       	ret

0000222c <atoi>:
    222c:	fc 01       	movw	r30, r24
    222e:	88 27       	eor	r24, r24
    2230:	99 27       	eor	r25, r25
    2232:	e8 94       	clt
    2234:	21 91       	ld	r18, Z+
    2236:	20 32       	cpi	r18, 0x20	; 32
    2238:	e9 f3       	breq	.-6      	; 0x2234 <atoi+0x8>
    223a:	29 30       	cpi	r18, 0x09	; 9
    223c:	10 f0       	brcs	.+4      	; 0x2242 <atoi+0x16>
    223e:	2e 30       	cpi	r18, 0x0E	; 14
    2240:	c8 f3       	brcs	.-14     	; 0x2234 <atoi+0x8>
    2242:	2b 32       	cpi	r18, 0x2B	; 43
    2244:	39 f0       	breq	.+14     	; 0x2254 <atoi+0x28>
    2246:	2d 32       	cpi	r18, 0x2D	; 45
    2248:	31 f4       	brne	.+12     	; 0x2256 <atoi+0x2a>
    224a:	68 94       	set
    224c:	03 c0       	rjmp	.+6      	; 0x2254 <atoi+0x28>
    224e:	26 d0       	rcall	.+76     	; 0x229c <__mulhi_const_10>
    2250:	82 0f       	add	r24, r18
    2252:	91 1d       	adc	r25, r1
    2254:	21 91       	ld	r18, Z+
    2256:	20 53       	subi	r18, 0x30	; 48
    2258:	2a 30       	cpi	r18, 0x0A	; 10
    225a:	c8 f3       	brcs	.-14     	; 0x224e <atoi+0x22>
    225c:	1e f4       	brtc	.+6      	; 0x2264 <atoi+0x38>
    225e:	90 95       	com	r25
    2260:	81 95       	neg	r24
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	08 95       	ret

00002266 <strcat>:
    2266:	fb 01       	movw	r30, r22
    2268:	dc 01       	movw	r26, r24
    226a:	0d 90       	ld	r0, X+
    226c:	00 20       	and	r0, r0
    226e:	e9 f7       	brne	.-6      	; 0x226a <strcat+0x4>
    2270:	11 97       	sbiw	r26, 0x01	; 1
    2272:	01 90       	ld	r0, Z+
    2274:	0d 92       	st	X+, r0
    2276:	00 20       	and	r0, r0
    2278:	e1 f7       	brne	.-8      	; 0x2272 <strcat+0xc>
    227a:	08 95       	ret

0000227c <strcmp>:
    227c:	fb 01       	movw	r30, r22
    227e:	dc 01       	movw	r26, r24
    2280:	8d 91       	ld	r24, X+
    2282:	01 90       	ld	r0, Z+
    2284:	80 19       	sub	r24, r0
    2286:	01 10       	cpse	r0, r1
    2288:	d9 f3       	breq	.-10     	; 0x2280 <strcmp+0x4>
    228a:	99 0b       	sbc	r25, r25
    228c:	08 95       	ret

0000228e <strcpy>:
    228e:	fb 01       	movw	r30, r22
    2290:	dc 01       	movw	r26, r24
    2292:	01 90       	ld	r0, Z+
    2294:	0d 92       	st	X+, r0
    2296:	00 20       	and	r0, r0
    2298:	e1 f7       	brne	.-8      	; 0x2292 <strcpy+0x4>
    229a:	08 95       	ret

0000229c <__mulhi_const_10>:
    229c:	7a e0       	ldi	r23, 0x0A	; 10
    229e:	97 9f       	mul	r25, r23
    22a0:	90 2d       	mov	r25, r0
    22a2:	87 9f       	mul	r24, r23
    22a4:	80 2d       	mov	r24, r0
    22a6:	91 0d       	add	r25, r1
    22a8:	11 24       	eor	r1, r1
    22aa:	08 95       	ret

000022ac <sprintf>:
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	2e 97       	sbiw	r28, 0x0e	; 14
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	0d 89       	ldd	r16, Y+21	; 0x15
    22c6:	1e 89       	ldd	r17, Y+22	; 0x16
    22c8:	86 e0       	ldi	r24, 0x06	; 6
    22ca:	8c 83       	std	Y+4, r24	; 0x04
    22cc:	1a 83       	std	Y+2, r17	; 0x02
    22ce:	09 83       	std	Y+1, r16	; 0x01
    22d0:	8f ef       	ldi	r24, 0xFF	; 255
    22d2:	9f e7       	ldi	r25, 0x7F	; 127
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
    22d8:	ae 01       	movw	r20, r28
    22da:	47 5e       	subi	r20, 0xE7	; 231
    22dc:	5f 4f       	sbci	r21, 0xFF	; 255
    22de:	6f 89       	ldd	r22, Y+23	; 0x17
    22e0:	78 8d       	ldd	r23, Y+24	; 0x18
    22e2:	ce 01       	movw	r24, r28
    22e4:	01 96       	adiw	r24, 0x01	; 1
    22e6:	10 d0       	rcall	.+32     	; 0x2308 <vfprintf>
    22e8:	ef 81       	ldd	r30, Y+7	; 0x07
    22ea:	f8 85       	ldd	r31, Y+8	; 0x08
    22ec:	e0 0f       	add	r30, r16
    22ee:	f1 1f       	adc	r31, r17
    22f0:	10 82       	st	Z, r1
    22f2:	2e 96       	adiw	r28, 0x0e	; 14
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	08 95       	ret

00002308 <vfprintf>:
    2308:	2f 92       	push	r2
    230a:	3f 92       	push	r3
    230c:	4f 92       	push	r4
    230e:	5f 92       	push	r5
    2310:	6f 92       	push	r6
    2312:	7f 92       	push	r7
    2314:	8f 92       	push	r8
    2316:	9f 92       	push	r9
    2318:	af 92       	push	r10
    231a:	bf 92       	push	r11
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	2b 97       	sbiw	r28, 0x0b	; 11
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	6c 01       	movw	r12, r24
    233e:	7b 01       	movw	r14, r22
    2340:	8a 01       	movw	r16, r20
    2342:	fc 01       	movw	r30, r24
    2344:	17 82       	std	Z+7, r1	; 0x07
    2346:	16 82       	std	Z+6, r1	; 0x06
    2348:	83 81       	ldd	r24, Z+3	; 0x03
    234a:	81 ff       	sbrs	r24, 1
    234c:	bf c1       	rjmp	.+894    	; 0x26cc <vfprintf+0x3c4>
    234e:	ce 01       	movw	r24, r28
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	3c 01       	movw	r6, r24
    2354:	f6 01       	movw	r30, r12
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	f7 01       	movw	r30, r14
    235a:	93 fd       	sbrc	r25, 3
    235c:	85 91       	lpm	r24, Z+
    235e:	93 ff       	sbrs	r25, 3
    2360:	81 91       	ld	r24, Z+
    2362:	7f 01       	movw	r14, r30
    2364:	88 23       	and	r24, r24
    2366:	09 f4       	brne	.+2      	; 0x236a <vfprintf+0x62>
    2368:	ad c1       	rjmp	.+858    	; 0x26c4 <vfprintf+0x3bc>
    236a:	85 32       	cpi	r24, 0x25	; 37
    236c:	39 f4       	brne	.+14     	; 0x237c <vfprintf+0x74>
    236e:	93 fd       	sbrc	r25, 3
    2370:	85 91       	lpm	r24, Z+
    2372:	93 ff       	sbrs	r25, 3
    2374:	81 91       	ld	r24, Z+
    2376:	7f 01       	movw	r14, r30
    2378:	85 32       	cpi	r24, 0x25	; 37
    237a:	21 f4       	brne	.+8      	; 0x2384 <vfprintf+0x7c>
    237c:	b6 01       	movw	r22, r12
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	d6 d1       	rcall	.+940    	; 0x272e <fputc>
    2382:	e8 cf       	rjmp	.-48     	; 0x2354 <vfprintf+0x4c>
    2384:	91 2c       	mov	r9, r1
    2386:	21 2c       	mov	r2, r1
    2388:	31 2c       	mov	r3, r1
    238a:	ff e1       	ldi	r31, 0x1F	; 31
    238c:	f3 15       	cp	r31, r3
    238e:	d8 f0       	brcs	.+54     	; 0x23c6 <vfprintf+0xbe>
    2390:	8b 32       	cpi	r24, 0x2B	; 43
    2392:	79 f0       	breq	.+30     	; 0x23b2 <vfprintf+0xaa>
    2394:	38 f4       	brcc	.+14     	; 0x23a4 <vfprintf+0x9c>
    2396:	80 32       	cpi	r24, 0x20	; 32
    2398:	79 f0       	breq	.+30     	; 0x23b8 <vfprintf+0xb0>
    239a:	83 32       	cpi	r24, 0x23	; 35
    239c:	a1 f4       	brne	.+40     	; 0x23c6 <vfprintf+0xbe>
    239e:	23 2d       	mov	r18, r3
    23a0:	20 61       	ori	r18, 0x10	; 16
    23a2:	1d c0       	rjmp	.+58     	; 0x23de <vfprintf+0xd6>
    23a4:	8d 32       	cpi	r24, 0x2D	; 45
    23a6:	61 f0       	breq	.+24     	; 0x23c0 <vfprintf+0xb8>
    23a8:	80 33       	cpi	r24, 0x30	; 48
    23aa:	69 f4       	brne	.+26     	; 0x23c6 <vfprintf+0xbe>
    23ac:	23 2d       	mov	r18, r3
    23ae:	21 60       	ori	r18, 0x01	; 1
    23b0:	16 c0       	rjmp	.+44     	; 0x23de <vfprintf+0xd6>
    23b2:	83 2d       	mov	r24, r3
    23b4:	82 60       	ori	r24, 0x02	; 2
    23b6:	38 2e       	mov	r3, r24
    23b8:	e3 2d       	mov	r30, r3
    23ba:	e4 60       	ori	r30, 0x04	; 4
    23bc:	3e 2e       	mov	r3, r30
    23be:	2a c0       	rjmp	.+84     	; 0x2414 <vfprintf+0x10c>
    23c0:	f3 2d       	mov	r31, r3
    23c2:	f8 60       	ori	r31, 0x08	; 8
    23c4:	1d c0       	rjmp	.+58     	; 0x2400 <vfprintf+0xf8>
    23c6:	37 fc       	sbrc	r3, 7
    23c8:	2d c0       	rjmp	.+90     	; 0x2424 <vfprintf+0x11c>
    23ca:	20 ed       	ldi	r18, 0xD0	; 208
    23cc:	28 0f       	add	r18, r24
    23ce:	2a 30       	cpi	r18, 0x0A	; 10
    23d0:	40 f0       	brcs	.+16     	; 0x23e2 <vfprintf+0xda>
    23d2:	8e 32       	cpi	r24, 0x2E	; 46
    23d4:	b9 f4       	brne	.+46     	; 0x2404 <vfprintf+0xfc>
    23d6:	36 fc       	sbrc	r3, 6
    23d8:	75 c1       	rjmp	.+746    	; 0x26c4 <vfprintf+0x3bc>
    23da:	23 2d       	mov	r18, r3
    23dc:	20 64       	ori	r18, 0x40	; 64
    23de:	32 2e       	mov	r3, r18
    23e0:	19 c0       	rjmp	.+50     	; 0x2414 <vfprintf+0x10c>
    23e2:	36 fe       	sbrs	r3, 6
    23e4:	06 c0       	rjmp	.+12     	; 0x23f2 <vfprintf+0xea>
    23e6:	8a e0       	ldi	r24, 0x0A	; 10
    23e8:	98 9e       	mul	r9, r24
    23ea:	20 0d       	add	r18, r0
    23ec:	11 24       	eor	r1, r1
    23ee:	92 2e       	mov	r9, r18
    23f0:	11 c0       	rjmp	.+34     	; 0x2414 <vfprintf+0x10c>
    23f2:	ea e0       	ldi	r30, 0x0A	; 10
    23f4:	2e 9e       	mul	r2, r30
    23f6:	20 0d       	add	r18, r0
    23f8:	11 24       	eor	r1, r1
    23fa:	22 2e       	mov	r2, r18
    23fc:	f3 2d       	mov	r31, r3
    23fe:	f0 62       	ori	r31, 0x20	; 32
    2400:	3f 2e       	mov	r3, r31
    2402:	08 c0       	rjmp	.+16     	; 0x2414 <vfprintf+0x10c>
    2404:	8c 36       	cpi	r24, 0x6C	; 108
    2406:	21 f4       	brne	.+8      	; 0x2410 <vfprintf+0x108>
    2408:	83 2d       	mov	r24, r3
    240a:	80 68       	ori	r24, 0x80	; 128
    240c:	38 2e       	mov	r3, r24
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <vfprintf+0x10c>
    2410:	88 36       	cpi	r24, 0x68	; 104
    2412:	41 f4       	brne	.+16     	; 0x2424 <vfprintf+0x11c>
    2414:	f7 01       	movw	r30, r14
    2416:	93 fd       	sbrc	r25, 3
    2418:	85 91       	lpm	r24, Z+
    241a:	93 ff       	sbrs	r25, 3
    241c:	81 91       	ld	r24, Z+
    241e:	7f 01       	movw	r14, r30
    2420:	81 11       	cpse	r24, r1
    2422:	b3 cf       	rjmp	.-154    	; 0x238a <vfprintf+0x82>
    2424:	98 2f       	mov	r25, r24
    2426:	9f 7d       	andi	r25, 0xDF	; 223
    2428:	95 54       	subi	r25, 0x45	; 69
    242a:	93 30       	cpi	r25, 0x03	; 3
    242c:	28 f4       	brcc	.+10     	; 0x2438 <vfprintf+0x130>
    242e:	0c 5f       	subi	r16, 0xFC	; 252
    2430:	1f 4f       	sbci	r17, 0xFF	; 255
    2432:	9f e3       	ldi	r25, 0x3F	; 63
    2434:	99 83       	std	Y+1, r25	; 0x01
    2436:	0d c0       	rjmp	.+26     	; 0x2452 <vfprintf+0x14a>
    2438:	83 36       	cpi	r24, 0x63	; 99
    243a:	31 f0       	breq	.+12     	; 0x2448 <vfprintf+0x140>
    243c:	83 37       	cpi	r24, 0x73	; 115
    243e:	71 f0       	breq	.+28     	; 0x245c <vfprintf+0x154>
    2440:	83 35       	cpi	r24, 0x53	; 83
    2442:	09 f0       	breq	.+2      	; 0x2446 <vfprintf+0x13e>
    2444:	55 c0       	rjmp	.+170    	; 0x24f0 <vfprintf+0x1e8>
    2446:	20 c0       	rjmp	.+64     	; 0x2488 <vfprintf+0x180>
    2448:	f8 01       	movw	r30, r16
    244a:	80 81       	ld	r24, Z
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	0e 5f       	subi	r16, 0xFE	; 254
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	88 24       	eor	r8, r8
    2454:	83 94       	inc	r8
    2456:	91 2c       	mov	r9, r1
    2458:	53 01       	movw	r10, r6
    245a:	12 c0       	rjmp	.+36     	; 0x2480 <vfprintf+0x178>
    245c:	28 01       	movw	r4, r16
    245e:	f2 e0       	ldi	r31, 0x02	; 2
    2460:	4f 0e       	add	r4, r31
    2462:	51 1c       	adc	r5, r1
    2464:	f8 01       	movw	r30, r16
    2466:	a0 80       	ld	r10, Z
    2468:	b1 80       	ldd	r11, Z+1	; 0x01
    246a:	36 fe       	sbrs	r3, 6
    246c:	03 c0       	rjmp	.+6      	; 0x2474 <vfprintf+0x16c>
    246e:	69 2d       	mov	r22, r9
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <vfprintf+0x170>
    2474:	6f ef       	ldi	r22, 0xFF	; 255
    2476:	7f ef       	ldi	r23, 0xFF	; 255
    2478:	c5 01       	movw	r24, r10
    247a:	4e d1       	rcall	.+668    	; 0x2718 <strnlen>
    247c:	4c 01       	movw	r8, r24
    247e:	82 01       	movw	r16, r4
    2480:	f3 2d       	mov	r31, r3
    2482:	ff 77       	andi	r31, 0x7F	; 127
    2484:	3f 2e       	mov	r3, r31
    2486:	15 c0       	rjmp	.+42     	; 0x24b2 <vfprintf+0x1aa>
    2488:	28 01       	movw	r4, r16
    248a:	22 e0       	ldi	r18, 0x02	; 2
    248c:	42 0e       	add	r4, r18
    248e:	51 1c       	adc	r5, r1
    2490:	f8 01       	movw	r30, r16
    2492:	a0 80       	ld	r10, Z
    2494:	b1 80       	ldd	r11, Z+1	; 0x01
    2496:	36 fe       	sbrs	r3, 6
    2498:	03 c0       	rjmp	.+6      	; 0x24a0 <vfprintf+0x198>
    249a:	69 2d       	mov	r22, r9
    249c:	70 e0       	ldi	r23, 0x00	; 0
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <vfprintf+0x19c>
    24a0:	6f ef       	ldi	r22, 0xFF	; 255
    24a2:	7f ef       	ldi	r23, 0xFF	; 255
    24a4:	c5 01       	movw	r24, r10
    24a6:	2d d1       	rcall	.+602    	; 0x2702 <strnlen_P>
    24a8:	4c 01       	movw	r8, r24
    24aa:	f3 2d       	mov	r31, r3
    24ac:	f0 68       	ori	r31, 0x80	; 128
    24ae:	3f 2e       	mov	r3, r31
    24b0:	82 01       	movw	r16, r4
    24b2:	33 fc       	sbrc	r3, 3
    24b4:	19 c0       	rjmp	.+50     	; 0x24e8 <vfprintf+0x1e0>
    24b6:	82 2d       	mov	r24, r2
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	88 16       	cp	r8, r24
    24bc:	99 06       	cpc	r9, r25
    24be:	a0 f4       	brcc	.+40     	; 0x24e8 <vfprintf+0x1e0>
    24c0:	b6 01       	movw	r22, r12
    24c2:	80 e2       	ldi	r24, 0x20	; 32
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	33 d1       	rcall	.+614    	; 0x272e <fputc>
    24c8:	2a 94       	dec	r2
    24ca:	f5 cf       	rjmp	.-22     	; 0x24b6 <vfprintf+0x1ae>
    24cc:	f5 01       	movw	r30, r10
    24ce:	37 fc       	sbrc	r3, 7
    24d0:	85 91       	lpm	r24, Z+
    24d2:	37 fe       	sbrs	r3, 7
    24d4:	81 91       	ld	r24, Z+
    24d6:	5f 01       	movw	r10, r30
    24d8:	b6 01       	movw	r22, r12
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	28 d1       	rcall	.+592    	; 0x272e <fputc>
    24de:	21 10       	cpse	r2, r1
    24e0:	2a 94       	dec	r2
    24e2:	21 e0       	ldi	r18, 0x01	; 1
    24e4:	82 1a       	sub	r8, r18
    24e6:	91 08       	sbc	r9, r1
    24e8:	81 14       	cp	r8, r1
    24ea:	91 04       	cpc	r9, r1
    24ec:	79 f7       	brne	.-34     	; 0x24cc <vfprintf+0x1c4>
    24ee:	e1 c0       	rjmp	.+450    	; 0x26b2 <vfprintf+0x3aa>
    24f0:	84 36       	cpi	r24, 0x64	; 100
    24f2:	11 f0       	breq	.+4      	; 0x24f8 <vfprintf+0x1f0>
    24f4:	89 36       	cpi	r24, 0x69	; 105
    24f6:	39 f5       	brne	.+78     	; 0x2546 <vfprintf+0x23e>
    24f8:	f8 01       	movw	r30, r16
    24fa:	37 fe       	sbrs	r3, 7
    24fc:	07 c0       	rjmp	.+14     	; 0x250c <vfprintf+0x204>
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	0c 5f       	subi	r16, 0xFC	; 252
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	08 c0       	rjmp	.+16     	; 0x251c <vfprintf+0x214>
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	07 2e       	mov	r0, r23
    2512:	00 0c       	add	r0, r0
    2514:	88 0b       	sbc	r24, r24
    2516:	99 0b       	sbc	r25, r25
    2518:	0e 5f       	subi	r16, 0xFE	; 254
    251a:	1f 4f       	sbci	r17, 0xFF	; 255
    251c:	f3 2d       	mov	r31, r3
    251e:	ff 76       	andi	r31, 0x6F	; 111
    2520:	3f 2e       	mov	r3, r31
    2522:	97 ff       	sbrs	r25, 7
    2524:	09 c0       	rjmp	.+18     	; 0x2538 <vfprintf+0x230>
    2526:	90 95       	com	r25
    2528:	80 95       	com	r24
    252a:	70 95       	com	r23
    252c:	61 95       	neg	r22
    252e:	7f 4f       	sbci	r23, 0xFF	; 255
    2530:	8f 4f       	sbci	r24, 0xFF	; 255
    2532:	9f 4f       	sbci	r25, 0xFF	; 255
    2534:	f0 68       	ori	r31, 0x80	; 128
    2536:	3f 2e       	mov	r3, r31
    2538:	2a e0       	ldi	r18, 0x0A	; 10
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	a3 01       	movw	r20, r6
    253e:	33 d1       	rcall	.+614    	; 0x27a6 <__ultoa_invert>
    2540:	88 2e       	mov	r8, r24
    2542:	86 18       	sub	r8, r6
    2544:	44 c0       	rjmp	.+136    	; 0x25ce <vfprintf+0x2c6>
    2546:	85 37       	cpi	r24, 0x75	; 117
    2548:	31 f4       	brne	.+12     	; 0x2556 <vfprintf+0x24e>
    254a:	23 2d       	mov	r18, r3
    254c:	2f 7e       	andi	r18, 0xEF	; 239
    254e:	b2 2e       	mov	r11, r18
    2550:	2a e0       	ldi	r18, 0x0A	; 10
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	25 c0       	rjmp	.+74     	; 0x25a0 <vfprintf+0x298>
    2556:	93 2d       	mov	r25, r3
    2558:	99 7f       	andi	r25, 0xF9	; 249
    255a:	b9 2e       	mov	r11, r25
    255c:	8f 36       	cpi	r24, 0x6F	; 111
    255e:	c1 f0       	breq	.+48     	; 0x2590 <vfprintf+0x288>
    2560:	18 f4       	brcc	.+6      	; 0x2568 <vfprintf+0x260>
    2562:	88 35       	cpi	r24, 0x58	; 88
    2564:	79 f0       	breq	.+30     	; 0x2584 <vfprintf+0x27c>
    2566:	ae c0       	rjmp	.+348    	; 0x26c4 <vfprintf+0x3bc>
    2568:	80 37       	cpi	r24, 0x70	; 112
    256a:	19 f0       	breq	.+6      	; 0x2572 <vfprintf+0x26a>
    256c:	88 37       	cpi	r24, 0x78	; 120
    256e:	21 f0       	breq	.+8      	; 0x2578 <vfprintf+0x270>
    2570:	a9 c0       	rjmp	.+338    	; 0x26c4 <vfprintf+0x3bc>
    2572:	e9 2f       	mov	r30, r25
    2574:	e0 61       	ori	r30, 0x10	; 16
    2576:	be 2e       	mov	r11, r30
    2578:	b4 fe       	sbrs	r11, 4
    257a:	0d c0       	rjmp	.+26     	; 0x2596 <vfprintf+0x28e>
    257c:	fb 2d       	mov	r31, r11
    257e:	f4 60       	ori	r31, 0x04	; 4
    2580:	bf 2e       	mov	r11, r31
    2582:	09 c0       	rjmp	.+18     	; 0x2596 <vfprintf+0x28e>
    2584:	34 fe       	sbrs	r3, 4
    2586:	0a c0       	rjmp	.+20     	; 0x259c <vfprintf+0x294>
    2588:	29 2f       	mov	r18, r25
    258a:	26 60       	ori	r18, 0x06	; 6
    258c:	b2 2e       	mov	r11, r18
    258e:	06 c0       	rjmp	.+12     	; 0x259c <vfprintf+0x294>
    2590:	28 e0       	ldi	r18, 0x08	; 8
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	05 c0       	rjmp	.+10     	; 0x25a0 <vfprintf+0x298>
    2596:	20 e1       	ldi	r18, 0x10	; 16
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <vfprintf+0x298>
    259c:	20 e1       	ldi	r18, 0x10	; 16
    259e:	32 e0       	ldi	r19, 0x02	; 2
    25a0:	f8 01       	movw	r30, r16
    25a2:	b7 fe       	sbrs	r11, 7
    25a4:	07 c0       	rjmp	.+14     	; 0x25b4 <vfprintf+0x2ac>
    25a6:	60 81       	ld	r22, Z
    25a8:	71 81       	ldd	r23, Z+1	; 0x01
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	0c 5f       	subi	r16, 0xFC	; 252
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	06 c0       	rjmp	.+12     	; 0x25c0 <vfprintf+0x2b8>
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 5f       	subi	r16, 0xFE	; 254
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	a3 01       	movw	r20, r6
    25c2:	f1 d0       	rcall	.+482    	; 0x27a6 <__ultoa_invert>
    25c4:	88 2e       	mov	r8, r24
    25c6:	86 18       	sub	r8, r6
    25c8:	fb 2d       	mov	r31, r11
    25ca:	ff 77       	andi	r31, 0x7F	; 127
    25cc:	3f 2e       	mov	r3, r31
    25ce:	36 fe       	sbrs	r3, 6
    25d0:	0d c0       	rjmp	.+26     	; 0x25ec <vfprintf+0x2e4>
    25d2:	23 2d       	mov	r18, r3
    25d4:	2e 7f       	andi	r18, 0xFE	; 254
    25d6:	a2 2e       	mov	r10, r18
    25d8:	89 14       	cp	r8, r9
    25da:	58 f4       	brcc	.+22     	; 0x25f2 <vfprintf+0x2ea>
    25dc:	34 fe       	sbrs	r3, 4
    25de:	0b c0       	rjmp	.+22     	; 0x25f6 <vfprintf+0x2ee>
    25e0:	32 fc       	sbrc	r3, 2
    25e2:	09 c0       	rjmp	.+18     	; 0x25f6 <vfprintf+0x2ee>
    25e4:	83 2d       	mov	r24, r3
    25e6:	8e 7e       	andi	r24, 0xEE	; 238
    25e8:	a8 2e       	mov	r10, r24
    25ea:	05 c0       	rjmp	.+10     	; 0x25f6 <vfprintf+0x2ee>
    25ec:	b8 2c       	mov	r11, r8
    25ee:	a3 2c       	mov	r10, r3
    25f0:	03 c0       	rjmp	.+6      	; 0x25f8 <vfprintf+0x2f0>
    25f2:	b8 2c       	mov	r11, r8
    25f4:	01 c0       	rjmp	.+2      	; 0x25f8 <vfprintf+0x2f0>
    25f6:	b9 2c       	mov	r11, r9
    25f8:	a4 fe       	sbrs	r10, 4
    25fa:	0f c0       	rjmp	.+30     	; 0x261a <vfprintf+0x312>
    25fc:	fe 01       	movw	r30, r28
    25fe:	e8 0d       	add	r30, r8
    2600:	f1 1d       	adc	r31, r1
    2602:	80 81       	ld	r24, Z
    2604:	80 33       	cpi	r24, 0x30	; 48
    2606:	21 f4       	brne	.+8      	; 0x2610 <vfprintf+0x308>
    2608:	9a 2d       	mov	r25, r10
    260a:	99 7e       	andi	r25, 0xE9	; 233
    260c:	a9 2e       	mov	r10, r25
    260e:	09 c0       	rjmp	.+18     	; 0x2622 <vfprintf+0x31a>
    2610:	a2 fe       	sbrs	r10, 2
    2612:	06 c0       	rjmp	.+12     	; 0x2620 <vfprintf+0x318>
    2614:	b3 94       	inc	r11
    2616:	b3 94       	inc	r11
    2618:	04 c0       	rjmp	.+8      	; 0x2622 <vfprintf+0x31a>
    261a:	8a 2d       	mov	r24, r10
    261c:	86 78       	andi	r24, 0x86	; 134
    261e:	09 f0       	breq	.+2      	; 0x2622 <vfprintf+0x31a>
    2620:	b3 94       	inc	r11
    2622:	a3 fc       	sbrc	r10, 3
    2624:	10 c0       	rjmp	.+32     	; 0x2646 <vfprintf+0x33e>
    2626:	a0 fe       	sbrs	r10, 0
    2628:	06 c0       	rjmp	.+12     	; 0x2636 <vfprintf+0x32e>
    262a:	b2 14       	cp	r11, r2
    262c:	80 f4       	brcc	.+32     	; 0x264e <vfprintf+0x346>
    262e:	28 0c       	add	r2, r8
    2630:	92 2c       	mov	r9, r2
    2632:	9b 18       	sub	r9, r11
    2634:	0d c0       	rjmp	.+26     	; 0x2650 <vfprintf+0x348>
    2636:	b2 14       	cp	r11, r2
    2638:	58 f4       	brcc	.+22     	; 0x2650 <vfprintf+0x348>
    263a:	b6 01       	movw	r22, r12
    263c:	80 e2       	ldi	r24, 0x20	; 32
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	76 d0       	rcall	.+236    	; 0x272e <fputc>
    2642:	b3 94       	inc	r11
    2644:	f8 cf       	rjmp	.-16     	; 0x2636 <vfprintf+0x32e>
    2646:	b2 14       	cp	r11, r2
    2648:	18 f4       	brcc	.+6      	; 0x2650 <vfprintf+0x348>
    264a:	2b 18       	sub	r2, r11
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <vfprintf+0x34a>
    264e:	98 2c       	mov	r9, r8
    2650:	21 2c       	mov	r2, r1
    2652:	a4 fe       	sbrs	r10, 4
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <vfprintf+0x36c>
    2656:	b6 01       	movw	r22, r12
    2658:	80 e3       	ldi	r24, 0x30	; 48
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	68 d0       	rcall	.+208    	; 0x272e <fputc>
    265e:	a2 fe       	sbrs	r10, 2
    2660:	16 c0       	rjmp	.+44     	; 0x268e <vfprintf+0x386>
    2662:	a1 fc       	sbrc	r10, 1
    2664:	03 c0       	rjmp	.+6      	; 0x266c <vfprintf+0x364>
    2666:	88 e7       	ldi	r24, 0x78	; 120
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <vfprintf+0x368>
    266c:	88 e5       	ldi	r24, 0x58	; 88
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	b6 01       	movw	r22, r12
    2672:	0c c0       	rjmp	.+24     	; 0x268c <vfprintf+0x384>
    2674:	8a 2d       	mov	r24, r10
    2676:	86 78       	andi	r24, 0x86	; 134
    2678:	51 f0       	breq	.+20     	; 0x268e <vfprintf+0x386>
    267a:	a1 fe       	sbrs	r10, 1
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <vfprintf+0x37a>
    267e:	8b e2       	ldi	r24, 0x2B	; 43
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <vfprintf+0x37c>
    2682:	80 e2       	ldi	r24, 0x20	; 32
    2684:	a7 fc       	sbrc	r10, 7
    2686:	8d e2       	ldi	r24, 0x2D	; 45
    2688:	b6 01       	movw	r22, r12
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	50 d0       	rcall	.+160    	; 0x272e <fputc>
    268e:	89 14       	cp	r8, r9
    2690:	30 f4       	brcc	.+12     	; 0x269e <vfprintf+0x396>
    2692:	b6 01       	movw	r22, r12
    2694:	80 e3       	ldi	r24, 0x30	; 48
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	4a d0       	rcall	.+148    	; 0x272e <fputc>
    269a:	9a 94       	dec	r9
    269c:	f8 cf       	rjmp	.-16     	; 0x268e <vfprintf+0x386>
    269e:	8a 94       	dec	r8
    26a0:	f3 01       	movw	r30, r6
    26a2:	e8 0d       	add	r30, r8
    26a4:	f1 1d       	adc	r31, r1
    26a6:	80 81       	ld	r24, Z
    26a8:	b6 01       	movw	r22, r12
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	40 d0       	rcall	.+128    	; 0x272e <fputc>
    26ae:	81 10       	cpse	r8, r1
    26b0:	f6 cf       	rjmp	.-20     	; 0x269e <vfprintf+0x396>
    26b2:	22 20       	and	r2, r2
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <vfprintf+0x3b0>
    26b6:	4e ce       	rjmp	.-868    	; 0x2354 <vfprintf+0x4c>
    26b8:	b6 01       	movw	r22, r12
    26ba:	80 e2       	ldi	r24, 0x20	; 32
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	37 d0       	rcall	.+110    	; 0x272e <fputc>
    26c0:	2a 94       	dec	r2
    26c2:	f7 cf       	rjmp	.-18     	; 0x26b2 <vfprintf+0x3aa>
    26c4:	f6 01       	movw	r30, r12
    26c6:	86 81       	ldd	r24, Z+6	; 0x06
    26c8:	97 81       	ldd	r25, Z+7	; 0x07
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <vfprintf+0x3c8>
    26cc:	8f ef       	ldi	r24, 0xFF	; 255
    26ce:	9f ef       	ldi	r25, 0xFF	; 255
    26d0:	2b 96       	adiw	r28, 0x0b	; 11
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	ff 90       	pop	r15
    26e6:	ef 90       	pop	r14
    26e8:	df 90       	pop	r13
    26ea:	cf 90       	pop	r12
    26ec:	bf 90       	pop	r11
    26ee:	af 90       	pop	r10
    26f0:	9f 90       	pop	r9
    26f2:	8f 90       	pop	r8
    26f4:	7f 90       	pop	r7
    26f6:	6f 90       	pop	r6
    26f8:	5f 90       	pop	r5
    26fa:	4f 90       	pop	r4
    26fc:	3f 90       	pop	r3
    26fe:	2f 90       	pop	r2
    2700:	08 95       	ret

00002702 <strnlen_P>:
    2702:	fc 01       	movw	r30, r24
    2704:	05 90       	lpm	r0, Z+
    2706:	61 50       	subi	r22, 0x01	; 1
    2708:	70 40       	sbci	r23, 0x00	; 0
    270a:	01 10       	cpse	r0, r1
    270c:	d8 f7       	brcc	.-10     	; 0x2704 <strnlen_P+0x2>
    270e:	80 95       	com	r24
    2710:	90 95       	com	r25
    2712:	8e 0f       	add	r24, r30
    2714:	9f 1f       	adc	r25, r31
    2716:	08 95       	ret

00002718 <strnlen>:
    2718:	fc 01       	movw	r30, r24
    271a:	61 50       	subi	r22, 0x01	; 1
    271c:	70 40       	sbci	r23, 0x00	; 0
    271e:	01 90       	ld	r0, Z+
    2720:	01 10       	cpse	r0, r1
    2722:	d8 f7       	brcc	.-10     	; 0x271a <strnlen+0x2>
    2724:	80 95       	com	r24
    2726:	90 95       	com	r25
    2728:	8e 0f       	add	r24, r30
    272a:	9f 1f       	adc	r25, r31
    272c:	08 95       	ret

0000272e <fputc>:
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	fb 01       	movw	r30, r22
    2738:	23 81       	ldd	r18, Z+3	; 0x03
    273a:	21 fd       	sbrc	r18, 1
    273c:	03 c0       	rjmp	.+6      	; 0x2744 <fputc+0x16>
    273e:	8f ef       	ldi	r24, 0xFF	; 255
    2740:	9f ef       	ldi	r25, 0xFF	; 255
    2742:	2c c0       	rjmp	.+88     	; 0x279c <fputc+0x6e>
    2744:	22 ff       	sbrs	r18, 2
    2746:	16 c0       	rjmp	.+44     	; 0x2774 <fputc+0x46>
    2748:	46 81       	ldd	r20, Z+6	; 0x06
    274a:	57 81       	ldd	r21, Z+7	; 0x07
    274c:	24 81       	ldd	r18, Z+4	; 0x04
    274e:	35 81       	ldd	r19, Z+5	; 0x05
    2750:	42 17       	cp	r20, r18
    2752:	53 07       	cpc	r21, r19
    2754:	44 f4       	brge	.+16     	; 0x2766 <fputc+0x38>
    2756:	a0 81       	ld	r26, Z
    2758:	b1 81       	ldd	r27, Z+1	; 0x01
    275a:	9d 01       	movw	r18, r26
    275c:	2f 5f       	subi	r18, 0xFF	; 255
    275e:	3f 4f       	sbci	r19, 0xFF	; 255
    2760:	31 83       	std	Z+1, r19	; 0x01
    2762:	20 83       	st	Z, r18
    2764:	8c 93       	st	X, r24
    2766:	26 81       	ldd	r18, Z+6	; 0x06
    2768:	37 81       	ldd	r19, Z+7	; 0x07
    276a:	2f 5f       	subi	r18, 0xFF	; 255
    276c:	3f 4f       	sbci	r19, 0xFF	; 255
    276e:	37 83       	std	Z+7, r19	; 0x07
    2770:	26 83       	std	Z+6, r18	; 0x06
    2772:	14 c0       	rjmp	.+40     	; 0x279c <fputc+0x6e>
    2774:	8b 01       	movw	r16, r22
    2776:	ec 01       	movw	r28, r24
    2778:	fb 01       	movw	r30, r22
    277a:	00 84       	ldd	r0, Z+8	; 0x08
    277c:	f1 85       	ldd	r31, Z+9	; 0x09
    277e:	e0 2d       	mov	r30, r0
    2780:	09 95       	icall
    2782:	89 2b       	or	r24, r25
    2784:	e1 f6       	brne	.-72     	; 0x273e <fputc+0x10>
    2786:	d8 01       	movw	r26, r16
    2788:	16 96       	adiw	r26, 0x06	; 6
    278a:	8d 91       	ld	r24, X+
    278c:	9c 91       	ld	r25, X
    278e:	17 97       	sbiw	r26, 0x07	; 7
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	17 96       	adiw	r26, 0x07	; 7
    2794:	9c 93       	st	X, r25
    2796:	8e 93       	st	-X, r24
    2798:	16 97       	sbiw	r26, 0x06	; 6
    279a:	ce 01       	movw	r24, r28
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <__ultoa_invert>:
    27a6:	fa 01       	movw	r30, r20
    27a8:	aa 27       	eor	r26, r26
    27aa:	28 30       	cpi	r18, 0x08	; 8
    27ac:	51 f1       	breq	.+84     	; 0x2802 <__ultoa_invert+0x5c>
    27ae:	20 31       	cpi	r18, 0x10	; 16
    27b0:	81 f1       	breq	.+96     	; 0x2812 <__ultoa_invert+0x6c>
    27b2:	e8 94       	clt
    27b4:	6f 93       	push	r22
    27b6:	6e 7f       	andi	r22, 0xFE	; 254
    27b8:	6e 5f       	subi	r22, 0xFE	; 254
    27ba:	7f 4f       	sbci	r23, 0xFF	; 255
    27bc:	8f 4f       	sbci	r24, 0xFF	; 255
    27be:	9f 4f       	sbci	r25, 0xFF	; 255
    27c0:	af 4f       	sbci	r26, 0xFF	; 255
    27c2:	b1 e0       	ldi	r27, 0x01	; 1
    27c4:	3e d0       	rcall	.+124    	; 0x2842 <__ultoa_invert+0x9c>
    27c6:	b4 e0       	ldi	r27, 0x04	; 4
    27c8:	3c d0       	rcall	.+120    	; 0x2842 <__ultoa_invert+0x9c>
    27ca:	67 0f       	add	r22, r23
    27cc:	78 1f       	adc	r23, r24
    27ce:	89 1f       	adc	r24, r25
    27d0:	9a 1f       	adc	r25, r26
    27d2:	a1 1d       	adc	r26, r1
    27d4:	68 0f       	add	r22, r24
    27d6:	79 1f       	adc	r23, r25
    27d8:	8a 1f       	adc	r24, r26
    27da:	91 1d       	adc	r25, r1
    27dc:	a1 1d       	adc	r26, r1
    27de:	6a 0f       	add	r22, r26
    27e0:	71 1d       	adc	r23, r1
    27e2:	81 1d       	adc	r24, r1
    27e4:	91 1d       	adc	r25, r1
    27e6:	a1 1d       	adc	r26, r1
    27e8:	20 d0       	rcall	.+64     	; 0x282a <__ultoa_invert+0x84>
    27ea:	09 f4       	brne	.+2      	; 0x27ee <__ultoa_invert+0x48>
    27ec:	68 94       	set
    27ee:	3f 91       	pop	r19
    27f0:	2a e0       	ldi	r18, 0x0A	; 10
    27f2:	26 9f       	mul	r18, r22
    27f4:	11 24       	eor	r1, r1
    27f6:	30 19       	sub	r19, r0
    27f8:	30 5d       	subi	r19, 0xD0	; 208
    27fa:	31 93       	st	Z+, r19
    27fc:	de f6       	brtc	.-74     	; 0x27b4 <__ultoa_invert+0xe>
    27fe:	cf 01       	movw	r24, r30
    2800:	08 95       	ret
    2802:	46 2f       	mov	r20, r22
    2804:	47 70       	andi	r20, 0x07	; 7
    2806:	40 5d       	subi	r20, 0xD0	; 208
    2808:	41 93       	st	Z+, r20
    280a:	b3 e0       	ldi	r27, 0x03	; 3
    280c:	0f d0       	rcall	.+30     	; 0x282c <__ultoa_invert+0x86>
    280e:	c9 f7       	brne	.-14     	; 0x2802 <__ultoa_invert+0x5c>
    2810:	f6 cf       	rjmp	.-20     	; 0x27fe <__ultoa_invert+0x58>
    2812:	46 2f       	mov	r20, r22
    2814:	4f 70       	andi	r20, 0x0F	; 15
    2816:	40 5d       	subi	r20, 0xD0	; 208
    2818:	4a 33       	cpi	r20, 0x3A	; 58
    281a:	18 f0       	brcs	.+6      	; 0x2822 <__ultoa_invert+0x7c>
    281c:	49 5d       	subi	r20, 0xD9	; 217
    281e:	31 fd       	sbrc	r19, 1
    2820:	40 52       	subi	r20, 0x20	; 32
    2822:	41 93       	st	Z+, r20
    2824:	02 d0       	rcall	.+4      	; 0x282a <__ultoa_invert+0x84>
    2826:	a9 f7       	brne	.-22     	; 0x2812 <__ultoa_invert+0x6c>
    2828:	ea cf       	rjmp	.-44     	; 0x27fe <__ultoa_invert+0x58>
    282a:	b4 e0       	ldi	r27, 0x04	; 4
    282c:	a6 95       	lsr	r26
    282e:	97 95       	ror	r25
    2830:	87 95       	ror	r24
    2832:	77 95       	ror	r23
    2834:	67 95       	ror	r22
    2836:	ba 95       	dec	r27
    2838:	c9 f7       	brne	.-14     	; 0x282c <__ultoa_invert+0x86>
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	61 05       	cpc	r22, r1
    283e:	71 05       	cpc	r23, r1
    2840:	08 95       	ret
    2842:	9b 01       	movw	r18, r22
    2844:	ac 01       	movw	r20, r24
    2846:	0a 2e       	mov	r0, r26
    2848:	06 94       	lsr	r0
    284a:	57 95       	ror	r21
    284c:	47 95       	ror	r20
    284e:	37 95       	ror	r19
    2850:	27 95       	ror	r18
    2852:	ba 95       	dec	r27
    2854:	c9 f7       	brne	.-14     	; 0x2848 <__ultoa_invert+0xa2>
    2856:	62 0f       	add	r22, r18
    2858:	73 1f       	adc	r23, r19
    285a:	84 1f       	adc	r24, r20
    285c:	95 1f       	adc	r25, r21
    285e:	a0 1d       	adc	r26, r0
    2860:	08 95       	ret

00002862 <_exit>:
    2862:	f8 94       	cli

00002864 <__stop_program>:
    2864:	ff cf       	rjmp	.-2      	; 0x2864 <__stop_program>
