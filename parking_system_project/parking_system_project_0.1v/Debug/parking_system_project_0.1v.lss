
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ca  00800100  00002842  000028d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002842  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000024c  008004ca  008004ca  00002ca0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002ca0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005231  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001404  00000000  00000000  000082ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026ef  00000000  00000000  000096b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a3c  00000000  00000000  0000bda0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fb9  00000000  00000000  0000c7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003309  00000000  00000000  0000d795  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  00010a9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c0       	rjmp	.+146    	; 0xcc <__vector_14>
      3a:	00 00       	nop
      3c:	03 c5       	rjmp	.+2566   	; 0xa44 <__vector_15>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	8f c0       	rjmp	.+286    	; 0x168 <__vector_18>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	86 c0       	rjmp	.+268    	; 0x186 <__vector_30>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e4       	ldi	r30, 0x42	; 66
      a0:	f8 e2       	ldi	r31, 0x28	; 40
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3c       	cpi	r26, 0xCA	; 202
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	aa ec       	ldi	r26, 0xCA	; 202
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 31       	cpi	r26, 0x16	; 22
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 37 0a 	call	0x146e	; 0x146e <main>
      c6:	0c 94 1f 14 	jmp	0x283e	; 0x283e <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_14>:
}

void servo_release(int ch) {
	
	 	if(ch==SERVO_ENTRANCE_GATE) {servo_1_duty_ratio=0; }//PORTA&=~(1<<PORTA0);
	 	else if(ch==SERVO_EXIT_GATE){servo_2_duty_ratio=0;} //PORTA&=~(1<<PORTA3);
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	2f 93       	push	r18
      d8:	3f 93       	push	r19
      da:	4f 93       	push	r20
      dc:	8f 93       	push	r24
      de:	9f 93       	push	r25
      e0:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <servo_count>
      e4:	84 36       	cpi	r24, 0x64	; 100
      e6:	d9 f4       	brne	.+54     	; 0x11e <__vector_14+0x52>
      e8:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <servo_1_duty_ratio>
      ec:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <servo_1_duty_ratio+0x1>
      f0:	31 e0       	ldi	r19, 0x01	; 1
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	89 2b       	or	r24, r25
      f6:	09 f4       	brne	.+2      	; 0xfa <__vector_14+0x2e>
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	83 2f       	mov	r24, r19
      fc:	92 2f       	mov	r25, r18
      fe:	20 91 f4 06 	lds	r18, 0x06F4	; 0x8006f4 <servo_2_duty_ratio>
     102:	30 91 f5 06 	lds	r19, 0x06F5	; 0x8006f5 <servo_2_duty_ratio+0x1>
     106:	21 15       	cp	r18, r1
     108:	31 05       	cpc	r19, r1
     10a:	11 f0       	breq	.+4      	; 0x110 <__vector_14+0x44>
     10c:	28 e0       	ldi	r18, 0x08	; 8
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	4b b3       	in	r20, 0x1b	; 27
     112:	82 2b       	or	r24, r18
     114:	93 2b       	or	r25, r19
     116:	84 2b       	or	r24, r20
     118:	8b bb       	out	0x1b, r24	; 27
     11a:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <servo_count>
     11e:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <servo_count>
     122:	20 91 e4 05 	lds	r18, 0x05E4	; 0x8005e4 <servo_1_duty_ratio>
     126:	30 91 e5 05 	lds	r19, 0x05E5	; 0x8005e5 <servo_1_duty_ratio+0x1>
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	82 17       	cp	r24, r18
     12e:	93 07       	cpc	r25, r19
     130:	09 f4       	brne	.+2      	; 0x134 <__vector_14+0x68>
     132:	d8 98       	cbi	0x1b, 0	; 27
     134:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <servo_count>
     138:	20 91 f4 06 	lds	r18, 0x06F4	; 0x8006f4 <servo_2_duty_ratio>
     13c:	30 91 f5 06 	lds	r19, 0x06F5	; 0x8006f5 <servo_2_duty_ratio+0x1>
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	82 17       	cp	r24, r18
     144:	93 07       	cpc	r25, r19
     146:	09 f4       	brne	.+2      	; 0x14a <__vector_14+0x7e>
     148:	db 98       	cbi	0x1b, 3	; 27
     14a:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <servo_count>
     14e:	8f 5f       	subi	r24, 0xFF	; 255
     150:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <servo_count>
     154:	9f 91       	pop	r25
     156:	8f 91       	pop	r24
     158:	4f 91       	pop	r20
     15a:	3f 91       	pop	r19
     15c:	2f 91       	pop	r18
     15e:	0f 90       	pop	r0
     160:	0f be       	out	0x3f, r0	; 63
     162:	0f 90       	pop	r0
     164:	1f 90       	pop	r1
     166:	18 95       	reti

00000168 <__vector_18>:
     168:	1f 92       	push	r1
     16a:	0f 92       	push	r0
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	0f 92       	push	r0
     170:	11 24       	eor	r1, r1
     172:	8f 93       	push	r24
     174:	8c b1       	in	r24, 0x0c	; 12
     176:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <uart0+0x66>
     17a:	8f 91       	pop	r24
     17c:	0f 90       	pop	r0
     17e:	0f be       	out	0x3f, r0	; 63
     180:	0f 90       	pop	r0
     182:	1f 90       	pop	r1
     184:	18 95       	reti

00000186 <__vector_30>:
     186:	1f 92       	push	r1
     188:	0f 92       	push	r0
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	0f 92       	push	r0
     18e:	11 24       	eor	r1, r1
     190:	0b b6       	in	r0, 0x3b	; 59
     192:	0f 92       	push	r0
     194:	1f 93       	push	r17
     196:	2f 93       	push	r18
     198:	3f 93       	push	r19
     19a:	4f 93       	push	r20
     19c:	5f 93       	push	r21
     19e:	6f 93       	push	r22
     1a0:	7f 93       	push	r23
     1a2:	8f 93       	push	r24
     1a4:	9f 93       	push	r25
     1a6:	af 93       	push	r26
     1a8:	bf 93       	push	r27
     1aa:	ef 93       	push	r30
     1ac:	ff 93       	push	r31
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <__vector_30+0x2e>
     1b4:	1f 92       	push	r1
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
     1ba:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     1be:	1e 33       	cpi	r17, 0x3E	; 62
     1c0:	21 f4       	brne	.+8      	; 0x1ca <__vector_30+0x44>
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <esp8266_send_ready_flag>
     1c8:	42 c0       	rjmp	.+132    	; 0x24e <__vector_30+0xc8>
     1ca:	1f 34       	cpi	r17, 0x4F	; 79
     1cc:	21 f4       	brne	.+8      	; 0x1d6 <__vector_30+0x50>
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <cnt.2476>
     1d4:	3c c0       	rjmp	.+120    	; 0x24e <__vector_30+0xc8>
     1d6:	1b 34       	cpi	r17, 0x4B	; 75
     1d8:	51 f4       	brne	.+20     	; 0x1ee <__vector_30+0x68>
     1da:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <cnt.2476>
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	09 f0       	breq	.+2      	; 0x1e4 <__vector_30+0x5e>
     1e2:	87 c0       	rjmp	.+270    	; 0x2f2 <__vector_30+0x16c>
     1e4:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <esp8266_return_result_flag>
     1e8:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <cnt.2476>
     1ec:	30 c0       	rjmp	.+96     	; 0x24e <__vector_30+0xc8>
     1ee:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <cnt.2476>
     1f2:	1b 32       	cpi	r17, 0x2B	; 43
     1f4:	21 f4       	brne	.+8      	; 0x1fe <__vector_30+0x78>
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <parse_cnt.2477>
     1fc:	76 c0       	rjmp	.+236    	; 0x2ea <__vector_30+0x164>
     1fe:	19 34       	cpi	r17, 0x49	; 73
     200:	41 f4       	brne	.+16     	; 0x212 <__vector_30+0x8c>
     202:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <parse_cnt.2477>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	11 f5       	brne	.+68     	; 0x24e <__vector_30+0xc8>
     20a:	82 e0       	ldi	r24, 0x02	; 2
     20c:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <parse_cnt.2477>
     210:	6c c0       	rjmp	.+216    	; 0x2ea <__vector_30+0x164>
     212:	10 35       	cpi	r17, 0x50	; 80
     214:	41 f4       	brne	.+16     	; 0x226 <__vector_30+0xa0>
     216:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <parse_cnt.2477>
     21a:	82 30       	cpi	r24, 0x02	; 2
     21c:	c1 f4       	brne	.+48     	; 0x24e <__vector_30+0xc8>
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <parse_cnt.2477>
     224:	62 c0       	rjmp	.+196    	; 0x2ea <__vector_30+0x164>
     226:	14 34       	cpi	r17, 0x44	; 68
     228:	41 f4       	brne	.+16     	; 0x23a <__vector_30+0xb4>
     22a:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <parse_cnt.2477>
     22e:	83 30       	cpi	r24, 0x03	; 3
     230:	71 f4       	brne	.+28     	; 0x24e <__vector_30+0xc8>
     232:	84 e0       	ldi	r24, 0x04	; 4
     234:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <parse_cnt.2477>
     238:	58 c0       	rjmp	.+176    	; 0x2ea <__vector_30+0x164>
     23a:	1c 32       	cpi	r17, 0x2C	; 44
     23c:	41 f4       	brne	.+16     	; 0x24e <__vector_30+0xc8>
     23e:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <parse_cnt.2477>
     242:	84 30       	cpi	r24, 0x04	; 4
     244:	21 f4       	brne	.+8      	; 0x24e <__vector_30+0xc8>
     246:	85 e0       	ldi	r24, 0x05	; 5
     248:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <parse_cnt.2477>
     24c:	4e c0       	rjmp	.+156    	; 0x2ea <__vector_30+0x164>
     24e:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <parse_cnt.2477>
     252:	85 30       	cpi	r24, 0x05	; 5
     254:	91 f4       	brne	.+36     	; 0x27a <__vector_30+0xf4>
     256:	10 93 d8 04 	sts	0x04D8, r17	; 0x8004d8 <receive_length>
     25a:	86 e0       	ldi	r24, 0x06	; 6
     25c:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <parse_cnt.2477>
     260:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <receive_length>
     264:	89 83       	std	Y+1, r24	; 0x01
     266:	1a 82       	std	Y+2, r1	; 0x02
     268:	ce 01       	movw	r24, r28
     26a:	01 96       	adiw	r24, 0x01	; 1
     26c:	0e 94 04 11 	call	0x2208	; 0x2208 <atoi>
     270:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <receive_length_int+0x1>
     274:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <receive_length_int>
     278:	38 c0       	rjmp	.+112    	; 0x2ea <__vector_30+0x164>
     27a:	86 30       	cpi	r24, 0x06	; 6
     27c:	c1 f4       	brne	.+48     	; 0x2ae <__vector_30+0x128>
     27e:	1a 33       	cpi	r17, 0x3A	; 58
     280:	71 f0       	breq	.+28     	; 0x29e <__vector_30+0x118>
     282:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <receive_length>
     286:	89 83       	std	Y+1, r24	; 0x01
     288:	1a 83       	std	Y+2, r17	; 0x02
     28a:	1b 82       	std	Y+3, r1	; 0x03
     28c:	ce 01       	movw	r24, r28
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	0e 94 04 11 	call	0x2208	; 0x2208 <atoi>
     294:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <receive_length_int+0x1>
     298:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <receive_length_int>
     29c:	26 c0       	rjmp	.+76     	; 0x2ea <__vector_30+0x164>
     29e:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <parse_cnt.2477>
     2a2:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <data_cnt.2478>
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <parse_data_flag.2479>
     2ac:	1e c0       	rjmp	.+60     	; 0x2ea <__vector_30+0x164>
     2ae:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <parse_data_flag.2479>
     2b2:	88 23       	and	r24, r24
     2b4:	c1 f0       	breq	.+48     	; 0x2e6 <__vector_30+0x160>
     2b6:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <data_cnt.2478>
     2ba:	e8 2f       	mov	r30, r24
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	e0 55       	subi	r30, 0x50	; 80
     2c0:	fa 4f       	sbci	r31, 0xFA	; 250
     2c2:	10 83       	st	Z, r17
     2c4:	8f 5f       	subi	r24, 0xFF	; 255
     2c6:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <data_cnt.2478>
     2ca:	20 91 f6 06 	lds	r18, 0x06F6	; 0x8006f6 <receive_length_int>
     2ce:	30 91 f7 06 	lds	r19, 0x06F7	; 0x8006f7 <receive_length_int+0x1>
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	82 17       	cp	r24, r18
     2d6:	93 07       	cpc	r25, r19
     2d8:	41 f4       	brne	.+16     	; 0x2ea <__vector_30+0x164>
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <esp8266_receiving_flag>
     2e0:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <parse_data_flag.2479>
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__vector_30+0x164>
     2e6:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <parse_cnt.2477>
     2ea:	81 2f       	mov	r24, r17
     2ec:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <uart0_tx_char>
     2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <__vector_30+0x172>
     2f2:	10 92 d6 04 	sts	0x04D6, r1	; 0x8004d6 <cnt.2476>
     2f6:	ab cf       	rjmp	.-170    	; 0x24e <__vector_30+0xc8>
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	ff 91       	pop	r31
     304:	ef 91       	pop	r30
     306:	bf 91       	pop	r27
     308:	af 91       	pop	r26
     30a:	9f 91       	pop	r25
     30c:	8f 91       	pop	r24
     30e:	7f 91       	pop	r23
     310:	6f 91       	pop	r22
     312:	5f 91       	pop	r21
     314:	4f 91       	pop	r20
     316:	3f 91       	pop	r19
     318:	2f 91       	pop	r18
     31a:	1f 91       	pop	r17
     31c:	0f 90       	pop	r0
     31e:	0b be       	out	0x3b, r0	; 59
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <rfid_user_uid_buffer_init>:
     32a:	80 ee       	ldi	r24, 0xE0	; 224
     32c:	94 e0       	ldi	r25, 0x04	; 4
     32e:	44 e4       	ldi	r20, 0x44	; 68
     330:	55 e0       	ldi	r21, 0x05	; 5
     332:	25 e0       	ldi	r18, 0x05	; 5
     334:	e6 e9       	ldi	r30, 0x96	; 150
     336:	f3 e0       	ldi	r31, 0x03	; 3
     338:	dc 01       	movw	r26, r24
     33a:	01 90       	ld	r0, Z+
     33c:	0d 92       	st	X+, r0
     33e:	2a 95       	dec	r18
     340:	e1 f7       	brne	.-8      	; 0x33a <rfid_user_uid_buffer_init+0x10>
     342:	05 96       	adiw	r24, 0x05	; 5
     344:	84 17       	cp	r24, r20
     346:	95 07       	cpc	r25, r21
     348:	a1 f7       	brne	.-24     	; 0x332 <rfid_user_uid_buffer_init+0x8>
     34a:	42 e4       	ldi	r20, 0x42	; 66
     34c:	51 e0       	ldi	r21, 0x01	; 1
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	82 e0       	ldi	r24, 0x02	; 2
     352:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <i2c_lcd_string>
     356:	2f ef       	ldi	r18, 0xFF	; 255
     358:	89 e6       	ldi	r24, 0x69	; 105
     35a:	98 e1       	ldi	r25, 0x18	; 24
     35c:	21 50       	subi	r18, 0x01	; 1
     35e:	80 40       	sbci	r24, 0x00	; 0
     360:	90 40       	sbci	r25, 0x00	; 0
     362:	e1 f7       	brne	.-8      	; 0x35c <rfid_user_uid_buffer_init+0x32>
     364:	00 c0       	rjmp	.+0      	; 0x366 <rfid_user_uid_buffer_init+0x3c>
     366:	00 00       	nop
     368:	08 95       	ret

0000036a <mfrc_print_serial>:
     36a:	cf 92       	push	r12
     36c:	df 92       	push	r13
     36e:	ef 92       	push	r14
     370:	ff 92       	push	r15
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	c6 2f       	mov	r28, r22
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	91 05       	cpc	r25, r1
     37e:	69 f1       	breq	.+90     	; 0x3da <mfrc_print_serial+0x70>
     380:	82 30       	cpi	r24, 0x02	; 2
     382:	91 05       	cpc	r25, r1
     384:	09 f4       	brne	.+2      	; 0x388 <mfrc_print_serial+0x1e>
     386:	55 c0       	rjmp	.+170    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     388:	89 2b       	or	r24, r25
     38a:	09 f0       	breq	.+2      	; 0x38e <mfrc_print_serial+0x24>
     38c:	7e c0       	rjmp	.+252    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     38e:	87 e5       	ldi	r24, 0x57	; 87
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uart0_tx_string>
     396:	0c ec       	ldi	r16, 0xCC	; 204
     398:	16 e0       	ldi	r17, 0x06	; 6
     39a:	0f 2e       	mov	r0, r31
     39c:	fe ed       	ldi	r31, 0xDE	; 222
     39e:	ef 2e       	mov	r14, r31
     3a0:	f6 e0       	ldi	r31, 0x06	; 6
     3a2:	ff 2e       	mov	r15, r31
     3a4:	f0 2d       	mov	r31, r0
     3a6:	0f 2e       	mov	r0, r31
     3a8:	f0 ed       	ldi	r31, 0xD0	; 208
     3aa:	cf 2e       	mov	r12, r31
     3ac:	f6 e0       	ldi	r31, 0x06	; 6
     3ae:	df 2e       	mov	r13, r31
     3b0:	f0 2d       	mov	r31, r0
     3b2:	c1 11       	cpse	r28, r1
     3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <mfrc_print_serial+0x56>
     3b6:	f8 01       	movw	r30, r16
     3b8:	80 81       	ld	r24, Z
     3ba:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <uart0_tx_char>
     3be:	04 c0       	rjmp	.+8      	; 0x3c8 <mfrc_print_serial+0x5e>
     3c0:	f7 01       	movw	r30, r14
     3c2:	80 81       	ld	r24, Z
     3c4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <uart0_tx_char>
     3c8:	0f 5f       	subi	r16, 0xFF	; 255
     3ca:	1f 4f       	sbci	r17, 0xFF	; 255
     3cc:	ff ef       	ldi	r31, 0xFF	; 255
     3ce:	ef 1a       	sub	r14, r31
     3d0:	ff 0a       	sbc	r15, r31
     3d2:	0c 15       	cp	r16, r12
     3d4:	1d 05       	cpc	r17, r13
     3d6:	69 f7       	brne	.-38     	; 0x3b2 <mfrc_print_serial+0x48>
     3d8:	58 c0       	rjmp	.+176    	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     3da:	81 e6       	ldi	r24, 0x61	; 97
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uart0_tx_string>
     3e2:	0c ec       	ldi	r16, 0xCC	; 204
     3e4:	16 e0       	ldi	r17, 0x06	; 6
     3e6:	0f 2e       	mov	r0, r31
     3e8:	fe ed       	ldi	r31, 0xDE	; 222
     3ea:	ef 2e       	mov	r14, r31
     3ec:	f6 e0       	ldi	r31, 0x06	; 6
     3ee:	ff 2e       	mov	r15, r31
     3f0:	f0 2d       	mov	r31, r0
     3f2:	0f 2e       	mov	r0, r31
     3f4:	f0 ed       	ldi	r31, 0xD0	; 208
     3f6:	cf 2e       	mov	r12, r31
     3f8:	f6 e0       	ldi	r31, 0x06	; 6
     3fa:	df 2e       	mov	r13, r31
     3fc:	f0 2d       	mov	r31, r0
     3fe:	c1 11       	cpse	r28, r1
     400:	08 c0       	rjmp	.+16     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     402:	f8 01       	movw	r30, r16
     404:	80 81       	ld	r24, Z
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <IntToString>
     40c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uart0_tx_string>
     410:	07 c0       	rjmp	.+14     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     412:	f7 01       	movw	r30, r14
     414:	80 81       	ld	r24, Z
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <IntToString>
     41c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uart0_tx_string>
     420:	0f 5f       	subi	r16, 0xFF	; 255
     422:	1f 4f       	sbci	r17, 0xFF	; 255
     424:	ff ef       	ldi	r31, 0xFF	; 255
     426:	ef 1a       	sub	r14, r31
     428:	ff 0a       	sbc	r15, r31
     42a:	0c 15       	cp	r16, r12
     42c:	1d 05       	cpc	r17, r13
     42e:	39 f7       	brne	.-50     	; 0x3fe <mfrc_print_serial+0x94>
     430:	2c c0       	rjmp	.+88     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     432:	89 e6       	ldi	r24, 0x69	; 105
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uart0_tx_string>
     43a:	0c ec       	ldi	r16, 0xCC	; 204
     43c:	16 e0       	ldi	r17, 0x06	; 6
     43e:	0f 2e       	mov	r0, r31
     440:	fe ed       	ldi	r31, 0xDE	; 222
     442:	ef 2e       	mov	r14, r31
     444:	f6 e0       	ldi	r31, 0x06	; 6
     446:	ff 2e       	mov	r15, r31
     448:	f0 2d       	mov	r31, r0
     44a:	0f 2e       	mov	r0, r31
     44c:	f0 ed       	ldi	r31, 0xD0	; 208
     44e:	cf 2e       	mov	r12, r31
     450:	f6 e0       	ldi	r31, 0x06	; 6
     452:	df 2e       	mov	r13, r31
     454:	f0 2d       	mov	r31, r0
     456:	c1 11       	cpse	r28, r1
     458:	07 c0       	rjmp	.+14     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     45a:	f8 01       	movw	r30, r16
     45c:	80 81       	ld	r24, Z
     45e:	0e 94 0c 10 	call	0x2018	; 0x2018 <HexToString>
     462:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uart0_tx_string>
     466:	06 c0       	rjmp	.+12     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     468:	f7 01       	movw	r30, r14
     46a:	80 81       	ld	r24, Z
     46c:	0e 94 0c 10 	call	0x2018	; 0x2018 <HexToString>
     470:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uart0_tx_string>
     474:	80 e2       	ldi	r24, 0x20	; 32
     476:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <uart0_tx_char>
     47a:	0f 5f       	subi	r16, 0xFF	; 255
     47c:	1f 4f       	sbci	r17, 0xFF	; 255
     47e:	ff ef       	ldi	r31, 0xFF	; 255
     480:	ef 1a       	sub	r14, r31
     482:	ff 0a       	sbc	r15, r31
     484:	0c 15       	cp	r16, r12
     486:	1d 05       	cpc	r17, r13
     488:	31 f7       	brne	.-52     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	08 95       	ret

0000049a <mfrc_check_and_data_receive_ch0>:
     49a:	cf 93       	push	r28
     49c:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <noise_flag.2495>
     4a0:	81 11       	cpse	r24, r1
     4a2:	09 c0       	rjmp	.+18     	; 0x4b6 <mfrc_check_and_data_receive_ch0+0x1c>
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	6c ec       	ldi	r22, 0xCC	; 204
     4a8:	76 e0       	ldi	r23, 0x06	; 6
     4aa:	82 e5       	ldi	r24, 0x52	; 82
     4ac:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <mfrc522_request>
     4b0:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <_byte.2497>
     4b4:	1d c0       	rjmp	.+58     	; 0x4f0 <mfrc_check_and_data_receive_ch0+0x56>
     4b6:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <toggle_flag.2496>
     4ba:	88 23       	and	r24, r24
     4bc:	39 f0       	breq	.+14     	; 0x4cc <mfrc_check_and_data_receive_ch0+0x32>
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	6c ec       	ldi	r22, 0xCC	; 204
     4c2:	76 e0       	ldi	r23, 0x06	; 6
     4c4:	82 e5       	ldi	r24, 0x52	; 82
     4c6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <mfrc522_request>
     4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <mfrc_check_and_data_receive_ch0+0x4a>
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	6c ec       	ldi	r22, 0xCC	; 204
     4d0:	76 e0       	ldi	r23, 0x06	; 6
     4d2:	82 e5       	ldi	r24, 0x52	; 82
     4d4:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <mfrc522_request>
     4d8:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <_byte.2497>
     4dc:	83 30       	cpi	r24, 0x03	; 3
     4de:	11 f4       	brne	.+4      	; 0x4e4 <mfrc_check_and_data_receive_ch0+0x4a>
     4e0:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <noise_flag.2495>
     4e4:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <toggle_flag.2496>
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	89 27       	eor	r24, r25
     4ec:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <toggle_flag.2496>
     4f0:	c0 91 d0 04 	lds	r28, 0x04D0	; 0x8004d0 <_byte.2497>
     4f4:	c1 30       	cpi	r28, 0x01	; 1
     4f6:	29 f0       	breq	.+10     	; 0x502 <mfrc_check_and_data_receive_ch0+0x68>
     4f8:	88 e5       	ldi	r24, 0x58	; 88
     4fa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
     4fe:	c0 e0       	ldi	r28, 0x00	; 0
     500:	2c c0       	rjmp	.+88     	; 0x55a <mfrc_check_and_data_receive_ch0+0xc0>
     502:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <detected_flag_ch0>
     506:	88 35       	cpi	r24, 0x58	; 88
     508:	29 f5       	brne	.+74     	; 0x554 <mfrc_check_and_data_receive_ch0+0xba>
     50a:	8f e4       	ldi	r24, 0x4F	; 79
     50c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <noise_flag.2495>
     516:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <toggle_flag.2496>
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	8c ec       	ldi	r24, 0xCC	; 204
     51e:	96 e0       	ldi	r25, 0x06	; 6
     520:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <mfrc522_get_card_serial>
     524:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <_byte.2497>
     528:	81 30       	cpi	r24, 0x01	; 1
     52a:	b1 f4       	brne	.+44     	; 0x558 <mfrc_check_and_data_receive_ch0+0xbe>
     52c:	81 e7       	ldi	r24, 0x71	; 113
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uart0_tx_string>
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	17 df       	rcall	.-466    	; 0x36a <mfrc_print_serial>
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	13 df       	rcall	.-474    	; 0x36a <mfrc_print_serial>
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0f df       	rcall	.-482    	; 0x36a <mfrc_print_serial>
     54c:	8a e0       	ldi	r24, 0x0A	; 10
     54e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <uart0_tx_char>
     552:	03 c0       	rjmp	.+6      	; 0x55a <mfrc_check_and_data_receive_ch0+0xc0>
     554:	c0 e0       	ldi	r28, 0x00	; 0
     556:	01 c0       	rjmp	.+2      	; 0x55a <mfrc_check_and_data_receive_ch0+0xc0>
     558:	cf ef       	ldi	r28, 0xFF	; 255
     55a:	8c 2f       	mov	r24, r28
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <mfrc_check_and_data_receive_ch1>:
     560:	cf 93       	push	r28
     562:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <noise_flag.2501>
     566:	81 11       	cpse	r24, r1
     568:	09 c0       	rjmp	.+18     	; 0x57c <mfrc_check_and_data_receive_ch1+0x1c>
     56a:	41 e0       	ldi	r20, 0x01	; 1
     56c:	6e ed       	ldi	r22, 0xDE	; 222
     56e:	76 e0       	ldi	r23, 0x06	; 6
     570:	82 e5       	ldi	r24, 0x52	; 82
     572:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <mfrc522_request>
     576:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_byte.2503>
     57a:	1d c0       	rjmp	.+58     	; 0x5b6 <mfrc_check_and_data_receive_ch1+0x56>
     57c:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <toggle_flag.2502>
     580:	88 23       	and	r24, r24
     582:	39 f0       	breq	.+14     	; 0x592 <mfrc_check_and_data_receive_ch1+0x32>
     584:	41 e0       	ldi	r20, 0x01	; 1
     586:	6e ed       	ldi	r22, 0xDE	; 222
     588:	76 e0       	ldi	r23, 0x06	; 6
     58a:	82 e5       	ldi	r24, 0x52	; 82
     58c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <mfrc522_request>
     590:	0c c0       	rjmp	.+24     	; 0x5aa <mfrc_check_and_data_receive_ch1+0x4a>
     592:	41 e0       	ldi	r20, 0x01	; 1
     594:	6e ed       	ldi	r22, 0xDE	; 222
     596:	76 e0       	ldi	r23, 0x06	; 6
     598:	82 e5       	ldi	r24, 0x52	; 82
     59a:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <mfrc522_request>
     59e:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_byte.2503>
     5a2:	83 30       	cpi	r24, 0x03	; 3
     5a4:	11 f4       	brne	.+4      	; 0x5aa <mfrc_check_and_data_receive_ch1+0x4a>
     5a6:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <noise_flag.2501>
     5aa:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <toggle_flag.2502>
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	89 27       	eor	r24, r25
     5b2:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <toggle_flag.2502>
     5b6:	c0 91 cd 04 	lds	r28, 0x04CD	; 0x8004cd <_byte.2503>
     5ba:	c1 30       	cpi	r28, 0x01	; 1
     5bc:	29 f0       	breq	.+10     	; 0x5c8 <mfrc_check_and_data_receive_ch1+0x68>
     5be:	88 e5       	ldi	r24, 0x58	; 88
     5c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
     5c4:	c0 e0       	ldi	r28, 0x00	; 0
     5c6:	2c c0       	rjmp	.+88     	; 0x620 <mfrc_check_and_data_receive_ch1+0xc0>
     5c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <detected_flag_ch1>
     5cc:	88 35       	cpi	r24, 0x58	; 88
     5ce:	29 f5       	brne	.+74     	; 0x61a <mfrc_check_and_data_receive_ch1+0xba>
     5d0:	8f e4       	ldi	r24, 0x4F	; 79
     5d2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <noise_flag.2501>
     5dc:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <toggle_flag.2502>
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	8e ed       	ldi	r24, 0xDE	; 222
     5e4:	96 e0       	ldi	r25, 0x06	; 6
     5e6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <mfrc522_get_card_serial>
     5ea:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <_byte.2503>
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	b1 f4       	brne	.+44     	; 0x61e <mfrc_check_and_data_receive_ch1+0xbe>
     5f2:	84 e8       	ldi	r24, 0x84	; 132
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <uart0_tx_string>
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	b4 de       	rcall	.-664    	; 0x36a <mfrc_print_serial>
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	b0 de       	rcall	.-672    	; 0x36a <mfrc_print_serial>
     60a:	61 e0       	ldi	r22, 0x01	; 1
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	ac de       	rcall	.-680    	; 0x36a <mfrc_print_serial>
     612:	8a e0       	ldi	r24, 0x0A	; 10
     614:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <uart0_tx_char>
     618:	03 c0       	rjmp	.+6      	; 0x620 <mfrc_check_and_data_receive_ch1+0xc0>
     61a:	c0 e0       	ldi	r28, 0x00	; 0
     61c:	01 c0       	rjmp	.+2      	; 0x620 <mfrc_check_and_data_receive_ch1+0xc0>
     61e:	cf ef       	ldi	r28, 0xFF	; 255
     620:	8c 2f       	mov	r24, r28
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <RC522_data_request_per_100ms>:
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ec 01       	movw	r28, r24
     62c:	60 91 f8 06 	lds	r22, 0x06F8	; 0x8006f8 <TICK>
     630:	70 91 f9 06 	lds	r23, 0x06F9	; 0x8006f9 <TICK+0x1>
     634:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <TICK+0x2>
     638:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <TICK+0x3>
     63c:	24 e6       	ldi	r18, 0x64	; 100
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	40 e0       	ldi	r20, 0x00	; 0
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <__udivmodsi4>
     648:	67 2b       	or	r22, r23
     64a:	68 2b       	or	r22, r24
     64c:	69 2b       	or	r22, r25
     64e:	89 f4       	brne	.+34     	; 0x672 <RC522_data_request_per_100ms+0x4c>
     650:	98 81       	ld	r25, Y
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	89 27       	eor	r24, r25
     656:	88 83       	st	Y, r24
     658:	81 11       	cpse	r24, r1
     65a:	06 c0       	rjmp	.+12     	; 0x668 <RC522_data_request_per_100ms+0x42>
     65c:	1e df       	rcall	.-452    	; 0x49a <mfrc_check_and_data_receive_ch0>
     65e:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <received_state>
     662:	10 92 d0 06 	sts	0x06D0, r1	; 0x8006d0 <rfid_uid_ch0+0x4>
     666:	05 c0       	rjmp	.+10     	; 0x672 <RC522_data_request_per_100ms+0x4c>
     668:	7b df       	rcall	.-266    	; 0x560 <mfrc_check_and_data_receive_ch1>
     66a:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <received_state>
     66e:	10 92 e2 06 	sts	0x06E2, r1	; 0x8006e2 <rfid_uid_ch1+0x4>
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <buzz_MUTE>:
     678:	eb e8       	ldi	r30, 0x8B	; 139
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	8f 7b       	andi	r24, 0xBF	; 191
     680:	80 83       	st	Z, r24
     682:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <music_flag>
     686:	10 92 f3 06 	sts	0x06F3, r1	; 0x8006f3 <buzz_tick_enable_flag+0x1>
     68a:	10 92 f2 06 	sts	0x06F2, r1	; 0x8006f2 <buzz_tick_enable_flag>
     68e:	08 95       	ret

00000690 <setSoundNote>:
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	41 f0       	breq	.+16     	; 0x6a4 <setSoundNote+0x14>
     694:	eb e8       	ldi	r30, 0x8B	; 139
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	20 81       	ld	r18, Z
     69a:	20 64       	ori	r18, 0x40	; 64
     69c:	20 83       	st	Z, r18
     69e:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <setICR3>
     6a2:	08 95       	ret
     6a4:	eb e8       	ldi	r30, 0x8B	; 139
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	8f 7b       	andi	r24, 0xBF	; 191
     6ac:	80 83       	st	Z, r24
     6ae:	08 95       	ret

000006b0 <buzz_play>:
     6b0:	80 91 44 05 	lds	r24, 0x0544	; 0x800544 <music_flag>
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	09 f4       	brne	.+2      	; 0x6ba <buzz_play+0xa>
     6b8:	76 c0       	rjmp	.+236    	; 0x7a6 <buzz_play+0xf6>
     6ba:	28 f4       	brcc	.+10     	; 0x6c6 <buzz_play+0x16>
     6bc:	88 23       	and	r24, r24
     6be:	61 f0       	breq	.+24     	; 0x6d8 <buzz_play+0x28>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	61 f0       	breq	.+24     	; 0x6dc <buzz_play+0x2c>
     6c4:	08 95       	ret
     6c6:	84 30       	cpi	r24, 0x04	; 4
     6c8:	09 f4       	brne	.+2      	; 0x6cc <buzz_play+0x1c>
     6ca:	37 c1       	rjmp	.+622    	; 0x93a <buzz_play+0x28a>
     6cc:	08 f4       	brcc	.+2      	; 0x6d0 <buzz_play+0x20>
     6ce:	d0 c0       	rjmp	.+416    	; 0x870 <buzz_play+0x1c0>
     6d0:	85 30       	cpi	r24, 0x05	; 5
     6d2:	09 f4       	brne	.+2      	; 0x6d6 <buzz_play+0x26>
     6d4:	75 c1       	rjmp	.+746    	; 0x9c0 <buzz_play+0x310>
     6d6:	08 95       	ret
     6d8:	cf cf       	rjmp	.-98     	; 0x678 <buzz_MUTE>
     6da:	08 95       	ret
     6dc:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     6e0:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     6e4:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     6e8:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     6ec:	88 3c       	cpi	r24, 0xC8	; 200
     6ee:	91 05       	cpc	r25, r1
     6f0:	a1 05       	cpc	r26, r1
     6f2:	b1 05       	cpc	r27, r1
     6f4:	20 f4       	brcc	.+8      	; 0x6fe <buzz_play+0x4e>
     6f6:	8b e9       	ldi	r24, 0x9B	; 155
     6f8:	96 e0       	ldi	r25, 0x06	; 6
     6fa:	ca cf       	rjmp	.-108    	; 0x690 <setSoundNote>
     6fc:	08 95       	ret
     6fe:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     702:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     706:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     70a:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     70e:	88 3c       	cpi	r24, 0xC8	; 200
     710:	91 05       	cpc	r25, r1
     712:	a1 05       	cpc	r26, r1
     714:	b1 05       	cpc	r27, r1
     716:	21 f4       	brne	.+8      	; 0x720 <buzz_play+0x70>
     718:	87 ee       	ldi	r24, 0xE7	; 231
     71a:	95 e0       	ldi	r25, 0x05	; 5
     71c:	b9 cf       	rjmp	.-142    	; 0x690 <setSoundNote>
     71e:	08 95       	ret
     720:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     724:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     728:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     72c:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     730:	80 39       	cpi	r24, 0x90	; 144
     732:	91 40       	sbci	r25, 0x01	; 1
     734:	a1 05       	cpc	r26, r1
     736:	b1 05       	cpc	r27, r1
     738:	21 f4       	brne	.+8      	; 0x742 <buzz_play+0x92>
     73a:	85 e6       	ldi	r24, 0x65	; 101
     73c:	94 e0       	ldi	r25, 0x04	; 4
     73e:	a8 cf       	rjmp	.-176    	; 0x690 <setSoundNote>
     740:	08 95       	ret
     742:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     746:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     74a:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     74e:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     752:	88 35       	cpi	r24, 0x58	; 88
     754:	92 40       	sbci	r25, 0x02	; 2
     756:	a1 05       	cpc	r26, r1
     758:	b1 05       	cpc	r27, r1
     75a:	21 f4       	brne	.+8      	; 0x764 <buzz_play+0xb4>
     75c:	8d ef       	ldi	r24, 0xFD	; 253
     75e:	93 e0       	ldi	r25, 0x03	; 3
     760:	97 cf       	rjmp	.-210    	; 0x690 <setSoundNote>
     762:	08 95       	ret
     764:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     768:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     76c:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     770:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     774:	80 32       	cpi	r24, 0x20	; 32
     776:	93 40       	sbci	r25, 0x03	; 3
     778:	a1 05       	cpc	r26, r1
     77a:	b1 05       	cpc	r27, r1
     77c:	21 f4       	brne	.+8      	; 0x786 <buzz_play+0xd6>
     77e:	88 ef       	ldi	r24, 0xF8	; 248
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	86 cf       	rjmp	.-244    	; 0x690 <setSoundNote>
     784:	08 95       	ret
     786:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     78a:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     78e:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     792:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     796:	80 3b       	cpi	r24, 0xB0	; 176
     798:	94 40       	sbci	r25, 0x04	; 4
     79a:	a1 05       	cpc	r26, r1
     79c:	b1 05       	cpc	r27, r1
     79e:	09 f0       	breq	.+2      	; 0x7a2 <buzz_play+0xf2>
     7a0:	50 c1       	rjmp	.+672    	; 0xa42 <buzz_play+0x392>
     7a2:	6a cf       	rjmp	.-300    	; 0x678 <buzz_MUTE>
     7a4:	08 95       	ret
     7a6:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     7aa:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     7ae:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     7b2:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     7b6:	88 3c       	cpi	r24, 0xC8	; 200
     7b8:	91 05       	cpc	r25, r1
     7ba:	a1 05       	cpc	r26, r1
     7bc:	b1 05       	cpc	r27, r1
     7be:	20 f4       	brcc	.+8      	; 0x7c8 <buzz_play+0x118>
     7c0:	8b e9       	ldi	r24, 0x9B	; 155
     7c2:	96 e0       	ldi	r25, 0x06	; 6
     7c4:	65 cf       	rjmp	.-310    	; 0x690 <setSoundNote>
     7c6:	08 95       	ret
     7c8:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     7cc:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     7d0:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     7d4:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     7d8:	82 3d       	cpi	r24, 0xD2	; 210
     7da:	91 05       	cpc	r25, r1
     7dc:	a1 05       	cpc	r26, r1
     7de:	b1 05       	cpc	r27, r1
     7e0:	21 f4       	brne	.+8      	; 0x7ea <buzz_play+0x13a>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	54 cf       	rjmp	.-344    	; 0x690 <setSoundNote>
     7e8:	08 95       	ret
     7ea:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     7ee:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     7f2:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     7f6:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     7fa:	8c 3d       	cpi	r24, 0xDC	; 220
     7fc:	91 05       	cpc	r25, r1
     7fe:	a1 05       	cpc	r26, r1
     800:	b1 05       	cpc	r27, r1
     802:	21 f4       	brne	.+8      	; 0x80c <buzz_play+0x15c>
     804:	87 ee       	ldi	r24, 0xE7	; 231
     806:	95 e0       	ldi	r25, 0x05	; 5
     808:	43 cf       	rjmp	.-378    	; 0x690 <setSoundNote>
     80a:	08 95       	ret
     80c:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     810:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     814:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     818:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     81c:	80 39       	cpi	r24, 0x90	; 144
     81e:	91 40       	sbci	r25, 0x01	; 1
     820:	a1 05       	cpc	r26, r1
     822:	b1 05       	cpc	r27, r1
     824:	21 f4       	brne	.+8      	; 0x82e <buzz_play+0x17e>
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	32 cf       	rjmp	.-412    	; 0x690 <setSoundNote>
     82c:	08 95       	ret
     82e:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     832:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     836:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     83a:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     83e:	8e 3a       	cpi	r24, 0xAE	; 174
     840:	91 40       	sbci	r25, 0x01	; 1
     842:	a1 05       	cpc	r26, r1
     844:	b1 05       	cpc	r27, r1
     846:	21 f4       	brne	.+8      	; 0x850 <buzz_play+0x1a0>
     848:	85 e6       	ldi	r24, 0x65	; 101
     84a:	94 e0       	ldi	r25, 0x04	; 4
     84c:	21 cf       	rjmp	.-446    	; 0x690 <setSoundNote>
     84e:	08 95       	ret
     850:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     854:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     858:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     85c:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     860:	88 35       	cpi	r24, 0x58	; 88
     862:	92 40       	sbci	r25, 0x02	; 2
     864:	a1 05       	cpc	r26, r1
     866:	b1 05       	cpc	r27, r1
     868:	09 f0       	breq	.+2      	; 0x86c <buzz_play+0x1bc>
     86a:	eb c0       	rjmp	.+470    	; 0xa42 <buzz_play+0x392>
     86c:	05 cf       	rjmp	.-502    	; 0x678 <buzz_MUTE>
     86e:	08 95       	ret
     870:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     874:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     878:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     87c:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     880:	8b 34       	cpi	r24, 0x4B	; 75
     882:	91 05       	cpc	r25, r1
     884:	a1 05       	cpc	r26, r1
     886:	b1 05       	cpc	r27, r1
     888:	20 f4       	brcc	.+8      	; 0x892 <buzz_play+0x1e2>
     88a:	82 e1       	ldi	r24, 0x12	; 18
     88c:	94 e0       	ldi	r25, 0x04	; 4
     88e:	00 cf       	rjmp	.-512    	; 0x690 <setSoundNote>
     890:	08 95       	ret
     892:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     896:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     89a:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     89e:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     8a2:	86 39       	cpi	r24, 0x96	; 150
     8a4:	91 05       	cpc	r25, r1
     8a6:	a1 05       	cpc	r26, r1
     8a8:	b1 05       	cpc	r27, r1
     8aa:	20 f4       	brcc	.+8      	; 0x8b4 <buzz_play+0x204>
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	ef ce       	rjmp	.-546    	; 0x690 <setSoundNote>
     8b2:	08 95       	ret
     8b4:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     8b8:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     8bc:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     8c0:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     8c4:	81 3e       	cpi	r24, 0xE1	; 225
     8c6:	91 05       	cpc	r25, r1
     8c8:	a1 05       	cpc	r26, r1
     8ca:	b1 05       	cpc	r27, r1
     8cc:	20 f4       	brcc	.+8      	; 0x8d6 <buzz_play+0x226>
     8ce:	82 e1       	ldi	r24, 0x12	; 18
     8d0:	94 e0       	ldi	r25, 0x04	; 4
     8d2:	de ce       	rjmp	.-580    	; 0x690 <setSoundNote>
     8d4:	08 95       	ret
     8d6:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     8da:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     8de:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     8e2:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     8e6:	8c 32       	cpi	r24, 0x2C	; 44
     8e8:	91 40       	sbci	r25, 0x01	; 1
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	20 f4       	brcc	.+8      	; 0x8f8 <buzz_play+0x248>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	cd ce       	rjmp	.-614    	; 0x690 <setSoundNote>
     8f6:	08 95       	ret
     8f8:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     8fc:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     900:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     904:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     908:	87 37       	cpi	r24, 0x77	; 119
     90a:	91 40       	sbci	r25, 0x01	; 1
     90c:	a1 05       	cpc	r26, r1
     90e:	b1 05       	cpc	r27, r1
     910:	20 f4       	brcc	.+8      	; 0x91a <buzz_play+0x26a>
     912:	82 e1       	ldi	r24, 0x12	; 18
     914:	94 e0       	ldi	r25, 0x04	; 4
     916:	bc ce       	rjmp	.-648    	; 0x690 <setSoundNote>
     918:	08 95       	ret
     91a:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     91e:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     922:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     926:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     92a:	82 3c       	cpi	r24, 0xC2	; 194
     92c:	91 40       	sbci	r25, 0x01	; 1
     92e:	a1 05       	cpc	r26, r1
     930:	b1 05       	cpc	r27, r1
     932:	09 f0       	breq	.+2      	; 0x936 <buzz_play+0x286>
     934:	86 c0       	rjmp	.+268    	; 0xa42 <buzz_play+0x392>
     936:	a0 ce       	rjmp	.-704    	; 0x678 <buzz_MUTE>
     938:	08 95       	ret
     93a:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     93e:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     942:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     946:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     94a:	84 36       	cpi	r24, 0x64	; 100
     94c:	91 05       	cpc	r25, r1
     94e:	a1 05       	cpc	r26, r1
     950:	b1 05       	cpc	r27, r1
     952:	20 f4       	brcc	.+8      	; 0x95c <buzz_play+0x2ac>
     954:	82 e1       	ldi	r24, 0x12	; 18
     956:	94 e0       	ldi	r25, 0x04	; 4
     958:	9b ce       	rjmp	.-714    	; 0x690 <setSoundNote>
     95a:	08 95       	ret
     95c:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     960:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     964:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     968:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     96c:	88 3c       	cpi	r24, 0xC8	; 200
     96e:	91 05       	cpc	r25, r1
     970:	a1 05       	cpc	r26, r1
     972:	b1 05       	cpc	r27, r1
     974:	20 f4       	brcc	.+8      	; 0x97e <buzz_play+0x2ce>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	8a ce       	rjmp	.-748    	; 0x690 <setSoundNote>
     97c:	08 95       	ret
     97e:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     982:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     986:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     98a:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     98e:	8c 32       	cpi	r24, 0x2C	; 44
     990:	91 40       	sbci	r25, 0x01	; 1
     992:	a1 05       	cpc	r26, r1
     994:	b1 05       	cpc	r27, r1
     996:	20 f4       	brcc	.+8      	; 0x9a0 <buzz_play+0x2f0>
     998:	82 e1       	ldi	r24, 0x12	; 18
     99a:	94 e0       	ldi	r25, 0x04	; 4
     99c:	79 ce       	rjmp	.-782    	; 0x690 <setSoundNote>
     99e:	08 95       	ret
     9a0:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     9a4:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     9a8:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     9ac:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     9b0:	82 3c       	cpi	r24, 0xC2	; 194
     9b2:	91 40       	sbci	r25, 0x01	; 1
     9b4:	a1 05       	cpc	r26, r1
     9b6:	b1 05       	cpc	r27, r1
     9b8:	09 f0       	breq	.+2      	; 0x9bc <buzz_play+0x30c>
     9ba:	43 c0       	rjmp	.+134    	; 0xa42 <buzz_play+0x392>
     9bc:	5d ce       	rjmp	.-838    	; 0x678 <buzz_MUTE>
     9be:	08 95       	ret
     9c0:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     9c4:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     9c8:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     9cc:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     9d0:	84 36       	cpi	r24, 0x64	; 100
     9d2:	91 05       	cpc	r25, r1
     9d4:	a1 05       	cpc	r26, r1
     9d6:	b1 05       	cpc	r27, r1
     9d8:	20 f4       	brcc	.+8      	; 0x9e2 <buzz_play+0x332>
     9da:	87 e4       	ldi	r24, 0x47	; 71
     9dc:	90 e1       	ldi	r25, 0x10	; 16
     9de:	58 ce       	rjmp	.-848    	; 0x690 <setSoundNote>
     9e0:	08 95       	ret
     9e2:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     9e6:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     9ea:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     9ee:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     9f2:	88 3c       	cpi	r24, 0xC8	; 200
     9f4:	91 05       	cpc	r25, r1
     9f6:	a1 05       	cpc	r26, r1
     9f8:	b1 05       	cpc	r27, r1
     9fa:	20 f4       	brcc	.+8      	; 0xa04 <buzz_play+0x354>
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	47 ce       	rjmp	.-882    	; 0x690 <setSoundNote>
     a02:	08 95       	ret
     a04:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     a08:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     a0c:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     a10:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     a14:	8c 32       	cpi	r24, 0x2C	; 44
     a16:	91 40       	sbci	r25, 0x01	; 1
     a18:	a1 05       	cpc	r26, r1
     a1a:	b1 05       	cpc	r27, r1
     a1c:	20 f4       	brcc	.+8      	; 0xa26 <buzz_play+0x376>
     a1e:	84 e2       	ldi	r24, 0x24	; 36
     a20:	98 e0       	ldi	r25, 0x08	; 8
     a22:	36 ce       	rjmp	.-916    	; 0x690 <setSoundNote>
     a24:	08 95       	ret
     a26:	80 91 fc 06 	lds	r24, 0x06FC	; 0x8006fc <TICK+0x4>
     a2a:	90 91 fd 06 	lds	r25, 0x06FD	; 0x8006fd <TICK+0x5>
     a2e:	a0 91 fe 06 	lds	r26, 0x06FE	; 0x8006fe <TICK+0x6>
     a32:	b0 91 ff 06 	lds	r27, 0x06FF	; 0x8006ff <TICK+0x7>
     a36:	82 3c       	cpi	r24, 0xC2	; 194
     a38:	91 40       	sbci	r25, 0x01	; 1
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	09 f4       	brne	.+2      	; 0xa42 <buzz_play+0x392>
     a40:	1b ce       	rjmp	.-970    	; 0x678 <buzz_MUTE>
     a42:	08 95       	ret

00000a44 <__vector_15>:
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	0b b6       	in	r0, 0x3b	; 59
     a50:	0f 92       	push	r0
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
     a6a:	e8 ef       	ldi	r30, 0xF8	; 248
     a6c:	f6 e0       	ldi	r31, 0x06	; 6
     a6e:	80 81       	ld	r24, Z
     a70:	91 81       	ldd	r25, Z+1	; 0x01
     a72:	a2 81       	ldd	r26, Z+2	; 0x02
     a74:	b3 81       	ldd	r27, Z+3	; 0x03
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	a1 1d       	adc	r26, r1
     a7a:	b1 1d       	adc	r27, r1
     a7c:	80 83       	st	Z, r24
     a7e:	91 83       	std	Z+1, r25	; 0x01
     a80:	a2 83       	std	Z+2, r26	; 0x02
     a82:	b3 83       	std	Z+3, r27	; 0x03
     a84:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <logojector_tick_enable_flag>
     a88:	90 91 af 05 	lds	r25, 0x05AF	; 0x8005af <logojector_tick_enable_flag+0x1>
     a8c:	89 2b       	or	r24, r25
     a8e:	59 f0       	breq	.+22     	; 0xaa6 <__vector_15+0x62>
     a90:	80 85       	ldd	r24, Z+8	; 0x08
     a92:	91 85       	ldd	r25, Z+9	; 0x09
     a94:	a2 85       	ldd	r26, Z+10	; 0x0a
     a96:	b3 85       	ldd	r27, Z+11	; 0x0b
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	a1 1d       	adc	r26, r1
     a9c:	b1 1d       	adc	r27, r1
     a9e:	80 87       	std	Z+8, r24	; 0x08
     aa0:	91 87       	std	Z+9, r25	; 0x09
     aa2:	a2 87       	std	Z+10, r26	; 0x0a
     aa4:	b3 87       	std	Z+11, r27	; 0x0b
     aa6:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <lcd_tick_enable_flag>
     aaa:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <lcd_tick_enable_flag+0x1>
     aae:	89 2b       	or	r24, r25
     ab0:	69 f0       	breq	.+26     	; 0xacc <__vector_15+0x88>
     ab2:	e8 ef       	ldi	r30, 0xF8	; 248
     ab4:	f6 e0       	ldi	r31, 0x06	; 6
     ab6:	84 85       	ldd	r24, Z+12	; 0x0c
     ab8:	95 85       	ldd	r25, Z+13	; 0x0d
     aba:	a6 85       	ldd	r26, Z+14	; 0x0e
     abc:	b7 85       	ldd	r27, Z+15	; 0x0f
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	a1 1d       	adc	r26, r1
     ac2:	b1 1d       	adc	r27, r1
     ac4:	84 87       	std	Z+12, r24	; 0x0c
     ac6:	95 87       	std	Z+13, r25	; 0x0d
     ac8:	a6 87       	std	Z+14, r26	; 0x0e
     aca:	b7 87       	std	Z+15, r27	; 0x0f
     acc:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <exit_gate_tick_enable_flag>
     ad0:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <exit_gate_tick_enable_flag+0x1>
     ad4:	89 2b       	or	r24, r25
     ad6:	69 f0       	breq	.+26     	; 0xaf2 <__vector_15+0xae>
     ad8:	e8 ef       	ldi	r30, 0xF8	; 248
     ada:	f6 e0       	ldi	r31, 0x06	; 6
     adc:	80 89       	ldd	r24, Z+16	; 0x10
     ade:	91 89       	ldd	r25, Z+17	; 0x11
     ae0:	a2 89       	ldd	r26, Z+18	; 0x12
     ae2:	b3 89       	ldd	r27, Z+19	; 0x13
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	a1 1d       	adc	r26, r1
     ae8:	b1 1d       	adc	r27, r1
     aea:	80 8b       	std	Z+16, r24	; 0x10
     aec:	91 8b       	std	Z+17, r25	; 0x11
     aee:	a2 8b       	std	Z+18, r26	; 0x12
     af0:	b3 8b       	std	Z+19, r27	; 0x13
     af2:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <entrance_gate_tick_enable_flag>
     af6:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <entrance_gate_tick_enable_flag+0x1>
     afa:	89 2b       	or	r24, r25
     afc:	69 f0       	breq	.+26     	; 0xb18 <__vector_15+0xd4>
     afe:	e8 ef       	ldi	r30, 0xF8	; 248
     b00:	f6 e0       	ldi	r31, 0x06	; 6
     b02:	84 89       	ldd	r24, Z+20	; 0x14
     b04:	95 89       	ldd	r25, Z+21	; 0x15
     b06:	a6 89       	ldd	r26, Z+22	; 0x16
     b08:	b7 89       	ldd	r27, Z+23	; 0x17
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	a1 1d       	adc	r26, r1
     b0e:	b1 1d       	adc	r27, r1
     b10:	84 8b       	std	Z+20, r24	; 0x14
     b12:	95 8b       	std	Z+21, r25	; 0x15
     b14:	a6 8b       	std	Z+22, r26	; 0x16
     b16:	b7 8b       	std	Z+23, r27	; 0x17
     b18:	80 91 45 05 	lds	r24, 0x0545	; 0x800545 <timeout_tick_enable_flag>
     b1c:	90 91 46 05 	lds	r25, 0x0546	; 0x800546 <timeout_tick_enable_flag+0x1>
     b20:	89 2b       	or	r24, r25
     b22:	69 f0       	breq	.+26     	; 0xb3e <__vector_15+0xfa>
     b24:	e8 ef       	ldi	r30, 0xF8	; 248
     b26:	f6 e0       	ldi	r31, 0x06	; 6
     b28:	80 8d       	ldd	r24, Z+24	; 0x18
     b2a:	91 8d       	ldd	r25, Z+25	; 0x19
     b2c:	a2 8d       	ldd	r26, Z+26	; 0x1a
     b2e:	b3 8d       	ldd	r27, Z+27	; 0x1b
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	a1 1d       	adc	r26, r1
     b34:	b1 1d       	adc	r27, r1
     b36:	80 8f       	std	Z+24, r24	; 0x18
     b38:	91 8f       	std	Z+25, r25	; 0x19
     b3a:	a2 8f       	std	Z+26, r26	; 0x1a
     b3c:	b3 8f       	std	Z+27, r27	; 0x1b
     b3e:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <buzz_tick_enable_flag>
     b42:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <buzz_tick_enable_flag+0x1>
     b46:	89 2b       	or	r24, r25
     b48:	71 f0       	breq	.+28     	; 0xb66 <__vector_15+0x122>
     b4a:	e8 ef       	ldi	r30, 0xF8	; 248
     b4c:	f6 e0       	ldi	r31, 0x06	; 6
     b4e:	84 81       	ldd	r24, Z+4	; 0x04
     b50:	95 81       	ldd	r25, Z+5	; 0x05
     b52:	a6 81       	ldd	r26, Z+6	; 0x06
     b54:	b7 81       	ldd	r27, Z+7	; 0x07
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	a1 1d       	adc	r26, r1
     b5a:	b1 1d       	adc	r27, r1
     b5c:	84 83       	std	Z+4, r24	; 0x04
     b5e:	95 83       	std	Z+5, r25	; 0x05
     b60:	a6 83       	std	Z+6, r26	; 0x06
     b62:	b7 83       	std	Z+7, r27	; 0x07
     b64:	a5 dd       	rcall	.-1206   	; 0x6b0 <buzz_play>
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	bf 91       	pop	r27
     b6c:	af 91       	pop	r26
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	7f 91       	pop	r23
     b74:	6f 91       	pop	r22
     b76:	5f 91       	pop	r21
     b78:	4f 91       	pop	r20
     b7a:	3f 91       	pop	r19
     b7c:	2f 91       	pop	r18
     b7e:	0f 90       	pop	r0
     b80:	0b be       	out	0x3b, r0	; 59
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	0f 90       	pop	r0
     b88:	1f 90       	pop	r1
     b8a:	18 95       	reti

00000b8c <start_timeout_count>:
     b8c:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <TICK+0x18>
     b90:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <TICK+0x19>
     b94:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <TICK+0x1a>
     b98:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <TICK+0x1b>
     b9c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ba0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     ba4:	08 95       	ret

00000ba6 <request_reset_to_admin>:
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	65 97       	sbiw	r28, 0x15	; 21
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	cd bf       	out	0x3d, r28	; 61
     bba:	bc 01       	movw	r22, r24
     bbc:	9a e0       	ldi	r25, 0x0A	; 10
     bbe:	e5 e0       	ldi	r30, 0x05	; 5
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	de 01       	movw	r26, r28
     bc4:	11 96       	adiw	r26, 0x01	; 1
     bc6:	01 90       	ld	r0, Z+
     bc8:	0d 92       	st	X+, r0
     bca:	9a 95       	dec	r25
     bcc:	e1 f7       	brne	.-8      	; 0xbc6 <request_reset_to_admin+0x20>
     bce:	fe 01       	movw	r30, r28
     bd0:	3b 96       	adiw	r30, 0x0b	; 11
     bd2:	8b e0       	ldi	r24, 0x0B	; 11
     bd4:	df 01       	movw	r26, r30
     bd6:	1d 92       	st	X+, r1
     bd8:	8a 95       	dec	r24
     bda:	e9 f7       	brne	.-6      	; 0xbd6 <request_reset_to_admin+0x30>
     bdc:	ce 01       	movw	r24, r28
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	0e 94 21 11 	call	0x2242	; 0x2242 <strcat>
     be4:	18 d6       	rcall	.+3120   	; 0x1816 <i2c_lcd_clear>
     be6:	47 e9       	ldi	r20, 0x97	; 151
     be8:	51 e0       	ldi	r21, 0x01	; 1
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	04 d6       	rcall	.+3080   	; 0x17f8 <i2c_lcd_string>
     bf0:	44 ea       	ldi	r20, 0xA4	; 164
     bf2:	51 e0       	ldi	r21, 0x01	; 1
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	ff d5       	rcall	.+3070   	; 0x17f8 <i2c_lcd_string>
     bfa:	ae 01       	movw	r20, r28
     bfc:	4f 5f       	subi	r20, 0xFF	; 255
     bfe:	5f 4f       	sbci	r21, 0xFF	; 255
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	f9 d5       	rcall	.+3058   	; 0x17f8 <i2c_lcd_string>
     c06:	65 96       	adiw	r28, 0x15	; 21
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	08 95       	ret

00000c18 <timeout_check>:
     c18:	40 91 10 07 	lds	r20, 0x0710	; 0x800710 <TICK+0x18>
     c1c:	50 91 11 07 	lds	r21, 0x0711	; 0x800711 <TICK+0x19>
     c20:	60 91 12 07 	lds	r22, 0x0712	; 0x800712 <TICK+0x1a>
     c24:	70 91 13 07 	lds	r23, 0x0713	; 0x800713 <TICK+0x1b>
     c28:	41 31       	cpi	r20, 0x11	; 17
     c2a:	57 42       	sbci	r21, 0x27	; 39
     c2c:	61 05       	cpc	r22, r1
     c2e:	71 05       	cpc	r23, r1
     c30:	38 f0       	brcs	.+14     	; 0xc40 <timeout_check+0x28>
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c3a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     c3e:	b3 df       	rcall	.-154    	; 0xba6 <request_reset_to_admin>
     c40:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c44:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <timeout_check+0x30>
     c4c:	08 95       	ret

00000c4e <esp8266_init>:
     c4e:	cf 92       	push	r12
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	7c 01       	movw	r14, r24
     c60:	6b 01       	movw	r12, r22
     c62:	ea 01       	movw	r28, r20
     c64:	89 01       	movw	r16, r18
     c66:	92 df       	rcall	.-220    	; 0xb8c <start_timeout_count>
     c68:	87 eb       	ldi	r24, 0xB7	; 183
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <uart1_tx_string>
     c70:	2f ef       	ldi	r18, 0xFF	; 255
     c72:	81 e1       	ldi	r24, 0x11	; 17
     c74:	9a e7       	ldi	r25, 0x7A	; 122
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	80 40       	sbci	r24, 0x00	; 0
     c7a:	90 40       	sbci	r25, 0x00	; 0
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <esp8266_init+0x28>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <esp8266_init+0x32>
     c80:	00 00       	nop
     c82:	80 ec       	ldi	r24, 0xC0	; 192
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	c8 df       	rcall	.-112    	; 0xc18 <timeout_check>
     c88:	47 ec       	ldi	r20, 0xC7	; 199
     c8a:	51 e0       	ldi	r21, 0x01	; 1
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	b3 d5       	rcall	.+2918   	; 0x17f8 <i2c_lcd_string>
     c92:	7c df       	rcall	.-264    	; 0xb8c <start_timeout_count>
     c94:	8c ed       	ldi	r24, 0xDC	; 220
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <uart1_tx_string>
     c9c:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     ca0:	81 11       	cpse	r24, r1
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <esp8266_init+0x64>
     ca4:	85 ee       	ldi	r24, 0xE5	; 229
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	b7 df       	rcall	.-146    	; 0xc18 <timeout_check>
     caa:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     cae:	88 23       	and	r24, r24
     cb0:	c9 f3       	breq	.-14     	; 0xca4 <esp8266_init+0x56>
     cb2:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <esp8266_return_result_flag>
     cb6:	6a df       	rcall	.-300    	; 0xb8c <start_timeout_count>
     cb8:	8c ee       	ldi	r24, 0xEC	; 236
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <uart1_tx_string>
     cc0:	2f ef       	ldi	r18, 0xFF	; 255
     cc2:	87 ea       	ldi	r24, 0xA7	; 167
     cc4:	91 e6       	ldi	r25, 0x61	; 97
     cc6:	21 50       	subi	r18, 0x01	; 1
     cc8:	80 40       	sbci	r24, 0x00	; 0
     cca:	90 40       	sbci	r25, 0x00	; 0
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <esp8266_init+0x78>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <esp8266_init+0x82>
     cd0:	00 00       	nop
     cd2:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <esp8266_return_result_flag>
     cd6:	8a ef       	ldi	r24, 0xFA	; 250
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	9e df       	rcall	.-196    	; 0xc18 <timeout_check>
     cdc:	44 e0       	ldi	r20, 0x04	; 4
     cde:	52 e0       	ldi	r21, 0x02	; 2
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	82 e0       	ldi	r24, 0x02	; 2
     ce4:	89 d5       	rcall	.+2834   	; 0x17f8 <i2c_lcd_string>
     ce6:	52 df       	rcall	.-348    	; 0xb8c <start_timeout_count>
     ce8:	89 e1       	ldi	r24, 0x19	; 25
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <uart1_tx_string>
     cf0:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     cf4:	81 11       	cpse	r24, r1
     cf6:	07 c0       	rjmp	.+14     	; 0xd06 <esp8266_init+0xb8>
     cf8:	86 e2       	ldi	r24, 0x26	; 38
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	8d df       	rcall	.-230    	; 0xc18 <timeout_check>
     cfe:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     d02:	88 23       	and	r24, r24
     d04:	c9 f3       	breq	.-14     	; 0xcf8 <esp8266_init+0xaa>
     d06:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <esp8266_return_result_flag>
     d0a:	40 df       	rcall	.-384    	; 0xb8c <start_timeout_count>
     d0c:	81 e3       	ldi	r24, 0x31	; 49
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <uart1_tx_string>
     d14:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     d18:	81 11       	cpse	r24, r1
     d1a:	07 c0       	rjmp	.+14     	; 0xd2a <esp8266_init+0xdc>
     d1c:	8c e3       	ldi	r24, 0x3C	; 60
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	7b df       	rcall	.-266    	; 0xc18 <timeout_check>
     d22:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     d26:	88 23       	and	r24, r24
     d28:	c9 f3       	breq	.-14     	; 0xd1c <esp8266_init+0xce>
     d2a:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <esp8266_return_result_flag>
     d2e:	45 e4       	ldi	r20, 0x45	; 69
     d30:	52 e0       	ldi	r21, 0x02	; 2
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	82 e0       	ldi	r24, 0x02	; 2
     d36:	60 d5       	rcall	.+2752   	; 0x17f8 <i2c_lcd_string>
     d38:	29 df       	rcall	.-430    	; 0xb8c <start_timeout_count>
     d3a:	a6 01       	movw	r20, r12
     d3c:	b7 01       	movw	r22, r14
     d3e:	8a e5       	ldi	r24, 0x5A	; 90
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	0e 94 3b 10 	call	0x2076	; 0x2076 <connect_to_AP>
     d46:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <uart1_tx_string>
     d4a:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     d4e:	81 11       	cpse	r24, r1
     d50:	07 c0       	rjmp	.+14     	; 0xd60 <esp8266_init+0x112>
     d52:	85 e6       	ldi	r24, 0x65	; 101
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	60 df       	rcall	.-320    	; 0xc18 <timeout_check>
     d58:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     d5c:	88 23       	and	r24, r24
     d5e:	c9 f3       	breq	.-14     	; 0xd52 <esp8266_init+0x104>
     d60:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <esp8266_return_result_flag>
     d64:	4e e6       	ldi	r20, 0x6E	; 110
     d66:	52 e0       	ldi	r21, 0x02	; 2
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	45 d5       	rcall	.+2698   	; 0x17f8 <i2c_lcd_string>
     d6e:	0e df       	rcall	.-484    	; 0xb8c <start_timeout_count>
     d70:	83 e8       	ldi	r24, 0x83	; 131
     d72:	92 e0       	ldi	r25, 0x02	; 2
     d74:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <uart1_tx_string>
     d78:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     d7c:	81 11       	cpse	r24, r1
     d7e:	07 c0       	rjmp	.+14     	; 0xd8e <esp8266_init+0x140>
     d80:	8e e8       	ldi	r24, 0x8E	; 142
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	49 df       	rcall	.-366    	; 0xc18 <timeout_check>
     d86:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     d8a:	88 23       	and	r24, r24
     d8c:	c9 f3       	breq	.-14     	; 0xd80 <esp8266_init+0x132>
     d8e:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <esp8266_return_result_flag>
     d92:	47 e9       	ldi	r20, 0x97	; 151
     d94:	52 e0       	ldi	r21, 0x02	; 2
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	2e d5       	rcall	.+2652   	; 0x17f8 <i2c_lcd_string>
     d9c:	f7 de       	rcall	.-530    	; 0xb8c <start_timeout_count>
     d9e:	b8 01       	movw	r22, r16
     da0:	ce 01       	movw	r24, r28
     da2:	0e 94 91 10 	call	0x2122	; 0x2122 <TCP_connect>
     da6:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <uart1_tx_string>
     daa:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     dae:	81 11       	cpse	r24, r1
     db0:	07 c0       	rjmp	.+14     	; 0xdc0 <esp8266_init+0x172>
     db2:	8c ea       	ldi	r24, 0xAC	; 172
     db4:	92 e0       	ldi	r25, 0x02	; 2
     db6:	30 df       	rcall	.-416    	; 0xc18 <timeout_check>
     db8:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <esp8266_return_result_flag>
     dbc:	88 23       	and	r24, r24
     dbe:	c9 f3       	breq	.-14     	; 0xdb2 <esp8266_init+0x164>
     dc0:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <esp8266_return_result_flag>
     dc4:	48 eb       	ldi	r20, 0xB8	; 184
     dc6:	52 e0       	ldi	r21, 0x02	; 2
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	15 d5       	rcall	.+2602   	; 0x17f8 <i2c_lcd_string>
     dce:	2f ef       	ldi	r18, 0xFF	; 255
     dd0:	81 ee       	ldi	r24, 0xE1	; 225
     dd2:	94 e0       	ldi	r25, 0x04	; 4
     dd4:	21 50       	subi	r18, 0x01	; 1
     dd6:	80 40       	sbci	r24, 0x00	; 0
     dd8:	90 40       	sbci	r25, 0x00	; 0
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <esp8266_init+0x186>
     ddc:	00 c0       	rjmp	.+0      	; 0xdde <esp8266_init+0x190>
     dde:	00 00       	nop
     de0:	4d ec       	ldi	r20, 0xCD	; 205
     de2:	52 e0       	ldi	r21, 0x02	; 2
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	07 d5       	rcall	.+2574   	; 0x17f8 <i2c_lcd_string>
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	08 95       	ret

00000dfc <logojector_ON>:
     dfc:	ac 9a       	sbi	0x15, 4	; 21
     dfe:	08 95       	ret

00000e00 <logojector_OFF>:
     e00:	ac 98       	cbi	0x15, 4	; 21
     e02:	08 95       	ret

00000e04 <tick_enable>:
	 tick_enable(flag);
	 
 }
 
 void tick_enable(int tick_name){
	 switch(tick_name){
     e04:	84 30       	cpi	r24, 0x04	; 4
     e06:	91 05       	cpc	r25, r1
     e08:	59 f1       	breq	.+86     	; 0xe60 <tick_enable+0x5c>
     e0a:	34 f4       	brge	.+12     	; 0xe18 <tick_enable+0x14>
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	91 05       	cpc	r25, r1
     e10:	49 f0       	breq	.+18     	; 0xe24 <tick_enable+0x20>
     e12:	02 97       	sbiw	r24, 0x02	; 2
     e14:	b1 f0       	breq	.+44     	; 0xe42 <tick_enable+0x3e>
     e16:	08 95       	ret
     e18:	85 30       	cpi	r24, 0x05	; 5
     e1a:	91 05       	cpc	r25, r1
     e1c:	81 f1       	breq	.+96     	; 0xe7e <tick_enable+0x7a>
     e1e:	06 97       	sbiw	r24, 0x06	; 6
     e20:	e9 f1       	breq	.+122    	; 0xe9c <tick_enable+0x98>
     e22:	08 95       	ret
		 case TICK_BUZZ: TICK.buzz_1ms=0; buzz_tick_enable_flag=1; break;
     e24:	10 92 fc 06 	sts	0x06FC, r1	; 0x8006fc <TICK+0x4>
     e28:	10 92 fd 06 	sts	0x06FD, r1	; 0x8006fd <TICK+0x5>
     e2c:	10 92 fe 06 	sts	0x06FE, r1	; 0x8006fe <TICK+0x6>
     e30:	10 92 ff 06 	sts	0x06FF, r1	; 0x8006ff <TICK+0x7>
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 f3 06 	sts	0x06F3, r25	; 0x8006f3 <buzz_tick_enable_flag+0x1>
     e3c:	80 93 f2 06 	sts	0x06F2, r24	; 0x8006f2 <buzz_tick_enable_flag>
     e40:	08 95       	ret
		 case TICK_LOGOJECTOR:TICK.logojector_tick_1ms=0; logojector_tick_enable_flag=1; break;
     e42:	10 92 00 07 	sts	0x0700, r1	; 0x800700 <TICK+0x8>
     e46:	10 92 01 07 	sts	0x0701, r1	; 0x800701 <TICK+0x9>
     e4a:	10 92 02 07 	sts	0x0702, r1	; 0x800702 <TICK+0xa>
     e4e:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <TICK+0xb>
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <logojector_tick_enable_flag+0x1>
     e5a:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <logojector_tick_enable_flag>
     e5e:	08 95       	ret
		 //case TICK_LCD: lcd_tick_enable_flag=1;
		 case TICK_EXIT_GATE: TICK.exit_gate_tick_1ms=0; exit_gate_tick_enable_flag=1; break;
     e60:	10 92 08 07 	sts	0x0708, r1	; 0x800708 <TICK+0x10>
     e64:	10 92 09 07 	sts	0x0709, r1	; 0x800709 <TICK+0x11>
     e68:	10 92 0a 07 	sts	0x070A, r1	; 0x80070a <TICK+0x12>
     e6c:	10 92 0b 07 	sts	0x070B, r1	; 0x80070b <TICK+0x13>
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	90 93 f1 06 	sts	0x06F1, r25	; 0x8006f1 <exit_gate_tick_enable_flag+0x1>
     e78:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <exit_gate_tick_enable_flag>
     e7c:	08 95       	ret
		 case TICK_ENTRANCE_GATE: TICK.entrance_gate_tick_1ms=0; entrance_gate_tick_enable_flag=1; break;
     e7e:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <TICK+0x14>
     e82:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <TICK+0x15>
     e86:	10 92 0e 07 	sts	0x070E, r1	; 0x80070e <TICK+0x16>
     e8a:	10 92 0f 07 	sts	0x070F, r1	; 0x80070f <TICK+0x17>
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	90 93 ef 06 	sts	0x06EF, r25	; 0x8006ef <entrance_gate_tick_enable_flag+0x1>
     e96:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <entrance_gate_tick_enable_flag>
     e9a:	08 95       	ret
		 case TICK_TIMEOUT :TICK.timeout_tick_1ms=0; timeout_tick_enable_flag=1; break;
     e9c:	10 92 10 07 	sts	0x0710, r1	; 0x800710 <TICK+0x18>
     ea0:	10 92 11 07 	sts	0x0711, r1	; 0x800711 <TICK+0x19>
     ea4:	10 92 12 07 	sts	0x0712, r1	; 0x800712 <TICK+0x1a>
     ea8:	10 92 13 07 	sts	0x0713, r1	; 0x800713 <TICK+0x1b>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	90 93 46 05 	sts	0x0546, r25	; 0x800546 <timeout_tick_enable_flag+0x1>
     eb4:	80 93 45 05 	sts	0x0545, r24	; 0x800545 <timeout_tick_enable_flag>
     eb8:	08 95       	ret

00000eba <setSoundClip>:
//부저 관련 함수들
void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 
	
	 switch(clip)
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	99 f0       	breq	.+38     	; 0xee4 <setSoundClip+0x2a>
     ebe:	28 f4       	brcc	.+10     	; 0xeca <setSoundClip+0x10>
     ec0:	88 23       	and	r24, r24
     ec2:	49 f0       	breq	.+18     	; 0xed6 <setSoundClip+0x1c>
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	51 f0       	breq	.+20     	; 0xedc <setSoundClip+0x22>
     ec8:	1c c0       	rjmp	.+56     	; 0xf02 <setSoundClip+0x48>
     eca:	84 30       	cpi	r24, 0x04	; 4
     ecc:	99 f0       	breq	.+38     	; 0xef4 <setSoundClip+0x3a>
     ece:	70 f0       	brcs	.+28     	; 0xeec <setSoundClip+0x32>
     ed0:	85 30       	cpi	r24, 0x05	; 5
     ed2:	a1 f0       	breq	.+40     	; 0xefc <setSoundClip+0x42>
     ed4:	16 c0       	rjmp	.+44     	; 0xf02 <setSoundClip+0x48>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     ed6:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <music_flag>
     eda:	13 c0       	rjmp	.+38     	; 0xf02 <setSoundClip+0x48>
		   case BUZZ_ON: music_flag=BUZZ_ON; break;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <music_flag>
     ee2:	0f c0       	rjmp	.+30     	; 0xf02 <setSoundClip+0x48>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <music_flag>
     eea:	0b c0       	rjmp	.+22     	; 0xf02 <setSoundClip+0x48>
		   case BUZZ_NOT_REGISTERED: music_flag=BUZZ_NOT_REGISTERED; break;
     eec:	83 e0       	ldi	r24, 0x03	; 3
     eee:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <music_flag>
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <setSoundClip+0x48>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     ef4:	84 e0       	ldi	r24, 0x04	; 4
     ef6:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <music_flag>
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <setSoundClip+0x48>
		   case BUZZ_ESP8266_CONNECTED: music_flag=BUZZ_ESP8266_CONNECTED; break;
     efc:	85 e0       	ldi	r24, 0x05	; 5
     efe:	80 93 44 05 	sts	0x0544, r24	; 0x800544 <music_flag>
		   
	 }
	 tick_enable(TICK_BUZZ); //여기 안에 TICK.buzz_1ms=0해주는 코드가 포함되어 있음.
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	7e cf       	rjmp	.-260    	; 0xe04 <tick_enable>
     f08:	08 95       	ret

00000f0a <start_timer>:
	
 }
 
 void start_timer(int flag)
 {
	 TICK.tick_1ms=0;
     f0a:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <TICK>
     f0e:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <TICK+0x1>
     f12:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <TICK+0x2>
     f16:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <TICK+0x3>
	 if(flag!=TICK_EXIT_GATE){// LCD가 출력되는 모든 상황에서 lcd tick 초기화가 된다.
     f1a:	84 30       	cpi	r24, 0x04	; 4
     f1c:	91 05       	cpc	r25, r1
     f1e:	71 f0       	breq	.+28     	; 0xf3c <start_timer+0x32>
		 TICK.lcd_tick_1ms=0;lcd_tick_enable_flag=1;
     f20:	10 92 04 07 	sts	0x0704, r1	; 0x800704 <TICK+0xc>
     f24:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <TICK+0xd>
     f28:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <TICK+0xe>
     f2c:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <TICK+0xf>
     f30:	21 e0       	ldi	r18, 0x01	; 1
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	30 93 15 07 	sts	0x0715, r19	; 0x800715 <lcd_tick_enable_flag+0x1>
     f38:	20 93 14 07 	sts	0x0714, r18	; 0x800714 <lcd_tick_enable_flag>
	 } 
	 

	 //셋된 플래그들에 맞게 타이머 감지를 시작함.
	 tick_enable(flag);
     f3c:	63 cf       	rjmp	.-314    	; 0xe04 <tick_enable>
     f3e:	08 95       	ret

00000f40 <RC522_data_state_check_and_actuate>:
		}
	}
}

void RC522_data_state_check_and_actuate(char *tggl)
{
     f40:	af 92       	push	r10
     f42:	bf 92       	push	r11
     f44:	cf 92       	push	r12
     f46:	df 92       	push	r13
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	6c 97       	sbiw	r28, 0x1c	; 28
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	9c 01       	movw	r18, r24
	if(received_state==RECEIVE_NONE); //do nothing
	else if(received_state==RECEIVE_SUCCESS)
     f66:	90 91 dc 06 	lds	r25, 0x06DC	; 0x8006dc <received_state>
     f6a:	91 30       	cpi	r25, 0x01	; 1
     f6c:	09 f0       	breq	.+2      	; 0xf70 <RC522_data_state_check_and_actuate+0x30>
     f6e:	bd c1       	rjmp	.+890    	; 0x12ea <__stack+0x1eb>
     f70:	f9 01       	movw	r30, r18
	{//Received data service routine.
		//send to esp8266 and receive result data.
		
		static int user_count=0;//입구,출구 둘다 사용해야 하는 변수이므로 일단 여기다가 선언함.
		if((*tggl)==ENTRANCE_GATE){
     f72:	80 81       	ld	r24, Z
     f74:	81 11       	cpse	r24, r1
     f76:	57 c1       	rjmp	.+686    	; 0x1226 <__stack+0x127>
			//esp8266에 uid와 입구게이트 정보 전송 함수
			//while(전송 완료될 때 까지 대기)???
			
			
			/*이부분은 esp8266 구현한 뒤에 넣어야 된다 */
			uart1_tx_string("AT+CIPSEND=11\r\n"); //4byte길이 데이터 전송 예정
     f78:	82 ee       	ldi	r24, 0xE2	; 226
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <uart1_tx_string>
			// '>' 문자가 확인될 때까지 대기
			while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
     f80:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <esp8266_send_ready_flag>
     f84:	88 23       	and	r24, r24
     f86:	e1 f3       	breq	.-8      	; 0xf80 <RC522_data_state_check_and_actuate+0x40>
			esp8266_send_ready_flag=0;
     f88:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <esp8266_send_ready_flag>
			
			//esp8266으로 uid데이터 전송
			
			//미리 받을 사전 준비 시작.
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
     f8c:	82 e3       	ldi	r24, 0x32	; 50
     f8e:	e0 eb       	ldi	r30, 0xB0	; 176
     f90:	f5 e0       	ldi	r31, 0x05	; 5
     f92:	df 01       	movw	r26, r30
     f94:	1d 92       	st	X+, r1
     f96:	8a 95       	dec	r24
     f98:	e9 f7       	brne	.-6      	; 0xf94 <RC522_data_state_check_and_actuate+0x54>
     f9a:	0c ec       	ldi	r16, 0xCC	; 204
     f9c:	16 e0       	ldi	r17, 0x06	; 6
     f9e:	0f 2e       	mov	r0, r31
     fa0:	f0 ed       	ldi	r31, 0xD0	; 208
     fa2:	ef 2e       	mov	r14, r31
     fa4:	f6 e0       	ldi	r31, 0x06	; 6
     fa6:	ff 2e       	mov	r15, r31
     fa8:	f0 2d       	mov	r31, r0
			
			//uid 데이터 전송
			for(int i=0; i<4; i++)
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
     faa:	f8 01       	movw	r30, r16
     fac:	81 91       	ld	r24, Z+
     fae:	8f 01       	movw	r16, r30
     fb0:	0e 94 0c 10 	call	0x2018	; 0x2018 <HexToString>
     fb4:	f4 d7       	rcall	.+4072   	; 0x1f9e <uart1_tx_string>
				uart1_tx_char(' ');
     fb6:	80 e2       	ldi	r24, 0x20	; 32
     fb8:	ea d7       	rcall	.+4052   	; 0x1f8e <uart1_tx_char>
			
			//미리 받을 사전 준비 시작.
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
			
			//uid 데이터 전송
			for(int i=0; i<4; i++)
     fba:	0e 15       	cp	r16, r14
     fbc:	1f 05       	cpc	r17, r15
     fbe:	a9 f7       	brne	.-22     	; 0xfaa <RC522_data_state_check_and_actuate+0x6a>
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
				uart1_tx_char(' ');
			}
			uart1_tx_string("\r\n");
     fc0:	8a ed       	ldi	r24, 0xDA	; 218
     fc2:	93 e0       	ldi	r25, 0x03	; 3
     fc4:	ec d7       	rcall	.+4056   	; 0x1f9e <uart1_tx_string>

			
			//esp8266을 통해 uid전송 후, 서버에서 결과물을 다시 전송해주기까지 대기
			while(!esp8266_receiving_flag); //ISR내에서 버퍼에 모두 담을때 까지 대기 esp8266_received_data[] 에 저장
     fc6:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <esp8266_receiving_flag>
     fca:	88 23       	and	r24, r24
     fcc:	e1 f3       	breq	.-8      	; 0xfc6 <RC522_data_state_check_and_actuate+0x86>
			esp8266_receiving_flag=0;
     fce:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <esp8266_receiving_flag>
			//esp8266_receive_complete_flag=0;
			if(esp8266_received_data[0]=='O'){
     fd2:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <esp8266_received_data>
     fd6:	8f 34       	cpi	r24, 0x4F	; 79
     fd8:	09 f0       	breq	.+2      	; 0xfdc <RC522_data_state_check_and_actuate+0x9c>
     fda:	d9 c0       	rjmp	.+434    	; 0x118e <__stack+0x8f>
				//DB 테이블에 존재하는 uid일 경우 해당 구문을 들어옴
				
				strncpy((char*)esp8266_received_data,"  ",2);
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	90 e2       	ldi	r25, 0x20	; 32
     fe0:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <esp8266_received_data+0x1>
     fe4:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <esp8266_received_data>
				
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
     fe8:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <rfid_user_flag+0x1>
     fec:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <rfid_user_flag>
     ff0:	00 ee       	ldi	r16, 0xE0	; 224
     ff2:	14 e0       	ldi	r17, 0x04	; 4
				for(int i=0; i<MAX_USER_COUNT;i++)
     ff4:	e1 2c       	mov	r14, r1
     ff6:	f1 2c       	mov	r15, r1
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
						rfid_user_flag=1;
     ff8:	cc 24       	eor	r12, r12
     ffa:	c3 94       	inc	r12
     ffc:	d1 2c       	mov	r13, r1
				for(int i=0; i<MAX_USER_COUNT;i++)
				{
					
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
     ffe:	66 e9       	ldi	r22, 0x96	; 150
    1000:	73 e0       	ldi	r23, 0x03	; 3
    1002:	c8 01       	movw	r24, r16
    1004:	0e 94 2c 11 	call	0x2258	; 0x2258 <strcmp>
    1008:	89 2b       	or	r24, r25
    100a:	49 f4       	brne	.+18     	; 0x101e <__DATA_REGION_LENGTH__+0x1e>
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
    100c:	f0 92 df 04 	sts	0x04DF, r15	; 0x8004df <rfid_user_count_pointer+0x1>
    1010:	e0 92 de 04 	sts	0x04DE, r14	; 0x8004de <rfid_user_count_pointer>
						rfid_user_flag=1;
    1014:	d0 92 dd 04 	sts	0x04DD, r13	; 0x8004dd <rfid_user_flag+0x1>
    1018:	c0 92 dc 04 	sts	0x04DC, r12	; 0x8004dc <rfid_user_flag>
    101c:	0c c0       	rjmp	.+24     	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
						//i=MAX_USER_COUNT;//루프를 나오기 위함
					}
					else if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch0)==0)
    101e:	6c ec       	ldi	r22, 0xCC	; 204
    1020:	76 e0       	ldi	r23, 0x06	; 6
    1022:	c8 01       	movw	r24, r16
    1024:	0e 94 2c 11 	call	0x2258	; 0x2258 <strcmp>
    1028:	89 2b       	or	r24, r25
    102a:	29 f4       	brne	.+10     	; 0x1036 <__DATA_REGION_LENGTH__+0x36>
					{
						//만일 버퍼 안에 기존 유저가 들어있는 것이 확인됐을 때 
						i=MAX_USER_COUNT; //그 이후는 의미 없기 때문에 그냥 빠져나옴
						rfid_user_flag=0;
    102c:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <rfid_user_flag+0x1>
    1030:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <rfid_user_flag>
    1034:	8f c0       	rjmp	.+286    	; 0x1154 <__stack+0x55>
				
				strncpy((char*)esp8266_received_data,"  ",2);
				
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
				for(int i=0; i<MAX_USER_COUNT;i++)
    1036:	ff ef       	ldi	r31, 0xFF	; 255
    1038:	ef 1a       	sub	r14, r31
    103a:	ff 0a       	sbc	r15, r31
    103c:	0b 5f       	subi	r16, 0xFB	; 251
    103e:	1f 4f       	sbci	r17, 0xFF	; 255
    1040:	84 e1       	ldi	r24, 0x14	; 20
    1042:	e8 16       	cp	r14, r24
    1044:	f1 04       	cpc	r15, r1
    1046:	d9 f6       	brne	.-74     	; 0xffe <RC522_data_state_check_and_actuate+0xbe>
					//else rfid_user_flag=0;//모두 꽉 차 있음.
					
				}
				
				
				if(rfid_user_flag){//DB에 uid가 존재할뿐더러, 최초 입장시에만 해당 구문을 들어감. 이후에는 인식안됨.
    1048:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <rfid_user_flag>
    104c:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <rfid_user_flag+0x1>
    1050:	89 2b       	or	r24, r25
    1052:	09 f4       	brne	.+2      	; 0x1056 <__DATA_REGION_LENGTH__+0x56>
    1054:	7f c0       	rjmp	.+254    	; 0x1154 <__stack+0x55>
					strcpy((char*)rfid_user_uid_buffer[rfid_user_count_pointer],(char*)rfid_uid_ch0);
    1056:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <rfid_user_count_pointer>
    105a:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <rfid_user_count_pointer+0x1>
    105e:	9c 01       	movw	r18, r24
    1060:	22 0f       	add	r18, r18
    1062:	33 1f       	adc	r19, r19
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	6c ec       	ldi	r22, 0xCC	; 204
    106e:	76 e0       	ldi	r23, 0x06	; 6
    1070:	80 52       	subi	r24, 0x20	; 32
    1072:	9b 4f       	sbci	r25, 0xFB	; 251
    1074:	0e 94 35 11 	call	0x226a	; 0x226a <strcpy>
					
					//사용자 인식이 정상적으로 되면 1회에 한해서 증가시킴.
					if(user_count<MAX_USER_COUNT)user_count++; //단, 주차장 최대 수용 수 보다는 작아야 함.
    1078:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__data_end>
    107c:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <__data_end+0x1>
    1080:	84 31       	cpi	r24, 0x14	; 20
    1082:	91 05       	cpc	r25, r1
    1084:	2c f4       	brge	.+10     	; 0x1090 <__DATA_REGION_LENGTH__+0x90>
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <__data_end+0x1>
    108c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__data_end>
							
					char MAX_USER_COUNT_STR[4];
					char USER_COUNT_STR[4];
					strcpy(MAX_USER_COUNT_STR,IntToString((int)MAX_USER_COUNT));
    1090:	84 e1       	ldi	r24, 0x14	; 20
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	92 d7       	rcall	.+3876   	; 0x1fba <IntToString>
    1096:	bc 01       	movw	r22, r24
    1098:	ce 01       	movw	r24, r28
    109a:	49 96       	adiw	r24, 0x19	; 25
    109c:	0e 94 35 11 	call	0x226a	; 0x226a <strcpy>
					strcpy(USER_COUNT_STR,IntToString((int)MAX_USER_COUNT-user_count));
    10a0:	20 91 ca 04 	lds	r18, 0x04CA	; 0x8004ca <__data_end>
    10a4:	30 91 cb 04 	lds	r19, 0x04CB	; 0x8004cb <__data_end+0x1>
    10a8:	84 e1       	ldi	r24, 0x14	; 20
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	82 1b       	sub	r24, r18
    10ae:	93 0b       	sbc	r25, r19
    10b0:	84 d7       	rcall	.+3848   	; 0x1fba <IntToString>
    10b2:	bc 01       	movw	r22, r24
    10b4:	ce 01       	movw	r24, r28
    10b6:	45 96       	adiw	r24, 0x15	; 21
    10b8:	0e 94 35 11 	call	0x226a	; 0x226a <strcpy>
					
					char empty_space_str[20]="Empty Space=[";
    10bc:	8e e0       	ldi	r24, 0x0E	; 14
    10be:	ea e1       	ldi	r30, 0x1A	; 26
    10c0:	f1 e0       	ldi	r31, 0x01	; 1
    10c2:	8e 01       	movw	r16, r28
    10c4:	0f 5f       	subi	r16, 0xFF	; 255
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	d8 01       	movw	r26, r16
    10ca:	01 90       	ld	r0, Z+
    10cc:	0d 92       	st	X+, r0
    10ce:	8a 95       	dec	r24
    10d0:	e1 f7       	brne	.-8      	; 0x10ca <__DATA_REGION_LENGTH__+0xca>
    10d2:	fe 01       	movw	r30, r28
    10d4:	3f 96       	adiw	r30, 0x0f	; 15
    10d6:	86 e0       	ldi	r24, 0x06	; 6
    10d8:	df 01       	movw	r26, r30
    10da:	1d 92       	st	X+, r1
    10dc:	8a 95       	dec	r24
    10de:	e9 f7       	brne	.-6      	; 0x10da <__DATA_REGION_LENGTH__+0xda>
					strcat((char*)empty_space_str,USER_COUNT_STR);
    10e0:	be 01       	movw	r22, r28
    10e2:	6b 5e       	subi	r22, 0xEB	; 235
    10e4:	7f 4f       	sbci	r23, 0xFF	; 255
    10e6:	c8 01       	movw	r24, r16
    10e8:	0e 94 21 11 	call	0x2242	; 0x2242 <strcat>
					strcat((char*)empty_space_str,"/");
    10ec:	f8 01       	movw	r30, r16
    10ee:	01 90       	ld	r0, Z+
    10f0:	00 20       	and	r0, r0
    10f2:	e9 f7       	brne	.-6      	; 0x10ee <__DATA_REGION_LENGTH__+0xee>
    10f4:	31 97       	sbiw	r30, 0x01	; 1
    10f6:	8f e2       	ldi	r24, 0x2F	; 47
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	80 83       	st	Z, r24
					strcat((char*)empty_space_str,MAX_USER_COUNT_STR);
    10fe:	be 01       	movw	r22, r28
    1100:	67 5e       	subi	r22, 0xE7	; 231
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	c8 01       	movw	r24, r16
    1106:	0e 94 21 11 	call	0x2242	; 0x2242 <strcat>
					strcat((char*)empty_space_str,"]");
    110a:	f8 01       	movw	r30, r16
    110c:	01 90       	ld	r0, Z+
    110e:	00 20       	and	r0, r0
    1110:	e9 f7       	brne	.-6      	; 0x110c <__stack+0xd>
    1112:	31 97       	sbiw	r30, 0x01	; 1
    1114:	8d e5       	ldi	r24, 0x5D	; 93
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
// 0~ 180도 까지 설정
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
    111c:	8a e0       	ldi	r24, 0x0A	; 10
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	90 93 e5 05 	sts	0x05E5, r25	; 0x8005e5 <servo_1_duty_ratio+0x1>
    1124:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <servo_1_duty_ratio>
					
					//서보모터 입구 오픈 코드 작성
					
					//set_gate_state(SERVO_ENTRANCE_GATE,SERVO_GATE_OPEN);
					set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_OPEN); //2 == 딱 중간, 7 == 180도
					start_timer(TICK_ENTRANCE_GATE); //ticktim을 0으로 클리어시킴.
    1128:	85 e0       	ldi	r24, 0x05	; 5
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	ee de       	rcall	.-548    	; 0xf0a <start_timer>
					logojector_ON();
    112e:	66 de       	rcall	.-820    	; 0xdfc <logojector_ON>
					
					//LCD ON
					i2c_lcd_clear();
    1130:	72 d3       	rcall	.+1764   	; 0x1816 <i2c_lcd_clear>
    1132:	42 ef       	ldi	r20, 0xF2	; 242
					i2c_lcd_string(0,0,"Welcome,");
    1134:	52 e0       	ldi	r21, 0x02	; 2
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	5e d3       	rcall	.+1724   	; 0x17f8 <i2c_lcd_string>
    113c:	40 eb       	ldi	r20, 0xB0	; 176
					i2c_lcd_string(1,0,(char*)esp8266_received_data);
    113e:	55 e0       	ldi	r21, 0x05	; 5
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	59 d3       	rcall	.+1714   	; 0x17f8 <i2c_lcd_string>
					i2c_lcd_string(2,0,(char*)empty_space_str);
    1146:	a8 01       	movw	r20, r16
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	55 d3       	rcall	.+1706   	; 0x17f8 <i2c_lcd_string>
					setSoundClip(BUZZ_SUCCESS);
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	b4 de       	rcall	.-664    	; 0xeba <setSoundClip>
    1152:	32 c0       	rjmp	.+100    	; 0x11b8 <__stack+0xb9>
    1154:	8a e0       	ldi	r24, 0x0A	; 10
// 0~ 180도 까지 설정
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	90 93 e5 05 	sts	0x05E5, r25	; 0x8005e5 <servo_1_duty_ratio+0x1>
				else {//한 번 초과로 인식시켰을 때 지나는 구문
					
					//서보모터 입구 오픈 코드 작성
					
					set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_OPEN); //2 == 딱 중간, 7 == 180도
					start_timer(TICK_ENTRANCE_GATE); //ticktim을 0으로 클리어시킴.
    115c:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <servo_1_duty_ratio>
    1160:	85 e0       	ldi	r24, 0x05	; 5
					logojector_ON();
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	d2 de       	rcall	.-604    	; 0xf0a <start_timer>
					//LCD ON
					i2c_lcd_clear();  
    1166:	4a de       	rcall	.-876    	; 0xdfc <logojector_ON>
					i2c_lcd_string(0,0,"Welcome,");
    1168:	56 d3       	rcall	.+1708   	; 0x1816 <i2c_lcd_clear>
    116a:	42 ef       	ldi	r20, 0xF2	; 242
    116c:	52 e0       	ldi	r21, 0x02	; 2
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	80 e0       	ldi	r24, 0x00	; 0
					i2c_lcd_string(1,2,(char*)esp8266_received_data);
    1172:	42 d3       	rcall	.+1668   	; 0x17f8 <i2c_lcd_string>
    1174:	40 eb       	ldi	r20, 0xB0	; 176
    1176:	55 e0       	ldi	r21, 0x05	; 5
    1178:	62 e0       	ldi	r22, 0x02	; 2
					i2c_lcd_string(2,0,"Already Recognized");
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	3d d3       	rcall	.+1658   	; 0x17f8 <i2c_lcd_string>
    117e:	4b ef       	ldi	r20, 0xFB	; 251
    1180:	52 e0       	ldi	r21, 0x02	; 2
					
					setSoundClip(BUZZ_SUCCESS);
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	38 d3       	rcall	.+1648   	; 0x17f8 <i2c_lcd_string>
				}
			}//if(esp8266_received_data[0]=='O') end
			else if(esp8266_received_data[0]!='O') 
			{
				start_timer(TICK_LCD);
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	97 de       	rcall	.-722    	; 0xeba <setSoundClip>
    118c:	15 c0       	rjmp	.+42     	; 0x11b8 <__stack+0xb9>
				setSoundClip(BUZZ_NOT_REGISTERED);
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	90 e0       	ldi	r25, 0x00	; 0
				
				i2c_lcd_clear();
    1192:	bb de       	rcall	.-650    	; 0xf0a <start_timer>
				i2c_lcd_string(0,0,"Sorry,");
    1194:	83 e0       	ldi	r24, 0x03	; 3
    1196:	91 de       	rcall	.-734    	; 0xeba <setSoundClip>
    1198:	3e d3       	rcall	.+1660   	; 0x1816 <i2c_lcd_clear>
    119a:	4e e0       	ldi	r20, 0x0E	; 14
    119c:	53 e0       	ldi	r21, 0x03	; 3
				i2c_lcd_string(1,2,"This card is");
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	2a d3       	rcall	.+1620   	; 0x17f8 <i2c_lcd_string>
    11a4:	45 e1       	ldi	r20, 0x15	; 21
    11a6:	53 e0       	ldi	r21, 0x03	; 3
				i2c_lcd_string(2,2,"not registered.");
    11a8:	62 e0       	ldi	r22, 0x02	; 2
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	25 d3       	rcall	.+1610   	; 0x17f8 <i2c_lcd_string>
    11ae:	42 e2       	ldi	r20, 0x22	; 34
    11b0:	53 e0       	ldi	r21, 0x03	; 3
    11b2:	62 e0       	ldi	r22, 0x02	; 2
			}
			//_delay_ms(20);
			//dummy test code (서버로부터 결과 값 수신 결과 확인)
			
			#if DUMMY_TEST_SERIAL
				uart0_tx_char('\n');
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	20 d3       	rcall	.+1600   	; 0x17f8 <i2c_lcd_string>
    11b8:	8a e0       	ldi	r24, 0x0A	; 10
				uart0_tx_string("From server : ");
    11ba:	d7 d6       	rcall	.+3502   	; 0x1f6a <uart0_tx_char>
    11bc:	82 e3       	ldi	r24, 0x32	; 50
    11be:	93 e0       	ldi	r25, 0x03	; 3
				uart0_tx_string((char*)esp8266_received_data);
    11c0:	d8 d6       	rcall	.+3504   	; 0x1f72 <uart0_tx_string>
    11c2:	80 eb       	ldi	r24, 0xB0	; 176
				uart0_tx_char('\n');
    11c4:	95 e0       	ldi	r25, 0x05	; 5
    11c6:	d5 d6       	rcall	.+3498   	; 0x1f72 <uart0_tx_string>
    11c8:	8a e0       	ldi	r24, 0x0A	; 10
    11ca:	cf d6       	rcall	.+3486   	; 0x1f6a <uart0_tx_char>
    11cc:	0f 2e       	mov	r0, r31
    11ce:	f1 ee       	ldi	r31, 0xE1	; 225
    11d0:	cf 2e       	mov	r12, r31
    11d2:	f4 e0       	ldi	r31, 0x04	; 4
    11d4:	df 2e       	mov	r13, r31
    11d6:	f0 2d       	mov	r31, r0
    11d8:	0f 2e       	mov	r0, r31
    11da:	f5 e4       	ldi	r31, 0x45	; 69
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
    11dc:	af 2e       	mov	r10, r31
    11de:	f5 e0       	ldi	r31, 0x05	; 5
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    11e0:	bf 2e       	mov	r11, r31
    11e2:	f0 2d       	mov	r31, r0
    11e4:	8b e5       	ldi	r24, 0x5B	; 91
    11e6:	c1 d6       	rcall	.+3458   	; 0x1f6a <uart0_tx_char>
    11e8:	f6 01       	movw	r30, r12
    11ea:	31 97       	sbiw	r30, 0x01	; 1
    11ec:	80 81       	ld	r24, Z
    11ee:	14 d7       	rcall	.+3624   	; 0x2018 <HexToString>
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    11f0:	c0 d6       	rcall	.+3456   	; 0x1f72 <uart0_tx_string>
    11f2:	76 01       	movw	r14, r12
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
						if(j!=3)uart0_tx_char(' ');
    11f4:	00 e0       	ldi	r16, 0x00	; 0
    11f6:	10 e0       	ldi	r17, 0x00	; 0
    11f8:	80 e2       	ldi	r24, 0x20	; 32
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    11fa:	b7 d6       	rcall	.+3438   	; 0x1f6a <uart0_tx_char>
    11fc:	0f 5f       	subi	r16, 0xFF	; 255
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    11fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1200:	f7 01       	movw	r30, r14
    1202:	81 91       	ld	r24, Z+
    1204:	7f 01       	movw	r14, r30
    1206:	08 d7       	rcall	.+3600   	; 0x2018 <HexToString>
    1208:	b4 d6       	rcall	.+3432   	; 0x1f72 <uart0_tx_string>
    120a:	03 30       	cpi	r16, 0x03	; 3
						if(j!=3)uart0_tx_char(' ');
    120c:	11 05       	cpc	r17, r1
    120e:	a1 f7       	brne	.-24     	; 0x11f8 <__stack+0xf9>
    1210:	8d e5       	ldi	r24, 0x5D	; 93
						//_delay_ms(10);
					}
				
				
					uart0_tx_char(']');
    1212:	ab d6       	rcall	.+3414   	; 0x1f6a <uart0_tx_char>
    1214:	8a e0       	ldi	r24, 0x0A	; 10
    1216:	a9 d6       	rcall	.+3410   	; 0x1f6a <uart0_tx_char>
					uart0_tx_char('\n');
    1218:	f5 e0       	ldi	r31, 0x05	; 5
    121a:	cf 0e       	add	r12, r31
    121c:	d1 1c       	adc	r13, r1
    121e:	ac 14       	cp	r10, r12
    1220:	bd 04       	cpc	r11, r13
    1222:	01 f7       	brne	.-64     	; 0x11e4 <__stack+0xe5>
				uart0_tx_string("From server : ");
				uart0_tx_string((char*)esp8266_received_data);
				uart0_tx_char('\n');
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
    1224:	62 c0       	rjmp	.+196    	; 0x12ea <__stack+0x1eb>
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	09 f0       	breq	.+2      	; 0x122c <__stack+0x12d>
    122a:	5f c0       	rjmp	.+190    	; 0x12ea <__stack+0x1eb>
			
			//LCD 뷰어 및 5초 카운트 후 다시 리셋
			
		}//if(toggle==ENTRANCE_GATE) end
		
		else if((*tggl)==EXIT_GATE)
    122c:	00 ee       	ldi	r16, 0xE0	; 224
    122e:	14 e0       	ldi	r17, 0x04	; 4
    1230:	0f 2e       	mov	r0, r31
    1232:	f4 e4       	ldi	r31, 0x44	; 68
    1234:	ef 2e       	mov	r14, r31
    1236:	f5 e0       	ldi	r31, 0x05	; 5
    1238:	ff 2e       	mov	r15, r31
    123a:	f0 2d       	mov	r31, r0
    123c:	0f 2e       	mov	r0, r31
    123e:	fa e0       	ldi	r31, 0x0A	; 10
    1240:	cf 2e       	mov	r12, r31
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
	else if(ch==SERVO_EXIT_GATE)servo_2_duty_ratio=_offset+angle_state;
    1242:	d1 2c       	mov	r13, r1
    1244:	f0 2d       	mov	r31, r0
    1246:	6e ed       	ldi	r22, 0xDE	; 222
    1248:	76 e0       	ldi	r23, 0x06	; 6
			//구현안하기로 함
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			for(int i=0; i<MAX_USER_COUNT;i++)
			{
				if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch1)==0){//출구에서 찍은 카드가 이용객 버퍼에 존재한다면
    124a:	c8 01       	movw	r24, r16
    124c:	0e 94 2c 11 	call	0x2258	; 0x2258 <strcmp>
    1250:	89 2b       	or	r24, r25
    1252:	d1 f4       	brne	.+52     	; 0x1288 <__stack+0x189>
    1254:	85 e0       	ldi	r24, 0x05	; 5
					strcpy((char*)rfid_user_uid_buffer[i],"0000");
    1256:	e6 e9       	ldi	r30, 0x96	; 150
    1258:	f3 e0       	ldi	r31, 0x03	; 3
    125a:	d8 01       	movw	r26, r16
    125c:	01 90       	ld	r0, Z+
    125e:	0d 92       	st	X+, r0
    1260:	8a 95       	dec	r24
    1262:	e1 f7       	brne	.-8      	; 0x125c <__stack+0x15d>
    1264:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__data_end>
					//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
					user_count--; //이용자 카운트를 감소시킴.
    1268:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <__data_end+0x1>
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	90 93 cb 04 	sts	0x04CB, r25	; 0x8004cb <__data_end+0x1>
    1272:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__data_end>
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
	else if(ch==SERVO_EXIT_GATE)servo_2_duty_ratio=_offset+angle_state;
    1276:	d0 92 f5 06 	sts	0x06F5, r13	; 0x8006f5 <servo_2_duty_ratio+0x1>
    127a:	c0 92 f4 06 	sts	0x06F4, r12	; 0x8006f4 <servo_2_duty_ratio>
					//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
					user_count--; //이용자 카운트를 감소시킴.
					
					//출구 서보모터 동작 코드
					set_servo(SERVO_EXIT_GATE,SERVO_GATE_OPEN); //3 == 딱 중간, 7 == 180도
					start_timer(TICK_EXIT_GATE); //틱 활성화 및 카운트 시작
    127e:	84 e0       	ldi	r24, 0x04	; 4
    1280:	90 e0       	ldi	r25, 0x00	; 0
					
					//수정요청(멜로디)
					setSoundClip(BUZZ_SUCCESS);
    1282:	43 de       	rcall	.-890    	; 0xf0a <start_timer>
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	19 de       	rcall	.-974    	; 0xeba <setSoundClip>
    1288:	0b 5f       	subi	r16, 0xFB	; 251
		{
			//esp8266에 uid와 출구게이트 정보 전송 함수
			//구현안하기로 함
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			for(int i=0; i<MAX_USER_COUNT;i++)
    128a:	1f 4f       	sbci	r17, 0xFF	; 255
    128c:	0e 15       	cp	r16, r14
    128e:	1f 05       	cpc	r17, r15
    1290:	d1 f6       	brne	.-76     	; 0x1246 <__stack+0x147>
    1292:	0f 2e       	mov	r0, r31
    1294:	f1 ee       	ldi	r31, 0xE1	; 225
    1296:	cf 2e       	mov	r12, r31
    1298:	f4 e0       	ldi	r31, 0x04	; 4
    129a:	df 2e       	mov	r13, r31
    129c:	f0 2d       	mov	r31, r0
    129e:	0f 2e       	mov	r0, r31
    12a0:	f5 e4       	ldi	r31, 0x45	; 69
    12a2:	af 2e       	mov	r10, r31
			} 
			//dummy test code
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
				
					uart0_tx_char('[');
    12a4:	f5 e0       	ldi	r31, 0x05	; 5
    12a6:	bf 2e       	mov	r11, r31
    12a8:	f0 2d       	mov	r31, r0
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    12aa:	8b e5       	ldi	r24, 0x5B	; 91
    12ac:	5e d6       	rcall	.+3260   	; 0x1f6a <uart0_tx_char>
    12ae:	f6 01       	movw	r30, r12
    12b0:	31 97       	sbiw	r30, 0x01	; 1
    12b2:	80 81       	ld	r24, Z
    12b4:	b1 d6       	rcall	.+3426   	; 0x2018 <HexToString>
    12b6:	5d d6       	rcall	.+3258   	; 0x1f72 <uart0_tx_string>
    12b8:	76 01       	movw	r14, r12
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
				
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    12ba:	00 e0       	ldi	r16, 0x00	; 0
    12bc:	10 e0       	ldi	r17, 0x00	; 0
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
						if(j!=3)uart0_tx_char(' ');
    12be:	80 e2       	ldi	r24, 0x20	; 32
    12c0:	54 d6       	rcall	.+3240   	; 0x1f6a <uart0_tx_char>
    12c2:	0f 5f       	subi	r16, 0xFF	; 255
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
				
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	d7 01       	movw	r26, r14
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    12c8:	8d 91       	ld	r24, X+
    12ca:	7d 01       	movw	r14, r26
    12cc:	a5 d6       	rcall	.+3402   	; 0x2018 <HexToString>
    12ce:	51 d6       	rcall	.+3234   	; 0x1f72 <uart0_tx_string>
    12d0:	03 30       	cpi	r16, 0x03	; 3
    12d2:	11 05       	cpc	r17, r1
    12d4:	a1 f7       	brne	.-24     	; 0x12be <__stack+0x1bf>
						if(j!=3)uart0_tx_char(' ');
    12d6:	8d e5       	ldi	r24, 0x5D	; 93
    12d8:	48 d6       	rcall	.+3216   	; 0x1f6a <uart0_tx_char>
    12da:	8a e0       	ldi	r24, 0x0A	; 10
					}
					uart0_tx_char(']');
    12dc:	46 d6       	rcall	.+3212   	; 0x1f6a <uart0_tx_char>
    12de:	b5 e0       	ldi	r27, 0x05	; 5
    12e0:	cb 0e       	add	r12, r27
					uart0_tx_char('\n');
    12e2:	d1 1c       	adc	r13, r1
    12e4:	ca 14       	cp	r12, r10
    12e6:	db 04       	cpc	r13, r11
    12e8:	01 f7       	brne	.-64     	; 0x12aa <__stack+0x1ab>
    12ea:	10 92 dc 06 	sts	0x06DC, r1	; 0x8006dc <received_state>
				}//그곳 버퍼를 비움
				
			} 
			//dummy test code
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
    12ee:	6c 96       	adiw	r28, 0x1c	; 28
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
		//i2c_lcd_string(1,2,esp8266_received_data);
		i2c_lcd_string(2,0,"Plz, Re-tagging. ");
		
	}
	
	received_state=RECEIVE_NONE;
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
}
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	bf 90       	pop	r11
    130c:	af 90       	pop	r10
    130e:	08 95       	ret

00001310 <systems_init>:
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	cd b7       	in	r28, 0x3d	; 61
		//else if(received_state==RECEIVE_FAIL); 
		
    }
}

void systems_init(void){
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	64 97       	sbiw	r28, 0x14	; 20
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
	sei();
    1328:	78 94       	sei
	//DDRA|=0x03; //test Port
	//0~3번비트	: 스테핑모터 제어
	//DDRA=0x0f;
	//PA0, PA3 : 각각 서보모터 제어핀
	DDRA = (1<<DDRA0)|(1<<DDRA3);
    132a:	89 e0       	ldi	r24, 0x09	; 9
    132c:	8a bb       	out	0x1a, r24	; 26
	//4번비트	: 릴레이스위치
	DDRC |= (1<<DDRC4);
    132e:	a4 9a       	sbi	0x14, 4	; 20
	cli(); //전역 인터럽트 해제
    1330:	f8 94       	cli
	
	timer0_init();
    1332:	c2 d5       	rcall	.+2948   	; 0x1eb8 <timer0_init>
	timer1_init();
    1334:	ca d5       	rcall	.+2964   	; 0x1eca <timer1_init>
	timer3_init();
    1336:	d7 d5       	rcall	.+2990   	; 0x1ee6 <timer3_init>
	
	tick_enable(TICK_TIMEOUT);
    1338:	86 e0       	ldi	r24, 0x06	; 6
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	63 dd       	rcall	.-1338   	; 0xe04 <tick_enable>
    133e:	78 94       	sei
	
	sei(); //전역 인터럽트 허용
    1340:	10 92 f8 06 	sts	0x06F8, r1	; 0x8006f8 <TICK>
	TICK.tick_1ms=0;
    1344:	10 92 f9 06 	sts	0x06F9, r1	; 0x8006f9 <TICK+0x1>
    1348:	10 92 fa 06 	sts	0x06FA, r1	; 0x8006fa <TICK+0x2>
    134c:	10 92 fb 06 	sts	0x06FB, r1	; 0x8006fb <TICK+0x3>
	//사용하는 기능들 초기화 작업
	
	logojector_OFF();
    1350:	57 dd       	rcall	.-1362   	; 0xe00 <logojector_OFF>
	uart_init(0,BAUD_9600); //debug channel
    1352:	60 e8       	ldi	r22, 0x80	; 128
    1354:	75 e2       	ldi	r23, 0x25	; 37
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	da d5       	rcall	.+2996   	; 0x1f10 <uart_init>
	uart_init(1,BAUD_9600);//esp8266() : Rx:PD2, Tx:PD3
    135c:	60 e8       	ldi	r22, 0x80	; 128
    135e:	75 e2       	ldi	r23, 0x25	; 37
    1360:	81 e0       	ldi	r24, 0x01	; 1
	#if MOTOR_DEBUG_WITHOUT_ANOTHER_SENSOR
		mfrc522_init(CH0);
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	d5 d5       	rcall	.+2986   	; 0x1f10 <uart_init>
		mfrc522_init(CH1);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	3a d4       	rcall	.+2164   	; 0x1bde <mfrc522_init>
    136a:	81 e0       	ldi	r24, 0x01	; 1
		i2c_lcd_init();
    136c:	38 d4       	rcall	.+2160   	; 0x1bde <mfrc522_init>
	
	
		i2c_lcd_string(0,0,"====================");
    136e:	b9 d1       	rcall	.+882    	; 0x16e2 <i2c_lcd_init>
    1370:	41 e4       	ldi	r20, 0x41	; 65
    1372:	53 e0       	ldi	r21, 0x03	; 3
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	80 e0       	ldi	r24, 0x00	; 0
		i2c_lcd_string(1,0,"  SYSTEM BOOTING...");
    1378:	3f d2       	rcall	.+1150   	; 0x17f8 <i2c_lcd_string>
    137a:	46 e5       	ldi	r20, 0x56	; 86
    137c:	53 e0       	ldi	r21, 0x03	; 3
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
		i2c_lcd_string(2,0,"     __________     ");
    1382:	3a d2       	rcall	.+1140   	; 0x17f8 <i2c_lcd_string>
    1384:	4a e6       	ldi	r20, 0x6A	; 106
    1386:	53 e0       	ldi	r21, 0x03	; 3
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	35 d2       	rcall	.+1130   	; 0x17f8 <i2c_lcd_string>
		i2c_lcd_string(3,0,"====================");
    138e:	41 e4       	ldi	r20, 0x41	; 65
    1390:	53 e0       	ldi	r21, 0x03	; 3
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	30 d2       	rcall	.+1120   	; 0x17f8 <i2c_lcd_string>
		setSoundClip(BUZZ_ON);
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	8f dd       	rcall	.-1250   	; 0xeba <setSoundClip>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    139c:	2f ef       	ldi	r18, 0xFF	; 255
    139e:	81 e1       	ldi	r24, 0x11	; 17
    13a0:	9a e7       	ldi	r25, 0x7A	; 122
    13a2:	21 50       	subi	r18, 0x01	; 1
    13a4:	80 40       	sbci	r24, 0x00	; 0
    13a6:	90 40       	sbci	r25, 0x00	; 0
    13a8:	e1 f7       	brne	.-8      	; 0x13a2 <systems_init+0x92>
    13aa:	00 c0       	rjmp	.+0      	; 0x13ac <systems_init+0x9c>
		_delay_ms(2500);
	
		//로딩 시작. RFID모듈체크, ESP8266 연결 체크
	
		mfrc522_version_check(CH0);
    13ac:	00 00       	nop
    13ae:	80 e0       	ldi	r24, 0x00	; 0
		mfrc522_IRQ_enable(CH0);
    13b0:	5e d4       	rcall	.+2236   	; 0x1c6e <mfrc522_version_check>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	b2 d4       	rcall	.+2404   	; 0x1d1a <mfrc522_IRQ_enable>
		mfrc522_version_check(CH1);
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	5a d4       	rcall	.+2228   	; 0x1c6e <mfrc522_version_check>
    13ba:	81 e0       	ldi	r24, 0x01	; 1
		mfrc522_IRQ_enable(CH1);
    13bc:	ae d4       	rcall	.+2396   	; 0x1d1a <mfrc522_IRQ_enable>
    13be:	2f e7       	ldi	r18, 0x7F	; 127
    13c0:	33 e0       	ldi	r19, 0x03	; 3
		esp8266_init((unsigned char*)SSID,(unsigned char*)PASSWORD,(unsigned char*)IP,(unsigned char*)PORT);
    13c2:	42 e8       	ldi	r20, 0x82	; 130
    13c4:	53 e0       	ldi	r21, 0x03	; 3
    13c6:	6e e8       	ldi	r22, 0x8E	; 142
    13c8:	73 e0       	ldi	r23, 0x03	; 3
    13ca:	8b e9       	ldi	r24, 0x9B	; 155
    13cc:	93 e0       	ldi	r25, 0x03	; 3
    13ce:	3f dc       	rcall	.-1922   	; 0xc4e <esp8266_init>
    13d0:	0e 94 95 01 	call	0x32a	; 0x32a <rfid_user_uid_buffer_init>
    13d4:	8f e0       	ldi	r24, 0x0F	; 15
		rfid_user_uid_buffer_init();
    13d6:	ee e2       	ldi	r30, 0x2E	; 46
    13d8:	f1 e0       	ldi	r31, 0x01	; 1
	
		char version_buf[20] = " Firmware Ver ";
    13da:	8e 01       	movw	r16, r28
    13dc:	0f 5f       	subi	r16, 0xFF	; 255
    13de:	1f 4f       	sbci	r17, 0xFF	; 255
    13e0:	d8 01       	movw	r26, r16
    13e2:	01 90       	ld	r0, Z+
    13e4:	0d 92       	st	X+, r0
    13e6:	8a 95       	dec	r24
    13e8:	e1 f7       	brne	.-8      	; 0x13e2 <systems_init+0xd2>
    13ea:	fe 01       	movw	r30, r28
    13ec:	70 96       	adiw	r30, 0x10	; 16
    13ee:	85 e0       	ldi	r24, 0x05	; 5
    13f0:	df 01       	movw	r26, r30
    13f2:	1d 92       	st	X+, r1
    13f4:	8a 95       	dec	r24
    13f6:	e9 f7       	brne	.-6      	; 0x13f2 <systems_init+0xe2>
    13f8:	d8 01       	movw	r26, r16
    13fa:	0d 90       	ld	r0, X+
		strcat(version_buf,(const char*)FIRMWARE_VERSION);
    13fc:	00 20       	and	r0, r0
    13fe:	e9 f7       	brne	.-6      	; 0x13fa <systems_init+0xea>
    1400:	11 97       	sbiw	r26, 0x01	; 1
    1402:	86 e0       	ldi	r24, 0x06	; 6
    1404:	e2 ea       	ldi	r30, 0xA2	; 162
    1406:	f3 e0       	ldi	r31, 0x03	; 3
    1408:	01 90       	ld	r0, Z+
    140a:	0d 92       	st	X+, r0
    140c:	8a 95       	dec	r24
    140e:	e1 f7       	brne	.-8      	; 0x1408 <systems_init+0xf8>
		i2c_lcd_string(0,0,"====================");
    1410:	41 e4       	ldi	r20, 0x41	; 65
    1412:	53 e0       	ldi	r21, 0x03	; 3
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	ef d1       	rcall	.+990    	; 0x17f8 <i2c_lcd_string>
		i2c_lcd_string(1,0,"  Parking System    ");
    141a:	48 ea       	ldi	r20, 0xA8	; 168
    141c:	53 e0       	ldi	r21, 0x03	; 3
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	ea d1       	rcall	.+980    	; 0x17f8 <i2c_lcd_string>
		i2c_lcd_string(2,0, version_buf);
    1424:	a8 01       	movw	r20, r16
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	e6 d1       	rcall	.+972    	; 0x17f8 <i2c_lcd_string>
    142c:	41 e4       	ldi	r20, 0x41	; 65
		i2c_lcd_string(3,0,"====================");
    142e:	53 e0       	ldi	r21, 0x03	; 3
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	83 e0       	ldi	r24, 0x03	; 3
    1434:	e1 d1       	rcall	.+962    	; 0x17f8 <i2c_lcd_string>
    1436:	85 e0       	ldi	r24, 0x05	; 5
    1438:	40 dd       	rcall	.-1408   	; 0xeba <setSoundClip>
		setSoundClip(BUZZ_ESP8266_CONNECTED);
    143a:	bf ef       	ldi	r27, 0xFF	; 255
    143c:	27 ea       	ldi	r18, 0xA7	; 167
    143e:	81 e6       	ldi	r24, 0x61	; 97
    1440:	b1 50       	subi	r27, 0x01	; 1
    1442:	20 40       	sbci	r18, 0x00	; 0
    1444:	80 40       	sbci	r24, 0x00	; 0
    1446:	e1 f7       	brne	.-8      	; 0x1440 <systems_init+0x130>
    1448:	00 c0       	rjmp	.+0      	; 0x144a <systems_init+0x13a>
    144a:	00 00       	nop
    144c:	e4 d1       	rcall	.+968    	; 0x1816 <i2c_lcd_clear>
    144e:	e4 d0       	rcall	.+456    	; 0x1618 <i2c_lcd_noBacklight>
    1450:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <timeout_tick_enable_flag+0x1>
		//main loop start.
		_delay_ms(2000);
		i2c_lcd_clear();
    1454:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <timeout_tick_enable_flag>
		i2c_lcd_noBacklight();
    1458:	64 96       	adiw	r28, 0x14	; 20
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
		 case TICK_EXIT_GATE: exit_gate_tick_enable_flag=0; break;
		 case TICK_ENTRANCE_GATE: entrance_gate_tick_enable_flag=0; break;
		 case TICK_TIMEOUT: timeout_tick_enable_flag=0; break;	  
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
		i2c_lcd_clear();
		i2c_lcd_noBacklight();
	#endif
	tick_disable(TICK_TIMEOUT);
	
}
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	08 95       	ret

0000146e <main>:
    146e:	50 df       	rcall	.-352    	; 0x1310 <systems_init>
    1470:	85 e0       	ldi	r24, 0x05	; 5
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	90 93 f5 06 	sts	0x06F5, r25	; 0x8006f5 <servo_2_duty_ratio+0x1>
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
	else if(ch==SERVO_EXIT_GATE)servo_2_duty_ratio=_offset+angle_state;
    1478:	80 93 f4 06 	sts	0x06F4, r24	; 0x8006f4 <servo_2_duty_ratio>
// 0~ 180도 까지 설정
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
    147c:	90 93 e5 05 	sts	0x05E5, r25	; 0x8005e5 <servo_1_duty_ratio+0x1>
    1480:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <servo_1_duty_ratio>
    1484:	2f ef       	ldi	r18, 0xFF	; 255
    1486:	89 e6       	ldi	r24, 0x69	; 105
    1488:	98 e1       	ldi	r25, 0x18	; 24
    148a:	21 50       	subi	r18, 0x01	; 1
    148c:	80 40       	sbci	r24, 0x00	; 0
    148e:	90 40       	sbci	r25, 0x00	; 0
    1490:	e1 f7       	brne	.-8      	; 0x148a <main+0x1c>
    1492:	00 c0       	rjmp	.+0      	; 0x1494 <main+0x26>
    1494:	00 00       	nop
	}
}

void servo_release(int ch) {
	
	 	if(ch==SERVO_ENTRANCE_GATE) {servo_1_duty_ratio=0; }//PORTA&=~(1<<PORTA0);
    1496:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <servo_1_duty_ratio+0x1>
    149a:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <servo_1_duty_ratio>
	 	else if(ch==SERVO_EXIT_GATE){servo_2_duty_ratio=0;} //PORTA&=~(1<<PORTA3);
    149e:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <servo_2_duty_ratio+0x1>
    14a2:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <servo_2_duty_ratio>
	
	
	
	
	//dummy
	DDRA|=0x80;
    14a6:	d7 9a       	sbi	0x1a, 7	; 26
		RC522_data_state_check_and_actuate(&toggle);
		
		//입장 시, 확인이 성공된 유저의 경우
		if(logojector_tick_enable_flag)
		{
				if(TICK.logojector_tick_1ms>30000)
    14a8:	c8 ef       	ldi	r28, 0xF8	; 248
    14aa:	d6 e0       	ldi	r29, 0x06	; 6
// 0~ 180도 까지 설정
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
    14ac:	05 e0       	ldi	r16, 0x05	; 5
    14ae:	10 e0       	ldi	r17, 0x00	; 0
		//setSoundClip(BUZZ_ON);
		
		//to use 2 RFID channels
		static char toggle=0; 
		//every 100ms, return RFID Reader state
		RC522_data_request_per_100ms(&toggle);
    14b0:	82 ed       	ldi	r24, 0xD2	; 210
    14b2:	94 e0       	ldi	r25, 0x04	; 4
    14b4:	b8 d8       	rcall	.-3728   	; 0x626 <RC522_data_request_per_100ms>
		RC522_data_state_check_and_actuate(&toggle);
    14b6:	82 ed       	ldi	r24, 0xD2	; 210
    14b8:	94 e0       	ldi	r25, 0x04	; 4
    14ba:	42 dd       	rcall	.-1404   	; 0xf40 <RC522_data_state_check_and_actuate>
		
		//입장 시, 확인이 성공된 유저의 경우
		if(logojector_tick_enable_flag)
    14bc:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <logojector_tick_enable_flag>
    14c0:	90 91 af 05 	lds	r25, 0x05AF	; 0x8005af <logojector_tick_enable_flag+0x1>
    14c4:	89 2b       	or	r24, r25
    14c6:	91 f0       	breq	.+36     	; 0x14ec <main+0x7e>
		{
				if(TICK.logojector_tick_1ms>30000)
    14c8:	88 85       	ldd	r24, Y+8	; 0x08
    14ca:	99 85       	ldd	r25, Y+9	; 0x09
    14cc:	aa 85       	ldd	r26, Y+10	; 0x0a
    14ce:	bb 85       	ldd	r27, Y+11	; 0x0b
    14d0:	81 33       	cpi	r24, 0x31	; 49
    14d2:	95 47       	sbci	r25, 0x75	; 117
    14d4:	a1 05       	cpc	r26, r1
    14d6:	b1 05       	cpc	r27, r1
				{
					//로고젝터 오프
					logojector_OFF();
    14d8:	48 f0       	brcs	.+18     	; 0x14ec <main+0x7e>
    14da:	92 dc       	rcall	.-1756   	; 0xe00 <logojector_OFF>
 }
 
 void tick_disable(int tick_name){
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
    14dc:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <logojector_tick_enable_flag+0x1>
    14e0:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <logojector_tick_enable_flag>
				{
					//로고젝터 오프
					logojector_OFF();
					
					tick_disable(TICK_LOGOJECTOR);
					logojector_tick_enable_flag=STOP_TIMER;
    14e4:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <logojector_tick_enable_flag+0x1>
    14e8:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <logojector_tick_enable_flag>
				}
		}
		//명령이 동시에 발생할 때, 백라이트 끄는 함수가 호출되지 않는 상황이 생겼다. 이에 대한 처리코드
		//그냥 구문을 아예 따로 lcd관련해서 timer를 분리하였다.
		if(lcd_tick_enable_flag)
    14ec:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <lcd_tick_enable_flag>
    14f0:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <lcd_tick_enable_flag+0x1>
    14f4:	89 2b       	or	r24, r25
    14f6:	91 f0       	breq	.+36     	; 0x151c <main+0xae>
		{
			if(TICK.lcd_tick_1ms==12000)
    14f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    14fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    14fc:	ae 85       	ldd	r26, Y+14	; 0x0e
    14fe:	bf 85       	ldd	r27, Y+15	; 0x0f
    1500:	80 3e       	cpi	r24, 0xE0	; 224
    1502:	9e 42       	sbci	r25, 0x2E	; 46
    1504:	a1 05       	cpc	r26, r1
    1506:	b1 05       	cpc	r27, r1
			{
				i2c_lcd_noBacklight();
    1508:	49 f4       	brne	.+18     	; 0x151c <main+0xae>
    150a:	86 d0       	rcall	.+268    	; 0x1618 <i2c_lcd_noBacklight>
 
 void tick_disable(int tick_name){
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
    150c:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <lcd_tick_enable_flag+0x1>
    1510:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <lcd_tick_enable_flag>
		{
			if(TICK.lcd_tick_1ms==12000)
			{
				i2c_lcd_noBacklight();
				tick_disable(TICK_LCD);
				lcd_tick_enable_flag=STOP_TIMER;
    1514:	10 92 15 07 	sts	0x0715, r1	; 0x800715 <lcd_tick_enable_flag+0x1>
    1518:	10 92 14 07 	sts	0x0714, r1	; 0x800714 <lcd_tick_enable_flag>
			}
		}

		//입구에서 등록된 유저가 카드를 찍었을 때 해당 구문을 돈다.
		if(entrance_gate_tick_enable_flag)
    151c:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <entrance_gate_tick_enable_flag>
    1520:	90 91 ef 06 	lds	r25, 0x06EF	; 0x8006ef <entrance_gate_tick_enable_flag+0x1>
    1524:	89 2b       	or	r24, r25
    1526:	e1 f1       	breq	.+120    	; 0x15a0 <main+0x132>
		{//이미 인식되었던 사람들도 마찬가지 과정을 거침
			
			//가끔 여기 문을 안들어감 뭐가 문젠지는 확인이 안됨. 
			if(TICK.entrance_gate_tick_1ms==1000) servo_release(SERVO_ENTRANCE_GATE);
    1528:	8c 89       	ldd	r24, Y+20	; 0x14
    152a:	9d 89       	ldd	r25, Y+21	; 0x15
    152c:	ae 89       	ldd	r26, Y+22	; 0x16
    152e:	bf 89       	ldd	r27, Y+23	; 0x17
    1530:	88 3e       	cpi	r24, 0xE8	; 232
    1532:	93 40       	sbci	r25, 0x03	; 3
    1534:	a1 05       	cpc	r26, r1
    1536:	b1 05       	cpc	r27, r1
    1538:	29 f4       	brne	.+10     	; 0x1544 <main+0xd6>
	}
}

void servo_release(int ch) {
	
	 	if(ch==SERVO_ENTRANCE_GATE) {servo_1_duty_ratio=0; }//PORTA&=~(1<<PORTA0);
    153a:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <servo_1_duty_ratio+0x1>
    153e:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <servo_1_duty_ratio>
    1542:	2e c0       	rjmp	.+92     	; 0x15a0 <main+0x132>
		{//이미 인식되었던 사람들도 마찬가지 과정을 거침
			
			//가끔 여기 문을 안들어감 뭐가 문젠지는 확인이 안됨. 
			if(TICK.entrance_gate_tick_1ms==1000) servo_release(SERVO_ENTRANCE_GATE);
			
			else if(TICK.entrance_gate_tick_1ms==10000)//10초
    1544:	8c 89       	ldd	r24, Y+20	; 0x14
    1546:	9d 89       	ldd	r25, Y+21	; 0x15
    1548:	ae 89       	ldd	r26, Y+22	; 0x16
    154a:	bf 89       	ldd	r27, Y+23	; 0x17
    154c:	80 31       	cpi	r24, 0x10	; 16
    154e:	97 42       	sbci	r25, 0x27	; 39
    1550:	a1 05       	cpc	r26, r1
    1552:	b1 05       	cpc	r27, r1
			{
				//수정희망(멜로디 변경)
				setSoundClip(BUZZ_ESP8266_CONNECTED);
    1554:	39 f4       	brne	.+14     	; 0x1564 <main+0xf6>
    1556:	85 e0       	ldi	r24, 0x05	; 5
    1558:	b0 dc       	rcall	.-1696   	; 0xeba <setSoundClip>
// 0~ 180도 까지 설정
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
    155a:	10 93 e5 05 	sts	0x05E5, r17	; 0x8005e5 <servo_1_duty_ratio+0x1>
    155e:	00 93 e4 05 	sts	0x05E4, r16	; 0x8005e4 <servo_1_duty_ratio>
    1562:	1e c0       	rjmp	.+60     	; 0x15a0 <main+0x132>
				setSoundClip(BUZZ_ESP8266_CONNECTED);
				//입구 서보모터 닫는 명령
				set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_CLOSE);
			}
			//set_servo명령을 넣어봄으로써 변수값이 정상적으로 변하는지 체크해보기. 집에가서
			else if(TICK.entrance_gate_tick_1ms==12000)
    1564:	8c 89       	ldd	r24, Y+20	; 0x14
    1566:	9d 89       	ldd	r25, Y+21	; 0x15
    1568:	ae 89       	ldd	r26, Y+22	; 0x16
    156a:	bf 89       	ldd	r27, Y+23	; 0x17
    156c:	80 3e       	cpi	r24, 0xE0	; 224
    156e:	9e 42       	sbci	r25, 0x2E	; 46
    1570:	a1 05       	cpc	r26, r1
    1572:	b1 05       	cpc	r27, r1
    1574:	a9 f4       	brne	.+42     	; 0x15a0 <main+0x132>
	}
}

void servo_release(int ch) {
	
	 	if(ch==SERVO_ENTRANCE_GATE) {servo_1_duty_ratio=0; }//PORTA&=~(1<<PORTA0);
    1576:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <servo_1_duty_ratio+0x1>
    157a:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <servo_1_duty_ratio>
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	95 ea       	ldi	r25, 0xA5	; 165
    1582:	2e e0       	ldi	r18, 0x0E	; 14
    1584:	81 50       	subi	r24, 0x01	; 1
    1586:	90 40       	sbci	r25, 0x00	; 0
    1588:	20 40       	sbci	r18, 0x00	; 0
    158a:	e1 f7       	brne	.-8      	; 0x1584 <main+0x116>
    158c:	00 c0       	rjmp	.+0      	; 0x158e <main+0x120>
    158e:	00 00       	nop
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
		 case TICK_EXIT_GATE: exit_gate_tick_enable_flag=0; break;
		 case TICK_ENTRANCE_GATE: entrance_gate_tick_enable_flag=0; break;
    1590:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <entrance_gate_tick_enable_flag+0x1>
    1594:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <entrance_gate_tick_enable_flag>
			{//12초
				
				servo_release(SERVO_ENTRANCE_GATE); 
				_delay_ms(300);//dummy code 결과 확인후 삭제여부 결정
				tick_disable(TICK_ENTRANCE_GATE);
				entrance_gate_tick_enable_flag=STOP_TIMER;
    1598:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <entrance_gate_tick_enable_flag+0x1>
    159c:	10 92 ee 06 	sts	0x06EE, r1	; 0x8006ee <entrance_gate_tick_enable_flag>
				
				//입구 서보모터 릴리즈	
			}
			
		}
		if (exit_gate_tick_enable_flag)
    15a0:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <exit_gate_tick_enable_flag>
    15a4:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <exit_gate_tick_enable_flag+0x1>
    15a8:	89 2b       	or	r24, r25
    15aa:	09 f4       	brne	.+2      	; 0x15ae <main+0x140>
    15ac:	81 cf       	rjmp	.-254    	; 0x14b0 <main+0x42>
		{

			if(TICK.exit_gate_tick_1ms==1000) servo_release(SERVO_EXIT_GATE);
    15ae:	88 89       	ldd	r24, Y+16	; 0x10
    15b0:	99 89       	ldd	r25, Y+17	; 0x11
    15b2:	aa 89       	ldd	r26, Y+18	; 0x12
    15b4:	bb 89       	ldd	r27, Y+19	; 0x13
    15b6:	88 3e       	cpi	r24, 0xE8	; 232
    15b8:	93 40       	sbci	r25, 0x03	; 3
    15ba:	a1 05       	cpc	r26, r1
    15bc:	b1 05       	cpc	r27, r1
    15be:	29 f4       	brne	.+10     	; 0x15ca <main+0x15c>
}

void servo_release(int ch) {
	
	 	if(ch==SERVO_ENTRANCE_GATE) {servo_1_duty_ratio=0; }//PORTA&=~(1<<PORTA0);
	 	else if(ch==SERVO_EXIT_GATE){servo_2_duty_ratio=0;} //PORTA&=~(1<<PORTA3);
    15c0:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <servo_2_duty_ratio+0x1>
    15c4:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <servo_2_duty_ratio>
    15c8:	73 cf       	rjmp	.-282    	; 0x14b0 <main+0x42>
		}
		if (exit_gate_tick_enable_flag)
		{

			if(TICK.exit_gate_tick_1ms==1000) servo_release(SERVO_EXIT_GATE);
			else if(TICK.exit_gate_tick_1ms==10000)//5초
    15ca:	88 89       	ldd	r24, Y+16	; 0x10
    15cc:	99 89       	ldd	r25, Y+17	; 0x11
    15ce:	aa 89       	ldd	r26, Y+18	; 0x12
    15d0:	bb 89       	ldd	r27, Y+19	; 0x13
    15d2:	80 31       	cpi	r24, 0x10	; 16
    15d4:	97 42       	sbci	r25, 0x27	; 39
    15d6:	a1 05       	cpc	r26, r1
    15d8:	b1 05       	cpc	r27, r1
			{
				//수정희망(멜로디 변경)
				setSoundClip(BUZZ_ESP8266_CONNECTED);
    15da:	39 f4       	brne	.+14     	; 0x15ea <main+0x17c>
    15dc:	85 e0       	ldi	r24, 0x05	; 5
    15de:	6d dc       	rcall	.-1830   	; 0xeba <setSoundClip>
// angle값은 0~180로 들어옴. 넣어야 되는 값은 0~10 angle/18 >> 1/18~= 0.05556
	static int _offset=3;
	//int buffer = (int)(angle*0.05556);
	//int buffer = (int)(angle*0.027778);
	if(ch==SERVO_ENTRANCE_GATE) servo_1_duty_ratio=_offset+angle_state;
	else if(ch==SERVO_EXIT_GATE)servo_2_duty_ratio=_offset+angle_state;
    15e0:	10 93 f5 06 	sts	0x06F5, r17	; 0x8006f5 <servo_2_duty_ratio+0x1>
    15e4:	00 93 f4 06 	sts	0x06F4, r16	; 0x8006f4 <servo_2_duty_ratio>
    15e8:	63 cf       	rjmp	.-314    	; 0x14b0 <main+0x42>
				//수정희망(멜로디 변경)
				setSoundClip(BUZZ_ESP8266_CONNECTED);
				//출구 서보모터 닫는 명령
				set_servo(SERVO_EXIT_GATE,SERVO_GATE_CLOSE);
			}
			else if(TICK.exit_gate_tick_1ms==12000){//10초
    15ea:	88 89       	ldd	r24, Y+16	; 0x10
    15ec:	99 89       	ldd	r25, Y+17	; 0x11
    15ee:	aa 89       	ldd	r26, Y+18	; 0x12
    15f0:	bb 89       	ldd	r27, Y+19	; 0x13
    15f2:	80 3e       	cpi	r24, 0xE0	; 224
    15f4:	9e 42       	sbci	r25, 0x2E	; 46
    15f6:	a1 05       	cpc	r26, r1
    15f8:	b1 05       	cpc	r27, r1
    15fa:	09 f0       	breq	.+2      	; 0x15fe <main+0x190>
    15fc:	59 cf       	rjmp	.-334    	; 0x14b0 <main+0x42>
}

void servo_release(int ch) {
	
	 	if(ch==SERVO_ENTRANCE_GATE) {servo_1_duty_ratio=0; }//PORTA&=~(1<<PORTA0);
	 	else if(ch==SERVO_EXIT_GATE){servo_2_duty_ratio=0;} //PORTA&=~(1<<PORTA3);
    15fe:	10 92 f5 06 	sts	0x06F5, r1	; 0x8006f5 <servo_2_duty_ratio+0x1>
    1602:	10 92 f4 06 	sts	0x06F4, r1	; 0x8006f4 <servo_2_duty_ratio>
 void tick_disable(int tick_name){
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
		 case TICK_EXIT_GATE: exit_gate_tick_enable_flag=0; break;
    1606:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <exit_gate_tick_enable_flag+0x1>
    160a:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <exit_gate_tick_enable_flag>
				//i2c_lcd_noBacklight();
				
				//출구 서보모터 릴리즈
				servo_release(SERVO_EXIT_GATE);
				tick_disable(TICK_EXIT_GATE);
				exit_gate_tick_enable_flag=STOP_TIMER;
    160e:	10 92 f1 06 	sts	0x06F1, r1	; 0x8006f1 <exit_gate_tick_enable_flag+0x1>
    1612:	10 92 f0 06 	sts	0x06F0, r1	; 0x8006f0 <exit_gate_tick_enable_flag>
    1616:	4c cf       	rjmp	.-360    	; 0x14b0 <main+0x42>

00001618 <i2c_lcd_noBacklight>:
			
			while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
	}
}
void i2c_lcd_command_8(uint8_t command)
{
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	00 d0       	rcall	.+0      	; 0x161e <i2c_lcd_noBacklight+0x6>
    161e:	00 d0       	rcall	.+0      	; 0x1620 <i2c_lcd_noBacklight+0x8>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	84 e0       	ldi	r24, 0x04	; 4
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	1a 82       	std	Y+2, r1	; 0x02
    162a:	84 e1       	ldi	r24, 0x14	; 20
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	80 e1       	ldi	r24, 0x10	; 16
    1630:	8c 83       	std	Y+4, r24	; 0x04
    1632:	44 e0       	ldi	r20, 0x04	; 4
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	be 01       	movw	r22, r28
    1638:	6f 5f       	subi	r22, 0xFF	; 255
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1640:	4a d1       	rcall	.+660    	; 0x18d6 <i2c_transmit>
    1642:	81 11       	cpse	r24, r1
    1644:	f6 cf       	rjmp	.-20     	; 0x1632 <i2c_lcd_noBacklight+0x1a>
    1646:	8f e3       	ldi	r24, 0x3F	; 63
    1648:	9c e9       	ldi	r25, 0x9C	; 156
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	f1 f7       	brne	.-4      	; 0x164a <i2c_lcd_noBacklight+0x32>
    164e:	00 c0       	rjmp	.+0      	; 0x1650 <i2c_lcd_noBacklight+0x38>
    1650:	00 00       	nop
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <i2c_lcd_command_8>:
	uint8_t c_buf[2];
	
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	00 d0       	rcall	.+0      	; 0x1666 <i2c_lcd_command_8+0x6>
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
	
    166a:	80 7f       	andi	r24, 0xF0	; 240
    166c:	98 2f       	mov	r25, r24
    166e:	9c 60       	ori	r25, 0x0C	; 12
    1670:	99 83       	std	Y+1, r25	; 0x01
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
    1672:	88 60       	ori	r24, 0x08	; 8
    1674:	8a 83       	std	Y+2, r24	; 0x02
}

    1676:	42 e0       	ldi	r20, 0x02	; 2
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	be 01       	movw	r22, r28
    167c:	6f 5f       	subi	r22, 0xFF	; 255
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1684:	28 d1       	rcall	.+592    	; 0x18d6 <i2c_transmit>
    1686:	81 11       	cpse	r24, r1
    1688:	f6 cf       	rjmp	.-20     	; 0x1676 <i2c_lcd_command_8+0x16>
void i2c_lcd_command(uint8_t command)
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <i2c_lcd_command>:
{
	uint8_t c_buf[4];
	
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	00 d0       	rcall	.+0      	; 0x169a <i2c_lcd_command+0x6>
    169a:	00 d0       	rcall	.+0      	; 0x169c <i2c_lcd_command+0x8>
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
	
    16a0:	98 2f       	mov	r25, r24
    16a2:	90 7f       	andi	r25, 0xF0	; 240
    16a4:	29 2f       	mov	r18, r25
    16a6:	2c 60       	ori	r18, 0x0C	; 12
    16a8:	29 83       	std	Y+1, r18	; 0x01
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
    16aa:	98 60       	ori	r25, 0x08	; 8
    16ac:	9a 83       	std	Y+2, r25	; 0x02
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
	
    16ae:	20 e1       	ldi	r18, 0x10	; 16
    16b0:	82 9f       	mul	r24, r18
    16b2:	c0 01       	movw	r24, r0
    16b4:	11 24       	eor	r1, r1
    16b6:	98 2f       	mov	r25, r24
    16b8:	9c 60       	ori	r25, 0x0C	; 12
    16ba:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    16bc:	88 60       	ori	r24, 0x08	; 8
    16be:	8c 83       	std	Y+4, r24	; 0x04
}

    16c0:	44 e0       	ldi	r20, 0x04	; 4
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	be 01       	movw	r22, r28
    16c6:	6f 5f       	subi	r22, 0xFF	; 255
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    16ce:	03 d1       	rcall	.+518    	; 0x18d6 <i2c_transmit>
    16d0:	81 11       	cpse	r24, r1
    16d2:	f6 cf       	rjmp	.-20     	; 0x16c0 <i2c_lcd_command+0x2c>
void i2c_lcd_data(uint8_t data)
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
    16e2:	be d0       	rcall	.+380    	; 0x1860 <i2c_init>
    16e4:	2f ef       	ldi	r18, 0xFF	; 255
    16e6:	89 e6       	ldi	r24, 0x69	; 105
    16e8:	98 e1       	ldi	r25, 0x18	; 24
    16ea:	21 50       	subi	r18, 0x01	; 1
    16ec:	80 40       	sbci	r24, 0x00	; 0
    16ee:	90 40       	sbci	r25, 0x00	; 0
    16f0:	e1 f7       	brne	.-8      	; 0x16ea <i2c_lcd_init+0x8>
    16f2:	00 c0       	rjmp	.+0      	; 0x16f4 <i2c_lcd_init+0x12>
    16f4:	00 00       	nop
	_delay_ms(500);

	uart0_tx_string("Before i2c lcd Initialize... \r\n");
    16f6:	8d eb       	ldi	r24, 0xBD	; 189
    16f8:	93 e0       	ldi	r25, 0x03	; 3
    16fa:	3b d4       	rcall	.+2166   	; 0x1f72 <uart0_tx_string>
	i2c_lcd_command_8(0x30); _delay_ms(5);
    16fc:	80 e3       	ldi	r24, 0x30	; 48
    16fe:	b0 df       	rcall	.-160    	; 0x1660 <i2c_lcd_command_8>
    1700:	8f e1       	ldi	r24, 0x1F	; 31
    1702:	9e e4       	ldi	r25, 0x4E	; 78
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <i2c_lcd_init+0x22>
    1708:	00 c0       	rjmp	.+0      	; 0x170a <i2c_lcd_init+0x28>
    170a:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    170c:	80 e3       	ldi	r24, 0x30	; 48
    170e:	a8 df       	rcall	.-176    	; 0x1660 <i2c_lcd_command_8>
    1710:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <i2c_lcd_init+0x32>
    1718:	00 c0       	rjmp	.+0      	; 0x171a <i2c_lcd_init+0x38>
    171a:	00 00       	nop
	i2c_lcd_command_8(0x30); _delay_us(100);
    171c:	80 e3       	ldi	r24, 0x30	; 48
    171e:	a0 df       	rcall	.-192    	; 0x1660 <i2c_lcd_command_8>
    1720:	8f e8       	ldi	r24, 0x8F	; 143
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <i2c_lcd_init+0x42>
    1728:	00 c0       	rjmp	.+0      	; 0x172a <i2c_lcd_init+0x48>
    172a:	00 00       	nop
	i2c_lcd_command_8(0x20); _delay_us(100);
    172c:	80 e2       	ldi	r24, 0x20	; 32
    172e:	98 df       	rcall	.-208    	; 0x1660 <i2c_lcd_command_8>
    1730:	8f e8       	ldi	r24, 0x8F	; 143
    1732:	91 e0       	ldi	r25, 0x01	; 1
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <i2c_lcd_init+0x52>
    1738:	00 c0       	rjmp	.+0      	; 0x173a <i2c_lcd_init+0x58>
    173a:	00 00       	nop
	
	i2c_lcd_command(0x28); _delay_us(50);// function set(4-bit, 2 line, 5x7 dot)
    173c:	88 e2       	ldi	r24, 0x28	; 40
    173e:	aa df       	rcall	.-172    	; 0x1694 <i2c_lcd_command>
    1740:	87 ec       	ldi	r24, 0xC7	; 199
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <i2c_lcd_init+0x62>
    1748:	00 c0       	rjmp	.+0      	; 0x174a <i2c_lcd_init+0x68>
    174a:	00 00       	nop
	i2c_lcd_command(0x08); _delay_us(50);// display control(display ON, cursor OFF)
    174c:	88 e0       	ldi	r24, 0x08	; 8
    174e:	a2 df       	rcall	.-188    	; 0x1694 <i2c_lcd_command>
    1750:	87 ec       	ldi	r24, 0xC7	; 199
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <i2c_lcd_init+0x72>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <i2c_lcd_init+0x78>
    175a:	00 00       	nop
	i2c_lcd_command(0x01); _delay_ms(3);// clear display 
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	9a df       	rcall	.-204    	; 0x1694 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1760:	8f ed       	ldi	r24, 0xDF	; 223
    1762:	9e e2       	ldi	r25, 0x2E	; 46
    1764:	01 97       	sbiw	r24, 0x01	; 1
    1766:	f1 f7       	brne	.-4      	; 0x1764 <i2c_lcd_init+0x82>
    1768:	00 c0       	rjmp	.+0      	; 0x176a <i2c_lcd_init+0x88>
    176a:	00 00       	nop
	i2c_lcd_command(0x06); _delay_us(50); // entry mode set(increment, not shift)
    176c:	86 e0       	ldi	r24, 0x06	; 6
    176e:	92 df       	rcall	.-220    	; 0x1694 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1770:	87 ec       	ldi	r24, 0xC7	; 199
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <i2c_lcd_init+0x92>
    1778:	00 c0       	rjmp	.+0      	; 0x177a <i2c_lcd_init+0x98>
    177a:	00 00       	nop
	i2c_lcd_command(0x0C); _delay_us(50); // entry mode set(increment, not shift)
    177c:	8c e0       	ldi	r24, 0x0C	; 12
    177e:	8a df       	rcall	.-236    	; 0x1694 <i2c_lcd_command>
    1780:	87 ec       	ldi	r24, 0xC7	; 199
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <i2c_lcd_init+0xa2>
    1788:	00 c0       	rjmp	.+0      	; 0x178a <i2c_lcd_init+0xa8>
    178a:	00 00       	nop
	
	uart0_tx_string("i2c CLCD Connect Ok\r\n");
    178c:	8d ed       	ldi	r24, 0xDD	; 221
    178e:	93 e0       	ldi	r25, 0x03	; 3
    1790:	f0 c3       	rjmp	.+2016   	; 0x1f72 <uart0_tx_string>
    1792:	08 95       	ret

00001794 <i2c_lcd_data>:
    1794:	cf 93       	push	r28
}

void i2c_lcd_data(uint8_t data)
{
	uint8_t d_buf[4];
	
    1796:	df 93       	push	r29
    1798:	00 d0       	rcall	.+0      	; 0x179a <i2c_lcd_data+0x6>
    179a:	00 d0       	rcall	.+0      	; 0x179c <i2c_lcd_data+0x8>
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
	
    17a0:	98 2f       	mov	r25, r24
    17a2:	90 7f       	andi	r25, 0xF0	; 240
    17a4:	29 2f       	mov	r18, r25
    17a6:	2d 60       	ori	r18, 0x0D	; 13
    17a8:	29 83       	std	Y+1, r18	; 0x01
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
    17aa:	99 60       	ori	r25, 0x09	; 9
    17ac:	9a 83       	std	Y+2, r25	; 0x02
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
	
    17ae:	20 e1       	ldi	r18, 0x10	; 16
    17b0:	82 9f       	mul	r24, r18
    17b2:	c0 01       	movw	r24, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	98 2f       	mov	r25, r24
    17b8:	9d 60       	ori	r25, 0x0D	; 13
    17ba:	9b 83       	std	Y+3, r25	; 0x03
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
    17bc:	89 60       	ori	r24, 0x09	; 9
    17be:	8c 83       	std	Y+4, r24	; 0x04
}

    17c0:	44 e0       	ldi	r20, 0x04	; 4
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	be 01       	movw	r22, r28
    17c6:	6f 5f       	subi	r22, 0xFF	; 255
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    17ce:	83 d0       	rcall	.+262    	; 0x18d6 <i2c_transmit>
    17d0:	81 11       	cpse	r24, r1
    17d2:	f6 cf       	rjmp	.-20     	; 0x17c0 <i2c_lcd_data+0x2c>
void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	08 95       	ret

000017e2 <i2c_lcd_goto_XY>:
{
	static int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
	
	uint8_t address = (row_offsets[row]) + col;
	uint8_t command = 0x80 | address;
	
    17e2:	e8 2f       	mov	r30, r24
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	ed 50       	subi	r30, 0x0D	; 13
    17ec:	fc 4f       	sbci	r31, 0xFC	; 252
	i2c_lcd_command(command);
}

    17ee:	80 81       	ld	r24, Z
    17f0:	86 0f       	add	r24, r22
    17f2:	80 68       	ori	r24, 0x80	; 128
    17f4:	4f cf       	rjmp	.-354    	; 0x1694 <i2c_lcd_command>
    17f6:	08 95       	ret

000017f8 <i2c_lcd_string>:
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	ea 01       	movw	r28, r20
		i2c_lcd_data(*string++);
    17fe:	f1 df       	rcall	.-30     	; 0x17e2 <i2c_lcd_goto_XY>
	}
    1800:	88 81       	ld	r24, Y
    1802:	88 23       	and	r24, r24
    1804:	29 f0       	breq	.+10     	; 0x1810 <i2c_lcd_string+0x18>
}
    1806:	21 96       	adiw	r28, 0x01	; 1
    1808:	c5 df       	rcall	.-118    	; 0x1794 <i2c_lcd_data>
void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
		i2c_lcd_data(*string++);
	}
    180a:	89 91       	ld	r24, Y+
    180c:	81 11       	cpse	r24, r1
    180e:	fc cf       	rjmp	.-8      	; 0x1808 <i2c_lcd_string+0x10>
}
void i2c_lcd_clear()
{
    1810:	df 91       	pop	r29
    1812:	cf 91       	pop	r28
    1814:	08 95       	ret

00001816 <i2c_lcd_clear>:
		uint8_t c_buf[4];
		
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	00 d0       	rcall	.+0      	; 0x181c <i2c_lcd_clear+0x6>
    181c:	00 d0       	rcall	.+0      	; 0x181e <i2c_lcd_clear+0x8>
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
		c_buf[0] = (0x01 &0xF0) | RS0_EN1 | BackLight;
		c_buf[1] = (0x01&0xF0) | RS0_EN0 | BackLight;
		
    1822:	8c e0       	ldi	r24, 0x0C	; 12
    1824:	89 83       	std	Y+1, r24	; 0x01
		c_buf[2] = ((0x01<<4)&0xF0) | RS0_EN1 | BackLight;
    1826:	88 e0       	ldi	r24, 0x08	; 8
    1828:	8a 83       	std	Y+2, r24	; 0x02
		c_buf[3] = ((0x01<<4)&0xF0) | RS0_EN0 | BackLight;
		
    182a:	8c e1       	ldi	r24, 0x1C	; 28
    182c:	8b 83       	std	Y+3, r24	; 0x03
		while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
    182e:	88 e1       	ldi	r24, 0x18	; 24
    1830:	8c 83       	std	Y+4, r24	; 0x04
    1832:	44 e0       	ldi	r20, 0x04	; 4
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	be 01       	movw	r22, r28
    1838:	6f 5f       	subi	r22, 0xFF	; 255
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1840:	4a d0       	rcall	.+148    	; 0x18d6 <i2c_transmit>
    1842:	81 11       	cpse	r24, r1
    1844:	f6 cf       	rjmp	.-20     	; 0x1832 <i2c_lcd_clear+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1846:	8f e3       	ldi	r24, 0x3F	; 63
    1848:	9c e9       	ldi	r25, 0x9C	; 156
    184a:	01 97       	sbiw	r24, 0x01	; 1
    184c:	f1 f7       	brne	.-4      	; 0x184a <i2c_lcd_clear+0x34>
    184e:	00 c0       	rjmp	.+0      	; 0x1850 <i2c_lcd_clear+0x3a>
    1850:	00 00       	nop
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
    1860:	88 e4       	ldi	r24, 0x48	; 72
    1862:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    1866:	08 95       	ret

00001868 <i2c_start>:
    1868:	e4 e7       	ldi	r30, 0x74	; 116
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	10 82       	st	Z, r1
    186e:	94 ea       	ldi	r25, 0xA4	; 164
    1870:	90 83       	st	Z, r25
    1872:	90 81       	ld	r25, Z
    1874:	99 23       	and	r25, r25
    1876:	ec f7       	brge	.-6      	; 0x1872 <i2c_start+0xa>
    1878:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    187c:	98 7f       	andi	r25, 0xF8	; 248
    187e:	98 30       	cpi	r25, 0x08	; 8
    1880:	a1 f4       	brne	.+40     	; 0x18aa <i2c_start+0x42>
    1882:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    1886:	84 e8       	ldi	r24, 0x84	; 132
    1888:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    188c:	e4 e7       	ldi	r30, 0x74	; 116
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	88 23       	and	r24, r24
    1894:	ec f7       	brge	.-6      	; 0x1890 <i2c_start+0x28>
    1896:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    189a:	98 7f       	andi	r25, 0xF8	; 248
    189c:	98 31       	cpi	r25, 0x18	; 24
    189e:	39 f0       	breq	.+14     	; 0x18ae <i2c_start+0x46>
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	90 34       	cpi	r25, 0x40	; 64
    18a4:	29 f4       	brne	.+10     	; 0x18b0 <i2c_start+0x48>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	08 95       	ret
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	08 95       	ret
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	08 95       	ret

000018b2 <i2c_write>:
    18b2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    18b6:	84 e8       	ldi	r24, 0x84	; 132
    18b8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    18bc:	e4 e7       	ldi	r30, 0x74	; 116
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	88 23       	and	r24, r24
    18c4:	ec f7       	brge	.-6      	; 0x18c0 <i2c_write+0xe>
    18c6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    18ca:	98 7f       	andi	r25, 0xF8	; 248
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	98 32       	cpi	r25, 0x28	; 40
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <i2c_write+0x22>
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	08 95       	ret

000018d6 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ff 92       	push	r15
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	6b 01       	movw	r12, r22
    18e6:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
    18e8:	bf df       	rcall	.-130    	; 0x1868 <i2c_start>
    18ea:	f8 2e       	mov	r15, r24
    18ec:	81 11       	cpse	r24, r1
    18ee:	17 c0       	rjmp	.+46     	; 0x191e <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
    18f0:	01 15       	cp	r16, r1
    18f2:	11 05       	cpc	r17, r1
    18f4:	81 f0       	breq	.+32     	; 0x1916 <i2c_transmit+0x40>
    18f6:	e6 01       	movw	r28, r12
    18f8:	0c 0d       	add	r16, r12
    18fa:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
    18fc:	89 91       	ld	r24, Y+
    18fe:	d9 df       	rcall	.-78     	; 0x18b2 <i2c_write>
    1900:	81 11       	cpse	r24, r1
    1902:	10 c0       	rjmp	.+32     	; 0x1924 <i2c_transmit+0x4e>
    1904:	8f e9       	ldi	r24, 0x9F	; 159
    1906:	9f e0       	ldi	r25, 0x0F	; 15
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <i2c_transmit+0x32>
    190c:	00 c0       	rjmp	.+0      	; 0x190e <i2c_transmit+0x38>
    190e:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
    1910:	0c 17       	cp	r16, r28
    1912:	1d 07       	cpc	r17, r29
    1914:	99 f7       	brne	.-26     	; 0x18fc <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1916:	84 e9       	ldi	r24, 0x94	; 148
    1918:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
    191e:	ff 24       	eor	r15, r15
    1920:	f3 94       	inc	r15
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
    1924:	ff 24       	eor	r15, r15
    1926:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
    1928:	8f 2d       	mov	r24, r15
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	ff 90       	pop	r15
    1934:	df 90       	pop	r13
    1936:	cf 90       	pop	r12
    1938:	08 95       	ret

0000193a <mfrc522_write>:




static void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	16 2f       	mov	r17, r22
	
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
    1942:	95 b3       	in	r25, 0x15	; 21
    1944:	c1 e0       	ldi	r28, 0x01	; 1
    1946:	d0 e0       	ldi	r29, 0x00	; 0
    1948:	02 c0       	rjmp	.+4      	; 0x194e <mfrc522_write+0x14>
    194a:	cc 0f       	add	r28, r28
    194c:	dd 1f       	adc	r29, r29
    194e:	4a 95       	dec	r20
    1950:	e2 f7       	brpl	.-8      	; 0x194a <mfrc522_write+0x10>
    1952:	2c 2f       	mov	r18, r28
    1954:	20 95       	com	r18
    1956:	92 23       	and	r25, r18
    1958:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
    195a:	88 0f       	add	r24, r24
    195c:	8e 77       	andi	r24, 0x7E	; 126
    195e:	a3 d2       	rcall	.+1350   	; 0x1ea6 <spi_master_tx>
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
    1960:	81 2f       	mov	r24, r17
    1962:	a1 d2       	rcall	.+1346   	; 0x1ea6 <spi_master_tx>
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    1964:	85 b3       	in	r24, 0x15	; 21
    1966:	c8 2b       	or	r28, r24
    1968:	c5 bb       	out	0x15, r28	; 21
	//spi 통신 종료	 (굳이 없어도 될듯)
	
	
}
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	08 95       	ret

00001972 <mfrc522_read>:
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F

}

static unsigned char mfrc522_read(unsigned char reg, unsigned char channel){
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
    1976:	95 b3       	in	r25, 0x15	; 21
    1978:	c1 e0       	ldi	r28, 0x01	; 1
    197a:	d0 e0       	ldi	r29, 0x00	; 0
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <mfrc522_read+0x10>
    197e:	cc 0f       	add	r28, r28
    1980:	dd 1f       	adc	r29, r29
    1982:	6a 95       	dec	r22
    1984:	e2 f7       	brpl	.-8      	; 0x197e <mfrc522_read+0xc>
    1986:	2c 2f       	mov	r18, r28
    1988:	20 95       	com	r18
    198a:	92 23       	and	r25, r18
    198c:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
    198e:	88 0f       	add	r24, r24
    1990:	8e 77       	andi	r24, 0x7E	; 126
    1992:	80 68       	ori	r24, 0x80	; 128
    1994:	88 d2       	rcall	.+1296   	; 0x1ea6 <spi_master_tx>
	value = spi_master_rx(); //send dummy data and receive data.
    1996:	8b d2       	rcall	.+1302   	; 0x1eae <spi_master_rx>
    1998:	95 b3       	in	r25, 0x15	; 21
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    199a:	c9 2b       	or	r28, r25
    199c:	c5 bb       	out	0x15, r28	; 21
    199e:	df 91       	pop	r29
	
	return value;
}
    19a0:	cf 91       	pop	r28
    19a2:	08 95       	ret

000019a4 <mfrc522_to_card>:
    19a4:	2f 92       	push	r2

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    19a6:	3f 92       	push	r3
    19a8:	4f 92       	push	r4
    19aa:	5f 92       	push	r5
    19ac:	6f 92       	push	r6
    19ae:	7f 92       	push	r7
    19b0:	8f 92       	push	r8
    19b2:	9f 92       	push	r9
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	f8 2e       	mov	r15, r24
    19ca:	a6 2e       	mov	r10, r22
    19cc:	b7 2e       	mov	r11, r23
    19ce:	44 2e       	mov	r4, r20
    19d0:	22 2e       	mov	r2, r18
    19d2:	d3 2e       	mov	r13, r19
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
    19d4:	8c e0       	ldi	r24, 0x0C	; 12
    19d6:	f8 16       	cp	r15, r24
    19d8:	59 f0       	breq	.+22     	; 0x19f0 <mfrc522_to_card+0x4c>
    19da:	ee e0       	ldi	r30, 0x0E	; 14
    19dc:	fe 12       	cpse	r15, r30
    19de:	11 c0       	rjmp	.+34     	; 0x1a02 <mfrc522_to_card+0x5e>
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
    19e0:	68 94       	set
    19e2:	cc 24       	eor	r12, r12
    19e4:	c4 f8       	bld	r12, 4

	switch (cmd)
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
    19e6:	0f 2e       	mov	r0, r31
    19e8:	f2 e1       	ldi	r31, 0x12	; 18
    19ea:	3f 2e       	mov	r3, r31
    19ec:	f0 2d       	mov	r31, r0
    19ee:	0b c0       	rjmp	.+22     	; 0x1a06 <mfrc522_to_card+0x62>
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    19f0:	0f 2e       	mov	r0, r31
    19f2:	f0 e3       	ldi	r31, 0x30	; 48
    19f4:	cf 2e       	mov	r12, r31
    19f6:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
    19f8:	0f 2e       	mov	r0, r31
    19fa:	f7 e7       	ldi	r31, 0x77	; 119
    19fc:	3f 2e       	mov	r3, r31
    19fe:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <mfrc522_to_card+0x62>

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
    1a02:	c1 2c       	mov	r12, r1
}

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
    1a04:	31 2c       	mov	r3, r1
		default:
		break;
	}
	
	///////////////////////////////////////////============여기-==========//////////
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
    1a06:	4e 2d       	mov	r20, r14
    1a08:	63 2d       	mov	r22, r3
    1a0a:	60 68       	ori	r22, 0x80	; 128
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	95 df       	rcall	.-214    	; 0x193a <mfrc522_write>
	n=mfrc522_read(ComIrqReg,ch);
    1a10:	6e 2d       	mov	r22, r14
    1a12:	84 e0       	ldi	r24, 0x04	; 4
    1a14:	ae df       	rcall	.-164    	; 0x1972 <mfrc522_read>
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
    1a16:	68 2f       	mov	r22, r24
    1a18:	6f 77       	andi	r22, 0x7F	; 127
    1a1a:	4e 2d       	mov	r20, r14
    1a1c:	84 e0       	ldi	r24, 0x04	; 4
    1a1e:	8d df       	rcall	.-230    	; 0x193a <mfrc522_write>
	n=mfrc522_read(FIFOLevelReg,ch);
    1a20:	6e 2d       	mov	r22, r14
    1a22:	8a e0       	ldi	r24, 0x0A	; 10
    1a24:	a6 df       	rcall	.-180    	; 0x1972 <mfrc522_read>
    1a26:	68 2f       	mov	r22, r24
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
    1a28:	60 68       	ori	r22, 0x80	; 128
    1a2a:	4e 2d       	mov	r20, r14
    1a2c:	8a e0       	ldi	r24, 0x0A	; 10
    1a2e:	85 df       	rcall	.-246    	; 0x193a <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???
    1a30:	4e 2d       	mov	r20, r14
    1a32:	60 e0       	ldi	r22, 0x00	; 0
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	81 df       	rcall	.-254    	; 0x193a <mfrc522_write>
    1a38:	51 2c       	mov	r5, r1

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    1a3a:	61 2c       	mov	r6, r1
    1a3c:	71 2c       	mov	r7, r1
    1a3e:	41 14       	cp	r4, r1
    1a40:	51 04       	cpc	r5, r1
    1a42:	61 04       	cpc	r6, r1
    1a44:	71 04       	cpc	r7, r1
    1a46:	99 f0       	breq	.+38     	; 0x1a6e <mfrc522_to_card+0xca>
    1a48:	ca 2d       	mov	r28, r10
    1a4a:	db 2d       	mov	r29, r11
    1a4c:	81 2c       	mov	r8, r1
    1a4e:	91 2c       	mov	r9, r1
    1a50:	54 01       	movw	r10, r8
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
    1a52:	69 91       	ld	r22, Y+
    1a54:	4e 2d       	mov	r20, r14
    1a56:	89 e0       	ldi	r24, 0x09	; 9
    1a58:	70 df       	rcall	.-288    	; 0x193a <mfrc522_write>
    1a5a:	ff ef       	ldi	r31, 0xFF	; 255
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    1a5c:	8f 1a       	sub	r8, r31
    1a5e:	9f 0a       	sbc	r9, r31
    1a60:	af 0a       	sbc	r10, r31
    1a62:	bf 0a       	sbc	r11, r31
    1a64:	84 14       	cp	r8, r4
    1a66:	95 04       	cpc	r9, r5
    1a68:	a6 04       	cpc	r10, r6
    1a6a:	b7 04       	cpc	r11, r7
    1a6c:	90 f3       	brcs	.-28     	; 0x1a52 <mfrc522_to_card+0xae>
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
    1a6e:	4e 2d       	mov	r20, r14
    1a70:	6f 2d       	mov	r22, r15
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	62 df       	rcall	.-316    	; 0x193a <mfrc522_write>
	if (cmd == MFRC522_CMD_Transceive)
    1a76:	8c e0       	ldi	r24, 0x0C	; 12
    1a78:	f8 12       	cpse	r15, r24
	{
		n=mfrc522_read(BitFramingReg,ch);
    1a7a:	08 c0       	rjmp	.+16     	; 0x1a8c <mfrc522_to_card+0xe8>
    1a7c:	6e 2d       	mov	r22, r14
    1a7e:	8d e0       	ldi	r24, 0x0D	; 13
		mfrc522_write(BitFramingReg,n|0x80,ch);
    1a80:	78 df       	rcall	.-272    	; 0x1972 <mfrc522_read>
    1a82:	68 2f       	mov	r22, r24
    1a84:	60 68       	ori	r22, 0x80	; 128
    1a86:	4e 2d       	mov	r20, r14
    1a88:	8d e0       	ldi	r24, 0x0D	; 13
    1a8a:	57 df       	rcall	.-338    	; 0x193a <mfrc522_write>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    1a8c:	6e 2d       	mov	r22, r14
    1a8e:	84 e0       	ldi	r24, 0x04	; 4
    1a90:	70 df       	rcall	.-288    	; 0x1972 <mfrc522_read>
    1a92:	b8 2e       	mov	r11, r24
    1a94:	c0 e0       	ldi	r28, 0x00	; 0
    1a96:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    1a98:	ec 2d       	mov	r30, r12
    1a9a:	e1 60       	ori	r30, 0x01	; 1
    1a9c:	ce 2e       	mov	r12, r30
    1a9e:	0a c0       	rjmp	.+20     	; 0x1ab4 <mfrc522_to_card+0x110>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    1aa0:	6e 2d       	mov	r22, r14
    1aa2:	84 e0       	ldi	r24, 0x04	; 4
    1aa4:	66 df       	rcall	.-308    	; 0x1972 <mfrc522_read>
    1aa6:	b8 2e       	mov	r11, r24
    1aa8:	21 96       	adiw	r28, 0x01	; 1
    1aaa:	cf 3c       	cpi	r28, 0xCF	; 207
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    1aac:	f7 e0       	ldi	r31, 0x07	; 7
    1aae:	df 07       	cpc	r29, r31
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <mfrc522_to_card+0x110>
    1ab2:	68 c0       	rjmp	.+208    	; 0x1b84 <mfrc522_to_card+0x1e0>
    1ab4:	8c 2d       	mov	r24, r12
    1ab6:	8b 21       	and	r24, r11
    1ab8:	99 f3       	breq	.-26     	; 0x1aa0 <mfrc522_to_card+0xfc>
    1aba:	6e c0       	rjmp	.+220    	; 0x1b98 <mfrc522_to_card+0x1f4>
    1abc:	83 2d       	mov	r24, r3
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
    1abe:	81 70       	andi	r24, 0x01	; 1
    1ac0:	b8 22       	and	r11, r24
    1ac2:	11 f0       	breq	.+4      	; 0x1ac8 <mfrc522_to_card+0x124>
			{
				status = CARD_NOT_FOUND;			//??
    1ac4:	c2 e0       	ldi	r28, 0x02	; 2
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
    1ac6:	01 c0       	rjmp	.+2      	; 0x1aca <mfrc522_to_card+0x126>
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
    1ac8:	c1 e0       	ldi	r28, 0x01	; 1
    1aca:	8c e0       	ldi	r24, 0x0C	; 12
    1acc:	f8 12       	cpse	r15, r24
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1ace:	73 c0       	rjmp	.+230    	; 0x1bb6 <mfrc522_to_card+0x212>
    1ad0:	6e 2d       	mov	r22, r14
    1ad2:	8a e0       	ldi	r24, 0x0A	; 10
    1ad4:	4e df       	rcall	.-356    	; 0x1972 <mfrc522_read>
    1ad6:	88 2e       	mov	r8, r24
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
    1ad8:	6e 2d       	mov	r22, r14
    1ada:	8c e0       	ldi	r24, 0x0C	; 12
    1adc:	4a df       	rcall	.-364    	; 0x1972 <mfrc522_read>
    1ade:	28 2f       	mov	r18, r24
    1ae0:	27 70       	andi	r18, 0x07	; 7
    1ae2:	a9 f0       	breq	.+42     	; 0x1b0e <mfrc522_to_card+0x16a>
				if (lastBits)
    1ae4:	88 2d       	mov	r24, r8
				{
					*back_data_len = (n-1)*8 + lastBits;
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	82 0f       	add	r24, r18
    1af8:	91 1d       	adc	r25, r1
    1afa:	09 2e       	mov	r0, r25
    1afc:	00 0c       	add	r0, r0
    1afe:	aa 0b       	sbc	r26, r26
    1b00:	bb 0b       	sbc	r27, r27
    1b02:	f8 01       	movw	r30, r16
    1b04:	80 83       	st	Z, r24
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	a2 83       	std	Z+2, r26	; 0x02
    1b0a:	b3 83       	std	Z+3, r27	; 0x03
    1b0c:	11 c0       	rjmp	.+34     	; 0x1b30 <mfrc522_to_card+0x18c>
    1b0e:	88 2d       	mov	r24, r8
				}
				else
				{
					*back_data_len = n*8;
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	09 2e       	mov	r0, r25
    1b20:	00 0c       	add	r0, r0
    1b22:	aa 0b       	sbc	r26, r26
    1b24:	bb 0b       	sbc	r27, r27
    1b26:	f8 01       	movw	r30, r16
    1b28:	80 83       	st	Z, r24
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	a2 83       	std	Z+2, r26	; 0x02
    1b2e:	b3 83       	std	Z+3, r27	; 0x03
    1b30:	88 20       	and	r8, r8
				}

				if (n == 0)
    1b32:	71 f0       	breq	.+28     	; 0x1b50 <mfrc522_to_card+0x1ac>
    1b34:	88 2d       	mov	r24, r8
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    1b36:	81 31       	cpi	r24, 0x11	; 17
    1b38:	08 f0       	brcs	.+2      	; 0x1b3c <mfrc522_to_card+0x198>
    1b3a:	80 e1       	ldi	r24, 0x10	; 16
    1b3c:	88 2e       	mov	r8, r24
    1b3e:	91 2c       	mov	r9, r1
    1b40:	a1 2c       	mov	r10, r1
    1b42:	b1 2c       	mov	r11, r1
    1b44:	81 14       	cp	r8, r1
    1b46:	91 04       	cpc	r9, r1
    1b48:	a1 04       	cpc	r10, r1
    1b4a:	b1 04       	cpc	r11, r1
    1b4c:	29 f4       	brne	.+10     	; 0x1b58 <mfrc522_to_card+0x1b4>
    1b4e:	33 c0       	rjmp	.+102    	; 0x1bb6 <mfrc522_to_card+0x212>
    1b50:	81 2c       	mov	r8, r1
    1b52:	91 2c       	mov	r9, r1
    1b54:	54 01       	movw	r10, r8
    1b56:	83 94       	inc	r8
    1b58:	02 2d       	mov	r16, r2
    1b5a:	1d 2d       	mov	r17, r13
    1b5c:	41 2c       	mov	r4, r1
    1b5e:	51 2c       	mov	r5, r1
    1b60:	32 01       	movw	r6, r4
				{
					back_data[i] = mfrc522_read(FIFODataReg,ch);
    1b62:	6e 2d       	mov	r22, r14
    1b64:	89 e0       	ldi	r24, 0x09	; 9
    1b66:	05 df       	rcall	.-502    	; 0x1972 <mfrc522_read>
    1b68:	f8 01       	movw	r30, r16
    1b6a:	81 93       	st	Z+, r24
    1b6c:	8f 01       	movw	r16, r30
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    1b6e:	ff ef       	ldi	r31, 0xFF	; 255
    1b70:	4f 1a       	sub	r4, r31
    1b72:	5f 0a       	sbc	r5, r31
    1b74:	6f 0a       	sbc	r6, r31
    1b76:	7f 0a       	sbc	r7, r31
    1b78:	48 14       	cp	r4, r8
    1b7a:	59 04       	cpc	r5, r9
    1b7c:	6a 04       	cpc	r6, r10
    1b7e:	7b 04       	cpc	r7, r11
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    1b80:	80 f3       	brcs	.-32     	; 0x1b62 <mfrc522_to_card+0x1be>
    1b82:	19 c0       	rjmp	.+50     	; 0x1bb6 <mfrc522_to_card+0x212>
    1b84:	6e 2d       	mov	r22, r14
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    1b86:	8d e0       	ldi	r24, 0x0D	; 13
    1b88:	f4 de       	rcall	.-536    	; 0x1972 <mfrc522_read>
    1b8a:	68 2f       	mov	r22, r24
    1b8c:	6f 77       	andi	r22, 0x7F	; 127
    1b8e:	4e 2d       	mov	r20, r14
	return value;
}

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
    1b90:	8d e0       	ldi	r24, 0x0D	; 13
    1b92:	d3 de       	rcall	.-602    	; 0x193a <mfrc522_write>
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    1b94:	c3 e0       	ldi	r28, 0x03	; 3
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <mfrc522_to_card+0x212>
    1b98:	6e 2d       	mov	r22, r14
    1b9a:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    1b9c:	ea de       	rcall	.-556    	; 0x1972 <mfrc522_read>
    1b9e:	68 2f       	mov	r22, r24
    1ba0:	6f 77       	andi	r22, 0x7F	; 127
    1ba2:	4e 2d       	mov	r20, r14
    1ba4:	8d e0       	ldi	r24, 0x0D	; 13
    1ba6:	c9 de       	rcall	.-622    	; 0x193a <mfrc522_write>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
    1ba8:	6e 2d       	mov	r22, r14
    1baa:	86 e0       	ldi	r24, 0x06	; 6
    1bac:	e2 de       	rcall	.-572    	; 0x1972 <mfrc522_read>
    1bae:	8b 71       	andi	r24, 0x1B	; 27
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <mfrc522_to_card+0x210>
    1bb2:	84 cf       	rjmp	.-248    	; 0x1abc <mfrc522_to_card+0x118>
    1bb4:	c3 e0       	ldi	r28, 0x03	; 3
				}
			}
		}
		else
		{
			status = ERROR;
    1bb6:	8c 2f       	mov	r24, r28
	
	// 	SetBitMask(ControlReg,0x80);           //timer stops
	//mfrc522_write(CommandReg, MFRC522_CMD_Idle);

	return status;
}
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	1f 91       	pop	r17
    1bbe:	0f 91       	pop	r16
    1bc0:	ff 90       	pop	r15
    1bc2:	ef 90       	pop	r14
    1bc4:	df 90       	pop	r13
    1bc6:	cf 90       	pop	r12
    1bc8:	bf 90       	pop	r11
    1bca:	af 90       	pop	r10
    1bcc:	9f 90       	pop	r9
    1bce:	8f 90       	pop	r8
    1bd0:	7f 90       	pop	r7
    1bd2:	6f 90       	pop	r6
    1bd4:	5f 90       	pop	r5
    1bd6:	4f 90       	pop	r4
    1bd8:	3f 90       	pop	r3
    1bda:	2f 90       	pop	r2
    1bdc:	08 95       	ret

00001bde <mfrc522_init>:
    1bde:	cf 93       	push	r28

void mfrc522_init(unsigned char ch)
{
    1be0:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
    1be2:	1f 92       	push	r1
    1be4:	1f 92       	push	r1
    1be6:	1f 92       	push	r1
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	8f 93       	push	r24
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	8f 93       	push	r24
    1bf0:	17 d1       	rcall	.+558    	; 0x1e20 <spi_init>
	
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
    1bf2:	84 b3       	in	r24, 0x14	; 20
    1bf4:	83 60       	ori	r24, 0x03	; 3
    1bf6:	84 bb       	out	0x14, r24	; 20
	SS_PORT=0; //입력핀이 전원에 영향 끼치는 행위를 막기 위함
    1bf8:	15 ba       	out	0x15, r1	; 21
    1bfa:	2f ef       	ldi	r18, 0xFF	; 255
    1bfc:	89 ef       	ldi	r24, 0xF9	; 249
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	21 50       	subi	r18, 0x01	; 1
    1c02:	80 40       	sbci	r24, 0x00	; 0
    1c04:	90 40       	sbci	r25, 0x00	; 0
    1c06:	e1 f7       	brne	.-8      	; 0x1c00 <mfrc522_init+0x22>
    1c08:	00 c0       	rjmp	.+0      	; 0x1c0a <mfrc522_init+0x2c>
    1c0a:	00 00       	nop
	//이렇게 케어해두니, 이상 동작하지 않아서 좋음
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
    1c0c:	85 b3       	in	r24, 0x15	; 21
    1c0e:	83 60       	ori	r24, 0x03	; 3
    1c10:	85 bb       	out	0x15, r24	; 21
}

static void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴.
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F
    1c12:	4c 2f       	mov	r20, r28
    1c14:	6f e0       	ldi	r22, 0x0F	; 15
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 de       	rcall	.-736    	; 0x193a <mfrc522_write>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
    1c1a:	4c 2f       	mov	r20, r28
    1c1c:	6d e8       	ldi	r22, 0x8D	; 141
    1c1e:	8a e2       	ldi	r24, 0x2A	; 42
    1c20:	8c de       	rcall	.-744    	; 0x193a <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
    1c22:	4c 2f       	mov	r20, r28
    1c24:	6e e3       	ldi	r22, 0x3E	; 62
    1c26:	8b e2       	ldi	r24, 0x2B	; 43
    1c28:	88 de       	rcall	.-752    	; 0x193a <mfrc522_write>
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
    1c2a:	4c 2f       	mov	r20, r28
    1c2c:	6e e1       	ldi	r22, 0x1E	; 30
    1c2e:	8c e2       	ldi	r24, 0x2C	; 44
    1c30:	84 de       	rcall	.-760    	; 0x193a <mfrc522_write>
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
    1c32:	4c 2f       	mov	r20, r28
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	8d e2       	ldi	r24, 0x2D	; 45
    1c38:	80 de       	rcall	.-768    	; 0x193a <mfrc522_write>
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
    1c3a:	4c 2f       	mov	r20, r28
    1c3c:	60 e4       	ldi	r22, 0x40	; 64
    1c3e:	85 e1       	ldi	r24, 0x15	; 21
    1c40:	7c de       	rcall	.-776    	; 0x193a <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
    1c42:	4c 2f       	mov	r20, r28
    1c44:	6d e3       	ldi	r22, 0x3D	; 61
    1c46:	81 e1       	ldi	r24, 0x11	; 17
    1c48:	78 de       	rcall	.-784    	; 0x193a <mfrc522_write>
    1c4a:	6c 2f       	mov	r22, r28
	
	
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
    1c4c:	84 e1       	ldi	r24, 0x14	; 20
    1c4e:	91 de       	rcall	.-734    	; 0x1972 <mfrc522_read>
    1c50:	98 2f       	mov	r25, r24
    1c52:	93 70       	andi	r25, 0x03	; 3
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	29 f4       	brne	.+10     	; 0x1c6a <mfrc522_init+0x8c>
    1c60:	68 2f       	mov	r22, r24
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
    1c62:	63 60       	ori	r22, 0x03	; 3
    1c64:	4c 2f       	mov	r20, r28
    1c66:	84 e1       	ldi	r24, 0x14	; 20
    1c68:	68 de       	rcall	.-816    	; 0x193a <mfrc522_write>
    1c6a:	cf 91       	pop	r28
    1c6c:	08 95       	ret

00001c6e <mfrc522_version_check>:
	}
}
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29




void mfrc522_version_check(unsigned char ch){
    1c72:	d8 2f       	mov	r29, r24
	
	unsigned char byte;
	
	byte = mfrc522_read(VersionReg, ch);
    1c74:	68 2f       	mov	r22, r24
    1c76:	87 e3       	ldi	r24, 0x37	; 55
    1c78:	7c de       	rcall	.-776    	; 0x1972 <mfrc522_read>
    1c7a:	c8 2f       	mov	r28, r24
    1c7c:	2f ef       	ldi	r18, 0xFF	; 255
    1c7e:	89 ef       	ldi	r24, 0xF9	; 249
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	21 50       	subi	r18, 0x01	; 1
    1c84:	80 40       	sbci	r24, 0x00	; 0
    1c86:	90 40       	sbci	r25, 0x00	; 0
    1c88:	e1 f7       	brne	.-8      	; 0x1c82 <mfrc522_version_check+0x14>
    1c8a:	00 c0       	rjmp	.+0      	; 0x1c8c <mfrc522_version_check+0x1e>
    1c8c:	00 00       	nop
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
    1c8e:	d1 11       	cpse	r29, r1
    1c90:	06 c0       	rjmp	.+12     	; 0x1c9e <mfrc522_version_check+0x30>
    1c92:	8b ef       	ldi	r24, 0xFB	; 251
    1c94:	93 e0       	ldi	r25, 0x03	; 3
    1c96:	6d d1       	rcall	.+730    	; 0x1f72 <uart0_tx_string>
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
    1c98:	c2 39       	cpi	r28, 0x92	; 146
    1c9a:	59 f5       	brne	.+86     	; 0x1cf2 <mfrc522_version_check+0x84>
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <mfrc522_version_check+0x4e>
	byte = mfrc522_read(VersionReg, ch);
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
    1c9e:	87 e0       	ldi	r24, 0x07	; 7
    1ca0:	94 e0       	ldi	r25, 0x04	; 4
    1ca2:	67 d1       	rcall	.+718    	; 0x1f72 <uart0_tx_string>
	
	if(byte == 0x92)
    1ca4:	c2 39       	cpi	r28, 0x92	; 146
    1ca6:	91 f5       	brne	.+100    	; 0x1d0c <mfrc522_version_check+0x9e>
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
    1ca8:	12 c0       	rjmp	.+36     	; 0x1cce <mfrc522_version_check+0x60>
    1caa:	83 e1       	ldi	r24, 0x13	; 19
    1cac:	94 e0       	ldi	r25, 0x04	; 4
    1cae:	61 d1       	rcall	.+706    	; 0x1f72 <uart0_tx_string>
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
    1cb0:	46 e2       	ldi	r20, 0x26	; 38
    1cb2:	54 e0       	ldi	r21, 0x04	; 4
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	9f dd       	rcall	.-1218   	; 0x17f8 <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    1cba:	ff cf       	rjmp	.-2      	; 0x1cba <mfrc522_version_check+0x4c>
    1cbc:	8a e3       	ldi	r24, 0x3A	; 58
    1cbe:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    1cc0:	58 d1       	rcall	.+688    	; 0x1f72 <uart0_tx_string>
    1cc2:	4e e5       	ldi	r20, 0x5E	; 94
    1cc4:	54 e0       	ldi	r21, 0x04	; 4
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	96 dd       	rcall	.-1236   	; 0x17f8 <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    1ccc:	23 c0       	rjmp	.+70     	; 0x1d14 <mfrc522_version_check+0xa6>
    1cce:	8a e3       	ldi	r24, 0x3A	; 58
    1cd0:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1cd2:	4f d1       	rcall	.+670    	; 0x1f72 <uart0_tx_string>
    1cd4:	43 e7       	ldi	r20, 0x73	; 115
    1cd6:	54 e0       	ldi	r21, 0x04	; 4
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	82 e0       	ldi	r24, 0x02	; 2
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    1cdc:	8d dd       	rcall	.-1254   	; 0x17f8 <i2c_lcd_string>
    1cde:	1a c0       	rjmp	.+52     	; 0x1d14 <mfrc522_version_check+0xa6>
    1ce0:	88 e8       	ldi	r24, 0x88	; 136
    1ce2:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    1ce4:	46 d1       	rcall	.+652    	; 0x1f72 <uart0_tx_string>
    1ce6:	4e e5       	ldi	r20, 0x5E	; 94
    1ce8:	54 e0       	ldi	r21, 0x04	; 4
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	84 dd       	rcall	.-1272   	; 0x17f8 <i2c_lcd_string>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    1cf0:	11 c0       	rjmp	.+34     	; 0x1d14 <mfrc522_version_check+0xa6>
    1cf2:	c0 59       	subi	r28, 0x90	; 144
    1cf4:	c2 30       	cpi	r28, 0x02	; 2
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    1cf6:	c8 f6       	brcc	.-78     	; 0x1caa <mfrc522_version_check+0x3c>
    1cf8:	f3 cf       	rjmp	.-26     	; 0x1ce0 <mfrc522_version_check+0x72>
    1cfa:	88 e8       	ldi	r24, 0x88	; 136
    1cfc:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1cfe:	39 d1       	rcall	.+626    	; 0x1f72 <uart0_tx_string>
    1d00:	43 e7       	ldi	r20, 0x73	; 115
    1d02:	54 e0       	ldi	r21, 0x04	; 4
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	77 dd       	rcall	.-1298   	; 0x17f8 <i2c_lcd_string>
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <mfrc522_version_check+0xa6>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    1d0c:	c0 59       	subi	r28, 0x90	; 144
    1d0e:	c2 30       	cpi	r28, 0x02	; 2
    1d10:	60 f6       	brcc	.-104    	; 0x1caa <mfrc522_version_check+0x3c>
    1d12:	f3 cf       	rjmp	.-26     	; 0x1cfa <mfrc522_version_check+0x8c>
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
	}
	
}
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <mfrc522_IRQ_enable>:

void mfrc522_IRQ_enable(unsigned char ch)
{
    1d1a:	cf 93       	push	r28
    1d1c:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	byte=mfrc522_read(ComIEnReg, ch);
    1d1e:	68 2f       	mov	r22, r24
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	27 de       	rcall	.-946    	; 0x1972 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
    1d24:	68 2f       	mov	r22, r24
    1d26:	60 62       	ori	r22, 0x20	; 32
    1d28:	4c 2f       	mov	r20, r28
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	06 de       	rcall	.-1012   	; 0x193a <mfrc522_write>
	byte=mfrc522_read(DivIEnReg, ch);
    1d2e:	6c 2f       	mov	r22, r28
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	1f de       	rcall	.-962    	; 0x1972 <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
    1d34:	68 2f       	mov	r22, r24
    1d36:	60 68       	ori	r22, 0x80	; 128
    1d38:	4c 2f       	mov	r20, r28
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	fe dd       	rcall	.-1028   	; 0x193a <mfrc522_write>
}
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <mfrc522_request>:


unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
{
    1d42:	cf 92       	push	r12
    1d44:	df 92       	push	r13
    1d46:	ef 92       	push	r14
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <mfrc522_request+0x10>
    1d52:	00 d0       	rcall	.+0      	; 0x1d54 <mfrc522_request+0x12>
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	18 2f       	mov	r17, r24
    1d5a:	6b 01       	movw	r12, r22
    1d5c:	e4 2e       	mov	r14, r20
	uint8_t  status;
	uint32_t backBits;//The received data bits

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
    1d5e:	67 e0       	ldi	r22, 0x07	; 7
    1d60:	8d e0       	ldi	r24, 0x0D	; 13
    1d62:	eb dd       	rcall	.-1066   	; 0x193a <mfrc522_write>
	
	tag_type[0] = req_mode;
    1d64:	f6 01       	movw	r30, r12
    1d66:	10 83       	st	Z, r17
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);
    1d68:	8e 01       	movw	r16, r28
    1d6a:	0f 5f       	subi	r16, 0xFF	; 255
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	96 01       	movw	r18, r12
    1d70:	41 e0       	ldi	r20, 0x01	; 1
    1d72:	b6 01       	movw	r22, r12
    1d74:	8c e0       	ldi	r24, 0x0C	; 12
    1d76:	16 de       	rcall	.-980    	; 0x19a4 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	59 f4       	brne	.+22     	; 0x1d92 <mfrc522_request+0x50>
    1d7c:	49 81       	ldd	r20, Y+1	; 0x01
    1d7e:	5a 81       	ldd	r21, Y+2	; 0x02
    1d80:	6b 81       	ldd	r22, Y+3	; 0x03
    1d82:	7c 81       	ldd	r23, Y+4	; 0x04
    1d84:	40 31       	cpi	r20, 0x10	; 16
    1d86:	51 05       	cpc	r21, r1
    1d88:	61 05       	cpc	r22, r1
    1d8a:	71 05       	cpc	r23, r1
    1d8c:	19 f0       	breq	.+6      	; 0x1d94 <mfrc522_request+0x52>
	{
		status = ERROR;
    1d8e:	83 e0       	ldi	r24, 0x03	; 3
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <mfrc522_request+0x52>
    1d92:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ef 90       	pop	r14
    1da6:	df 90       	pop	r13
    1da8:	cf 90       	pop	r12
    1daa:	08 95       	ret

00001dac <mfrc522_get_card_serial>:



unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
    1dac:	cf 92       	push	r12
    1dae:	df 92       	push	r13
    1db0:	ef 92       	push	r14
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	cf 93       	push	r28
    1db8:	df 93       	push	r29
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <mfrc522_get_card_serial+0x10>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <mfrc522_get_card_serial+0x12>
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	6c 01       	movw	r12, r24
    1dc4:	e6 2e       	mov	r14, r22
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
    1dc6:	46 2f       	mov	r20, r22
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	8d e0       	ldi	r24, 0x0D	; 13
    1dcc:	b6 dd       	rcall	.-1172   	; 0x193a <mfrc522_write>
	
	serial_out[0] = PICC_ANTICOLL;
    1dce:	83 e9       	ldi	r24, 0x93	; 147
    1dd0:	f6 01       	movw	r30, r12
    1dd2:	80 83       	st	Z, r24
	serial_out[1] = 0x20;
    1dd4:	80 e2       	ldi	r24, 0x20	; 32
    1dd6:	81 83       	std	Z+1, r24	; 0x01
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);
    1dd8:	8e 01       	movw	r16, r28
    1dda:	0f 5f       	subi	r16, 0xFF	; 255
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	96 01       	movw	r18, r12
    1de0:	42 e0       	ldi	r20, 0x02	; 2
    1de2:	b6 01       	movw	r22, r12
    1de4:	8c e0       	ldi	r24, 0x0C	; 12
    1de6:	de dd       	rcall	.-1092   	; 0x19a4 <mfrc522_to_card>

	if (status == CARD_FOUND)
    1de8:	81 30       	cpi	r24, 0x01	; 1
    1dea:	71 f4       	brne	.+28     	; 0x1e08 <mfrc522_get_card_serial+0x5c>
    1dec:	f6 01       	movw	r30, r12
    1dee:	a6 01       	movw	r20, r12
    1df0:	4c 5f       	subi	r20, 0xFC	; 252
    1df2:	5f 4f       	sbci	r21, 0xFF	; 255
    1df4:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
    1df6:	21 91       	ld	r18, Z+
    1df8:	92 27       	eor	r25, r18
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
    1dfa:	4e 17       	cp	r20, r30
    1dfc:	5f 07       	cpc	r21, r31
    1dfe:	d9 f7       	brne	.-10     	; 0x1df6 <mfrc522_get_card_serial+0x4a>
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
    1e00:	f6 01       	movw	r30, r12
    1e02:	24 81       	ldd	r18, Z+4	; 0x04
    1e04:	92 13       	cpse	r25, r18
		{
			status = ERROR;
    1e06:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return status;
}
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ef 90       	pop	r14
    1e1a:	df 90       	pop	r13
    1e1c:	cf 90       	pop	r12
    1e1e:	08 95       	ret

00001e20 <spi_init>:
//spi intialization function. ver1.0
//Parameter :
//if) spi master mode	: (spi_mode, spi_click_prescailing, spi_clock_and_edge)
//if) spi slave  mode	: (spi_mode)
//if) spi master mode (advance) : (spi_mode, spi_click_prescailing, spi_clock_and_edge, spi_double_speed)
void spi_init(uint8_t spi_mode, ...){
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <spi_init+0x6>
    1e26:	1f 92       	push	r1
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	88 85       	ldd	r24, Y+8	; 0x08

	if ((spi_mode != _SPI_MASTER_MODE) && (spi_mode != _SPI_SLAVE_MODE)) return;// this line is exception code when if user insert the wrong parameter
    1e2e:	83 30       	cpi	r24, 0x03	; 3
    1e30:	21 f1       	breq	.+72     	; 0x1e7a <spi_init+0x5a>
    1e32:	81 11       	cpse	r24, r1
    1e34:	32 c0       	rjmp	.+100    	; 0x1e9a <spi_init+0x7a>
    1e36:	29 c0       	rjmp	.+82     	; 0x1e8a <spi_init+0x6a>
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
    1e38:	9c 91       	ld	r25, X
    1e3a:	12 96       	adiw	r26, 0x02	; 2
    1e3c:	91 93       	st	Z+, r25
	
	va_list ap;
	va_start(ap, spi_mode); //spi_mode : 0 or 2
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
    1e3e:	e2 17       	cp	r30, r18
    1e40:	f3 07       	cpc	r31, r19
    1e42:	d1 f7       	brne	.-12     	; 0x1e38 <spi_init+0x18>
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1e44:	9b 81       	ldd	r25, Y+3	; 0x03
    1e46:	92 30       	cpi	r25, 0x02	; 2
    1e48:	20 f1       	brcs	.+72     	; 0x1e92 <spi_init+0x72>
    1e4a:	1b 82       	std	Y+3, r1	; 0x03
	
	
	SPCR=0; //clear CPCR register
    1e4c:	1d b8       	out	0x0d, r1	; 13
	
	if(spi_mode==_SPI_MASTER_MODE){
    1e4e:	83 30       	cpi	r24, 0x03	; 3
    1e50:	71 f4       	brne	.+28     	; 0x1e6e <spi_init+0x4e>
		
		/* Set MOSI and SCK output, all others input */
		SPI_PORT |= (1 << SS);
    1e52:	c0 9a       	sbi	0x18, 0	; 24
		SPI_DDR |= ((1<<MOSI)|(1<<SCK)|(1 << SS));
    1e54:	87 b3       	in	r24, 0x17	; 23
    1e56:	87 60       	ori	r24, 0x07	; 7
    1e58:	87 bb       	out	0x17, r24	; 23
		
		spcr_buff=((1<<SPE)|(1<<MSTR)|(param_buff[0])|(param_buff[1]));
    1e5a:	99 81       	ldd	r25, Y+1	; 0x01
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	89 2b       	or	r24, r25
    1e60:	80 65       	ori	r24, 0x50	; 80
		SPSR|=(param_buff[2]<<0);//double speed set
    1e62:	2e b1       	in	r18, 0x0e	; 14
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	92 2b       	or	r25, r18
    1e68:	9e b9       	out	0x0e, r25	; 14
		SPCR=spcr_buff;
    1e6a:	8d b9       	out	0x0d, r24	; 13
    1e6c:	16 c0       	rjmp	.+44     	; 0x1e9a <spi_init+0x7a>
 
	}
	else if(spi_mode==_SPI_SLAVE_MODE){
    1e6e:	81 11       	cpse	r24, r1
    1e70:	14 c0       	rjmp	.+40     	; 0x1e9a <spi_init+0x7a>
		/* Set MISO output, all others input */
		SPI_DDR |= (1<<MISO);
    1e72:	bb 9a       	sbi	0x17, 3	; 23
		/* Enable SPI */
		SPCR = (1<<SPE);
    1e74:	80 e4       	ldi	r24, 0x40	; 64
    1e76:	8d b9       	out	0x0d, r24	; 13
    1e78:	10 c0       	rjmp	.+32     	; 0x1e9a <spi_init+0x7a>
    1e7a:	de 01       	movw	r26, r28
    1e7c:	19 96       	adiw	r26, 0x09	; 9
    1e7e:	fe 01       	movw	r30, r28
    1e80:	31 96       	adiw	r30, 0x01	; 1
    1e82:	9e 01       	movw	r18, r28
    1e84:	2c 5f       	subi	r18, 0xFC	; 252
    1e86:	3f 4f       	sbci	r19, 0xFF	; 255
    1e88:	d7 cf       	rjmp	.-82     	; 0x1e38 <spi_init+0x18>
	
	//spi_mode 변수 = 표면적으론 spi 기능 선택여부, 내면적으로는 가변인자의 갯수를 정해주는 역할을 함.
	for (int i = 0; i < spi_mode; i++) {
		param_buff[i]=(unsigned char)va_arg(ap, int);
	} 
	if(param_buff[2]!=0&&param_buff[2]!=1) param_buff[2]=0;//exception care code about trash value at buffer
    1e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8c:	92 30       	cpi	r25, 0x02	; 2
    1e8e:	e8 f6       	brcc	.-70     	; 0x1e4a <spi_init+0x2a>
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <spi_init+0x76>
	
	
	SPCR=0; //clear CPCR register
    1e92:	1d b8       	out	0x0d, r1	; 13
    1e94:	de cf       	rjmp	.-68     	; 0x1e52 <spi_init+0x32>
    1e96:	1d b8       	out	0x0d, r1	; 13
    1e98:	ec cf       	rjmp	.-40     	; 0x1e72 <spi_init+0x52>
	}
	else {
		//error
		return;
	}
}
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	08 95       	ret

00001ea6 <spi_master_tx>:


void spi_master_tx(unsigned char data){
	SPDR = data;
    1ea6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
    1ea8:	77 9b       	sbis	0x0e, 7	; 14
    1eaa:	fe cf       	rjmp	.-4      	; 0x1ea8 <spi_master_tx+0x2>
}
    1eac:	08 95       	ret

00001eae <spi_master_rx>:

unsigned char spi_master_rx(void){
	SPDR=0x00; //dummy code. 수신 받기 위해 더미데이터를 슬레이브로 전송시킴.
    1eae:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR&(1<<SPIF)));
    1eb0:	77 9b       	sbis	0x0e, 7	; 14
    1eb2:	fe cf       	rjmp	.-4      	; 0x1eb0 <spi_master_rx+0x2>
	
	return SPDR;
    1eb4:	8f b1       	in	r24, 0x0f	; 15
}
    1eb6:	08 95       	ret

00001eb8 <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
    1eb8:	bc 9a       	sbi	0x17, 4	; 23
    1eba:	8c e0       	ldi	r24, 0x0C	; 12
    1ebc:	83 bf       	out	0x33, r24	; 51
    1ebe:	8a ef       	ldi	r24, 0xFA	; 250
    1ec0:	81 bf       	out	0x31, r24	; 49
    1ec2:	87 b7       	in	r24, 0x37	; 55
    1ec4:	82 60       	ori	r24, 0x02	; 2
    1ec6:	87 bf       	out	0x37, r24	; 55
    1ec8:	08 95       	ret

00001eca <timer1_init>:
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	8f bd       	out	0x2f, r24	; 47
    1ece:	8a e1       	ldi	r24, 0x1A	; 26
    1ed0:	8e bd       	out	0x2e, r24	; 46
    1ed2:	1d bc       	out	0x2d, r1	; 45
    1ed4:	1c bc       	out	0x2c, r1	; 44
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	87 bd       	out	0x27, r24	; 39
    1eda:	8f e8       	ldi	r24, 0x8F	; 143
    1edc:	86 bd       	out	0x26, r24	; 38
    1ede:	87 b7       	in	r24, 0x37	; 55
    1ee0:	84 60       	ori	r24, 0x04	; 4
    1ee2:	87 bf       	out	0x37, r24	; 55
    1ee4:	08 95       	ret

00001ee6 <timer3_init>:
    1ee6:	13 9a       	sbi	0x02, 3	; 2
    1ee8:	80 e4       	ldi	r24, 0x40	; 64
    1eea:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1eee:	8a e1       	ldi	r24, 0x1A	; 26
    1ef0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1ef4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1ef8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1efc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f00:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1f04:	08 95       	ret

00001f06 <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
    1f06:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
    1f0a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1f0e:	08 95       	ret

00001f10 <uart_init>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	ec 01       	movw	r28, r24
    1f16:	9b 01       	movw	r18, r22
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	60 e4       	ldi	r22, 0x40	; 64
    1f1e:	72 e4       	ldi	r23, 0x42	; 66
    1f20:	8f e0       	ldi	r24, 0x0F	; 15
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	4f d1       	rcall	.+670    	; 0x21c4 <__udivmodsi4>
    1f26:	21 50       	subi	r18, 0x01	; 1
    1f28:	31 09       	sbc	r19, r1
    1f2a:	20 97       	sbiw	r28, 0x00	; 0
    1f2c:	59 f4       	brne	.+22     	; 0x1f44 <uart_init+0x34>
    1f2e:	10 98       	cbi	0x02, 0	; 2
    1f30:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1f34:	29 b9       	out	0x09, r18	; 9
    1f36:	88 e1       	ldi	r24, 0x18	; 24
    1f38:	8a b9       	out	0x0a, r24	; 10
    1f3a:	57 9a       	sbi	0x0a, 7	; 10
    1f3c:	86 e0       	ldi	r24, 0x06	; 6
    1f3e:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1f42:	10 c0       	rjmp	.+32     	; 0x1f64 <uart_init+0x54>
    1f44:	21 97       	sbiw	r28, 0x01	; 1
    1f46:	71 f4       	brne	.+28     	; 0x1f64 <uart_init+0x54>
    1f48:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1f4c:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1f50:	ea e9       	ldi	r30, 0x9A	; 154
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	88 e1       	ldi	r24, 0x18	; 24
    1f56:	80 83       	st	Z, r24
    1f58:	80 81       	ld	r24, Z
    1f5a:	80 68       	ori	r24, 0x80	; 128
    1f5c:	80 83       	st	Z, r24
    1f5e:	86 e0       	ldi	r24, 0x06	; 6
    1f60:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

00001f6a <uart0_tx_char>:
    1f6a:	5d 9b       	sbis	0x0b, 5	; 11
    1f6c:	fe cf       	rjmp	.-4      	; 0x1f6a <uart0_tx_char>
    1f6e:	8c b9       	out	0x0c, r24	; 12
    1f70:	08 95       	ret

00001f72 <uart0_tx_string>:
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	ec 01       	movw	r28, r24
    1f78:	88 81       	ld	r24, Y
    1f7a:	88 23       	and	r24, r24
    1f7c:	29 f0       	breq	.+10     	; 0x1f88 <uart0_tx_string+0x16>
    1f7e:	21 96       	adiw	r28, 0x01	; 1
    1f80:	f4 df       	rcall	.-24     	; 0x1f6a <uart0_tx_char>
    1f82:	89 91       	ld	r24, Y+
    1f84:	81 11       	cpse	r24, r1
    1f86:	fc cf       	rjmp	.-8      	; 0x1f80 <uart0_tx_string+0xe>
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <uart1_tx_char>:
    1f8e:	eb e9       	ldi	r30, 0x9B	; 155
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	90 81       	ld	r25, Z
    1f94:	95 ff       	sbrs	r25, 5
    1f96:	fd cf       	rjmp	.-6      	; 0x1f92 <uart1_tx_char+0x4>
    1f98:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1f9c:	08 95       	ret

00001f9e <uart1_tx_string>:
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	ec 01       	movw	r28, r24
    1fa4:	88 81       	ld	r24, Y
    1fa6:	88 23       	and	r24, r24
    1fa8:	29 f0       	breq	.+10     	; 0x1fb4 <uart1_tx_string+0x16>
    1faa:	21 96       	adiw	r28, 0x01	; 1
    1fac:	f0 df       	rcall	.-32     	; 0x1f8e <uart1_tx_char>
    1fae:	89 91       	ld	r24, Y+
    1fb0:	81 11       	cpse	r24, r1
    1fb2:	fc cf       	rjmp	.-8      	; 0x1fac <uart1_tx_string+0xe>
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <IntToString>:

char * IntToString(int num)
{
    1fba:	0f 93       	push	r16
    1fbc:	1f 93       	push	r17
    1fbe:	cf 93       	push	r28
    1fc0:	df 93       	push	r29
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	64 97       	sbiw	r28, 0x14	; 20
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%02d",num); //고유 자릿값
    1fd2:	9f 93       	push	r25
    1fd4:	8f 93       	push	r24
    1fd6:	8c ea       	ldi	r24, 0xAC	; 172
    1fd8:	94 e0       	ldi	r25, 0x04	; 4
    1fda:	9f 93       	push	r25
    1fdc:	8f 93       	push	r24
    1fde:	8e 01       	movw	r16, r28
    1fe0:	0f 5f       	subi	r16, 0xFF	; 255
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	1f 93       	push	r17
    1fe6:	0f 93       	push	r16
    1fe8:	4f d1       	rcall	.+670    	; 0x2288 <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
    1fea:	b8 01       	movw	r22, r16
    1fec:	8c e4       	ldi	r24, 0x4C	; 76
    1fee:	96 e0       	ldi	r25, 0x06	; 6
    1ff0:	3c d1       	rcall	.+632    	; 0x226a <strcpy>
	
	return (buff.itos_buff);
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
}
    1ffe:	8c e4       	ldi	r24, 0x4C	; 76
    2000:	96 e0       	ldi	r25, 0x06	; 6
    2002:	64 96       	adiw	r28, 0x14	; 20
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	08 95       	ret

00002018 <HexToString>:
 
 char * HexToString(char num)
 {
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	64 97       	sbiw	r28, 0x14	; 20
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
    2030:	1f 92       	push	r1
    2032:	8f 93       	push	r24
    2034:	81 eb       	ldi	r24, 0xB1	; 177
    2036:	94 e0       	ldi	r25, 0x04	; 4
    2038:	9f 93       	push	r25
    203a:	8f 93       	push	r24
    203c:	8e 01       	movw	r16, r28
    203e:	0f 5f       	subi	r16, 0xFF	; 255
    2040:	1f 4f       	sbci	r17, 0xFF	; 255
    2042:	1f 93       	push	r17
    2044:	0f 93       	push	r16
    2046:	20 d1       	rcall	.+576    	; 0x2288 <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
    2048:	b8 01       	movw	r22, r16
    204a:	8c e4       	ldi	r24, 0x4C	; 76
    204c:	96 e0       	ldi	r25, 0x06	; 6
    204e:	0d d1       	rcall	.+538    	; 0x226a <strcpy>
	 
	 return (buff.itos_buff);
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
 }
    205c:	8c e4       	ldi	r24, 0x4C	; 76
    205e:	96 e0       	ldi	r25, 0x06	; 6
    2060:	64 96       	adiw	r28, 0x14	; 20
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	08 95       	ret

00002076 <connect_to_AP>:
 
 
 
char* connect_to_AP(char * cmd,char *ssid,char*password){
    2076:	cf 92       	push	r12
    2078:	df 92       	push	r13
    207a:	ef 92       	push	r14
    207c:	ff 92       	push	r15
    207e:	0f 93       	push	r16
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	c0 54       	subi	r28, 0x40	; 64
    208c:	d1 09       	sbc	r29, r1
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	6b 01       	movw	r12, r22
    209a:	7a 01       	movw	r14, r20
	//문자열 변수 ?
	//"AT+CWJAP=\""
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    209c:	20 e4       	ldi	r18, 0x40	; 64
    209e:	ec e8       	ldi	r30, 0x8C	; 140
    20a0:	f6 e0       	ldi	r31, 0x06	; 6
    20a2:	df 01       	movw	r26, r30
    20a4:	1d 92       	st	X+, r1
    20a6:	2a 95       	dec	r18
    20a8:	e9 f7       	brne	.-6      	; 0x20a4 <connect_to_AP+0x2e>
	
	strcpy(buf,cmd);//"AT+CWJAP=\""
    20aa:	bc 01       	movw	r22, r24
    20ac:	8e 01       	movw	r16, r28
    20ae:	0f 5f       	subi	r16, 0xFF	; 255
    20b0:	1f 4f       	sbci	r17, 0xFF	; 255
    20b2:	c8 01       	movw	r24, r16
    20b4:	da d0       	rcall	.+436    	; 0x226a <strcpy>
	strcat(buf,ssid);
    20b6:	b6 01       	movw	r22, r12
    20b8:	c8 01       	movw	r24, r16
    20ba:	c3 d0       	rcall	.+390    	; 0x2242 <strcat>
	strcat(buf,"\",\"");
    20bc:	f8 01       	movw	r30, r16
    20be:	01 90       	ld	r0, Z+
    20c0:	00 20       	and	r0, r0
    20c2:	e9 f7       	brne	.-6      	; 0x20be <connect_to_AP+0x48>
    20c4:	31 97       	sbiw	r30, 0x01	; 1
    20c6:	82 e2       	ldi	r24, 0x22	; 34
    20c8:	9c e2       	ldi	r25, 0x2C	; 44
    20ca:	91 83       	std	Z+1, r25	; 0x01
    20cc:	80 83       	st	Z, r24
    20ce:	82 e2       	ldi	r24, 0x22	; 34
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	93 83       	std	Z+3, r25	; 0x03
    20d4:	82 83       	std	Z+2, r24	; 0x02
	strcat(buf,password);
    20d6:	b7 01       	movw	r22, r14
    20d8:	c8 01       	movw	r24, r16
    20da:	b3 d0       	rcall	.+358    	; 0x2242 <strcat>
	strcat(buf,"\"\r\n");
    20dc:	f8 01       	movw	r30, r16
    20de:	01 90       	ld	r0, Z+
    20e0:	00 20       	and	r0, r0
    20e2:	e9 f7       	brne	.-6      	; 0x20de <connect_to_AP+0x68>
    20e4:	31 97       	sbiw	r30, 0x01	; 1
    20e6:	82 e2       	ldi	r24, 0x22	; 34
    20e8:	9d e0       	ldi	r25, 0x0D	; 13
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	80 83       	st	Z, r24
    20ee:	8a e0       	ldi	r24, 0x0A	; 10
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	93 83       	std	Z+3, r25	; 0x03
    20f4:	82 83       	std	Z+2, r24	; 0x02
	strcpy(buff.esp_buff,buf);
    20f6:	b8 01       	movw	r22, r16
    20f8:	8c e8       	ldi	r24, 0x8C	; 140
    20fa:	96 e0       	ldi	r25, 0x06	; 6
    20fc:	b6 d0       	rcall	.+364    	; 0x226a <strcpy>
	return buff.esp_buff;
	
}
    20fe:	8c e8       	ldi	r24, 0x8C	; 140
    2100:	96 e0       	ldi	r25, 0x06	; 6
    2102:	c0 5c       	subi	r28, 0xC0	; 192
    2104:	df 4f       	sbci	r29, 0xFF	; 255
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	df 91       	pop	r29
    2112:	cf 91       	pop	r28
    2114:	1f 91       	pop	r17
    2116:	0f 91       	pop	r16
    2118:	ff 90       	pop	r15
    211a:	ef 90       	pop	r14
    211c:	df 90       	pop	r13
    211e:	cf 90       	pop	r12
    2120:	08 95       	ret

00002122 <TCP_connect>:

char* TCP_connect(char * ip, char* port)
{//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
    2122:	ef 92       	push	r14
    2124:	ff 92       	push	r15
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	c0 54       	subi	r28, 0x40	; 64
    2134:	d1 09       	sbc	r29, r1
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	9c 01       	movw	r18, r24
    2142:	7b 01       	movw	r14, r22
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    2144:	80 e4       	ldi	r24, 0x40	; 64
    2146:	ec e8       	ldi	r30, 0x8C	; 140
    2148:	f6 e0       	ldi	r31, 0x06	; 6
    214a:	df 01       	movw	r26, r30
    214c:	1d 92       	st	X+, r1
    214e:	8a 95       	dec	r24
    2150:	e9 f7       	brne	.-6      	; 0x214c <TCP_connect+0x2a>
		
	strcpy(buf,"AT+CIPSTART=\"TCP\",\"");
    2152:	94 e1       	ldi	r25, 0x14	; 20
    2154:	e6 eb       	ldi	r30, 0xB6	; 182
    2156:	f4 e0       	ldi	r31, 0x04	; 4
    2158:	8e 01       	movw	r16, r28
    215a:	0f 5f       	subi	r16, 0xFF	; 255
    215c:	1f 4f       	sbci	r17, 0xFF	; 255
    215e:	d8 01       	movw	r26, r16
    2160:	01 90       	ld	r0, Z+
    2162:	0d 92       	st	X+, r0
    2164:	9a 95       	dec	r25
    2166:	e1 f7       	brne	.-8      	; 0x2160 <TCP_connect+0x3e>
	strcat(buf,ip);
    2168:	b9 01       	movw	r22, r18
    216a:	c8 01       	movw	r24, r16
    216c:	6a d0       	rcall	.+212    	; 0x2242 <strcat>
	strcat(buf,"\",");
    216e:	f8 01       	movw	r30, r16
    2170:	01 90       	ld	r0, Z+
    2172:	00 20       	and	r0, r0
    2174:	e9 f7       	brne	.-6      	; 0x2170 <TCP_connect+0x4e>
    2176:	31 97       	sbiw	r30, 0x01	; 1
    2178:	82 e2       	ldi	r24, 0x22	; 34
    217a:	9c e2       	ldi	r25, 0x2C	; 44
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
    2180:	12 82       	std	Z+2, r1	; 0x02
	strcat(buf,port);
    2182:	b7 01       	movw	r22, r14
    2184:	c8 01       	movw	r24, r16
    2186:	5d d0       	rcall	.+186    	; 0x2242 <strcat>
	strcat(buf,"\r\n");
    2188:	f8 01       	movw	r30, r16
    218a:	01 90       	ld	r0, Z+
    218c:	00 20       	and	r0, r0
    218e:	e9 f7       	brne	.-6      	; 0x218a <TCP_connect+0x68>
    2190:	31 97       	sbiw	r30, 0x01	; 1
    2192:	8d e0       	ldi	r24, 0x0D	; 13
    2194:	9a e0       	ldi	r25, 0x0A	; 10
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	80 83       	st	Z, r24
    219a:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
    219c:	b8 01       	movw	r22, r16
    219e:	8c e8       	ldi	r24, 0x8C	; 140
    21a0:	96 e0       	ldi	r25, 0x06	; 6
    21a2:	63 d0       	rcall	.+198    	; 0x226a <strcpy>
	
	return buff.esp_buff;
	
}
    21a4:	8c e8       	ldi	r24, 0x8C	; 140
    21a6:	96 e0       	ldi	r25, 0x06	; 6
    21a8:	c0 5c       	subi	r28, 0xC0	; 192
    21aa:	df 4f       	sbci	r29, 0xFF	; 255
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	08 95       	ret

000021c4 <__udivmodsi4>:
    21c4:	a1 e2       	ldi	r26, 0x21	; 33
    21c6:	1a 2e       	mov	r1, r26
    21c8:	aa 1b       	sub	r26, r26
    21ca:	bb 1b       	sub	r27, r27
    21cc:	fd 01       	movw	r30, r26
    21ce:	0d c0       	rjmp	.+26     	; 0x21ea <__udivmodsi4_ep>

000021d0 <__udivmodsi4_loop>:
    21d0:	aa 1f       	adc	r26, r26
    21d2:	bb 1f       	adc	r27, r27
    21d4:	ee 1f       	adc	r30, r30
    21d6:	ff 1f       	adc	r31, r31
    21d8:	a2 17       	cp	r26, r18
    21da:	b3 07       	cpc	r27, r19
    21dc:	e4 07       	cpc	r30, r20
    21de:	f5 07       	cpc	r31, r21
    21e0:	20 f0       	brcs	.+8      	; 0x21ea <__udivmodsi4_ep>
    21e2:	a2 1b       	sub	r26, r18
    21e4:	b3 0b       	sbc	r27, r19
    21e6:	e4 0b       	sbc	r30, r20
    21e8:	f5 0b       	sbc	r31, r21

000021ea <__udivmodsi4_ep>:
    21ea:	66 1f       	adc	r22, r22
    21ec:	77 1f       	adc	r23, r23
    21ee:	88 1f       	adc	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	1a 94       	dec	r1
    21f4:	69 f7       	brne	.-38     	; 0x21d0 <__udivmodsi4_loop>
    21f6:	60 95       	com	r22
    21f8:	70 95       	com	r23
    21fa:	80 95       	com	r24
    21fc:	90 95       	com	r25
    21fe:	9b 01       	movw	r18, r22
    2200:	ac 01       	movw	r20, r24
    2202:	bd 01       	movw	r22, r26
    2204:	cf 01       	movw	r24, r30
    2206:	08 95       	ret

00002208 <atoi>:
    2208:	fc 01       	movw	r30, r24
    220a:	88 27       	eor	r24, r24
    220c:	99 27       	eor	r25, r25
    220e:	e8 94       	clt
    2210:	21 91       	ld	r18, Z+
    2212:	20 32       	cpi	r18, 0x20	; 32
    2214:	e9 f3       	breq	.-6      	; 0x2210 <atoi+0x8>
    2216:	29 30       	cpi	r18, 0x09	; 9
    2218:	10 f0       	brcs	.+4      	; 0x221e <atoi+0x16>
    221a:	2e 30       	cpi	r18, 0x0E	; 14
    221c:	c8 f3       	brcs	.-14     	; 0x2210 <atoi+0x8>
    221e:	2b 32       	cpi	r18, 0x2B	; 43
    2220:	39 f0       	breq	.+14     	; 0x2230 <atoi+0x28>
    2222:	2d 32       	cpi	r18, 0x2D	; 45
    2224:	31 f4       	brne	.+12     	; 0x2232 <atoi+0x2a>
    2226:	68 94       	set
    2228:	03 c0       	rjmp	.+6      	; 0x2230 <atoi+0x28>
    222a:	26 d0       	rcall	.+76     	; 0x2278 <__mulhi_const_10>
    222c:	82 0f       	add	r24, r18
    222e:	91 1d       	adc	r25, r1
    2230:	21 91       	ld	r18, Z+
    2232:	20 53       	subi	r18, 0x30	; 48
    2234:	2a 30       	cpi	r18, 0x0A	; 10
    2236:	c8 f3       	brcs	.-14     	; 0x222a <atoi+0x22>
    2238:	1e f4       	brtc	.+6      	; 0x2240 <atoi+0x38>
    223a:	90 95       	com	r25
    223c:	81 95       	neg	r24
    223e:	9f 4f       	sbci	r25, 0xFF	; 255
    2240:	08 95       	ret

00002242 <strcat>:
    2242:	fb 01       	movw	r30, r22
    2244:	dc 01       	movw	r26, r24
    2246:	0d 90       	ld	r0, X+
    2248:	00 20       	and	r0, r0
    224a:	e9 f7       	brne	.-6      	; 0x2246 <strcat+0x4>
    224c:	11 97       	sbiw	r26, 0x01	; 1
    224e:	01 90       	ld	r0, Z+
    2250:	0d 92       	st	X+, r0
    2252:	00 20       	and	r0, r0
    2254:	e1 f7       	brne	.-8      	; 0x224e <strcat+0xc>
    2256:	08 95       	ret

00002258 <strcmp>:
    2258:	fb 01       	movw	r30, r22
    225a:	dc 01       	movw	r26, r24
    225c:	8d 91       	ld	r24, X+
    225e:	01 90       	ld	r0, Z+
    2260:	80 19       	sub	r24, r0
    2262:	01 10       	cpse	r0, r1
    2264:	d9 f3       	breq	.-10     	; 0x225c <strcmp+0x4>
    2266:	99 0b       	sbc	r25, r25
    2268:	08 95       	ret

0000226a <strcpy>:
    226a:	fb 01       	movw	r30, r22
    226c:	dc 01       	movw	r26, r24
    226e:	01 90       	ld	r0, Z+
    2270:	0d 92       	st	X+, r0
    2272:	00 20       	and	r0, r0
    2274:	e1 f7       	brne	.-8      	; 0x226e <strcpy+0x4>
    2276:	08 95       	ret

00002278 <__mulhi_const_10>:
    2278:	7a e0       	ldi	r23, 0x0A	; 10
    227a:	97 9f       	mul	r25, r23
    227c:	90 2d       	mov	r25, r0
    227e:	87 9f       	mul	r24, r23
    2280:	80 2d       	mov	r24, r0
    2282:	91 0d       	add	r25, r1
    2284:	11 24       	eor	r1, r1
    2286:	08 95       	ret

00002288 <sprintf>:
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	cf 93       	push	r28
    228e:	df 93       	push	r29
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	2e 97       	sbiw	r28, 0x0e	; 14
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	0d 89       	ldd	r16, Y+21	; 0x15
    22a2:	1e 89       	ldd	r17, Y+22	; 0x16
    22a4:	86 e0       	ldi	r24, 0x06	; 6
    22a6:	8c 83       	std	Y+4, r24	; 0x04
    22a8:	1a 83       	std	Y+2, r17	; 0x02
    22aa:	09 83       	std	Y+1, r16	; 0x01
    22ac:	8f ef       	ldi	r24, 0xFF	; 255
    22ae:	9f e7       	ldi	r25, 0x7F	; 127
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
    22b4:	ae 01       	movw	r20, r28
    22b6:	47 5e       	subi	r20, 0xE7	; 231
    22b8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ba:	6f 89       	ldd	r22, Y+23	; 0x17
    22bc:	78 8d       	ldd	r23, Y+24	; 0x18
    22be:	ce 01       	movw	r24, r28
    22c0:	01 96       	adiw	r24, 0x01	; 1
    22c2:	10 d0       	rcall	.+32     	; 0x22e4 <vfprintf>
    22c4:	ef 81       	ldd	r30, Y+7	; 0x07
    22c6:	f8 85       	ldd	r31, Y+8	; 0x08
    22c8:	e0 0f       	add	r30, r16
    22ca:	f1 1f       	adc	r31, r17
    22cc:	10 82       	st	Z, r1
    22ce:	2e 96       	adiw	r28, 0x0e	; 14
    22d0:	0f b6       	in	r0, 0x3f	; 63
    22d2:	f8 94       	cli
    22d4:	de bf       	out	0x3e, r29	; 62
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	cd bf       	out	0x3d, r28	; 61
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	08 95       	ret

000022e4 <vfprintf>:
    22e4:	2f 92       	push	r2
    22e6:	3f 92       	push	r3
    22e8:	4f 92       	push	r4
    22ea:	5f 92       	push	r5
    22ec:	6f 92       	push	r6
    22ee:	7f 92       	push	r7
    22f0:	8f 92       	push	r8
    22f2:	9f 92       	push	r9
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	2b 97       	sbiw	r28, 0x0b	; 11
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	6c 01       	movw	r12, r24
    231a:	7b 01       	movw	r14, r22
    231c:	8a 01       	movw	r16, r20
    231e:	fc 01       	movw	r30, r24
    2320:	17 82       	std	Z+7, r1	; 0x07
    2322:	16 82       	std	Z+6, r1	; 0x06
    2324:	83 81       	ldd	r24, Z+3	; 0x03
    2326:	81 ff       	sbrs	r24, 1
    2328:	bf c1       	rjmp	.+894    	; 0x26a8 <vfprintf+0x3c4>
    232a:	ce 01       	movw	r24, r28
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	3c 01       	movw	r6, r24
    2330:	f6 01       	movw	r30, r12
    2332:	93 81       	ldd	r25, Z+3	; 0x03
    2334:	f7 01       	movw	r30, r14
    2336:	93 fd       	sbrc	r25, 3
    2338:	85 91       	lpm	r24, Z+
    233a:	93 ff       	sbrs	r25, 3
    233c:	81 91       	ld	r24, Z+
    233e:	7f 01       	movw	r14, r30
    2340:	88 23       	and	r24, r24
    2342:	09 f4       	brne	.+2      	; 0x2346 <vfprintf+0x62>
    2344:	ad c1       	rjmp	.+858    	; 0x26a0 <vfprintf+0x3bc>
    2346:	85 32       	cpi	r24, 0x25	; 37
    2348:	39 f4       	brne	.+14     	; 0x2358 <vfprintf+0x74>
    234a:	93 fd       	sbrc	r25, 3
    234c:	85 91       	lpm	r24, Z+
    234e:	93 ff       	sbrs	r25, 3
    2350:	81 91       	ld	r24, Z+
    2352:	7f 01       	movw	r14, r30
    2354:	85 32       	cpi	r24, 0x25	; 37
    2356:	21 f4       	brne	.+8      	; 0x2360 <vfprintf+0x7c>
    2358:	b6 01       	movw	r22, r12
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	d6 d1       	rcall	.+940    	; 0x270a <fputc>
    235e:	e8 cf       	rjmp	.-48     	; 0x2330 <vfprintf+0x4c>
    2360:	91 2c       	mov	r9, r1
    2362:	21 2c       	mov	r2, r1
    2364:	31 2c       	mov	r3, r1
    2366:	ff e1       	ldi	r31, 0x1F	; 31
    2368:	f3 15       	cp	r31, r3
    236a:	d8 f0       	brcs	.+54     	; 0x23a2 <vfprintf+0xbe>
    236c:	8b 32       	cpi	r24, 0x2B	; 43
    236e:	79 f0       	breq	.+30     	; 0x238e <vfprintf+0xaa>
    2370:	38 f4       	brcc	.+14     	; 0x2380 <vfprintf+0x9c>
    2372:	80 32       	cpi	r24, 0x20	; 32
    2374:	79 f0       	breq	.+30     	; 0x2394 <vfprintf+0xb0>
    2376:	83 32       	cpi	r24, 0x23	; 35
    2378:	a1 f4       	brne	.+40     	; 0x23a2 <vfprintf+0xbe>
    237a:	23 2d       	mov	r18, r3
    237c:	20 61       	ori	r18, 0x10	; 16
    237e:	1d c0       	rjmp	.+58     	; 0x23ba <vfprintf+0xd6>
    2380:	8d 32       	cpi	r24, 0x2D	; 45
    2382:	61 f0       	breq	.+24     	; 0x239c <vfprintf+0xb8>
    2384:	80 33       	cpi	r24, 0x30	; 48
    2386:	69 f4       	brne	.+26     	; 0x23a2 <vfprintf+0xbe>
    2388:	23 2d       	mov	r18, r3
    238a:	21 60       	ori	r18, 0x01	; 1
    238c:	16 c0       	rjmp	.+44     	; 0x23ba <vfprintf+0xd6>
    238e:	83 2d       	mov	r24, r3
    2390:	82 60       	ori	r24, 0x02	; 2
    2392:	38 2e       	mov	r3, r24
    2394:	e3 2d       	mov	r30, r3
    2396:	e4 60       	ori	r30, 0x04	; 4
    2398:	3e 2e       	mov	r3, r30
    239a:	2a c0       	rjmp	.+84     	; 0x23f0 <vfprintf+0x10c>
    239c:	f3 2d       	mov	r31, r3
    239e:	f8 60       	ori	r31, 0x08	; 8
    23a0:	1d c0       	rjmp	.+58     	; 0x23dc <vfprintf+0xf8>
    23a2:	37 fc       	sbrc	r3, 7
    23a4:	2d c0       	rjmp	.+90     	; 0x2400 <vfprintf+0x11c>
    23a6:	20 ed       	ldi	r18, 0xD0	; 208
    23a8:	28 0f       	add	r18, r24
    23aa:	2a 30       	cpi	r18, 0x0A	; 10
    23ac:	40 f0       	brcs	.+16     	; 0x23be <vfprintf+0xda>
    23ae:	8e 32       	cpi	r24, 0x2E	; 46
    23b0:	b9 f4       	brne	.+46     	; 0x23e0 <vfprintf+0xfc>
    23b2:	36 fc       	sbrc	r3, 6
    23b4:	75 c1       	rjmp	.+746    	; 0x26a0 <vfprintf+0x3bc>
    23b6:	23 2d       	mov	r18, r3
    23b8:	20 64       	ori	r18, 0x40	; 64
    23ba:	32 2e       	mov	r3, r18
    23bc:	19 c0       	rjmp	.+50     	; 0x23f0 <vfprintf+0x10c>
    23be:	36 fe       	sbrs	r3, 6
    23c0:	06 c0       	rjmp	.+12     	; 0x23ce <vfprintf+0xea>
    23c2:	8a e0       	ldi	r24, 0x0A	; 10
    23c4:	98 9e       	mul	r9, r24
    23c6:	20 0d       	add	r18, r0
    23c8:	11 24       	eor	r1, r1
    23ca:	92 2e       	mov	r9, r18
    23cc:	11 c0       	rjmp	.+34     	; 0x23f0 <vfprintf+0x10c>
    23ce:	ea e0       	ldi	r30, 0x0A	; 10
    23d0:	2e 9e       	mul	r2, r30
    23d2:	20 0d       	add	r18, r0
    23d4:	11 24       	eor	r1, r1
    23d6:	22 2e       	mov	r2, r18
    23d8:	f3 2d       	mov	r31, r3
    23da:	f0 62       	ori	r31, 0x20	; 32
    23dc:	3f 2e       	mov	r3, r31
    23de:	08 c0       	rjmp	.+16     	; 0x23f0 <vfprintf+0x10c>
    23e0:	8c 36       	cpi	r24, 0x6C	; 108
    23e2:	21 f4       	brne	.+8      	; 0x23ec <vfprintf+0x108>
    23e4:	83 2d       	mov	r24, r3
    23e6:	80 68       	ori	r24, 0x80	; 128
    23e8:	38 2e       	mov	r3, r24
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <vfprintf+0x10c>
    23ec:	88 36       	cpi	r24, 0x68	; 104
    23ee:	41 f4       	brne	.+16     	; 0x2400 <vfprintf+0x11c>
    23f0:	f7 01       	movw	r30, r14
    23f2:	93 fd       	sbrc	r25, 3
    23f4:	85 91       	lpm	r24, Z+
    23f6:	93 ff       	sbrs	r25, 3
    23f8:	81 91       	ld	r24, Z+
    23fa:	7f 01       	movw	r14, r30
    23fc:	81 11       	cpse	r24, r1
    23fe:	b3 cf       	rjmp	.-154    	; 0x2366 <vfprintf+0x82>
    2400:	98 2f       	mov	r25, r24
    2402:	9f 7d       	andi	r25, 0xDF	; 223
    2404:	95 54       	subi	r25, 0x45	; 69
    2406:	93 30       	cpi	r25, 0x03	; 3
    2408:	28 f4       	brcc	.+10     	; 0x2414 <vfprintf+0x130>
    240a:	0c 5f       	subi	r16, 0xFC	; 252
    240c:	1f 4f       	sbci	r17, 0xFF	; 255
    240e:	9f e3       	ldi	r25, 0x3F	; 63
    2410:	99 83       	std	Y+1, r25	; 0x01
    2412:	0d c0       	rjmp	.+26     	; 0x242e <vfprintf+0x14a>
    2414:	83 36       	cpi	r24, 0x63	; 99
    2416:	31 f0       	breq	.+12     	; 0x2424 <vfprintf+0x140>
    2418:	83 37       	cpi	r24, 0x73	; 115
    241a:	71 f0       	breq	.+28     	; 0x2438 <vfprintf+0x154>
    241c:	83 35       	cpi	r24, 0x53	; 83
    241e:	09 f0       	breq	.+2      	; 0x2422 <vfprintf+0x13e>
    2420:	55 c0       	rjmp	.+170    	; 0x24cc <vfprintf+0x1e8>
    2422:	20 c0       	rjmp	.+64     	; 0x2464 <vfprintf+0x180>
    2424:	f8 01       	movw	r30, r16
    2426:	80 81       	ld	r24, Z
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	0e 5f       	subi	r16, 0xFE	; 254
    242c:	1f 4f       	sbci	r17, 0xFF	; 255
    242e:	88 24       	eor	r8, r8
    2430:	83 94       	inc	r8
    2432:	91 2c       	mov	r9, r1
    2434:	53 01       	movw	r10, r6
    2436:	12 c0       	rjmp	.+36     	; 0x245c <vfprintf+0x178>
    2438:	28 01       	movw	r4, r16
    243a:	f2 e0       	ldi	r31, 0x02	; 2
    243c:	4f 0e       	add	r4, r31
    243e:	51 1c       	adc	r5, r1
    2440:	f8 01       	movw	r30, r16
    2442:	a0 80       	ld	r10, Z
    2444:	b1 80       	ldd	r11, Z+1	; 0x01
    2446:	36 fe       	sbrs	r3, 6
    2448:	03 c0       	rjmp	.+6      	; 0x2450 <vfprintf+0x16c>
    244a:	69 2d       	mov	r22, r9
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <vfprintf+0x170>
    2450:	6f ef       	ldi	r22, 0xFF	; 255
    2452:	7f ef       	ldi	r23, 0xFF	; 255
    2454:	c5 01       	movw	r24, r10
    2456:	4e d1       	rcall	.+668    	; 0x26f4 <strnlen>
    2458:	4c 01       	movw	r8, r24
    245a:	82 01       	movw	r16, r4
    245c:	f3 2d       	mov	r31, r3
    245e:	ff 77       	andi	r31, 0x7F	; 127
    2460:	3f 2e       	mov	r3, r31
    2462:	15 c0       	rjmp	.+42     	; 0x248e <vfprintf+0x1aa>
    2464:	28 01       	movw	r4, r16
    2466:	22 e0       	ldi	r18, 0x02	; 2
    2468:	42 0e       	add	r4, r18
    246a:	51 1c       	adc	r5, r1
    246c:	f8 01       	movw	r30, r16
    246e:	a0 80       	ld	r10, Z
    2470:	b1 80       	ldd	r11, Z+1	; 0x01
    2472:	36 fe       	sbrs	r3, 6
    2474:	03 c0       	rjmp	.+6      	; 0x247c <vfprintf+0x198>
    2476:	69 2d       	mov	r22, r9
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <vfprintf+0x19c>
    247c:	6f ef       	ldi	r22, 0xFF	; 255
    247e:	7f ef       	ldi	r23, 0xFF	; 255
    2480:	c5 01       	movw	r24, r10
    2482:	2d d1       	rcall	.+602    	; 0x26de <strnlen_P>
    2484:	4c 01       	movw	r8, r24
    2486:	f3 2d       	mov	r31, r3
    2488:	f0 68       	ori	r31, 0x80	; 128
    248a:	3f 2e       	mov	r3, r31
    248c:	82 01       	movw	r16, r4
    248e:	33 fc       	sbrc	r3, 3
    2490:	19 c0       	rjmp	.+50     	; 0x24c4 <vfprintf+0x1e0>
    2492:	82 2d       	mov	r24, r2
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	88 16       	cp	r8, r24
    2498:	99 06       	cpc	r9, r25
    249a:	a0 f4       	brcc	.+40     	; 0x24c4 <vfprintf+0x1e0>
    249c:	b6 01       	movw	r22, r12
    249e:	80 e2       	ldi	r24, 0x20	; 32
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	33 d1       	rcall	.+614    	; 0x270a <fputc>
    24a4:	2a 94       	dec	r2
    24a6:	f5 cf       	rjmp	.-22     	; 0x2492 <vfprintf+0x1ae>
    24a8:	f5 01       	movw	r30, r10
    24aa:	37 fc       	sbrc	r3, 7
    24ac:	85 91       	lpm	r24, Z+
    24ae:	37 fe       	sbrs	r3, 7
    24b0:	81 91       	ld	r24, Z+
    24b2:	5f 01       	movw	r10, r30
    24b4:	b6 01       	movw	r22, r12
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	28 d1       	rcall	.+592    	; 0x270a <fputc>
    24ba:	21 10       	cpse	r2, r1
    24bc:	2a 94       	dec	r2
    24be:	21 e0       	ldi	r18, 0x01	; 1
    24c0:	82 1a       	sub	r8, r18
    24c2:	91 08       	sbc	r9, r1
    24c4:	81 14       	cp	r8, r1
    24c6:	91 04       	cpc	r9, r1
    24c8:	79 f7       	brne	.-34     	; 0x24a8 <vfprintf+0x1c4>
    24ca:	e1 c0       	rjmp	.+450    	; 0x268e <vfprintf+0x3aa>
    24cc:	84 36       	cpi	r24, 0x64	; 100
    24ce:	11 f0       	breq	.+4      	; 0x24d4 <vfprintf+0x1f0>
    24d0:	89 36       	cpi	r24, 0x69	; 105
    24d2:	39 f5       	brne	.+78     	; 0x2522 <vfprintf+0x23e>
    24d4:	f8 01       	movw	r30, r16
    24d6:	37 fe       	sbrs	r3, 7
    24d8:	07 c0       	rjmp	.+14     	; 0x24e8 <vfprintf+0x204>
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	0c 5f       	subi	r16, 0xFC	; 252
    24e4:	1f 4f       	sbci	r17, 0xFF	; 255
    24e6:	08 c0       	rjmp	.+16     	; 0x24f8 <vfprintf+0x214>
    24e8:	60 81       	ld	r22, Z
    24ea:	71 81       	ldd	r23, Z+1	; 0x01
    24ec:	07 2e       	mov	r0, r23
    24ee:	00 0c       	add	r0, r0
    24f0:	88 0b       	sbc	r24, r24
    24f2:	99 0b       	sbc	r25, r25
    24f4:	0e 5f       	subi	r16, 0xFE	; 254
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	f3 2d       	mov	r31, r3
    24fa:	ff 76       	andi	r31, 0x6F	; 111
    24fc:	3f 2e       	mov	r3, r31
    24fe:	97 ff       	sbrs	r25, 7
    2500:	09 c0       	rjmp	.+18     	; 0x2514 <vfprintf+0x230>
    2502:	90 95       	com	r25
    2504:	80 95       	com	r24
    2506:	70 95       	com	r23
    2508:	61 95       	neg	r22
    250a:	7f 4f       	sbci	r23, 0xFF	; 255
    250c:	8f 4f       	sbci	r24, 0xFF	; 255
    250e:	9f 4f       	sbci	r25, 0xFF	; 255
    2510:	f0 68       	ori	r31, 0x80	; 128
    2512:	3f 2e       	mov	r3, r31
    2514:	2a e0       	ldi	r18, 0x0A	; 10
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	a3 01       	movw	r20, r6
    251a:	33 d1       	rcall	.+614    	; 0x2782 <__ultoa_invert>
    251c:	88 2e       	mov	r8, r24
    251e:	86 18       	sub	r8, r6
    2520:	44 c0       	rjmp	.+136    	; 0x25aa <vfprintf+0x2c6>
    2522:	85 37       	cpi	r24, 0x75	; 117
    2524:	31 f4       	brne	.+12     	; 0x2532 <vfprintf+0x24e>
    2526:	23 2d       	mov	r18, r3
    2528:	2f 7e       	andi	r18, 0xEF	; 239
    252a:	b2 2e       	mov	r11, r18
    252c:	2a e0       	ldi	r18, 0x0A	; 10
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	25 c0       	rjmp	.+74     	; 0x257c <vfprintf+0x298>
    2532:	93 2d       	mov	r25, r3
    2534:	99 7f       	andi	r25, 0xF9	; 249
    2536:	b9 2e       	mov	r11, r25
    2538:	8f 36       	cpi	r24, 0x6F	; 111
    253a:	c1 f0       	breq	.+48     	; 0x256c <vfprintf+0x288>
    253c:	18 f4       	brcc	.+6      	; 0x2544 <vfprintf+0x260>
    253e:	88 35       	cpi	r24, 0x58	; 88
    2540:	79 f0       	breq	.+30     	; 0x2560 <vfprintf+0x27c>
    2542:	ae c0       	rjmp	.+348    	; 0x26a0 <vfprintf+0x3bc>
    2544:	80 37       	cpi	r24, 0x70	; 112
    2546:	19 f0       	breq	.+6      	; 0x254e <vfprintf+0x26a>
    2548:	88 37       	cpi	r24, 0x78	; 120
    254a:	21 f0       	breq	.+8      	; 0x2554 <vfprintf+0x270>
    254c:	a9 c0       	rjmp	.+338    	; 0x26a0 <vfprintf+0x3bc>
    254e:	e9 2f       	mov	r30, r25
    2550:	e0 61       	ori	r30, 0x10	; 16
    2552:	be 2e       	mov	r11, r30
    2554:	b4 fe       	sbrs	r11, 4
    2556:	0d c0       	rjmp	.+26     	; 0x2572 <vfprintf+0x28e>
    2558:	fb 2d       	mov	r31, r11
    255a:	f4 60       	ori	r31, 0x04	; 4
    255c:	bf 2e       	mov	r11, r31
    255e:	09 c0       	rjmp	.+18     	; 0x2572 <vfprintf+0x28e>
    2560:	34 fe       	sbrs	r3, 4
    2562:	0a c0       	rjmp	.+20     	; 0x2578 <vfprintf+0x294>
    2564:	29 2f       	mov	r18, r25
    2566:	26 60       	ori	r18, 0x06	; 6
    2568:	b2 2e       	mov	r11, r18
    256a:	06 c0       	rjmp	.+12     	; 0x2578 <vfprintf+0x294>
    256c:	28 e0       	ldi	r18, 0x08	; 8
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	05 c0       	rjmp	.+10     	; 0x257c <vfprintf+0x298>
    2572:	20 e1       	ldi	r18, 0x10	; 16
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	02 c0       	rjmp	.+4      	; 0x257c <vfprintf+0x298>
    2578:	20 e1       	ldi	r18, 0x10	; 16
    257a:	32 e0       	ldi	r19, 0x02	; 2
    257c:	f8 01       	movw	r30, r16
    257e:	b7 fe       	sbrs	r11, 7
    2580:	07 c0       	rjmp	.+14     	; 0x2590 <vfprintf+0x2ac>
    2582:	60 81       	ld	r22, Z
    2584:	71 81       	ldd	r23, Z+1	; 0x01
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	93 81       	ldd	r25, Z+3	; 0x03
    258a:	0c 5f       	subi	r16, 0xFC	; 252
    258c:	1f 4f       	sbci	r17, 0xFF	; 255
    258e:	06 c0       	rjmp	.+12     	; 0x259c <vfprintf+0x2b8>
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	0e 5f       	subi	r16, 0xFE	; 254
    259a:	1f 4f       	sbci	r17, 0xFF	; 255
    259c:	a3 01       	movw	r20, r6
    259e:	f1 d0       	rcall	.+482    	; 0x2782 <__ultoa_invert>
    25a0:	88 2e       	mov	r8, r24
    25a2:	86 18       	sub	r8, r6
    25a4:	fb 2d       	mov	r31, r11
    25a6:	ff 77       	andi	r31, 0x7F	; 127
    25a8:	3f 2e       	mov	r3, r31
    25aa:	36 fe       	sbrs	r3, 6
    25ac:	0d c0       	rjmp	.+26     	; 0x25c8 <vfprintf+0x2e4>
    25ae:	23 2d       	mov	r18, r3
    25b0:	2e 7f       	andi	r18, 0xFE	; 254
    25b2:	a2 2e       	mov	r10, r18
    25b4:	89 14       	cp	r8, r9
    25b6:	58 f4       	brcc	.+22     	; 0x25ce <vfprintf+0x2ea>
    25b8:	34 fe       	sbrs	r3, 4
    25ba:	0b c0       	rjmp	.+22     	; 0x25d2 <vfprintf+0x2ee>
    25bc:	32 fc       	sbrc	r3, 2
    25be:	09 c0       	rjmp	.+18     	; 0x25d2 <vfprintf+0x2ee>
    25c0:	83 2d       	mov	r24, r3
    25c2:	8e 7e       	andi	r24, 0xEE	; 238
    25c4:	a8 2e       	mov	r10, r24
    25c6:	05 c0       	rjmp	.+10     	; 0x25d2 <vfprintf+0x2ee>
    25c8:	b8 2c       	mov	r11, r8
    25ca:	a3 2c       	mov	r10, r3
    25cc:	03 c0       	rjmp	.+6      	; 0x25d4 <vfprintf+0x2f0>
    25ce:	b8 2c       	mov	r11, r8
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <vfprintf+0x2f0>
    25d2:	b9 2c       	mov	r11, r9
    25d4:	a4 fe       	sbrs	r10, 4
    25d6:	0f c0       	rjmp	.+30     	; 0x25f6 <vfprintf+0x312>
    25d8:	fe 01       	movw	r30, r28
    25da:	e8 0d       	add	r30, r8
    25dc:	f1 1d       	adc	r31, r1
    25de:	80 81       	ld	r24, Z
    25e0:	80 33       	cpi	r24, 0x30	; 48
    25e2:	21 f4       	brne	.+8      	; 0x25ec <vfprintf+0x308>
    25e4:	9a 2d       	mov	r25, r10
    25e6:	99 7e       	andi	r25, 0xE9	; 233
    25e8:	a9 2e       	mov	r10, r25
    25ea:	09 c0       	rjmp	.+18     	; 0x25fe <vfprintf+0x31a>
    25ec:	a2 fe       	sbrs	r10, 2
    25ee:	06 c0       	rjmp	.+12     	; 0x25fc <vfprintf+0x318>
    25f0:	b3 94       	inc	r11
    25f2:	b3 94       	inc	r11
    25f4:	04 c0       	rjmp	.+8      	; 0x25fe <vfprintf+0x31a>
    25f6:	8a 2d       	mov	r24, r10
    25f8:	86 78       	andi	r24, 0x86	; 134
    25fa:	09 f0       	breq	.+2      	; 0x25fe <vfprintf+0x31a>
    25fc:	b3 94       	inc	r11
    25fe:	a3 fc       	sbrc	r10, 3
    2600:	10 c0       	rjmp	.+32     	; 0x2622 <vfprintf+0x33e>
    2602:	a0 fe       	sbrs	r10, 0
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <vfprintf+0x32e>
    2606:	b2 14       	cp	r11, r2
    2608:	80 f4       	brcc	.+32     	; 0x262a <vfprintf+0x346>
    260a:	28 0c       	add	r2, r8
    260c:	92 2c       	mov	r9, r2
    260e:	9b 18       	sub	r9, r11
    2610:	0d c0       	rjmp	.+26     	; 0x262c <vfprintf+0x348>
    2612:	b2 14       	cp	r11, r2
    2614:	58 f4       	brcc	.+22     	; 0x262c <vfprintf+0x348>
    2616:	b6 01       	movw	r22, r12
    2618:	80 e2       	ldi	r24, 0x20	; 32
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	76 d0       	rcall	.+236    	; 0x270a <fputc>
    261e:	b3 94       	inc	r11
    2620:	f8 cf       	rjmp	.-16     	; 0x2612 <vfprintf+0x32e>
    2622:	b2 14       	cp	r11, r2
    2624:	18 f4       	brcc	.+6      	; 0x262c <vfprintf+0x348>
    2626:	2b 18       	sub	r2, r11
    2628:	02 c0       	rjmp	.+4      	; 0x262e <vfprintf+0x34a>
    262a:	98 2c       	mov	r9, r8
    262c:	21 2c       	mov	r2, r1
    262e:	a4 fe       	sbrs	r10, 4
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <vfprintf+0x36c>
    2632:	b6 01       	movw	r22, r12
    2634:	80 e3       	ldi	r24, 0x30	; 48
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	68 d0       	rcall	.+208    	; 0x270a <fputc>
    263a:	a2 fe       	sbrs	r10, 2
    263c:	16 c0       	rjmp	.+44     	; 0x266a <vfprintf+0x386>
    263e:	a1 fc       	sbrc	r10, 1
    2640:	03 c0       	rjmp	.+6      	; 0x2648 <vfprintf+0x364>
    2642:	88 e7       	ldi	r24, 0x78	; 120
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	02 c0       	rjmp	.+4      	; 0x264c <vfprintf+0x368>
    2648:	88 e5       	ldi	r24, 0x58	; 88
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	b6 01       	movw	r22, r12
    264e:	0c c0       	rjmp	.+24     	; 0x2668 <vfprintf+0x384>
    2650:	8a 2d       	mov	r24, r10
    2652:	86 78       	andi	r24, 0x86	; 134
    2654:	51 f0       	breq	.+20     	; 0x266a <vfprintf+0x386>
    2656:	a1 fe       	sbrs	r10, 1
    2658:	02 c0       	rjmp	.+4      	; 0x265e <vfprintf+0x37a>
    265a:	8b e2       	ldi	r24, 0x2B	; 43
    265c:	01 c0       	rjmp	.+2      	; 0x2660 <vfprintf+0x37c>
    265e:	80 e2       	ldi	r24, 0x20	; 32
    2660:	a7 fc       	sbrc	r10, 7
    2662:	8d e2       	ldi	r24, 0x2D	; 45
    2664:	b6 01       	movw	r22, r12
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	50 d0       	rcall	.+160    	; 0x270a <fputc>
    266a:	89 14       	cp	r8, r9
    266c:	30 f4       	brcc	.+12     	; 0x267a <vfprintf+0x396>
    266e:	b6 01       	movw	r22, r12
    2670:	80 e3       	ldi	r24, 0x30	; 48
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	4a d0       	rcall	.+148    	; 0x270a <fputc>
    2676:	9a 94       	dec	r9
    2678:	f8 cf       	rjmp	.-16     	; 0x266a <vfprintf+0x386>
    267a:	8a 94       	dec	r8
    267c:	f3 01       	movw	r30, r6
    267e:	e8 0d       	add	r30, r8
    2680:	f1 1d       	adc	r31, r1
    2682:	80 81       	ld	r24, Z
    2684:	b6 01       	movw	r22, r12
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	40 d0       	rcall	.+128    	; 0x270a <fputc>
    268a:	81 10       	cpse	r8, r1
    268c:	f6 cf       	rjmp	.-20     	; 0x267a <vfprintf+0x396>
    268e:	22 20       	and	r2, r2
    2690:	09 f4       	brne	.+2      	; 0x2694 <vfprintf+0x3b0>
    2692:	4e ce       	rjmp	.-868    	; 0x2330 <vfprintf+0x4c>
    2694:	b6 01       	movw	r22, r12
    2696:	80 e2       	ldi	r24, 0x20	; 32
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	37 d0       	rcall	.+110    	; 0x270a <fputc>
    269c:	2a 94       	dec	r2
    269e:	f7 cf       	rjmp	.-18     	; 0x268e <vfprintf+0x3aa>
    26a0:	f6 01       	movw	r30, r12
    26a2:	86 81       	ldd	r24, Z+6	; 0x06
    26a4:	97 81       	ldd	r25, Z+7	; 0x07
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <vfprintf+0x3c8>
    26a8:	8f ef       	ldi	r24, 0xFF	; 255
    26aa:	9f ef       	ldi	r25, 0xFF	; 255
    26ac:	2b 96       	adiw	r28, 0x0b	; 11
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	df 90       	pop	r13
    26c6:	cf 90       	pop	r12
    26c8:	bf 90       	pop	r11
    26ca:	af 90       	pop	r10
    26cc:	9f 90       	pop	r9
    26ce:	8f 90       	pop	r8
    26d0:	7f 90       	pop	r7
    26d2:	6f 90       	pop	r6
    26d4:	5f 90       	pop	r5
    26d6:	4f 90       	pop	r4
    26d8:	3f 90       	pop	r3
    26da:	2f 90       	pop	r2
    26dc:	08 95       	ret

000026de <strnlen_P>:
    26de:	fc 01       	movw	r30, r24
    26e0:	05 90       	lpm	r0, Z+
    26e2:	61 50       	subi	r22, 0x01	; 1
    26e4:	70 40       	sbci	r23, 0x00	; 0
    26e6:	01 10       	cpse	r0, r1
    26e8:	d8 f7       	brcc	.-10     	; 0x26e0 <strnlen_P+0x2>
    26ea:	80 95       	com	r24
    26ec:	90 95       	com	r25
    26ee:	8e 0f       	add	r24, r30
    26f0:	9f 1f       	adc	r25, r31
    26f2:	08 95       	ret

000026f4 <strnlen>:
    26f4:	fc 01       	movw	r30, r24
    26f6:	61 50       	subi	r22, 0x01	; 1
    26f8:	70 40       	sbci	r23, 0x00	; 0
    26fa:	01 90       	ld	r0, Z+
    26fc:	01 10       	cpse	r0, r1
    26fe:	d8 f7       	brcc	.-10     	; 0x26f6 <strnlen+0x2>
    2700:	80 95       	com	r24
    2702:	90 95       	com	r25
    2704:	8e 0f       	add	r24, r30
    2706:	9f 1f       	adc	r25, r31
    2708:	08 95       	ret

0000270a <fputc>:
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	fb 01       	movw	r30, r22
    2714:	23 81       	ldd	r18, Z+3	; 0x03
    2716:	21 fd       	sbrc	r18, 1
    2718:	03 c0       	rjmp	.+6      	; 0x2720 <fputc+0x16>
    271a:	8f ef       	ldi	r24, 0xFF	; 255
    271c:	9f ef       	ldi	r25, 0xFF	; 255
    271e:	2c c0       	rjmp	.+88     	; 0x2778 <fputc+0x6e>
    2720:	22 ff       	sbrs	r18, 2
    2722:	16 c0       	rjmp	.+44     	; 0x2750 <fputc+0x46>
    2724:	46 81       	ldd	r20, Z+6	; 0x06
    2726:	57 81       	ldd	r21, Z+7	; 0x07
    2728:	24 81       	ldd	r18, Z+4	; 0x04
    272a:	35 81       	ldd	r19, Z+5	; 0x05
    272c:	42 17       	cp	r20, r18
    272e:	53 07       	cpc	r21, r19
    2730:	44 f4       	brge	.+16     	; 0x2742 <fputc+0x38>
    2732:	a0 81       	ld	r26, Z
    2734:	b1 81       	ldd	r27, Z+1	; 0x01
    2736:	9d 01       	movw	r18, r26
    2738:	2f 5f       	subi	r18, 0xFF	; 255
    273a:	3f 4f       	sbci	r19, 0xFF	; 255
    273c:	31 83       	std	Z+1, r19	; 0x01
    273e:	20 83       	st	Z, r18
    2740:	8c 93       	st	X, r24
    2742:	26 81       	ldd	r18, Z+6	; 0x06
    2744:	37 81       	ldd	r19, Z+7	; 0x07
    2746:	2f 5f       	subi	r18, 0xFF	; 255
    2748:	3f 4f       	sbci	r19, 0xFF	; 255
    274a:	37 83       	std	Z+7, r19	; 0x07
    274c:	26 83       	std	Z+6, r18	; 0x06
    274e:	14 c0       	rjmp	.+40     	; 0x2778 <fputc+0x6e>
    2750:	8b 01       	movw	r16, r22
    2752:	ec 01       	movw	r28, r24
    2754:	fb 01       	movw	r30, r22
    2756:	00 84       	ldd	r0, Z+8	; 0x08
    2758:	f1 85       	ldd	r31, Z+9	; 0x09
    275a:	e0 2d       	mov	r30, r0
    275c:	09 95       	icall
    275e:	89 2b       	or	r24, r25
    2760:	e1 f6       	brne	.-72     	; 0x271a <fputc+0x10>
    2762:	d8 01       	movw	r26, r16
    2764:	16 96       	adiw	r26, 0x06	; 6
    2766:	8d 91       	ld	r24, X+
    2768:	9c 91       	ld	r25, X
    276a:	17 97       	sbiw	r26, 0x07	; 7
    276c:	01 96       	adiw	r24, 0x01	; 1
    276e:	17 96       	adiw	r26, 0x07	; 7
    2770:	9c 93       	st	X, r25
    2772:	8e 93       	st	-X, r24
    2774:	16 97       	sbiw	r26, 0x06	; 6
    2776:	ce 01       	movw	r24, r28
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	08 95       	ret

00002782 <__ultoa_invert>:
    2782:	fa 01       	movw	r30, r20
    2784:	aa 27       	eor	r26, r26
    2786:	28 30       	cpi	r18, 0x08	; 8
    2788:	51 f1       	breq	.+84     	; 0x27de <__ultoa_invert+0x5c>
    278a:	20 31       	cpi	r18, 0x10	; 16
    278c:	81 f1       	breq	.+96     	; 0x27ee <__ultoa_invert+0x6c>
    278e:	e8 94       	clt
    2790:	6f 93       	push	r22
    2792:	6e 7f       	andi	r22, 0xFE	; 254
    2794:	6e 5f       	subi	r22, 0xFE	; 254
    2796:	7f 4f       	sbci	r23, 0xFF	; 255
    2798:	8f 4f       	sbci	r24, 0xFF	; 255
    279a:	9f 4f       	sbci	r25, 0xFF	; 255
    279c:	af 4f       	sbci	r26, 0xFF	; 255
    279e:	b1 e0       	ldi	r27, 0x01	; 1
    27a0:	3e d0       	rcall	.+124    	; 0x281e <__ultoa_invert+0x9c>
    27a2:	b4 e0       	ldi	r27, 0x04	; 4
    27a4:	3c d0       	rcall	.+120    	; 0x281e <__ultoa_invert+0x9c>
    27a6:	67 0f       	add	r22, r23
    27a8:	78 1f       	adc	r23, r24
    27aa:	89 1f       	adc	r24, r25
    27ac:	9a 1f       	adc	r25, r26
    27ae:	a1 1d       	adc	r26, r1
    27b0:	68 0f       	add	r22, r24
    27b2:	79 1f       	adc	r23, r25
    27b4:	8a 1f       	adc	r24, r26
    27b6:	91 1d       	adc	r25, r1
    27b8:	a1 1d       	adc	r26, r1
    27ba:	6a 0f       	add	r22, r26
    27bc:	71 1d       	adc	r23, r1
    27be:	81 1d       	adc	r24, r1
    27c0:	91 1d       	adc	r25, r1
    27c2:	a1 1d       	adc	r26, r1
    27c4:	20 d0       	rcall	.+64     	; 0x2806 <__ultoa_invert+0x84>
    27c6:	09 f4       	brne	.+2      	; 0x27ca <__ultoa_invert+0x48>
    27c8:	68 94       	set
    27ca:	3f 91       	pop	r19
    27cc:	2a e0       	ldi	r18, 0x0A	; 10
    27ce:	26 9f       	mul	r18, r22
    27d0:	11 24       	eor	r1, r1
    27d2:	30 19       	sub	r19, r0
    27d4:	30 5d       	subi	r19, 0xD0	; 208
    27d6:	31 93       	st	Z+, r19
    27d8:	de f6       	brtc	.-74     	; 0x2790 <__ultoa_invert+0xe>
    27da:	cf 01       	movw	r24, r30
    27dc:	08 95       	ret
    27de:	46 2f       	mov	r20, r22
    27e0:	47 70       	andi	r20, 0x07	; 7
    27e2:	40 5d       	subi	r20, 0xD0	; 208
    27e4:	41 93       	st	Z+, r20
    27e6:	b3 e0       	ldi	r27, 0x03	; 3
    27e8:	0f d0       	rcall	.+30     	; 0x2808 <__ultoa_invert+0x86>
    27ea:	c9 f7       	brne	.-14     	; 0x27de <__ultoa_invert+0x5c>
    27ec:	f6 cf       	rjmp	.-20     	; 0x27da <__ultoa_invert+0x58>
    27ee:	46 2f       	mov	r20, r22
    27f0:	4f 70       	andi	r20, 0x0F	; 15
    27f2:	40 5d       	subi	r20, 0xD0	; 208
    27f4:	4a 33       	cpi	r20, 0x3A	; 58
    27f6:	18 f0       	brcs	.+6      	; 0x27fe <__ultoa_invert+0x7c>
    27f8:	49 5d       	subi	r20, 0xD9	; 217
    27fa:	31 fd       	sbrc	r19, 1
    27fc:	40 52       	subi	r20, 0x20	; 32
    27fe:	41 93       	st	Z+, r20
    2800:	02 d0       	rcall	.+4      	; 0x2806 <__ultoa_invert+0x84>
    2802:	a9 f7       	brne	.-22     	; 0x27ee <__ultoa_invert+0x6c>
    2804:	ea cf       	rjmp	.-44     	; 0x27da <__ultoa_invert+0x58>
    2806:	b4 e0       	ldi	r27, 0x04	; 4
    2808:	a6 95       	lsr	r26
    280a:	97 95       	ror	r25
    280c:	87 95       	ror	r24
    280e:	77 95       	ror	r23
    2810:	67 95       	ror	r22
    2812:	ba 95       	dec	r27
    2814:	c9 f7       	brne	.-14     	; 0x2808 <__ultoa_invert+0x86>
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	61 05       	cpc	r22, r1
    281a:	71 05       	cpc	r23, r1
    281c:	08 95       	ret
    281e:	9b 01       	movw	r18, r22
    2820:	ac 01       	movw	r20, r24
    2822:	0a 2e       	mov	r0, r26
    2824:	06 94       	lsr	r0
    2826:	57 95       	ror	r21
    2828:	47 95       	ror	r20
    282a:	37 95       	ror	r19
    282c:	27 95       	ror	r18
    282e:	ba 95       	dec	r27
    2830:	c9 f7       	brne	.-14     	; 0x2824 <__ultoa_invert+0xa2>
    2832:	62 0f       	add	r22, r18
    2834:	73 1f       	adc	r23, r19
    2836:	84 1f       	adc	r24, r20
    2838:	95 1f       	adc	r25, r21
    283a:	a0 1d       	adc	r26, r0
    283c:	08 95       	ret

0000283e <_exit>:
    283e:	f8 94       	cli

00002840 <__stop_program>:
    2840:	ff cf       	rjmp	.-2      	; 0x2840 <__stop_program>
